$Firefly
		.createClass(
				"sap.firefly.PlanningContext",
				sap.firefly.XObject,
				{
					m_planningService : null,
					m_withStrictErrorHandling : false,
					getPlanningService : function() {
						return this.m_planningService;
					},
					releaseObject : function() {
						this.m_planningService = null;
						sap.firefly.PlanningContext.$superclass.releaseObject
								.call(this);
					},
					setPlanningService : function(planningService) {
						this.m_planningService = planningService;
					},
					supportsPlanningContextCommandType : function(
							planningContextCommandType) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createPlanningContextCommand : function(
							planningContextCommandType) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createPlanningCommand : function(commandIdentifier) {
						var extResult = this.createRequestCreateCommandWithId(
								commandIdentifier).processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(
								extResult.getData(), extResult);
					},
					publish : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.PUBLISH);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					save : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.SAVE);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					backup : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.BACKUP);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					refresh : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.REFRESH);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					hardDelete : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.HARD_DELETE);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					reset : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.RESET);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					close : function() {
						var command = this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.CLOSE);
						var commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					createCommandRefresh : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.REFRESH);
					},
					createCommandHardDelete : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.HARD_DELETE);
					},
					createCommandReset : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.RESET);
					},
					invalidate : function() {
						var queryConsumerServices = this
								.getQueryConsumerServices();
						var i;
						var queryManager;
						if (queryConsumerServices !== null) {
							for (i = 0; i < queryConsumerServices.size(); i++) {
								queryManager = queryConsumerServices.get(i);
								queryManager.invalidateState();
							}
						}
					},
					setWithStrictErrorHandling : function(
							withStrictErrorHandling) {
						this.m_withStrictErrorHandling = withStrictErrorHandling;
					},
					supportsStrictErrorHandling : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V78_PLANNING_STRICT_ERROR_HANDLING) {
							return this.m_withStrictErrorHandling;
						}
						return true;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var queryConsumerServices;
						var i;
						var queryConsumerService;
						sb.append(this.getPlanningContextType().toString());
						sb.appendNewLine();
						if (this.m_planningService !== null) {
							sb.append(this.m_planningService.toString());
							sb.appendNewLine();
						}
						sb.append("Related query consumer services:");
						sb.appendNewLine();
						queryConsumerServices = this.getQueryConsumerServices();
						if (queryConsumerServices !== null) {
							for (i = 0; i < queryConsumerServices.size(); i++) {
								queryConsumerService = queryConsumerServices
										.get(i);
								sb.append(queryConsumerService.toString());
								sb.appendNewLine();
							}
						}
						return sb.toString();
					},
					createRequestCreateCommandWithId : function(arg1) {
					},
					getPlanningContextType : function() {
					},
					getQueryConsumerServices : function() {
					},
					hasChangedData : function() {
					},
					isWorkStatusActive : function() {
					},
					supportsChangedData : function() {
					},
					supportsWorkStatus : function() {
					}
				});
$Firefly.createClass("sap.firefly.PlanningState", sap.firefly.XObject, {
	$statics : {
		update : function(application, systemName, response, messageCollector) {
			if (application === null) {
				return;
			}
			if (sap.firefly.XStringUtils.isNullOrEmpty(systemName)) {
				return;
			}
			if (response === null) {
				return;
			}
			sap.firefly.DataAreaState.updateState(application, systemName,
					response, messageCollector);
			sap.firefly.PlanningModel.updateState(application, systemName,
					response, messageCollector);
		},
		updateFromResponse : function(application, systemName, request,
				response, messageCollector) {
			if (application === null) {
				return;
			}
			if (sap.firefly.XStringUtils.isNullOrEmpty(systemName)) {
				return;
			}
			if (request === null) {
				return;
			}
			if (response === null) {
				return;
			}
			sap.firefly.PlanningModel.updateStateFromResponse(application,
					systemName, request, response, messageCollector);
		}
	}
});
$Firefly
		.createClass(
				"sap.firefly.DataAreaState",
				sap.firefly.XObject,
				{
					$statics : {
						SINGLETON_KEY : "com.sap.firefly.ip.da.DataAreaState.Map",
						updateState : function(application, systemName,
								response, messageCollector) {
							var systemLandscape;
							var systemDescription;
							var systemType;
							var dataAreasList;
							var i;
							var dataAreaStructure;
							var nameString;
							var dataAreaState;
							var modelString;
							var environmentString;
							var cellLockingString;
							var changeCounterNumber;
							var changedDataBoolean;
							var workStatusActiveBoolean;
							if (application === null) {
								return;
							}
							systemLandscape = application.getSystemLandscape();
							if (systemLandscape === null) {
								return;
							}
							systemDescription = systemLandscape
									.getSystemDescription(systemName);
							if (systemDescription === null) {
								return;
							}
							systemType = systemDescription.getSystemType();
							if (systemType.isTypeOf(sap.firefly.SystemType.BW) === false) {
								return;
							}
							dataAreasList = sap.firefly.PrUtils
									.getListProperty(
											response,
											sap.firefly.InAConstants.QY_DATA_AREAS);
							if (dataAreasList === null) {
								return;
							}
							for (i = 0; i < dataAreasList.size(); i++) {
								dataAreaStructure = sap.firefly.PrUtils
										.getStructureElement(dataAreasList, i);
								if (dataAreaStructure === null) {
									continue;
								}
								nameString = sap.firefly.PrUtils
										.getStringProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_NAME);
								if (nameString === null) {
									continue;
								}
								dataAreaState = sap.firefly.DataAreaState
										.getDataAreaStateByName(application,
												systemName, nameString
														.getStringValue());
								if (dataAreaState === null) {
									continue;
								}
								dataAreaState.setSubmitted();
								modelString = sap.firefly.PrUtils
										.getStringProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_MODEL);
								if (modelString !== null) {
									dataAreaState.setModel(modelString
											.getStringValue());
								}
								environmentString = sap.firefly.PrUtils
										.getStringProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_ENVIRONMENT);
								if (environmentString !== null) {
									dataAreaState
											.setEnvrionment(environmentString
													.getStringValue());
								}
								cellLockingString = sap.firefly.PrUtils
										.getStringProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_CELL_LOCKING);
								if (cellLockingString !== null) {
									dataAreaState
											.setCellLocking(sap.firefly.CellLockingType
													.lookupByBWName(cellLockingString
															.getStringValue()));
								}
								changeCounterNumber = sap.firefly.PrUtils
										.getNumberProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_CHANGE_COUNTER);
								if (changeCounterNumber !== null) {
									dataAreaState
											.setChangeCounter(changeCounterNumber
													.getIntegerValue());
								}
								changedDataBoolean = sap.firefly.PrUtils
										.getBooleanProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_HAS_CHANGED_DATA);
								if (changedDataBoolean !== null) {
									dataAreaState
											.setChangedData(changedDataBoolean
													.getBooleanValue());
								}
								workStatusActiveBoolean = sap.firefly.PrUtils
										.getBooleanProperty(
												dataAreaStructure,
												sap.firefly.InAConstants.QY_IS_WORK_STATUS_ACTIVE);
								if (workStatusActiveBoolean !== null) {
									dataAreaState
											.setWorkStatusActive(workStatusActiveBoolean
													.getBooleanValue());
								}
							}
						},
						getDataAreaStates : function(application, systemName) {
							var singletons;
							var system2DataAreaStates;
							var dataAreaStates;
							if (application === null) {
								return null;
							}
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(systemName)) {
								return null;
							}
							singletons = application.getSessionSingletons();
							if (singletons === null) {
								return null;
							}
							system2DataAreaStates = singletons
									.getByKey(sap.firefly.DataAreaState.SINGLETON_KEY);
							if (system2DataAreaStates === null) {
								system2DataAreaStates = sap.firefly.XHashMapByString
										.create();
								singletons
										.put(
												sap.firefly.DataAreaState.SINGLETON_KEY,
												system2DataAreaStates);
							}
							dataAreaStates = system2DataAreaStates
									.getByKey(systemName);
							if (dataAreaStates === null) {
								dataAreaStates = sap.firefly.XHashMapByString
										.create();
								system2DataAreaStates.put(systemName,
										dataAreaStates);
							}
							return dataAreaStates;
						},
						createDataAreaState : function(application, systemName,
								dataArea, environment, model, cellLocking) {
							var dataAreaStates = sap.firefly.DataAreaState
									.getDataAreaStates(application, systemName);
							var dataAreaName;
							var cellLockingType;
							var dataAreaState;
							if (dataAreaStates === null) {
								return null;
							}
							dataAreaName = dataArea;
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(dataAreaName)) {
								dataAreaName = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
							}
							cellLockingType = cellLocking;
							if (cellLockingType === null) {
								cellLockingType = sap.firefly.CellLockingType.DEFAULT_SETTING_BACKEND;
							}
							dataAreaState = dataAreaStates
									.getByKey(dataAreaName);
							if (dataAreaState !== null) {
								throw sap.firefly.XException
										.createIllegalStateException("data area already existing");
							}
							if (sap.firefly.XString
									.isEqual(
											dataAreaName,
											sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT)) {
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(environment)) {
									throw sap.firefly.XException
											.createIllegalStateException("DEFAULT data area - environment not supported");
								}
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(model)) {
									throw sap.firefly.XException
											.createIllegalStateException("DEFAULT data area - model not supported");
								}
							}
							dataAreaState = new sap.firefly.DataAreaState();
							dataAreaState.m_systemName = systemName;
							dataAreaState.m_dataArea = dataAreaName;
							dataAreaState.setModel(model);
							dataAreaState.setEnvrionment(environment);
							dataAreaState.setCellLocking(cellLockingType);
							dataAreaState.setChangeCounter(-1);
							dataAreaState.setChangedData(false);
							dataAreaState.setWorkStatusActive(false);
							dataAreaStates.put(dataAreaState.m_dataArea,
									dataAreaState);
							return dataAreaState;
						},
						getDataAreaStateByName : function(application,
								systemName, dataArea) {
							var dataAreaStates = sap.firefly.DataAreaState
									.getDataAreaStates(application, systemName);
							var dataAreaName;
							var dataAreaState;
							if (dataAreaStates === null) {
								return null;
							}
							dataAreaName = dataArea;
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(dataAreaName)) {
								dataAreaName = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
							}
							dataAreaState = dataAreaStates
									.getByKey(dataAreaName);
							return dataAreaState;
						},
						removeDataAreaStateByName : function(application,
								systemName, dataArea) {
							var dataAreaStates = sap.firefly.DataAreaState
									.getDataAreaStates(application, systemName);
							var dataAreaName;
							if (dataAreaStates === null) {
								return;
							}
							dataAreaName = dataArea;
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(dataAreaName)) {
								dataAreaName = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
							}
							dataAreaStates.remove(dataAreaName);
						},
						getQueryConsumerServicesByName : function(application,
								systemName, dataArea) {
							return sap.firefly.DataAreaUtil
									.getQueryConsumerServicesByName(
											application, systemName, dataArea);
						},
						getQueryConsumerServices : function(dataArea) {
							return sap.firefly.DataAreaUtil
									.getQueryConsumerServices(dataArea);
						},
						getDataAreaStateByQueryConsumerService : function(
								queryManager) {
							var systemDescription;
							var systemType;
							var datasource;
							var queryDataArea;
							if (queryManager === null) {
								return null;
							}
							systemDescription = queryManager
									.getSystemDescription();
							if (systemDescription === null) {
								return null;
							}
							systemType = systemDescription.getSystemType();
							if (systemType.isTypeOf(sap.firefly.SystemType.BW) === false) {
								return null;
							}
							datasource = queryManager.getDataSource();
							if (datasource === null) {
								return null;
							}
							queryDataArea = datasource.getDataArea();
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(queryDataArea)) {
								queryDataArea = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
							}
							return sap.firefly.DataAreaState
									.getDataAreaStateByName(queryManager
											.getApplication(),
											systemDescription.getName(),
											queryDataArea);
						},
						getDataAreaState : function(dataArea) {
							var planningService;
							if (dataArea === null) {
								return null;
							}
							planningService = dataArea.getPlanningService();
							return sap.firefly.DataAreaState
									.getDataAreaStateByPlanningService(planningService);
						},
						removeDataAreaState : function(dataArea) {
							var planningService;
							if (dataArea === null) {
								return;
							}
							planningService = dataArea.getPlanningService();
							sap.firefly.DataAreaState
									.removeDataAreaStateByPlanningService(planningService);
						},
						getDataAreaStateByPlanningService : function(
								planningService) {
							var serviceConfig;
							var systemDescription;
							var systemType;
							var properties;
							var planningServiceDataArea;
							if (planningService === null) {
								return null;
							}
							serviceConfig = planningService
									.getPlanningServiceConfig();
							if (serviceConfig === null) {
								return null;
							}
							systemDescription = serviceConfig
									.getSystemDescription();
							if (systemDescription === null) {
								return null;
							}
							systemType = systemDescription.getSystemType();
							if (systemType.isTypeOf(sap.firefly.SystemType.BW) === false) {
								return null;
							}
							properties = serviceConfig.getProperties();
							if (properties === null) {
								return null;
							}
							planningServiceDataArea = properties
									.getStringByNameWithDefault(
											sap.firefly.PlanningConstants.DATA_AREA,
											sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT);
							return sap.firefly.DataAreaState
									.getDataAreaStateByName(planningService
											.getApplication(),
											systemDescription.getName(),
											planningServiceDataArea);
						},
						removeDataAreaStateByPlanningService : function(
								planningService) {
							var serviceConfig;
							var systemDescription;
							var systemType;
							var properties;
							var planningServiceDataArea;
							if (planningService === null) {
								return;
							}
							serviceConfig = planningService
									.getPlanningServiceConfig();
							if (serviceConfig === null) {
								return;
							}
							systemDescription = serviceConfig
									.getSystemDescription();
							if (systemDescription === null) {
								return;
							}
							systemType = systemDescription.getSystemType();
							if (systemType.isTypeOf(sap.firefly.SystemType.BW) === false) {
								return;
							}
							properties = serviceConfig.getProperties();
							if (properties === null) {
								return;
							}
							planningServiceDataArea = properties
									.getStringByNameWithDefault(
											sap.firefly.PlanningConstants.DATA_AREA,
											sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT);
							sap.firefly.DataAreaState
									.removeDataAreaStateByName(planningService
											.getApplication(),
											systemDescription.getName(),
											planningServiceDataArea);
						}
					},
					m_systemName : null,
					m_dataArea : null,
					m_environment : null,
					m_model : null,
					m_cellLocking : null,
					m_submitted : false,
					m_changeCounter : 0,
					m_changedData : false,
					m_workStatusActive : false,
					releaseObject : function() {
						this.m_systemName = null;
						this.m_dataArea = null;
						this.m_environment = null;
						this.m_model = null;
						this.m_cellLocking = null;
						sap.firefly.DataAreaState.$superclass.releaseObject
								.call(this);
					},
					getSystemName : function() {
						return this.m_systemName;
					},
					getDataArea : function() {
						return this.m_dataArea;
					},
					getEnvironment : function() {
						return this.m_environment;
					},
					setEnvrionment : function(environment) {
						if (sap.firefly.XStringUtils.isNullOrEmpty(environment)) {
							this.m_environment = null;
						} else {
							this.m_environment = environment;
						}
					},
					getModel : function() {
						return this.m_model;
					},
					setModel : function(model) {
						if (sap.firefly.XStringUtils.isNullOrEmpty(model)) {
							this.m_model = null;
						} else {
							this.m_model = model;
						}
					},
					getCellLocking : function() {
						return this.m_cellLocking;
					},
					setCellLocking : function(cellLocking) {
						if (cellLocking === null) {
							this.m_cellLocking = sap.firefly.CellLockingType.DEFAULT_SETTING_BACKEND;
						} else {
							this.m_cellLocking = cellLocking;
						}
					},
					isSubmitted : function() {
						return this.m_submitted;
					},
					setSubmitted : function() {
						this.m_submitted = true;
					},
					getChangeCounter : function() {
						return this.m_changeCounter;
					},
					setChangeCounter : function(changeCounter) {
						this.m_changeCounter = changeCounter;
					},
					hasChangedData : function() {
						return this.m_changedData;
					},
					setChangedData : function(changedData) {
						this.m_changedData = changedData;
					},
					isWorkStatusActive : function() {
						return this.m_workStatusActive;
					},
					setWorkStatusActive : function(workStatusActive) {
						this.m_workStatusActive = workStatusActive;
					},
					isEqualSettings : function(environment, model, cellLocking) {
						if (sap.firefly.XString.isEqual(this.m_environment,
								environment) === false) {
							return false;
						}
						if (sap.firefly.XString.isEqual(this.m_model, model) === false) {
							return false;
						}
						if (this.m_cellLocking !== cellLocking) {
							return false;
						}
						return true;
					},
					serializeToJson : function() {
						var structure = sap.firefly.PrStructure.create();
						if (this.m_dataArea !== null) {
							structure.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									this.m_dataArea);
						}
						if (this.m_environment !== null) {
							structure.setStringByName(
									sap.firefly.InAConstants.QY_ENVIRONMENT,
									this.m_environment);
						}
						if (this.m_model !== null) {
							structure.setStringByName(
									sap.firefly.InAConstants.QY_MODEL,
									this.m_model);
						}
						structure
								.setStringByName(
										sap.firefly.InAConstants.QY_BACKEND_CELL_LOCKING,
										this.m_cellLocking.toBwName());
						return structure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCatalogItem",
				sap.firefly.XObject,
				{
					$statics : {
						createCatalogItem : function() {
							var catalogItem = new sap.firefly.PlanningCatalogItem();
							return catalogItem;
						}
					},
					m_objectNameKey : null,
					m_objectNameLongText : null,
					m_planningOperationType : null,
					releaseObject : function() {
						this.m_objectNameKey = null;
						this.m_objectNameLongText = null;
						this.m_planningOperationType = null;
						sap.firefly.PlanningCatalogItem.$superclass.releaseObject
								.call(this);
					},
					getObjectNameKey : function() {
						return this.m_objectNameKey;
					},
					setObjectNameKey : function(objectNameKey) {
						this.m_objectNameKey = objectNameKey;
					},
					getObjectNameLongText : function() {
						return this.m_objectNameLongText;
					},
					setObjectNameLongText : function(objectNameLongText) {
						this.m_objectNameLongText = objectNameLongText;
					},
					getType : function() {
						return this.m_planningOperationType;
					},
					setType : function(planningOperationType) {
						this.m_planningOperationType = planningOperationType;
					},
					getDataSource : function() {
						var dataSource = sap.firefly.QFactory2.newDataSource();
						var planningOperationType;
						dataSource.setObjectName(this.getObjectNameKey());
						planningOperationType = this.getType();
						if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_FUNCTION) {
							dataSource
									.setType(sap.firefly.MetaObjectType.PLANNING_FUNCTION);
						} else {
							if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_SEQUENCE) {
								dataSource
										.setType(sap.firefly.MetaObjectType.PLANNING_SEQUENCE);
							} else {
								return null;
							}
						}
						return dataSource;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						if (this.m_planningOperationType !== null) {
							sb.append(this.m_planningOperationType.toString());
						}
						sb.append(": ");
						sb.append(this.m_objectNameKey);
						if (sap.firefly.XString.isEqual(this.m_objectNameKey,
								this.m_objectNameLongText) === false) {
							sb.append(" description: ");
							sb.append(this.m_objectNameLongText);
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCatalogResult",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(resultSet, catalogOptions) {
							var object = new sap.firefly.PlanningCatalogResult();
							object.setup(resultSet, catalogOptions);
							return object;
						}
					},
					m_items : null,
					releaseObject : function() {
						this.m_items = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_items);
						sap.firefly.PlanningCatalogResult.$superclass.releaseObject
								.call(this);
					},
					setup : function(resultSet, catalogOptions) {
						var queryModel;
						var objectNameKeyField;
						var objectNameKeyLongTextField;
						var planningTypeKeyField;
						var rowsAxis;
						var tuplesCount;
						var i;
						var tuple;
						var objectNameKey;
						var objectNameLongText;
						var planningTypeKey;
						var planningOperationType;
						var item;
						this.m_items = sap.firefly.XList.create();
						queryModel = resultSet.getQueryModel();
						objectNameKeyField = queryModel
								.getDimensionByName(
										sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME)
								.getFirstFieldByType(
										sap.firefly.PresentationType.KEY);
						objectNameKeyLongTextField = queryModel
								.getDimensionByName(
										sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME)
								.getFirstFieldByType(
										sap.firefly.PresentationType.TEXT);
						planningTypeKeyField = queryModel
								.getDimensionByName(
										sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE)
								.getFirstFieldByType(
										sap.firefly.PresentationType.KEY);
						rowsAxis = resultSet.getRowsAxis();
						tuplesCount = rowsAxis.getTuplesCount();
						for (i = 0; i < tuplesCount; i++) {
							tuple = rowsAxis.getTupleByIndex(i);
							objectNameKey = tuple
									.getStringValueByField(objectNameKeyField);
							objectNameLongText = tuple
									.getStringValueByField(objectNameKeyLongTextField);
							planningTypeKey = tuple
									.getStringValueByField(planningTypeKeyField);
							planningOperationType = this
									.lookupType(planningTypeKey);
							if (planningOperationType === null) {
								throw sap.firefly.XException
										.createRuntimeException("illegal planning type");
							}
							if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_FUNCTION) {
								if (catalogOptions
										.isSearchOnPlanningFunctions() === false) {
									throw sap.firefly.XException
											.createRuntimeException("illegal planning type");
								}
							}
							if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_SEQUENCE) {
								if (catalogOptions
										.isSearchOnPlanningSequences() === false) {
									throw sap.firefly.XException
											.createRuntimeException("illegal planning type");
								}
							}
							item = sap.firefly.PlanningCatalogItem
									.createCatalogItem();
							item.setType(planningOperationType);
							item.setObjectNameKey(objectNameKey);
							item.setObjectNameLongText(objectNameLongText);
							this.m_items.add(item);
						}
					},
					lookupType : function(planningType) {
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(planningType)) {
							return null;
						}
						if (sap.firefly.XString
								.isEqual(
										planningType,
										sap.firefly.PlanningCatalogManager.T_PLANNING_FUNCTION)) {
							return sap.firefly.PlanningOperationType.PLANNING_FUNCTION;
						}
						if (sap.firefly.XString
								.isEqual(
										planningType,
										sap.firefly.PlanningCatalogManager.T_PLANNING_SEQUENCE)) {
							return sap.firefly.PlanningOperationType.PLANNING_SEQUENCE;
						}
						return null;
					},
					getObjectsIterator : function() {
						return this.m_items.getIterator();
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var i;
						var item;
						if (this.m_items !== null) {
							for (i = 0; i < this.m_items.size(); i++) {
								item = this.m_items.get(i);
								if (item !== null) {
									sb.append(item.toString());
								}
								sb.appendNewLine();
							}
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningOperationMetadata",
				sap.firefly.XObject,
				{
					m_dataArea : null,
					m_planningOperationIdentifier : null,
					m_instanceId : null,
					m_dimensions : null,
					m_variables : null,
					getDataArea : function() {
						return this.m_dataArea;
					},
					setDataArea : function(dataArea) {
						this.m_dataArea = dataArea;
					},
					getPlanningOperationIdentifier : function() {
						return this.m_planningOperationIdentifier;
					},
					setPlanningOperationIdentifier : function(
							planningOperationIdentifier) {
						this.m_planningOperationIdentifier = planningOperationIdentifier;
					},
					getInstanceId : function() {
						return this.m_instanceId;
					},
					setInstanceId : function(instanceId) {
						this.m_instanceId = instanceId;
					},
					getDimensions : function() {
						return this.m_dimensions;
					},
					setDimenstions : function(dimensions) {
						this.m_dimensions = dimensions;
					},
					getVariables : function() {
						return this.m_variables;
					},
					setVariables : function(variables) {
						this.m_variables = variables;
					}
				});
$Firefly.createClass("sap.firefly.PlanningSequenceStepMetadata",
		sap.firefly.XObject, {
			m_number : 0,
			m_baseDatasource : null,
			m_type : null,
			m_filterName : null,
			m_planningFunctionName : null,
			m_queryName : null,
			m_planningFunctionDescription : null,
			m_commandType : null,
			getNumber : function() {
				return this.m_number;
			},
			setNumber : function(number) {
				this.m_number = number;
			},
			getBaseDataSource : function() {
				return this.m_baseDatasource;
			},
			setBaseDataSource : function(baseDatasource) {
				this.m_baseDatasource = baseDatasource;
			},
			getType : function() {
				return this.m_type;
			},
			setType : function(type) {
				this.m_type = type;
			},
			getFilterName : function() {
				return this.m_filterName;
			},
			setFilterName : function(filterName) {
				this.m_filterName = filterName;
			},
			getPlanningFunctionName : function() {
				return this.m_planningFunctionName;
			},
			setPlanningFunctionName : function(name) {
				this.m_planningFunctionName = name;
			},
			getQueryName : function() {
				return this.m_queryName;
			},
			setQueryName : function(name) {
				this.m_queryName = name;
			},
			getPlanningFunctionDescription : function() {
				return this.m_planningFunctionDescription;
			},
			setPlanningFunctionDescription : function(description) {
				this.m_planningFunctionDescription = description;
			},
			getCommendType : function() {
				return this.m_commandType;
			},
			setCommendType : function(type) {
				this.m_commandType = type;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningBatchRequestDecorator",
				sap.firefly.XObject,
				{
					$statics : {
						getBatchRequestDecorator : function(requestStructure) {
							var planningStructure;
							var commandsList;
							var requestItems;
							var i;
							var requestStructureElement;
							var planningRequestItems;
							var decorator;
							if (requestStructure === null) {
								return null;
							}
							planningStructure = sap.firefly.PrUtils
									.getStructureProperty(
											requestStructure,
											sap.firefly.InAConstants.QY_PLANNING);
							if (planningStructure === null) {
								return null;
							}
							commandsList = sap.firefly.PrUtils.getListProperty(
									planningStructure,
									sap.firefly.InAConstants.LC_COMMANDS);
							if (commandsList === null) {
								return null;
							}
							requestItems = sap.firefly.XList.create();
							for (i = 0; i < commandsList.size(); i++) {
								requestStructureElement = sap.firefly.PrUtils
										.getStructureElement(commandsList, i);
								if (requestStructureElement === null) {
									throw sap.firefly.XException
											.createIllegalStateException("illegal planning batch commands syntax");
								}
								planningRequestItems = sap.firefly.PrStructure
										.create();
								planningRequestItems.setElementByName(
										sap.firefly.InAConstants.QY_PLANNING,
										requestStructureElement);
								requestItems.add(planningRequestItems);
							}
							decorator = new sap.firefly.PlanningBatchRequestDecorator();
							decorator.m_requestItems = requestItems;
							return decorator;
						}
					},
					m_requestItems : null,
					getItemsSize : function() {
						return this.m_requestItems.size();
					},
					getRequestItems : function() {
						return this.m_requestItems;
					},
					buildResponse : function(responseItems) {
						var result;
						var planningList;
						var i;
						var responseStructure;
						var planningStructure;
						if (responseItems.size() !== this.getItemsSize()) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal planning batch response structure");
						}
						result = sap.firefly.PrStructure.create();
						planningList = result
								.setNewListByName(sap.firefly.InAConstants.QY_PLANNING);
						for (i = 0; i < responseItems.size(); i++) {
							responseStructure = responseItems.get(i);
							planningStructure = sap.firefly.PrUtils
									.getStructureProperty(
											responseStructure,
											sap.firefly.InAConstants.QY_PLANNING);
							if (planningStructure === null) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal planning batch response structure");
							}
							planningList.add(planningStructure);
						}
						return result;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningBatchRequestDecoratorProvider",
				sap.firefly.XObject,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningBatchRequestDecoratorProvider.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningBatchRequestDecoratorProvider);
						}
					},
					getBatchRequestDecorator : function(requestStructure) {
						return sap.firefly.PlanningBatchRequestDecorator
								.getBatchRequestDecorator(requestStructure);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningRsRequestDecorator",
				sap.firefly.XObject,
				{
					$statics : {
						getResultsetRequestDecorator : function(application,
								systemDescription, requestStructure) {
							var systemType;
							var analyticsStructure;
							var definitionStructure;
							var newValuesList;
							var dataSourceStructure;
							var typeString;
							var type;
							var systemName;
							var dataSource;
							var planningService;
							var planningModel;
							var refreshCommand;
							var planningRefreshStructure;
							var planningBatchDecorator;
							var decoratedRequest;
							var batchList;
							var planningRequests;
							var i;
							var decorator;
							if (application === null) {
								return null;
							}
							if (application.getVersion() < sap.firefly.XVersion.V82_NEW_VALUES_AS_BATCH) {
								return null;
							}
							if (systemDescription === null) {
								return null;
							}
							systemType = systemDescription.getSystemType();
							if (systemType === null) {
								return null;
							}
							if (systemType
									.isTypeOf(sap.firefly.SystemType.HANA) === false) {
								return null;
							}
							if (requestStructure === null) {
								return null;
							}
							analyticsStructure = sap.firefly.PrUtils
									.getStructureProperty(
											requestStructure,
											sap.firefly.InAConstants.QY_ANALYTICS);
							if (analyticsStructure === null) {
								return null;
							}
							definitionStructure = sap.firefly.PrUtils
									.getStructureProperty(
											analyticsStructure,
											sap.firefly.InAConstants.QY_DEFINITION);
							if (definitionStructure === null) {
								return null;
							}
							newValuesList = sap.firefly.PrUtils
									.getListProperty(
											definitionStructure,
											sap.firefly.InAConstants.QY_NEW_VALUES);
							if (sap.firefly.PrUtils.isListEmpty(newValuesList)) {
								return null;
							}
							dataSourceStructure = sap.firefly.PrUtils
									.getStructureProperty(
											analyticsStructure,
											sap.firefly.InAConstants.QY_DATA_SOURCE);
							if (dataSourceStructure === null) {
								return null;
							}
							typeString = sap.firefly.PrUtils.getStringProperty(
									dataSourceStructure,
									sap.firefly.InAConstants.QY_TYPE);
							if (typeString === null) {
								return null;
							}
							type = sap.firefly.MetaObjectType.lookup(typeString
									.getStringValue());
							if (type === null) {
								return null;
							}
							if (type !== sap.firefly.MetaObjectType.PLANNING) {
								return null;
							}
							systemName = systemDescription.getName();
							dataSource = sap.firefly.QDataSource.create();
							dataSource.setType(type);
							dataSource
									.setSchemaName(sap.firefly.PrUtils
											.getStringValueProperty(
													dataSourceStructure,
													sap.firefly.InAConstants.QY_SCHEMA_NAME,
													null));
							dataSource
									.setObjectName(sap.firefly.PrUtils
											.getStringValueProperty(
													dataSourceStructure,
													sap.firefly.InAConstants.QY_OBJECT_NAME,
													null));
							planningService = sap.firefly.PlanningModelUtil
									.getPlanningServiceFromQueryDataSource(
											application, systemName, dataSource);
							if (planningService === null) {
								return null;
							}
							planningModel = planningService
									.getPlanningContext();
							if (planningModel === null) {
								return null;
							}
							refreshCommand = planningModel
									.createCommandRefresh();
							if (refreshCommand === null) {
								return null;
							}
							planningRefreshStructure = refreshCommand
									.serializeToJson();
							if (planningRefreshStructure === null) {
								return null;
							}
							planningBatchDecorator = sap.firefly.PlanningBatchRequestDecorator
									.getBatchRequestDecorator(planningRefreshStructure);
							decoratedRequest = sap.firefly.PrStructure.create();
							batchList = decoratedRequest
									.setNewListByName(sap.firefly.ConnectionConstants.INA_BATCH);
							batchList.add(requestStructure);
							if (planningBatchDecorator === null) {
								batchList.add(planningRefreshStructure);
							} else {
								planningRequests = planningBatchDecorator
										.getRequestItems();
								if (planningRequests !== null) {
									for (i = 0; i < planningRequests.size(); i++) {
										batchList.add(planningRequests.get(i));
									}
								}
							}
							decorator = new sap.firefly.PlanningRsRequestDecorator();
							decorator.m_decoratedRequest = decoratedRequest;
							decorator.m_planningRequest = planningRefreshStructure;
							decorator.m_planningBatchDecorator = planningBatchDecorator;
							return decorator;
						}
					},
					m_decoratedRequest : null,
					m_planningRequest : null,
					m_planningResponse : null,
					m_planningBatchDecorator : null,
					getDecoratedRequest : function() {
						return this.m_decoratedRequest;
					},
					getPlanningRequest : function() {
						return this.m_planningRequest;
					},
					getPlanningResponse : function() {
						return this.m_planningResponse;
					},
					buildResponse : function(decoratedResponse) {
						var batchList;
						var expectedBatchSize;
						var rsResponseStructure;
						var planningResponseStructure;
						var responseItems;
						var planningBatchIndex;
						this.m_planningResponse = null;
						if (decoratedResponse === null) {
							return null;
						}
						batchList = sap.firefly.PrUtils.getListProperty(
								decoratedResponse,
								sap.firefly.ConnectionConstants.INA_BATCH);
						if (batchList === null) {
							return null;
						}
						expectedBatchSize = 0;
						if (this.m_planningBatchDecorator === null) {
							expectedBatchSize = 2;
						} else {
							expectedBatchSize = 1 + this.m_planningBatchDecorator
									.getItemsSize();
						}
						if (batchList.size() !== expectedBatchSize) {
							return null;
						}
						rsResponseStructure = sap.firefly.PrUtils
								.getStructureElement(batchList, 0);
						if (rsResponseStructure === null) {
							return null;
						}
						sap.firefly.PrUtils.removeProperty(rsResponseStructure,
								sap.firefly.InAConstants.QY_PLANNING);
						planningResponseStructure = null;
						if (this.m_planningBatchDecorator === null) {
							planningResponseStructure = sap.firefly.PrUtils
									.getStructureElement(batchList, 1);
						} else {
							responseItems = sap.firefly.XList.create();
							for (planningBatchIndex = 1; planningBatchIndex < expectedBatchSize; planningBatchIndex++) {
								responseItems.add(sap.firefly.PrUtils
										.getStructureElement(batchList,
												planningBatchIndex));
							}
							planningResponseStructure = this.m_planningBatchDecorator
									.buildResponse(responseItems);
						}
						if (planningResponseStructure === null) {
							return null;
						}
						this.m_planningResponse = planningResponseStructure;
						return rsResponseStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningRsRequestDecoratorProvider",
				sap.firefly.XObject,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningRsRequestDecoratorProvider.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningRsRequestDecoratorProvider);
						}
					},
					getResultsetRequestDecorator : function(application,
							systemDescription, requestStructure) {
						return sap.firefly.PlanningRsRequestDecorator
								.getResultsetRequestDecorator(application,
										systemDescription, requestStructure);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelQueryDataSource",
				sap.firefly.XObject,
				{
					m_description : null,
					m_datasource : null,
					releaseObject : function() {
						this.m_description = null;
						this.m_datasource = null;
						sap.firefly.PlanningModelQueryDataSource.$superclass.releaseObject
								.call(this);
					},
					getDescription : function() {
						return this.m_description;
					},
					setDescription : function(description) {
						this.m_description = description;
					},
					getDataSource : function() {
						return this.m_datasource;
					},
					setDataSource : function(datasource) {
						this.m_datasource = datasource;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersionIdentifier",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(versionId, sharedVersion,
								versionOwner) {
							var identifier = new sap.firefly.PlanningVersionIdentifier();
							identifier.m_versionId = versionId;
							identifier.m_sharedVersion = sharedVersion;
							identifier.m_versionOwner = versionOwner;
							return identifier;
						}
					},
					m_versionId : 0,
					m_sharedVersion : false,
					m_versionOwner : null,
					releaseObject : function() {
						this.m_versionOwner = null;
						sap.firefly.PlanningVersionIdentifier.$superclass.releaseObject
								.call(this);
					},
					getVersionId : function() {
						return this.m_versionId;
					},
					isSharedVersion : function() {
						return this.m_sharedVersion;
					},
					getVersionOwner : function() {
						return this.m_versionOwner;
					},
					getVersionUniqueName : function() {
						var sb = sap.firefly.XStringBuffer.create();
						sb.append(sap.firefly.XInteger
								.convertIntegerToString(this.m_versionId));
						if (this.m_sharedVersion) {
							sb.append(":");
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(this.m_versionOwner)) {
								sb.append(this.m_versionOwner);
							}
						}
						return sb.toString();
					},
					toString : function() {
						return this.getVersionUniqueName();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersionParameterMetadata",
				sap.firefly.XObject,
				{
					m_name : null,
					m_description : null,
					m_type : null,
					m_valueAllowed : false,
					m_hasValue : false,
					m_valueElement : null,
					releaseObject : function() {
						this.m_name = null;
						this.m_description = null;
						this.m_type = null;
						this.m_valueElement = sap.firefly.XObject
								.releaseIfNotNull(this.m_valueElement);
						sap.firefly.PlanningVersionParameterMetadata.$superclass.releaseObject
								.call(this);
					},
					setName : function(name) {
						this.m_name = name;
					},
					getName : function() {
						return this.m_name;
					},
					setDescription : function(description) {
						this.m_description = description;
					},
					getDescription : function() {
						return this.m_description;
					},
					setType : function(type) {
						this.m_type = type;
					},
					getType : function() {
						return this.m_type;
					},
					setValueAllowed : function(valueAllowed) {
						this.m_valueAllowed = valueAllowed;
					},
					isValueAllowed : function() {
						return this.m_valueAllowed;
					},
					setHasValue : function(hasValue) {
						this.m_hasValue = hasValue;
					},
					hasValue : function() {
						return this.m_hasValue;
					},
					setValue : function(valueElement) {
						if (valueElement === null) {
							this.m_valueElement = null;
						} else {
							this.m_valueElement = sap.firefly.PrElement
									.deepCopyElement(valueElement);
						}
					},
					getValue : function() {
						return this.m_valueElement;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersionStateDescription",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(stateId, description, userName,
								startTime, endTime, changeCount) {
							var stateDescription = new sap.firefly.PlanningVersionStateDescription();
							stateDescription.m_id = stateId;
							stateDescription.m_description = description;
							stateDescription.m_userName = userName;
							stateDescription.m_startTime = startTime;
							stateDescription.m_endTime = endTime;
							stateDescription.m_changeCount = changeCount;
							return stateDescription;
						}
					},
					m_id : null,
					m_description : null,
					m_userName : null,
					m_startTime : null,
					m_endTime : null,
					m_changeCount : 0,
					getId : function() {
						return this.m_id;
					},
					getDescription : function() {
						return this.m_description;
					},
					getUserName : function() {
						return this.m_userName;
					},
					getChangeCount : function() {
						return this.m_changeCount;
					},
					getStartTime : function() {
						return this.m_startTime;
					},
					getEndTime : function() {
						return this.m_endTime;
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append("(");
						buffer.append("id: ").append(this.m_id);
						buffer.append(", ");
						buffer.append("description: ").append('"').append(
								this.m_description).append('"');
						buffer.append(")");
						return buffer.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCatalogItem",
				sap.firefly.XObject,
				{
					$statics : {
						createCatalogItem : function() {
							var catalogItem = new sap.firefly.PlanningModelCatalogItem();
							return catalogItem;
						}
					},
					m_schemaName : null,
					m_modelName : null,
					releaseObject : function() {
						this.m_schemaName = null;
						this.m_modelName = null;
						sap.firefly.PlanningModelCatalogItem.$superclass.releaseObject
								.call(this);
					},
					getSchemaName : function() {
						return this.m_schemaName;
					},
					setSchemaName : function(schemaName) {
						this.m_schemaName = schemaName;
					},
					getModelName : function() {
						return this.m_modelName;
					},
					setModelName : function(modelName) {
						this.m_modelName = modelName;
					},
					getDataSource : function() {
						var dataSource = sap.firefly.QFactory2.newDataSource();
						var schemaName;
						var modelName;
						dataSource
								.setType(sap.firefly.MetaObjectType.PLANNING_MODEL);
						schemaName = this.getSchemaName();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(schemaName)) {
							dataSource.setSchemaName(schemaName);
						}
						modelName = this.getModelName();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(modelName)) {
							dataSource.setObjectName(modelName);
						}
						return dataSource;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						if (this.m_schemaName !== null) {
							sb.append(this.m_schemaName);
						}
						sb.append(" - ");
						if (this.m_modelName !== null) {
							sb.append(this.m_modelName);
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCatalogResult",
				sap.firefly.XObject,
				{
					m_resultListener : null,
					m_customIdentifier : null,
					m_items : null,
					releaseObject : function() {
						this.m_resultListener = null;
						this.m_customIdentifier = null;
						this.m_items = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_items);
						sap.firefly.PlanningModelCatalogResult.$superclass.releaseObject
								.call(this);
					},
					getResultListener : function() {
						return this.m_resultListener;
					},
					setResultListener : function(resultListener) {
						this.m_resultListener = resultListener;
					},
					getCustomIdentifier : function() {
						return this.m_customIdentifier;
					},
					setCustomIdentifier : function(customIdentifier) {
						this.m_customIdentifier = customIdentifier;
					},
					getObjectsIterator : function() {
						return this.m_items.getIterator();
					},
					processResponseStructure : function(responseStructure,
							messageManager) {
						var returnCode = sap.firefly.PlanningModelCommandHelper
								.getResponsesReturnCodeStrict(
										responseStructure, messageManager, 0,
										false);
						var planning;
						var models;
						var items;
						var i;
						var model;
						var schema;
						var modelNames;
						var j;
						var modelName;
						var item;
						if (returnCode !== 0) {
							return;
						}
						planning = sap.firefly.PrUtils.getStructureProperty(
								responseStructure,
								sap.firefly.InAConstants.QY_PLANNING);
						models = sap.firefly.PrUtils.getListProperty(planning,
								sap.firefly.InAConstants.LC_MODELS);
						if (models === null) {
							messageManager.addErrorExt(
									sap.firefly.OriginLayer.DRIVER,
									sap.firefly.ErrorCodes.PARSER_ERROR,
									"error in processing response structure",
									responseStructure);
							return;
						}
						items = sap.firefly.XList.create();
						for (i = 0; i < models.size(); i++) {
							model = sap.firefly.PrUtils.getStructureElement(
									models, i);
							if (model === null) {
								messageManager
										.addErrorExt(
												sap.firefly.OriginLayer.DRIVER,
												0,
												"error in processing response structure",
												responseStructure);
								return;
							}
							schema = sap.firefly.PrUtils.getStringProperty(
									model, sap.firefly.InAConstants.LC_SCHEMA);
							if (schema === null) {
								messageManager
										.addErrorExt(
												sap.firefly.OriginLayer.DRIVER,
												0,
												"error in processing response structure",
												responseStructure);
								return;
							}
							modelNames = sap.firefly.PrUtils.getListProperty(
									model, sap.firefly.InAConstants.LC_MODELS);
							if (modelNames === null) {
								messageManager
										.addErrorExt(
												sap.firefly.OriginLayer.DRIVER,
												0,
												"error in processing response structure",
												responseStructure);
								return;
							}
							for (j = 0; j < modelNames.size(); j++) {
								modelName = sap.firefly.PrUtils
										.getStringElement(modelNames, j);
								if (modelName === null) {
									messageManager
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													0,
													"error in processing response structure",
													responseStructure);
									return;
								}
								item = sap.firefly.PlanningModelCatalogItem
										.createCatalogItem();
								item.setSchemaName(schema.getStringValue());
								item.setModelName(modelName.getStringValue());
								items.add(item);
							}
						}
						this.m_items = items;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var i;
						var item;
						if (this.m_items !== null) {
							for (i = 0; i < this.m_items.size(); i++) {
								item = this.m_items.get(i);
								if (item !== null) {
									sb.append(item.toString());
								}
								sb.appendNewLine();
							}
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCommandHelper",
				sap.firefly.XObject,
				{
					$statics : {
						createCommandsList : function(rootStructure) {
							var planning = rootStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
							var commands = planning
									.setNewListByName(sap.firefly.InAConstants.LC_COMMANDS);
							return commands;
						},
						getCommandsList : function(rootStructure) {
							var planning = sap.firefly.PrUtils
									.getStructureProperty(
											rootStructure,
											sap.firefly.InAConstants.QY_PLANNING);
							return sap.firefly.PrUtils.getListProperty(
									planning,
									sap.firefly.InAConstants.LC_COMMANDS);
						},
						getResponsesList : function(rootStructure) {
							return sap.firefly.PrUtils.getListProperty(
									rootStructure,
									sap.firefly.InAConstants.QY_PLANNING);
						},
						getPlanningService : function(application, systemName,
								commands, commandName) {
							var commandIndex = sap.firefly.PlanningModelCommandHelper
									.getCommandIndex(commands, commandName);
							var commandStructure = sap.firefly.PrUtils
									.getStructureElement(commands, commandIndex);
							if (commandStructure === null) {
								return null;
							}
							return sap.firefly.PlanningModelUtil
									.getPlanningService(application,
											systemName, sap.firefly.PrUtils
													.getStringValueProperty(
															commandStructure,
															"schema", null),
											sap.firefly.PrUtils
													.getStringValueProperty(
															commandStructure,
															"model", null));
						},
						getCommandResponse : function(commands, responses,
								commandName) {
							var commandIndex = sap.firefly.PlanningModelCommandHelper
									.getCommandIndex(commands, commandName);
							return sap.firefly.PrUtils.getStructureElement(
									responses, commandIndex);
						},
						getCommandIndex : function(commands, commandName) {
							var effectiveCommandName;
							var checkMode;
							var modeToCheck;
							var i;
							var command;
							var commandString;
							var modeString;
							var modeList;
							var modeIndex;
							var modeStringElement;
							if (commands === null) {
								return -1;
							}
							effectiveCommandName = commandName;
							checkMode = false;
							modeToCheck = null;
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS,
											commandName)) {
								effectiveCommandName = sap.firefly.InAConstants.LC_GET_PARAMETERS;
								checkMode = true;
								modeToCheck = "LIST_ACTIONS";
							}
							for (i = 0; i < commands.size(); i++) {
								command = sap.firefly.PrUtils
										.getStructureElement(commands, i);
								commandString = sap.firefly.PrUtils
										.getStringProperty(
												command,
												sap.firefly.InAConstants.LC_COMMAND);
								if (commandString === null) {
									continue;
								}
								if (sap.firefly.XString
										.isEqual(
												commandString.getStringValue(),
												effectiveCommandName)) {
									if (checkMode === false) {
										return i;
									}
									modeString = sap.firefly.PrUtils
											.getStringProperty(
													command,
													sap.firefly.InAConstants.LC_MODE);
									if (modeString !== null) {
										if (sap.firefly.XString.isEqual(
												modeString.getStringValue(),
												modeToCheck)) {
											return i;
										}
									}
									modeList = sap.firefly.PrUtils
											.getListProperty(
													command,
													sap.firefly.InAConstants.LC_MODE);
									for (modeIndex = 0; modeIndex < sap.firefly.PrUtils
											.getListSize(modeList, 0); modeIndex++) {
										modeStringElement = sap.firefly.PrUtils
												.getStringElement(modeList,
														modeIndex);
										if (modeStringElement !== null) {
											if (sap.firefly.XString.isEqual(
													modeStringElement
															.getStringValue(),
													modeToCheck)) {
												return i;
											}
										}
									}
									continue;
								}
							}
							return -1;
						},
						createModelCommand : function(model, commandName) {
							var command = sap.firefly.PrStructure.create();
							var effectiveCommandName = commandName;
							var modeListGetVersions;
							var modeListGetActions;
							var modeListGetParameters;
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS,
											commandName)) {
								effectiveCommandName = sap.firefly.InAConstants.LC_GET_PARAMETERS;
							}
							command.setStringByName(
									sap.firefly.InAConstants.LC_COMMAND,
									effectiveCommandName);
							command.setStringByName(
									sap.firefly.InAConstants.LC_SCHEMA, model
											.getPlanningModelSchema());
							command.setStringByName(
									sap.firefly.InAConstants.LC_MODEL, model
											.getPlanningModelName());
							if (sap.firefly.XString.isEqual(
									sap.firefly.InAConstants.LC_GET_PARAMETERS,
									commandName)) {
								command.setStringByName(
										sap.firefly.InAConstants.LC_MODE,
										"LIST_PERSISTENT");
							} else {
								if (sap.firefly.XString
										.isEqual(
												sap.firefly.InAConstants.LC_GET_VERSIONS,
												commandName)) {
									if (model.isWithSharedVersions()
											|| model
													.supportsFastPrivilegeInitialization()
											|| model.supportsBackupTimestamp()
											|| model.supportsActionState()) {
										modeListGetVersions = command
												.setNewListByName(sap.firefly.InAConstants.LC_MODE);
										modeListGetVersions
												.addString("LIST_PERSISTENT_PARAMETERS");
										if (model.isWithSharedVersions()) {
											modeListGetVersions
													.addString("LIST_SHARED_VERSIONS");
										}
										if (model
												.supportsFastPrivilegeInitialization()) {
											modeListGetVersions
													.addString("LIST_QUERY_SOURCES");
										}
										if (model.isWithSharedVersions()
												|| model
														.supportsFastPrivilegeInitialization()) {
											modeListGetVersions
													.addString("LIST_SHARED_PRIVILEGES");
										}
										if (model.supportsBackupTimestamp()) {
											modeListGetVersions
													.addString("LIST_BACKUP_TIMESTAMP");
										}
										if (model.supportsActionState()) {
											modeListGetVersions
													.addString("LIST_ACTION_STATE");
										}
									} else {
										command
												.setStringByName(
														sap.firefly.InAConstants.LC_MODE,
														"LIST_PERSISTENT_PARAMETERS");
									}
								} else {
									if (sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.LC_GET_ACTIONS,
													commandName)) {
										if (model
												.supportsFastActionParameters()) {
											modeListGetActions = command
													.setNewListByName(sap.firefly.InAConstants.LC_MODE);
											modeListGetActions
													.addString("LIST_ACTION_PARAMETERS");
										}
									} else {
										if (sap.firefly.XString
												.isEqual(
														sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS,
														commandName)) {
											if (model
													.supportsFastActionParameters()) {
												modeListGetParameters = command
														.setNewListByName(sap.firefly.InAConstants.LC_MODE);
												modeListGetParameters
														.addString("LIST_ACTIONS");
											}
										}
									}
								}
							}
							return command;
						},
						createVersionCommand : function(version, commandName) {
							var model = version.getPlanningModel();
							var command = sap.firefly.PrStructure.create();
							var modeListGetVersionState;
							var persistenceType;
							command.setStringByName(
									sap.firefly.InAConstants.LC_COMMAND,
									commandName);
							command.setStringByName(
									sap.firefly.InAConstants.LC_SCHEMA, model
											.getPlanningModelSchema());
							command.setStringByName(
									sap.firefly.InAConstants.LC_MODEL, model
											.getPlanningModelName());
							command.setIntegerByName(
									sap.firefly.InAConstants.LC_VERSION_ID,
									version.getVersionId());
							if (version.isSharedVersion()) {
								command.setStringByName(
										sap.firefly.InAConstants.LC_OWNER,
										version.getVersionOwner());
							}
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.LC_GET_VERSION_STATE,
											commandName)) {
								if (model.supportsBackupTimestamp()
										|| model.supportsActionState()) {
									modeListGetVersionState = command
											.setNewListByName(sap.firefly.InAConstants.LC_MODE);
									if (model.supportsBackupTimestamp()) {
										modeListGetVersionState
												.addString("LIST_BACKUP_TIMESTAMP");
									}
									if (model.supportsActionState()) {
										modeListGetVersionState
												.addString("LIST_ACTION_STATE");
									}
								}
							} else {
								if (sap.firefly.XString
										.isEqual(
												sap.firefly.InAConstants.LC_GET_PARAMETERS,
												commandName)) {
									command.setStringByName(
											sap.firefly.InAConstants.LC_MODE,
											"LIST_PERSISTENT");
								} else {
									if (sap.firefly.XString.isEqual(
											sap.firefly.InAConstants.LC_INIT,
											commandName)) {
										persistenceType = version
												.getPlanningModel()
												.getPersistenceType();
										if ((persistenceType !== null)
												&& (persistenceType !== sap.firefly.PlanningPersistenceType.DEFAULT)) {
											command
													.setStringByName(
															sap.firefly.InAConstants.LC_PERSISTENT_PDCS,
															persistenceType
																	.getName());
										}
									} else {
										if (sap.firefly.XString
												.isEqual(
														sap.firefly.InAConstants.LC_CLOSE,
														commandName)) {
											command
													.setStringByName(
															sap.firefly.InAConstants.LC_MODE,
															sap.firefly.CloseModeType.BACKUP
																	.getName());
										}
									}
								}
							}
							return command;
						},
						getResponsesReturnCode : function(responseStructure,
								messageManager, defaultReturnCode) {
							return sap.firefly.PlanningModelCommandHelper
									.getResponsesReturnCodeStrict(
											responseStructure, messageManager,
											defaultReturnCode, false);
						},
						getResponsesReturnCodeStrict : function(
								responseStructure, messageManager,
								defaultReturnCode, useStrictErrorHandling) {
							var returnCode;
							var hasPlanningStructure;
							var planningStructure;
							var planningList;
							var i;
							var planningReturnCode;
							if (responseStructure === null) {
								return -1;
							}
							if (messageManager === null) {
								return -1;
							}
							returnCode = 0;
							hasPlanningStructure = false;
							planningStructure = sap.firefly.PrUtils
									.getStructureProperty(
											responseStructure,
											sap.firefly.InAConstants.QY_PLANNING);
							if (planningStructure === null) {
								planningList = sap.firefly.PrUtils
										.getListProperty(
												responseStructure,
												sap.firefly.InAConstants.QY_PLANNING);
								if (planningList !== null) {
									hasPlanningStructure = true;
									for (i = 0; i < planningList.size(); i++) {
										planningStructure = sap.firefly.PrUtils
												.getStructureElement(
														planningList, i);
										if (planningStructure !== null) {
											hasPlanningStructure = true;
											planningReturnCode = sap.firefly.PlanningModelCommandHelper
													.isValidPlanningStructure(
															planningStructure,
															messageManager,
															defaultReturnCode,
															useStrictErrorHandling);
											if (planningReturnCode !== 0) {
												returnCode = planningReturnCode;
												break;
											}
										}
									}
								}
							} else {
								hasPlanningStructure = true;
								returnCode = sap.firefly.PlanningModelCommandHelper
										.isValidPlanningStructure(
												planningStructure,
												messageManager,
												defaultReturnCode,
												useStrictErrorHandling);
							}
							if (hasPlanningStructure === false) {
								messageManager.addErrorExt(
										sap.firefly.OriginLayer.DRIVER,
										sap.firefly.ErrorCodes.PARSER_ERROR,
										"Planning structure is missing",
										responseStructure);
								return defaultReturnCode;
							}
							return returnCode;
						},
						isValidPlanningStructure : function(planningStructure,
								messageManager, defaultReturnCode,
								useStrictErrorHandling) {
							var returnCode = sap.firefly.PrUtils
									.getIntegerValueProperty(
											planningStructure,
											sap.firefly.InAConstants.LC_RETURN_CODE,
											defaultReturnCode);
							var exceptionText;
							var message;
							var sb;
							if (planningStructure === null) {
								messageManager.addError(
										sap.firefly.ErrorCodes.PARSER_ERROR,
										"Planning structure is missing");
								return returnCode;
							}
							exceptionText = sap.firefly.PrUtils
									.getStringValueProperty(
											planningStructure,
											sap.firefly.InAConstants.LC_EXCEPTION_TEXT,
											null);
							if (exceptionText !== null) {
								messageManager.addErrorExt(
										sap.firefly.OriginLayer.DRIVER,
										sap.firefly.ErrorCodes.OTHER_ERROR,
										exceptionText, planningStructure);
								return returnCode;
							}
							message = sap.firefly.PrUtils
									.getStringValueProperty(
											planningStructure,
											sap.firefly.InAConstants.LC_MESSAGE,
											null);
							if (message !== null) {
								messageManager.addErrorExt(
										sap.firefly.OriginLayer.DRIVER,
										sap.firefly.ErrorCodes.OTHER_ERROR,
										message, planningStructure);
								return returnCode;
							}
							if (useStrictErrorHandling === false) {
								if (returnCode !== 0) {
									sb = sap.firefly.XStringBuffer.create();
									sb.append("Error: return code ");
									sb
											.append(sap.firefly.XInteger
													.convertIntegerToString(returnCode));
									messageManager
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													sb.toString(),
													planningStructure);
								}
							}
							return returnCode;
						},
						processResponseEndActionSequence : function(commands,
								responses, version) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.PlanningModelRequestType.END_ACTION_SEQUENCE
													.getName());
							if (commandResponse === null) {
								return false;
							}
							(version).setActionSequenceId(null);
							return true;
						},
						processResponseKillActionSequence : function(commands,
								responses, version) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.PlanningModelRequestType.KILL_ACTION_SEQUENCE
													.getName());
							if (commandResponse === null) {
								return false;
							}
							(version).setActionSequenceId(null);
							return true;
						},
						processResponseGetVersionState : function(commands,
								responses, version) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_VERSION_STATE);
							var versionStateResponse;
							if (commandResponse === null) {
								return false;
							}
							versionStateResponse = null;
							if (version.getPlanningModel()
									.supportsBackupTimestamp()) {
								versionStateResponse = sap.firefly.PrUtils
										.getStructureProperty(
												commandResponse,
												sap.firefly.InAConstants.LC_VERSION_STATE);
							} else {
								versionStateResponse = commandResponse;
							}
							if (versionStateResponse === null) {
								return false;
							}
							if (sap.firefly.PlanningModelCommandHelper
									.setVersionState(versionStateResponse,
											version) === false) {
								return false;
							}
							return true;
						},
						setVersionState : function(versionStateResponse,
								version) {
							var stateString = sap.firefly.PrUtils
									.getStringValueProperty(
											versionStateResponse,
											sap.firefly.InAConstants.LC_STATE,
											null);
							var planningVersionState = sap.firefly.PlanningVersionState
									.lookup(stateString);
							var totalChangesSize;
							var undoChangesSize;
							var versionCreationTime;
							var creationTime;
							var versionBackupTime;
							var backupTime;
							if (planningVersionState === null) {
								return false;
							}
							totalChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStateResponse,
											sap.firefly.InAConstants.LC_CHANGES,
											0);
							undoChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStateResponse,
											sap.firefly.InAConstants.LC_UNDO_CHANGES,
											0);
							version.setVersionState(planningVersionState);
							version.setTotalChangesSize(totalChangesSize);
							version.setUndoChangesSize(undoChangesSize);
							versionCreationTime = sap.firefly.PrUtils
									.getStringProperty(
											versionStateResponse,
											sap.firefly.InAConstants.LC_CREATE_TIME);
							if (versionCreationTime !== null) {
								creationTime = sap.firefly.XDateTime
										.createDateTimeFromIsoFormat(versionCreationTime
												.getStringValue());
								version.setCreationTime(creationTime);
							}
							versionBackupTime = sap.firefly.PrUtils
									.getStringProperty(
											versionStateResponse,
											sap.firefly.InAConstants.LC_BACKUP_TIME);
							if (versionBackupTime !== null) {
								backupTime = sap.firefly.XDateTime
										.createDateTimeFromIsoFormat(versionBackupTime
												.getStringValue());
								version.setBackupTime(backupTime);
							}
							sap.firefly.PlanningModelCommandHelper
									.resetActionState(versionStateResponse,
											version);
							return true;
						},
						processResponseGetParameters : function(commands,
								responses, version) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_PARAMETERS);
							if (commandResponse === null) {
								return false;
							}
							sap.firefly.PlanningModelCommandHelper
									.resetVersionParameters(commandResponse,
											version);
							return true;
						},
						processResponseStartActionSequence : function(commands,
								responses, response) {
							var request = response
									.getPlanningModelRequestVersion();
							var version = request.getPlanningVersion();
							var commandName = request.getEffectiveCommandName();
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(commands, responses,
											commandName);
							var sequenceIdString;
							var sequenceId;
							if (commandResponse === null) {
								return false;
							}
							sequenceIdString = sap.firefly.PrUtils
									.getStringProperty(
											commandResponse,
											sap.firefly.InAConstants.LC_SEQUENCE_ID);
							if (sequenceIdString === null) {
								return false;
							}
							sequenceId = sequenceIdString.getStringValue();
							(response).setSequenceId(sequenceId);
							version.setActionSequenceId(sequenceId);
							return true;
						},
						processResponseStateDescriptions : function(commands,
								responses, response) {
							var request = response
									.getPlanningModelRequestVersion();
							var version = request.getPlanningVersion();
							var commandName = request.getEffectiveCommandName();
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(commands, responses,
											commandName);
							var versionStateStructure;
							var actionDescriptionResponse;
							var identifier;
							var availableUndos;
							var availableRedos;
							var descriptions;
							if (commandResponse === null) {
								return false;
							}
							versionStateStructure = sap.firefly.PrUtils
									.getStructureProperty(
											commandResponse,
											sap.firefly.InAConstants.LC_VERSION_STATE_DESCRIPTIONS);
							if (versionStateStructure === null) {
								return false;
							}
							actionDescriptionResponse = response;
							actionDescriptionResponse
									.setVersionDescription(version
											.getVersionDescription());
							identifier = sap.firefly.PlanningVersionIdentifier
									.create(version.getVersionId(), version
											.isSharedVersion(), version
											.getVersionOwner());
							actionDescriptionResponse
									.setVersionIdentifier(identifier);
							availableUndos = versionStateStructure
									.getIntegerByName(sap.firefly.InAConstants.LC_AVAILABLE_UNDO);
							actionDescriptionResponse
									.setAvailableUndos(availableUndos);
							availableRedos = versionStateStructure
									.getIntegerByName(sap.firefly.InAConstants.LC_AVAILABLE_REDO);
							actionDescriptionResponse
									.setAvailableRedos(availableRedos);
							descriptions = sap.firefly.PlanningModelCommandHelper
									.getVersionStateDescriptionList(versionStateStructure);
							actionDescriptionResponse
									.setVersionStateDescriptions(descriptions);
							return true;
						},
						getVersionStateDescriptionList : function(
								stateDescriptionsStructure) {
							var statesList = sap.firefly.PrUtils
									.getListProperty(
											stateDescriptionsStructure,
											sap.firefly.InAConstants.LC_STATES);
							var descriptions;
							var i;
							var stateDescription;
							if (statesList === null) {
								return null;
							}
							descriptions = sap.firefly.XList.create();
							for (i = 0; i < statesList.size(); i++) {
								stateDescription = sap.firefly.PlanningModelCommandHelper
										.getVersionStateDescription(statesList
												.getStructureByIndex(i));
								if (stateDescription === null) {
									continue;
								}
								descriptions.add(stateDescription);
							}
							return descriptions;
						},
						getVersionStateDescription : function(
								stateDescriptionStructure) {
							var identifier = stateDescriptionStructure
									.getStringByName(sap.firefly.InAConstants.LC_ID);
							var integerProperty;
							var startTime;
							var endTime;
							var description;
							var userName;
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(identifier)) {
								return null;
							}
							integerProperty = sap.firefly.PrUtils
									.getIntegerProperty(
											stateDescriptionStructure,
											sap.firefly.InAConstants.LC_CHANGES);
							if (integerProperty === null) {
								return null;
							}
							startTime = sap.firefly.PrUtils
									.getDateTimeValueProperty(
											stateDescriptionStructure,
											sap.firefly.InAConstants.LC_START_TIME,
											false, null);
							if (startTime === null) {
								return null;
							}
							endTime = sap.firefly.PrUtils
									.getDateTimeValueProperty(
											stateDescriptionStructure,
											sap.firefly.InAConstants.LC_END_TIME,
											false, null);
							if (endTime === null) {
								return null;
							}
							description = stateDescriptionStructure
									.getStringByName(sap.firefly.InAConstants.LC_DESCRIPTION);
							userName = stateDescriptionStructure
									.getStringByName(sap.firefly.InAConstants.LC_USER_NAME);
							return sap.firefly.PlanningVersionStateDescription
									.create(identifier, description, userName,
											startTime, endTime, integerProperty
													.getIntegerValue());
						},
						resetVersionParameters : function(commandResponse,
								version) {
							var versionParameters = sap.firefly.PrStructure
									.create();
							var parametersList = sap.firefly.PrUtils
									.getListProperty(
											commandResponse,
											sap.firefly.InAConstants.LC_PARAMETERS);
							var i;
							var parameterStructure;
							var nameString;
							var valueElement;
							if (parametersList !== null) {
								for (i = 0; i < parametersList.size(); i++) {
									parameterStructure = sap.firefly.PrUtils
											.getStructureElement(
													parametersList, i);
									if (parameterStructure === null) {
										continue;
									}
									if (sap.firefly.PrUtils
											.getBooleanValueProperty(
													parameterStructure,
													sap.firefly.InAConstants.LC_HAS_VALUE,
													false) === false) {
										continue;
									}
									nameString = sap.firefly.PrUtils
											.getStringProperty(
													parameterStructure,
													sap.firefly.InAConstants.LC_NAME);
									if (nameString === null) {
										continue;
									}
									valueElement = sap.firefly.PrUtils
											.getProperty(
													parameterStructure,
													sap.firefly.InAConstants.LC_VALUE);
									versionParameters.setElementByName(
											nameString.getStringValue(),
											valueElement);
								}
							}
							(version)
									.setParametersStructureInternal(versionParameters);
						},
						processResponseGetVersions : function(commands,
								responses, model) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_VERSIONS);
							var versionsList;
							var isOk;
							var i;
							var versionStructure;
							if (commandResponse === null) {
								return false;
							}
							versionsList = sap.firefly.PrUtils.getListProperty(
									commandResponse,
									sap.firefly.InAConstants.LC_VERSIONS);
							if (versionsList === null) {
								return false;
							}
							(model).resetAllVersionStates();
							if (model.supportsFastPrivilegeInitialization()) {
								(model).setVersionPrivilegesInitialized();
								sap.firefly.PlanningModelResponseUpdateVersionPrivileges
										.resetVersionPrivilegesServerState(model);
							}
							isOk = true;
							for (i = 0; i < versionsList.size(); i++) {
								versionStructure = sap.firefly.PrUtils
										.getStructureElement(versionsList, i);
								if (sap.firefly.PlanningModelCommandHelper
										.processVersionStructure(
												versionStructure, model) === false) {
									isOk = false;
								}
							}
							if (model.supportsFastPrivilegeInitialization()) {
								sap.firefly.PlanningModelResponseUpdateVersionPrivileges
										.resetVersionPrivilegesClientState(model);
							}
							(model).updateAllInvalidPrivileges();
							return isOk;
						},
						processVersionStructure : function(versionStructure,
								model) {
							var schema;
							var versionIdElement;
							var activeBoolean;
							var versionState;
							var isActive;
							var totalChangesSize;
							var undoChangesSize;
							var sharedVersion;
							var versionOwner;
							var privilege;
							var versionId;
							var versionDescription;
							var planningVersionIdentifier;
							var planningVersion;
							var versionCreationTime;
							var creationTime;
							var versionBackupTime;
							var backupTime;
							var querySourceList;
							var querySourceIndex;
							var querySourceStructure;
							var dataSource;
							var versionPrivilegeList;
							if (versionStructure === null) {
								return false;
							}
							schema = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_SCHEMA,
											null);
							if (schema === null) {
								return false;
							}
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.PrUtils
													.getStringValueProperty(
															versionStructure,
															sap.firefly.InAConstants.LC_MODEL,
															null), model
													.getPlanningModelName()) === false) {
								return false;
							}
							versionIdElement = sap.firefly.PrUtils
									.getIntegerProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_VERSION_ID);
							if (versionIdElement === null) {
								return false;
							}
							activeBoolean = sap.firefly.PrUtils
									.getBooleanProperty(versionStructure,
											sap.firefly.InAConstants.LC_ACTIVE);
							if (activeBoolean === null) {
								return false;
							}
							versionState = sap.firefly.PlanningVersionState
									.lookup(sap.firefly.PrUtils
											.getStringValueProperty(
													versionStructure,
													sap.firefly.InAConstants.LC_STATE,
													null));
							if (versionState === null) {
								return false;
							}
							isActive = activeBoolean.getBooleanValue();
							if (isActive !== versionState.isActive()) {
								return false;
							}
							totalChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_CHANGES,
											0);
							undoChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_UNDO_CHANGES,
											0);
							sharedVersion = false;
							versionOwner = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_OWNER,
											null);
							privilege = sap.firefly.PlanningPrivilege
									.lookupWithDefault(
											sap.firefly.PrUtils
													.getStringValueProperty(
															versionStructure,
															sap.firefly.InAConstants.LC_PRIVILEGE,
															null), null);
							if (privilege === null) {
								if (model.isWithSharedVersions()) {
									return false;
								}
								versionOwner = null;
								privilege = sap.firefly.PlanningPrivilege.OWNER;
							} else {
								if (privilege === sap.firefly.PlanningPrivilege.OWNER) {
									versionOwner = null;
								} else {
									sharedVersion = true;
								}
							}
							if (!sharedVersion
									&& (privilege !== sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							if (sharedVersion
									&& (privilege === sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							versionId = versionIdElement.getIntegerValue();
							versionDescription = sap.firefly.PrUtils
									.getStringValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_DESCRIPTION,
											null);
							planningVersionIdentifier = model
									.getVersionIdentifier(versionId,
											sharedVersion, versionOwner);
							planningVersion = model.getVersionById(
									planningVersionIdentifier,
									versionDescription);
							planningVersion.setPrivilege(privilege);
							planningVersion.setVersionState(versionState);
							planningVersion
									.setTotalChangesSize(totalChangesSize);
							planningVersion.setUndoChangesSize(undoChangesSize);
							versionCreationTime = sap.firefly.PrUtils
									.getStringProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_CREATE_TIME);
							if (versionCreationTime !== null) {
								creationTime = sap.firefly.XDateTime
										.createDateTimeFromIsoFormat(versionCreationTime
												.getStringValue());
								planningVersion.setCreationTime(creationTime);
							}
							versionBackupTime = sap.firefly.PrUtils
									.getStringProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_BACKUP_TIME);
							if (versionBackupTime !== null) {
								backupTime = sap.firefly.XDateTime
										.createDateTimeFromIsoFormat(versionBackupTime
												.getStringValue());
								planningVersion.setBackupTime(backupTime);
							}
							sap.firefly.PlanningModelCommandHelper
									.resetVersionParameters(versionStructure,
											planningVersion);
							if (model.supportsFastPrivilegeInitialization()) {
								if (!planningVersionIdentifier
										.isSharedVersion()) {
									querySourceList = sap.firefly.PrUtils
											.getListProperty(
													versionStructure,
													sap.firefly.InAConstants.LC_QUERY_SOURCES);
									for (querySourceIndex = 0; querySourceIndex < sap.firefly.PrUtils
											.getListSize(querySourceList, 0); querySourceIndex++) {
										querySourceStructure = sap.firefly.PrUtils
												.getStructureElement(
														querySourceList,
														querySourceIndex);
										dataSource = sap.firefly.PlanningModelResponseUpdateVersionPrivileges
												.getVersionDataSource(querySourceStructure);
										versionPrivilegeList = sap.firefly.PrUtils
												.getListProperty(
														querySourceStructure,
														sap.firefly.InAConstants.LC_VERSION_PRIVILEGES);
										sap.firefly.PlanningModelResponseUpdateVersionPrivileges
												.updateVersionPrivileges(
														model,
														dataSource,
														planningVersionIdentifier,
														versionPrivilegeList);
									}
								}
							}
							sap.firefly.PlanningModelCommandHelper
									.resetActionState(versionStructure,
											planningVersion);
							return true;
						},
						resetActionState : function(versionStructure,
								planningVersion) {
							var sequenceActive = false;
							var sequenceDescription = null;
							var sequenceCreateTime = null;
							var actionActive = false;
							var actionStartTime = null;
							var actionEndTime = null;
							var userName = null;
							var actionStateStructure = sap.firefly.PrUtils
									.getStructureProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_ACTION_STATE);
							if (actionStateStructure !== null) {
								sequenceActive = sap.firefly.PrUtils
										.getBooleanValueProperty(
												actionStateStructure,
												sap.firefly.InAConstants.LC_SEQUENCE_ACTIVE,
												false);
								if (sequenceActive) {
									sequenceDescription = sap.firefly.PrUtils
											.getStringValueProperty(
													actionStateStructure,
													sap.firefly.InAConstants.LC_DESCRIPTION,
													null);
									sequenceCreateTime = sap.firefly.PrUtils
											.getDateTimeValueProperty(
													actionStateStructure,
													sap.firefly.InAConstants.LC_SEQUENCE_CREATE_TIME,
													false, null);
									actionEndTime = sap.firefly.PrUtils
											.getDateTimeValueProperty(
													actionStateStructure,
													sap.firefly.InAConstants.LC_ACTION_END_TIME,
													false, null);
									userName = sap.firefly.PrUtils
											.getStringValueProperty(
													actionStateStructure,
													sap.firefly.InAConstants.LC_USER_NAME,
													null);
								}
								actionActive = sap.firefly.PrUtils
										.getBooleanValueProperty(
												actionStateStructure,
												sap.firefly.InAConstants.LC_ACTION_ACTIVE,
												false);
								if (actionActive) {
									actionStartTime = sap.firefly.PrUtils
											.getDateTimeValueProperty(
													actionStateStructure,
													sap.firefly.InAConstants.LC_ACTION_START_TIME,
													false, null);
								}
							}
							planningVersion
									.setActionSequenceActive(sequenceActive);
							planningVersion
									.setActionSequenceDescription(sequenceDescription);
							planningVersion
									.setActionSequenceCreateTime(sequenceCreateTime);
							planningVersion.setActionActive(actionActive);
							planningVersion.setActionStartTime(actionStartTime);
							planningVersion.setActionEndTime(actionEndTime);
							planningVersion.setUserName(userName);
						},
						processResponseGetQuerySources : function(commands,
								responses, model) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_QUERY_SOURCES);
							var dataSources;
							var querySources;
							var i;
							var querySource;
							var schema;
							var name;
							var identifier;
							var queryDataSource;
							var description;
							if (commandResponse === null) {
								return false;
							}
							dataSources = (model).getDataSourcesInternal();
							dataSources.clear();
							querySources = sap.firefly.PrUtils.getListProperty(
									commandResponse,
									sap.firefly.InAConstants.LC_QUERY_SOURCES);
							if (querySources === null) {
								return false;
							}
							for (i = 0; i < querySources.size(); i++) {
								querySource = sap.firefly.PrUtils
										.getStructureElement(querySources, i);
								schema = sap.firefly.PrUtils
										.getStringValueProperty(
												querySource,
												sap.firefly.InAConstants.LC_SCHEMA,
												null);
								if (schema === null) {
									return false;
								}
								name = sap.firefly.PrUtils
										.getStringValueProperty(
												querySource,
												sap.firefly.InAConstants.LC_NAME,
												null);
								if (name === null) {
									return false;
								}
								identifier = sap.firefly.QFactory2
										.newDataSource();
								identifier
										.setType(sap.firefly.MetaObjectType.PLANNING);
								identifier.setName(name);
								identifier.setSchemaName(schema);
								queryDataSource = new sap.firefly.PlanningModelQueryDataSource();
								description = sap.firefly.PrUtils
										.getStringValueProperty(
												querySource,
												sap.firefly.InAConstants.LC_DESCRIPTION,
												null);
								queryDataSource.setDescription(description);
								queryDataSource.setDataSource(identifier);
								dataSources.add(queryDataSource);
							}
							return true;
						},
						processResponseGetActionParameters : function(commands,
								responses, model) {
							var commandResponse;
							var parametersMap;
							var parametersList;
							var i;
							var parameterStructure;
							var parameterNameString;
							var parameterName;
							var actionMetadataList;
							var actionIndex;
							var actionMetadata;
							var actionParameterNames;
							var actionParameterMetadata;
							var actionParameterList;
							var actionParameterIndex;
							var actionParameterName;
							var actionParameterStructure;
							if (model.supportsFastActionParameters() === false) {
								return true;
							}
							commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS);
							if (commandResponse === null) {
								return false;
							}
							parametersMap = sap.firefly.XHashMapByString
									.create();
							parametersList = sap.firefly.PrUtils
									.getListProperty(
											commandResponse,
											sap.firefly.InAConstants.LC_PARAMETERS);
							for (i = 0; i < sap.firefly.PrUtils.getListSize(
									parametersList, 0); i++) {
								parameterStructure = sap.firefly.PrUtils
										.getStructureElement(parametersList, i);
								parameterNameString = sap.firefly.PrUtils
										.getStringProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_NAME);
								if (parameterNameString === null) {
									return false;
								}
								parameterName = parameterNameString
										.getStringValue();
								if (parametersMap.containsKey(parameterName)) {
									return false;
								}
								parametersMap.put(parameterName,
										parameterStructure);
							}
							actionMetadataList = (model)
									.getActionMetadataListInternal();
							if (actionMetadataList !== null) {
								for (actionIndex = 0; actionIndex < actionMetadataList
										.size(); actionIndex++) {
									actionMetadata = actionMetadataList
											.get(actionIndex);
									actionParameterNames = actionMetadata
											.getActionParameterNames();
									actionParameterMetadata = new sap.firefly.PlanningActionParameterMetadata();
									actionParameterMetadata
											.setActionMetadata(actionMetadata);
									actionParameterList = sap.firefly.PrList
											.create();
									if (actionParameterNames !== null) {
										for (actionParameterIndex = 0; actionParameterIndex < actionParameterNames
												.size(); actionParameterIndex++) {
											actionParameterName = actionParameterNames
													.get(actionParameterIndex);
											if (parametersMap
													.containsKey(actionParameterName) === false) {
												return false;
											}
											actionParameterStructure = parametersMap
													.getByKey(actionParameterName);
											actionParameterList
													.add(sap.firefly.PrElement
															.deepCopyElement(actionParameterStructure));
										}
									}
									actionParameterMetadata
											.setParameters(actionParameterList);
									if (actionMetadata
											.isActionParameterMetadataSet()) {
										return false;
									}
									actionMetadata
											.setActionParameterMetadata(actionParameterMetadata);
								}
							}
							return true;
						},
						processResponseGetParametersForModelTemplate : function(
								commands, responses, model) {
							var commandResponse;
							var versionParametersMetadata;
							var parametersList;
							var i;
							var parameterStructure;
							var nameString;
							var name;
							var parameterMetadata;
							var descriptionString;
							var typeString;
							var valueAllowed;
							var hasValue;
							if (model.supportsVersionParameters() === false) {
								return true;
							}
							commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_PARAMETERS);
							if (commandResponse === null) {
								return false;
							}
							versionParametersMetadata = (model)
									.getVersionParametersMetadataInternal();
							versionParametersMetadata.clear();
							parametersList = sap.firefly.PrUtils
									.getListProperty(
											commandResponse,
											sap.firefly.InAConstants.LC_PARAMETERS);
							if (parametersList === null) {
								return true;
							}
							for (i = 0; i < parametersList.size(); i++) {
								parameterStructure = sap.firefly.PrUtils
										.getStructureElement(parametersList, i);
								if (parameterStructure === null) {
									continue;
								}
								nameString = sap.firefly.PrUtils
										.getStringProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_NAME);
								if (nameString === null) {
									continue;
								}
								name = nameString.getStringValue();
								if (sap.firefly.XStringUtils
										.isNullOrEmpty(name)) {
									continue;
								}
								parameterMetadata = new sap.firefly.PlanningVersionParameterMetadata();
								parameterMetadata.setName(name);
								descriptionString = sap.firefly.PrUtils
										.getStringProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_DESCRIPTION);
								if (descriptionString !== null) {
									parameterMetadata
											.setDescription(descriptionString
													.getStringValue());
								}
								typeString = sap.firefly.PrUtils
										.getStringProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_TYPE);
								if (typeString !== null) {
									parameterMetadata.setType(typeString
											.getStringValue());
								}
								valueAllowed = sap.firefly.PrUtils
										.getBooleanValueProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_VALUE_ALLOWED,
												false);
								parameterMetadata.setValueAllowed(valueAllowed);
								hasValue = sap.firefly.PrUtils
										.getBooleanValueProperty(
												parameterStructure,
												sap.firefly.InAConstants.LC_HAS_VALUE,
												false);
								parameterMetadata.setHasValue(hasValue);
								parameterMetadata
										.setValue(sap.firefly.PrUtils
												.getProperty(
														parameterStructure,
														sap.firefly.InAConstants.LC_VALUE));
								versionParametersMetadata.put(parameterMetadata
										.getName(), parameterMetadata);
							}
							return true;
						},
						processResponseGetActions : function(commands,
								responses, model) {
							var commandResponse = sap.firefly.PlanningModelCommandHelper
									.getCommandResponse(
											commands,
											responses,
											sap.firefly.InAConstants.LC_GET_ACTIONS);
							var actionMetadataList;
							var actions;
							var i;
							var action;
							var actionId;
							var actionName;
							var actionType;
							var actionMetadata;
							var actionDescription;
							var isDefault;
							var parameterNames;
							var parametersList;
							var parametersIndex;
							var parameterStringElement;
							if (commandResponse === null) {
								return false;
							}
							actionMetadataList = (model)
									.getActionMetadataListInternal();
							actionMetadataList.clear();
							actions = sap.firefly.PrUtils.getListProperty(
									commandResponse,
									sap.firefly.InAConstants.LC_ACTIONS);
							if (actions === null) {
								return false;
							}
							for (i = 0; i < actions.size(); i++) {
								action = sap.firefly.PrUtils
										.getStructureElement(actions, i);
								actionId = sap.firefly.PrUtils
										.getStringValueProperty(action,
												sap.firefly.InAConstants.LC_ID,
												null);
								if (actionId === null) {
									return false;
								}
								actionName = sap.firefly.PrUtils
										.getStringValueProperty(
												action,
												sap.firefly.InAConstants.LC_NAME,
												null);
								if (actionName === null) {
									return false;
								}
								actionType = sap.firefly.PlanningActionType
										.lookup(sap.firefly.PrUtils
												.getIntegerValueProperty(
														action,
														sap.firefly.InAConstants.LC_TYPE,
														-1));
								if (sap.firefly.PrUtils
										.getBooleanValueProperty(
												action,
												sap.firefly.InAConstants.LC_PUBLISH,
												false)) {
									actionType = sap.firefly.PlanningActionType.PUBLISH;
								}
								actionMetadata = new sap.firefly.PlanningActionMetadata();
								actionMetadata.setPlanningModel(model);
								actionMetadata.setActionId(actionId);
								actionMetadata.setActionName(actionName);
								actionDescription = sap.firefly.PrUtils
										.getStringValueProperty(
												action,
												sap.firefly.InAConstants.LC_DESCRIPTION,
												null);
								actionMetadata
										.setActionDescription(actionDescription);
								actionMetadata.setActionType(actionType);
								isDefault = sap.firefly.PrUtils
										.getBooleanValueProperty(
												action,
												sap.firefly.InAConstants.LC_DEFAULT,
												false);
								actionMetadata.setDefault(isDefault);
								if (model.supportsFastActionParameters()) {
									parameterNames = null;
									parametersList = sap.firefly.PrUtils
											.getListProperty(
													action,
													sap.firefly.InAConstants.LC_PARAMETERS);
									for (parametersIndex = 0; parametersIndex < sap.firefly.PrUtils
											.getListSize(parametersList, 0); parametersIndex++) {
										parameterStringElement = sap.firefly.PrUtils
												.getStringElement(
														parametersList,
														parametersIndex);
										if (parameterStringElement !== null) {
											if (parameterNames === null) {
												parameterNames = sap.firefly.XListOfString
														.create();
											}
											parameterNames
													.add(parameterStringElement
															.getStringValue());
										}
									}
									actionMetadata
											.setActionParameterNames(parameterNames);
								}
								actionMetadataList.add(actionMetadata);
							}
							return true;
						}
					}
				});
$Firefly.createClass("sap.firefly.PlanningActionParameterMetadata",
		sap.firefly.XObject, {
			m_actionMetadata : null,
			m_parameters : null,
			getActionMetadata : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_actionMetadata);
			},
			setActionMetadata : function(actionMetadata) {
				this.m_actionMetadata = sap.firefly.XWeakReferenceUtil
						.getWeakRef(actionMetadata);
			},
			getParameters : function() {
				return this.m_parameters;
			},
			setParameters : function(parameters) {
				this.m_parameters = parameters;
			},
			hasParameters : function() {
				return sap.firefly.PrUtils.isListEmpty(this.m_parameters);
			},
			toString : function() {
				var sb = sap.firefly.XStringBuffer.create();
				var jsonSerializer;
				var formattedJson;
				if (this.m_parameters === null) {
					sb.append("no parameters");
				} else {
					jsonSerializer = sap.firefly.JsonSerializerFactory
							.newInstance();
					formattedJson = jsonSerializer.serializePrettyPrint(
							this.m_parameters, true, true, 4);
					sb.append(formattedJson);
				}
				return sb.toString();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogResult",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(resultSet) {
							var object = new sap.firefly.OlapCatalogResult();
							object.setup(resultSet);
							return object;
						}
					},
					m_items : null,
					setup : function(resultSet) {
						var queryModel;
						var typeField;
						var schemaNameField;
						var schemaDim;
						var baseDataSourceTypeField;
						var baseDataSourceType;
						var baseDataSourceKeyField;
						var baseDataSourceTextField;
						var baseDataSource;
						var dataCategoryField;
						var baseDataSourceSchemaNameField;
						var baseDataSourcePackageNameField;
						var baseDataSourceObjectNameField;
						var planningModelNameField;
						var planningModelSchemaNameField;
						var internalTypeField;
						var packageNameField;
						var dimCnObject;
						var objectIsPlanQueryField;
						var objectHasMdxFlag;
						var objectNameField;
						var objectTextField;
						var rowsAxis;
						var tuplesCount;
						var i;
						var tuple;
						var item;
						var dataCategory;
						var internalType;
						var typeName;
						var schemaName;
						var packageName;
						var objectName;
						var description;
						var hasMdx;
						var baseDataSourceIdentifier;
						this.m_items = sap.firefly.XList.create();
						queryModel = resultSet.getQueryModel();
						typeField = queryModel.getDimensionByName(
								sap.firefly.OlapCatalogManager2.CN_TYPE)
								.getFirstFieldByType(
										sap.firefly.PresentationType.KEY);
						schemaNameField = null;
						schemaDim = queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_SCHEMA);
						if (schemaDim !== null) {
							schemaNameField = queryModel.getDimensionByName(
									sap.firefly.OlapCatalogManager2.CN_SCHEMA)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						baseDataSourceTypeField = null;
						baseDataSourceType = queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE);
						if (baseDataSourceType !== null) {
							baseDataSourceTypeField = baseDataSourceType
									.getFirstFieldByType(sap.firefly.PresentationType.KEY);
						}
						baseDataSourceKeyField = null;
						baseDataSourceTextField = null;
						baseDataSource = queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE);
						if (baseDataSource !== null) {
							baseDataSourceKeyField = baseDataSource
									.getFirstFieldByType(sap.firefly.PresentationType.KEY);
							baseDataSourceTextField = baseDataSource
									.getFirstFieldByType(sap.firefly.PresentationType.TEXT);
						}
						dataCategoryField = null;
						if (queryModel.getSupportsMetadataDataCategory()
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY) !== null)) {
							dataCategoryField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						baseDataSourceSchemaNameField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_SCHEMANAME) !== null) {
							baseDataSourceSchemaNameField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_SCHEMANAME)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						baseDataSourcePackageNameField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_PACKAGENAME) !== null) {
							baseDataSourcePackageNameField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_PACKAGENAME)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						baseDataSourceObjectNameField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_OBJECTNAME) !== null) {
							baseDataSourceObjectNameField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_OBJECTNAME)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						planningModelNameField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_NAME) !== null) {
							planningModelNameField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_NAME)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						planningModelSchemaNameField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_SCHEMA_NAME) !== null) {
							planningModelSchemaNameField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_SCHEMA_NAME)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						internalTypeField = null;
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE) !== null) {
							internalTypeField = queryModel
									.getDimensionByName(
											sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE)
									.getFirstFieldByType(
											sap.firefly.PresentationType.KEY);
						}
						packageNameField = queryModel.getDimensionByName(
								sap.firefly.OlapCatalogManager2.CN_PACKAGE)
								.getFirstFieldByType(
										sap.firefly.PresentationType.KEY);
						dimCnObject = queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT);
						objectIsPlanQueryField = dimCnObject
								.getFieldByName(sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY);
						objectHasMdxFlag = dimCnObject
								.getFieldByName(sap.firefly.OlapCatalogManager2.CN_OBJECT_MDX_FLAG);
						objectNameField = dimCnObject
								.getFirstFieldByType(sap.firefly.PresentationType.KEY);
						objectTextField = dimCnObject
								.getFirstFieldByType(sap.firefly.PresentationType.TEXT);
						rowsAxis = resultSet.getRowsAxis();
						tuplesCount = rowsAxis.getTuplesCount();
						for (i = 0; i < tuplesCount; i++) {
							tuple = rowsAxis.getTupleByIndex(i);
							item = sap.firefly.OlapCatalogItem
									.createCatalogItem();
							this.m_items.add(item);
							if (dataCategoryField !== null) {
								dataCategory = tuple
										.getStringValueByField(dataCategoryField);
								item.setDataCategory(dataCategory);
							}
							if (internalTypeField !== null) {
								internalType = tuple
										.getStringValueByField(internalTypeField);
								item.setInternalType(internalType);
							}
							typeName = tuple.getStringValueByField(typeField);
							item.setType(sap.firefly.MetaObjectType
									.lookupAndCreate(typeName));
							if (schemaNameField !== null) {
								schemaName = tuple
										.getStringValueByField(schemaNameField);
								item.setSchemaName(schemaName);
							}
							packageName = tuple
									.getStringValueByField(packageNameField);
							item.setPackageName(packageName);
							objectName = tuple
									.getStringValueByField(objectNameField);
							item.setObjectName(objectName);
							description = tuple
									.getStringValueByField(objectTextField);
							item.setText(description);
							if (objectIsPlanQueryField === null) {
								item.setPlanQuery(false);
							} else {
								item
										.setPlanQuery(tuple
												.getBooleanValueByField(objectIsPlanQueryField));
							}
							if (objectHasMdxFlag !== null) {
								hasMdx = tuple
										.getTristateValueByField(objectHasMdxFlag);
								item.setHasMdxFlag(hasMdx);
							}
							if (baseDataSourceTypeField !== null) {
								baseDataSourceIdentifier = sap.firefly.QFactory2
										.newDataSource();
								baseDataSourceIdentifier
										.setType(sap.firefly.MetaObjectType
												.lookup(tuple
														.getStringValueByField(baseDataSourceTypeField)));
								baseDataSourceIdentifier
										.setText(tuple
												.getStringValueByField(baseDataSourceTextField));
								baseDataSourceIdentifier
										.setName(tuple
												.getStringValueByField(baseDataSourceKeyField));
								if (baseDataSourceSchemaNameField !== null) {
									baseDataSourceIdentifier
											.setSchemaName(tuple
													.getStringValueByField(baseDataSourceSchemaNameField));
								}
								if (baseDataSourcePackageNameField !== null) {
									baseDataSourceIdentifier
											.setPackageName(tuple
													.getStringValueByField(baseDataSourcePackageNameField));
								}
								if ((baseDataSourceObjectNameField !== null)
										&& (sap.firefly.XString
												.size(tuple
														.getStringValueByField(baseDataSourceObjectNameField)) > 0)) {
									baseDataSourceIdentifier
											.setName(tuple
													.getStringValueByField(baseDataSourceObjectNameField));
								}
								item
										.setBaseDataSource(baseDataSourceIdentifier);
							}
							if (planningModelNameField !== null) {
								item
										.setPlanningModelName(tuple
												.getStringValueByField(planningModelNameField));
							}
							if (planningModelSchemaNameField !== null) {
								item
										.setPlanningModelSchemaName(tuple
												.getStringValueByField(planningModelSchemaNameField));
							}
						}
					},
					releaseObject : function() {
						this.m_items = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_items);
						sap.firefly.OlapCatalogResult.$superclass.releaseObject
								.call(this);
					},
					getObjectsIterator : function() {
						return this.m_items.getIterator();
					},
					getObjectsList : function() {
						return this.m_items;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var i;
						var item;
						if (this.m_items !== null) {
							for (i = 0; i < this.m_items.size(); i++) {
								item = this.m_items.get(i);
								if (item !== null) {
									sb.append(item.toString());
								}
								sb.appendNewLine();
							}
						}
						return sb.toString();
					}
				});
$Firefly.createClass("sap.firefly.QCmdContextFactory", sap.firefly.XObject, {
	$statics : {
		s_cmdFactoryList : null,
		staticSetup : function() {
			sap.firefly.QCmdContextFactory.s_cmdFactoryList = sap.firefly.XList
					.create();
		},
		register : function(factory) {
			sap.firefly.QCmdContextFactory.s_cmdFactoryList.add(factory);
		},
		createCmdContext : function(olapApplication, component) {
			var size;
			var i;
			var factory;
			var cmdContext;
			if (component !== null) {
				size = sap.firefly.QCmdContextFactory.s_cmdFactoryList.size();
				for (i = 0; i < size; i++) {
					factory = sap.firefly.QCmdContextFactory.s_cmdFactoryList
							.get(i);
					cmdContext = factory.newCmdContext(olapApplication,
							component);
					if (cmdContext !== null) {
						return cmdContext;
					}
				}
			}
			return null;
		}
	},
	newCmdContext : function(olapApplication, component) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	}
});
$Firefly.createClass("sap.firefly.QParameter", sap.firefly.XObject, {
	$statics : {
		create : function() {
			var param = new sap.firefly.QParameter();
			param.setupValues();
			return param;
		}
	},
	m_values : null,
	m_valueTraces : null,
	setupValues : function() {
		this.m_values = sap.firefly.XList.create();
		this.m_valueTraces = sap.firefly.XListOfString.create();
	},
	addXParam : function(param, trace) {
		this.m_values.add(param);
		this.m_valueTraces.add(trace);
		return this;
	},
	addObject : function(value, trace) {
		return this
				.addXParam(sap.firefly.XReflectionParam.create(value), trace);
	},
	addNameObject : function(value) {
		if (value === null) {
			return this.addObject(null, null);
		}
		return this.addObject(value, value.getName());
	},
	addXValue : function(value) {
		if (value === null) {
			return this.addObject(null, null);
		}
		return this.addObject(value, value.getStringRepresentation());
	},
	addString : function(value) {
		return this.addXParam(sap.firefly.XReflectionParam.createString(value),
				value);
	},
	addBoolean : function(value) {
		return this.addXParam(
				sap.firefly.XReflectionParam.createBoolean(value),
				sap.firefly.XBoolean.convertBooleanToString(value));
	},
	addInteger : function(value) {
		return this.addXParam(
				sap.firefly.XReflectionParam.createInteger(value),
				sap.firefly.XInteger.convertIntegerToString(value));
	},
	addDouble : function(value) {
		return this.addXParam(sap.firefly.XReflectionParam.createDouble(value),
				sap.firefly.XDouble.convertDoubleToString(value));
	},
	addLong : function(value) {
		return this.addXParam(sap.firefly.XReflectionParam.createLong(value),
				sap.firefly.XLong.convertLongToString(value));
	},
	getValues : function() {
		return this.m_values;
	},
	get : function(index) {
		return this.m_values.get(index).getValue();
	},
	getTrace : function(index) {
		return this.m_valueTraces.get(index);
	},
	hasElements : function() {
		return this.m_values.hasElements();
	},
	size : function() {
		return this.m_values.size();
	},
	toString : function() {
		return this.m_values.toString();
	}
});
$Firefly
		.createClass(
				"sap.firefly.QAllCmds",
				sap.firefly.XObject,
				{
					$statics : {
						ADD_ALL_DIMENSIONS : "addAllDimensions",
						ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA : "addAllFieldsOfDimensionToModelArea",
						ADD_ALL_FIELDS_TO_MODEL_AREA : "addAllFieldsToModelArea",
						ADD_ATTRIBUTE_TO_RESULT_SET : "addAttributeToResultSet",
						ADD_CONTAINS_GEOMETRY_FILTER : "addContainsGeometryFilter",
						ADD_COVERS_GEOMETRY_FILTER : "addCoversGeometryFilter",
						ADD_CROSSES_LINESTRING_FILTER : "addCrossesLinestringFilter",
						ADD_DIMENSION : "addDimension",
						ADD_DISJOINT_GEOMETRY_FILTER : "addDisjointGeometryFilter",
						ADD_DOUBLE_FILTER_BY_FIELD : "addDoubleFilterByField",
						ADD_DOUBLE_FILTER_BY_FIELD_NAME : "addDoubleFilterByFieldName",
						ADD_FIELD_TO_MODEL_AREA : "addFieldToModelArea",
						ADD_FIELD : "addField",
						ADD_FILTER : "addFilter",
						ADD_FILTER_BY_FIELD : "addFilterByField",
						ADD_FILTER_BY_FIELD_AND_VALUE : "addFilterByFieldAndValue",
						ADD_INTERSECTS_GEOMETRY_FILTER : "addIntersectsGeometryFilter",
						ADD_INTERSECTS_RECT_FILTER : "addIntersectsRectFilter",
						ADD_INTERVALL_FILTER_BY_INTEGER_VALUES : "addIntervallFilterByIntegerValues",
						ADD_INTERVALL_FILTER_BY_LONG_VALUES : "addIntervallFilterByLongValues",
						ADD_INTERVALL_FILTER_BY_STRING_VALUES : "addIntervallFilterByStringValues",
						ADD_INTERVALL_FILTER_BY_VALUES : "addIntervallFilterByValues",
						ADD_INTERVALL_VISIBILITY_FILTER_BY_STRING_VALUES : "addIntervallVisibilityFilterByStringValues",
						ADD_INT_FILTER_BY_ID : "addIntFilterByField",
						ADD_INT_FILTER_BY_FIELD_NAME : "addIntFilterByFieldName",
						ADD_LONG_FILTER_BY_FIELD : "addLongFilterByField",
						ADD_LONG_FILTER_BY_FIELD_NAME : "addLongFilterByFieldName",
						ADD_MEASURE : "addMeasure",
						ADD_NEW_RESTRICTED_MEASURE : "addNewRestrictedMeasure",
						ADD_NEW_RESTRICTED_MEASURE_ON_NODE : "addNewRestrictedMeasureOnNode",
						ADD_OVERLAPS_GEOMETRY_FILTER : "addOverlapsGeometryFilter",
						ADD_PRESENTATION : "addPresentation",
						ADD_TOUCHES_GEOMETRY_FILTER : "addTouchesGeometryFilter",
						ADD_WITHIN_DISTANCE_FILTER : "addWithinDistanceFilter",
						ADD_WITHING_GEOMETRY_FILTER : "addWithinGeometryFilter",
						ADD_SIMPLE_SINGLE_MEMBER_FILTER : "addSimpleSingleMemberFilter",
						ALIGN_TOTALS : "alignTotals",
						CLEAR_AXIS : "clearAxis",
						CLEAR_SORT : "clearSort",
						CLEAR_FIELDS : "clearFields",
						CLEAR_ALL_FIELDS_FROM_MODEL_AREA : "clearAllFieldsFromModelArea",
						CLEAR_FILTERS_BY_DIMENSION_EXT : "clearFiltersByDimensionExt",
						CLEAR_ALL_FILTERS_EXT : "clearAllFiltersExt",
						MOVE_DIMENSION_TO_AXIS : "moveDimensionToAxis",
						MOVE_DIMENSION_TO_AXIS_BY_INDEX : "moveDimensionToAxisByIndex",
						MOVE_DIMENSION_EXT : "moveDimensionExt",
						REFRESH : "refresh",
						RESET : "reset",
						RESET_TO_DEFAULT : "resetToDefault",
						REMOVE_FIELD : "removeField",
						REMOVE_ATTRIBUTE_FROM_RESULTSET : "removeAttributeFromResultSet",
						SORT : "sort",
						SET_DIMENSION_AND_MEASURE : "setDimensionAndMeasure",
						SET_DIMENSION_HIERARCHY : "setDimensionHierarchy",
						SET_TOTALS_VISIBLE : "setTotalsVisible",
						SET_FIELD : "setField",
						SET_VARIABLE : "setVariable",
						SWITCH_AXES : "switchAxes",
						s_lookup2 : null,
						staticSetup : function() {
							sap.firefly.QAllCmds.s_lookup2 = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_SIMPLE_SINGLE_MEMBER_FILTER,
											"String,String");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_ALL_DIMENSIONS,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_ALL_FIELDS_TO_MODEL_AREA,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_ATTRIBUTE_TO_RESULT_SET,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_CONTAINS_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_COVERS_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_CROSSES_LINESTRING_FILTER,
											"");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ADD_DIMENSION, "");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_DISJOINT_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_DOUBLE_FILTER_BY_FIELD,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_DOUBLE_FILTER_BY_FIELD_NAME,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_FIELD_TO_MODEL_AREA,
											"");
							sap.firefly.QAllCmds
									.add(sap.firefly.QAllCmds.ADD_FIELD,
											"#DimensionType,String,#PresentationType,String,#QContextType");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ADD_FILTER_BY_FIELD,
									"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_FILTER_BY_FIELD_AND_VALUE,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERSECTS_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERSECTS_RECT_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERVALL_FILTER_BY_INTEGER_VALUES,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERVALL_FILTER_BY_LONG_VALUES,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERVALL_FILTER_BY_STRING_VALUES,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERVALL_FILTER_BY_VALUES,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INTERVALL_VISIBILITY_FILTER_BY_STRING_VALUES,
											"");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ADD_INT_FILTER_BY_ID,
									"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_INT_FILTER_BY_FIELD_NAME,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_LONG_FILTER_BY_FIELD,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_LONG_FILTER_BY_FIELD_NAME,
											"");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ADD_MEASURE, "");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_NEW_RESTRICTED_MEASURE,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_NEW_RESTRICTED_MEASURE_ON_NODE,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_OVERLAPS_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ADD_PRESENTATION, "");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_TOUCHES_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_WITHIN_DISTANCE_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_WITHING_GEOMETRY_FILTER,
											"");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.ADD_FILTER,
											"#FilterLayer,#DimensionType,String,#PresentationType,String,String,String,#ComparisonOperator");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.ALIGN_TOTALS,
									"#QModelLevel,String,#ResultAlignment");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.CLEAR_AXIS,
									"#AxisType");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.CLEAR_SORT,
									"#SortType,String");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.CLEAR_FIELDS,
									"#DimensionType,String,#QContextType");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.CLEAR_ALL_FIELDS_FROM_MODEL_AREA,
											"#QContextType");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.CLEAR_FILTERS_BY_DIMENSION_EXT,
											"#FilterLayer,#DimensionType,String");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.CLEAR_ALL_FILTERS_EXT,
									"#FilterLayer,#FilterScopeVariables");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.MOVE_DIMENSION_TO_AXIS,
											"String,#AxisType");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.MOVE_DIMENSION_TO_AXIS_BY_INDEX,
											"String,#AxisType,int");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.MOVE_DIMENSION_EXT,
									"#DimensionType,String,#AxisType,int");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.REFRESH, "");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.RESET, "");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.RESET_TO_DEFAULT, "");
							sap.firefly.QAllCmds
									.add(sap.firefly.QAllCmds.REMOVE_FIELD,
											"#DimensionType,String,#PresentationType,String,#QContextType");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.REMOVE_ATTRIBUTE_FROM_RESULTSET,
											"String,String");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.SET_DIMENSION_AND_MEASURE,
											"String,String");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.SET_DIMENSION_HIERARCHY,
											"String,String,boolean,int");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.SET_TOTALS_VISIBLE,
									"#QModelLevel,String,#ResultVisibility");
							sap.firefly.QAllCmds
									.add(sap.firefly.QAllCmds.SET_FIELD,
											"#DimensionType,String,#PresentationType,String,#QContextType");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.SET_VARIABLE,
									"String,String");
							sap.firefly.QAllCmds.add(
									sap.firefly.QAllCmds.SWITCH_AXES, "");
							sap.firefly.QAllCmds
									.add(
											sap.firefly.QAllCmds.SORT,
											"#SortType,#DimensionType,String,#PresentationType,String,String,#XSortDirection");
						},
						add : function(methodName, signature) {
							var cmd = sap.firefly.QGenericCmd.createGenericCmd(
									methodName, null, signature, null);
							sap.firefly.QAllCmds.s_lookup2.put(methodName, cmd);
						},
						newCmd : function(allocatorScope, name, space,
								parameter) {
							var newInstance = null;
							var cmd = sap.firefly.QAllCmds.s_lookup2
									.getByKey(name);
							if (cmd !== null) {
								newInstance = cmd.newRuntimeInstance();
								newInstance.setupCmd(name, space, parameter);
							}
							return newInstance;
						}
					}
				});
$Firefly.createClass("sap.firefly.QChangedListenerPair", sap.firefly.XObject, {
	$statics : {
		create : function(listener, customIdentifier) {
			var element = new sap.firefly.QChangedListenerPair();
			element.setup(listener, customIdentifier);
			return element;
		}
	},
	m_listenerWeakReference : null,
	m_customIdentifier : null,
	setup : function(listener, customIdentifier) {
		this.m_listenerWeakReference = sap.firefly.XWeakReferenceUtil
				.getWeakRef(listener);
		this.m_customIdentifier = customIdentifier;
	},
	releaseObject : function() {
		this.m_listenerWeakReference = sap.firefly.XObject
				.releaseIfNotNull(this.m_listenerWeakReference);
		this.m_customIdentifier = null;
		sap.firefly.QChangedListenerPair.$superclass.releaseObject.call(this);
	},
	getListener : function() {
		return sap.firefly.XWeakReferenceUtil
				.getHardRef(this.m_listenerWeakReference);
	},
	hasWeakReference : function() {
		return this.m_listenerWeakReference !== null;
	},
	getCustomIdentifier : function() {
		return this.m_customIdentifier;
	},
	setCustomIdentifier : function(customIdentifier) {
		this.m_customIdentifier = customIdentifier;
	},
	toString : function() {
		if (this.m_listenerWeakReference === null) {
			return "[Empty]";
		}
		return this.m_listenerWeakReference.toString();
	}
});
$Firefly.createClass("sap.firefly.QDeserializeListenerPair",
		sap.firefly.XObject, {
			$statics : {
				create : function(listener, customIdentifier) {
					var element = new sap.firefly.QDeserializeListenerPair();
					element.setup(listener, customIdentifier);
					return element;
				}
			},
			m_listenerWeakReference : null,
			m_customIdentifier : null,
			setup : function(listener, customIdentifier) {
				this.m_listenerWeakReference = sap.firefly.XWeakReferenceUtil
						.getWeakRef(listener);
				this.m_customIdentifier = customIdentifier;
			},
			releaseObject : function() {
				this.m_listenerWeakReference = sap.firefly.XObject
						.releaseIfNotNull(this.m_listenerWeakReference);
				this.m_customIdentifier = null;
				sap.firefly.QDeserializeListenerPair.$superclass.releaseObject
						.call(this);
			},
			getListener : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_listenerWeakReference);
			},
			hasWeakReference : function() {
				return this.m_listenerWeakReference !== null;
			},
			getCustomIdentifier : function() {
				return this.m_customIdentifier;
			},
			setCustomIdentifier : function(customIdentifier) {
				this.m_customIdentifier = customIdentifier;
			},
			toString : function() {
				if (this.m_listenerWeakReference === null) {
					return "[Empty]";
				}
				return this.m_listenerWeakReference.toString();
			}
		});
$Firefly.createClass("sap.firefly.QDimensionElement", sap.firefly.XObject, {
	$statics : {
		createDimensionElement : function(selectField, hierarchyName, value) {
			sap.firefly.XVersion.checkCleanOlapConstructors(40);
			return sap.firefly.QSelectValue.createDimensionElement(selectField,
					hierarchyName, value);
		}
	}
});
$Firefly
		.createClass(
				"sap.firefly.QDimensionReadMode",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							var object = new sap.firefly.QDimensionReadMode();
							object.m_supportedReadModes = sap.firefly.XSetOfNameObject
									.create();
							return object;
						}
					},
					m_supportedReadModes : null,
					m_defaultReadMode : null,
					m_activeReadMode : null,
					m_dimensionName : null,
					copyDimensionReadMode : function(origin) {
						this.m_activeReadMode = origin.m_activeReadMode;
						this.m_defaultReadMode = origin.m_defaultReadMode;
						this.m_supportedReadModes = origin.m_supportedReadModes
								.createSetCopy();
					},
					setDimensionName : function(dimensionName) {
						this.m_dimensionName = dimensionName;
					},
					releaseObject : function() {
						this.m_supportedReadModes = sap.firefly.XObject
								.releaseIfNotNull(this.m_supportedReadModes);
						this.m_defaultReadMode = null;
						this.m_activeReadMode = null;
						this.m_dimensionName = null;
						sap.firefly.QDimensionReadMode.$superclass.releaseObject
								.call(this);
					},
					clearReadmode : function() {
						this.m_supportedReadModes.clear();
						this.m_defaultReadMode = null;
						this.m_activeReadMode = null;
					},
					setActiveReadMode : function(activeReadMode) {
						var readMode = activeReadMode;
						if (activeReadMode === sap.firefly.QMemberReadMode.DEFAULT_VALUE) {
							readMode = this.m_defaultReadMode;
						}
						this.assertReadModeSupported(readMode);
						this.m_activeReadMode = readMode;
					},
					getActiveReadMode : function() {
						return this.m_activeReadMode;
					},
					getDefaultReadMode : function() {
						return this.m_defaultReadMode;
					},
					setDefaultReadMode : function(defaultReadMode) {
						this.assertReadModeSupported(defaultReadMode);
						this.m_defaultReadMode = defaultReadMode;
					},
					assertReadModeSupported : function(readMode) {
						if ((readMode !== null)
								&& !this.m_supportedReadModes
										.contains(readMode)) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate5(
													"Unsupported read mode '",
													readMode.getName(),
													"' for dimension '",
													this.m_dimensionName, "'"));
						}
					},
					determineBestReadMode : function(mode) {
						var matchingMode = this
								.determineBestReadModeSingleSide(mode);
						if (matchingMode === null) {
							matchingMode = this
									.determineBestReadModeSingleSide(mode
											.getSibling());
						}
						if (matchingMode === null) {
							matchingMode = sap.firefly.QMemberReadMode.DEFAULT_VALUE;
						}
						return matchingMode;
					},
					determineBestReadModeSingleSide : function(mode) {
						var current = mode;
						while (current !== null) {
							if (this.m_supportedReadModes.contains(current)) {
								return current;
							}
							current = current.getParent();
						}
						if (mode !== null) {
							current = mode.getChild();
							while (current !== null) {
								if (this.m_supportedReadModes.contains(current)) {
									return current;
								}
								current = current.getChild();
							}
						}
						return null;
					},
					getSupportedReadModes : function() {
						return this.m_supportedReadModes;
					},
					addSupportedReadMode : function(readMode) {
						this.m_supportedReadModes.put(readMode);
					}
				});
$Firefly.createClass("sap.firefly.XFieldNamePair", sap.firefly.XObject, {
	$statics : {
		create : function(localeFieldName, referencedFieldName) {
			var fieldNamePair = new sap.firefly.XFieldNamePair();
			fieldNamePair.m_localeFieldName = localeFieldName;
			fieldNamePair.m_referencedFieldName = referencedFieldName;
			return fieldNamePair;
		}
	},
	m_localeFieldName : null,
	m_referencedFieldName : null,
	releaseObject : function() {
		this.m_localeFieldName = null;
		this.m_referencedFieldName = null;
		sap.firefly.XFieldNamePair.$superclass.releaseObject.call(this);
	},
	setLocaleFieldName : function(localeFieldName) {
		this.m_localeFieldName = localeFieldName;
	},
	getLocaleFieldName : function() {
		return this.m_localeFieldName;
	},
	setReferencedFieldName : function(referencedFieldName) {
		this.m_referencedFieldName = referencedFieldName;
	},
	getReferencedFieldName : function() {
		return this.m_referencedFieldName;
	}
});
$Firefly
		.createClass(
				"sap.firefly.QFilterUtil",
				sap.firefly.XObject,
				{
					$statics : {
						convertComplexFilterToCartesian : function(
								complexSelection) {
							var cartesianProduct;
							var selectionComponentType;
							var intersectAnd;
							var intersectAndSize;
							var idxAnd;
							var intersectAndComponent;
							var typeAnd;
							var signedSetAnd;
							var fOp;
							var comparisonOperator;
							var intersectOr;
							var intersectOrSize;
							var idxOr;
							var intersectOrComponent;
							var typeOr;
							var newCartesianList;
							var cartesianList;
							var idxSignedSet;
							var signedSetComplex;
							var fOp2;
							var comparisonOperator2;
							if (complexSelection === null) {
								return null;
							}
							cartesianProduct = null;
							selectionComponentType = complexSelection
									.getComponentType();
							if (selectionComponentType === sap.firefly.FilterComponentType.AND) {
								cartesianProduct = sap.firefly.QFactory2
										.newFilterCartesianProduct(complexSelection
												.getFilterExpression());
								intersectAnd = complexSelection;
								intersectAndSize = intersectAnd.size();
								for (idxAnd = 0; idxAnd < intersectAndSize; idxAnd++) {
									intersectAndComponent = intersectAnd
											.get(idxAnd);
									typeAnd = intersectAndComponent
											.getComponentType();
									if (typeAnd === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										signedSetAnd = intersectAndComponent;
										cartesianProduct.add(signedSetAnd);
									} else {
										if (typeAnd === sap.firefly.FilterComponentType.OPERATION) {
											fOp = intersectAndComponent;
											comparisonOperator = fOp
													.getComparisonOperator();
											if (comparisonOperator
													.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL) === false) {
												if (sap.firefly.QFilterUtil
														.addOperationToCartesian(
																cartesianProduct,
																fOp, true) === false) {
													return null;
												}
											} else {
												return null;
											}
										} else {
											cartesianProduct = null;
											break;
										}
									}
								}
							} else {
								if (selectionComponentType === sap.firefly.FilterComponentType.OR) {
									cartesianProduct = sap.firefly.QFactory2
											.newFilterCartesianProduct(complexSelection
													.getFilterExpression());
									intersectOr = complexSelection;
									intersectOrSize = intersectOr.size();
									for (idxOr = 0; idxOr < intersectOrSize; idxOr++) {
										intersectOrComponent = intersectOr
												.get(idxOr);
										typeOr = intersectOrComponent
												.getComponentType();
										if (typeOr === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
											newCartesianList = intersectOrComponent;
											cartesianList = cartesianProduct
													.getCartesianList(newCartesianList
															.getDimension());
											if (cartesianList !== null) {
												for (idxSignedSet = 0; idxSignedSet < newCartesianList
														.size(); idxSignedSet++) {
													cartesianList
															.add(newCartesianList
																	.get(idxSignedSet));
												}
											} else {
												cartesianProduct
														.add(newCartesianList);
											}
										} else {
											cartesianProduct = null;
											break;
										}
									}
								} else {
									if (selectionComponentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										cartesianProduct = sap.firefly.QFactory2
												.newFilterCartesianProduct(complexSelection
														.getFilterExpression());
										signedSetComplex = complexSelection;
										cartesianProduct.add(signedSetComplex);
									} else {
										if (selectionComponentType === sap.firefly.FilterComponentType.OPERATION) {
											fOp2 = complexSelection;
											comparisonOperator2 = fOp2
													.getComparisonOperator();
											if (comparisonOperator2
													.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL) === false) {
												cartesianProduct = sap.firefly.QFactory2
														.newFilterCartesianProduct(complexSelection
																.getFilterExpression());
												sap.firefly.QFilterUtil
														.addOperationToCartesian(
																cartesianProduct,
																fOp2, false);
											}
										}
									}
								}
							}
							return cartesianProduct;
						},
						addOperationToCartesian : function(cartesianProduct,
								fOp, checkExistance) {
							var cartesianElement = sap.firefly.QFactory2
									.newFilterCartesianElement(cartesianProduct);
							var field;
							var filterCartesianList;
							cartesianElement.getLow().setValue(
									fOp.getLow().getValue());
							if (fOp.getHigh() !== null) {
								cartesianElement.getHigh().setValue(
										fOp.getHigh().getValue());
							}
							if (fOp.getThird() !== null) {
								cartesianElement.getThird().setValue(
										fOp.getThird().getValue());
							}
							cartesianElement.setComparisonOperator(fOp
									.getComparisonOperator());
							field = fOp.getField();
							filterCartesianList = cartesianProduct
									.getCartesianListByField(field);
							if (filterCartesianList === null) {
								filterCartesianList = sap.firefly.QFactory2
										.newFilterCartesianList(cartesianProduct
												.getFilterExpression());
								filterCartesianList.setField(field);
								cartesianProduct.add(filterCartesianList);
							} else {
								if (checkExistance
										&& filterCartesianList.hasElements()) {
									return false;
								}
							}
							filterCartesianList.add(cartesianElement);
							return true;
						}
					}
				});
$Firefly.createClass("sap.firefly.QMemberNavigation", sap.firefly.XObject, {
	m_memberFunction : null,
	m_parameters : null,
	m_navigations : null,
	releaseObject : function() {
		this.m_parameters = sap.firefly.XObject
				.releaseIfNotNull(this.m_parameters);
		this.m_navigations = sap.firefly.XObject
				.releaseIfNotNull(this.m_navigations);
		this.m_memberFunction = null;
		sap.firefly.QMemberNavigation.$superclass.releaseObject.call(this);
	},
	getMemberFunction : function() {
		return this.m_memberFunction;
	},
	setMemberFunction : function(memberfunction) {
		this.m_memberFunction = memberfunction;
	},
	getParameters : function() {
		return this.m_parameters;
	},
	addParameter : function(parameter) {
		if (this.m_parameters === null) {
			this.m_parameters = sap.firefly.XList.create();
		}
		this.m_parameters.add(parameter);
	},
	getNavigations : function() {
		return this.m_navigations;
	},
	addNavigation : function(navigation) {
		if (this.m_navigations === null) {
			this.m_navigations = sap.firefly.XList.create();
		}
		this.m_navigations.add(navigation);
	}
});
$Firefly
		.createClass(
				"sap.firefly.QMemberNavigationParameter",
				sap.firefly.XObject,
				{
					m_valueType : null,
					m_value : null,
					releaseObject : function() {
						this.m_value = sap.firefly.XObject
								.releaseIfNotNull(this.m_value);
						this.m_valueType = null;
						sap.firefly.QMemberNavigationParameter.$superclass.releaseObject
								.call(this);
					},
					setConstantValue : function(constantValue) {
						if (this.m_value === null) {
							this.m_value = sap.firefly.XValueAccess
									.createWithValue(constantValue);
						} else {
							this.m_value.setXValue(constantValue);
						}
						this.m_valueType = "Constant";
					},
					getValue : function() {
						return this.m_value;
					},
					setLevelValue : function(levelValue) {
						if (this.m_value === null) {
							this.m_value = sap.firefly.XValueAccess
									.createWithValue(levelValue);
						} else {
							this.m_value.setXValue(levelValue);
						}
						this.m_valueType = "Level";
					},
					setMemberValue : function(fqnName) {
						if (this.m_value === null) {
							this.m_value = sap.firefly.XValueAccess
									.createWithValue(sap.firefly.XStringValue
											.create(fqnName));
						} else {
							this.m_value.setXValue(sap.firefly.XStringValue
									.create(fqnName));
						}
						this.m_valueType = "Member";
					},
					getParameterType : function() {
						return this.m_valueType;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.HierarchyCatalogItem",
				sap.firefly.XObject,
				{
					$statics : {
						createCatalogItem : function() {
							var catalogItem = new sap.firefly.HierarchyCatalogItem();
							catalogItem
									.setHierarchyType(sap.firefly.HierarchyType.UNKNOWN);
							return catalogItem;
						},
						createCopy : function(item) {
							var copy;
							var dateTo;
							var dateFrom;
							var hierarchyLevelsCopy;
							var hierarchyLevels;
							var levelIndex;
							var hierarchyLevel;
							if (item === null) {
								return null;
							}
							copy = sap.firefly.HierarchyCatalogItem
									.createCatalogItem();
							copy.setHierarchyName(item.getHierarchyName());
							copy.setDimensionName(item.getDimensionName());
							if (item.hasHierarchyLongText()) {
								copy.setHierarchyLongText(item
										.getHierarchyLongText());
							}
							if (item.hasHierarchyMediumText()) {
								copy.setHierarchyMediumText(item
										.getHierarchyMediumText());
							}
							if (item.hasHierarchyShortText()) {
								copy.setHierarchyShortText(item
										.getHierarchyShortText());
							}
							if (item.hasVersionName()) {
								copy.setVersionName(item.getVersionName());
							}
							if (item.hasVersionDisplayKey()) {
								copy.setVersionDisplayKey(item
										.getVersionDisplayKey());
							}
							if (item.hasVersionDescription()) {
								copy.setVersionDescription(item
										.getVersionDescription());
							}
							dateTo = item.getDateTo();
							if (dateTo !== null) {
								copy.setDateTo(dateTo.clone());
							}
							dateFrom = item.getDateFrom();
							if (dateFrom !== null) {
								copy.setDateFrom(dateFrom.clone());
							}
							if (item.hasOwner()) {
								copy.setOwner(item.getOwner());
							}
							if (item.hasHierId()) {
								copy.setHierId(item.getHierId());
							}
							if (item.hasHierType()) {
								copy.setHierType(item.getHierType());
							}
							if (item.hasObjectVersion()) {
								copy.setObjectVersion(item.getObjectVersion());
							}
							copy.setIsRemote(item.isRemote());
							if (item.supportsHierarchyLevels()) {
								copy.setSupportsHierarchyLevels(true);
								hierarchyLevelsCopy = sap.firefly.XList
										.create();
								hierarchyLevels = item.getHierarchyLevels();
								if (hierarchyLevels !== null) {
									for (levelIndex = 0; levelIndex < hierarchyLevels
											.size(); levelIndex++) {
										hierarchyLevel = hierarchyLevels
												.get(levelIndex);
										hierarchyLevelsCopy
												.add(sap.firefly.HierarchyCatalogLevel
														.createCopy(hierarchyLevel));
									}
								}
								copy.setHierarchyLevels(hierarchyLevelsCopy);
							}
							copy.setHierarchyType(item.getHierarchyType());
							return copy;
						}
					},
					m_hierarchyName : null,
					m_dimensionName : null,
					m_hierarchyShortText : null,
					m_hasHierarchyShortText : false,
					m_hierarchyMediumText : null,
					m_hasHierarchyMediumText : false,
					m_hierarchyLongText : null,
					m_hasHierarchyLongText : false,
					m_versionName : null,
					m_hasVersionName : false,
					m_versionDisplayKey : null,
					m_hasVersionDisplayKey : false,
					m_versionDescription : null,
					m_hasVersionDescription : false,
					m_dateTo : null,
					m_dateFrom : null,
					m_owner : null,
					m_hasOwner : false,
					m_hierId : null,
					m_hasHierId : false,
					m_hierType : null,
					m_hasHierType : false,
					m_objectVersion : null,
					m_hasObjectVersion : false,
					m_isRemote : false,
					m_supportsHierarchyLevels : false,
					m_hierarchyLevels : null,
					m_hierarchyType : null,
					releaseObject : function() {
						this.m_hierarchyName = null;
						this.m_dimensionName = null;
						this.m_hierarchyShortText = null;
						this.m_hierarchyMediumText = null;
						this.m_hierarchyLongText = null;
						this.m_versionName = null;
						this.m_versionDisplayKey = null;
						this.m_versionDescription = null;
						this.m_dateTo = sap.firefly.XObject
								.releaseIfNotNull(this.m_dateTo);
						this.m_dateFrom = sap.firefly.XObject
								.releaseIfNotNull(this.m_dateFrom);
						this.m_owner = null;
						this.m_hierId = null;
						this.m_hierType = null;
						this.m_objectVersion = null;
						this.m_hierarchyLevels = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_hierarchyLevels);
						this.m_hierarchyType = null;
						sap.firefly.HierarchyCatalogItem.$superclass.releaseObject
								.call(this);
					},
					setHierarchyName : function(hierarchyName) {
						this.m_hierarchyName = hierarchyName;
					},
					getHierarchyName : function() {
						return this.m_hierarchyName;
					},
					setDimensionName : function(dimensionName) {
						this.m_dimensionName = dimensionName;
					},
					getDimensionName : function() {
						return this.m_dimensionName;
					},
					setVersionName : function(versionName) {
						this.m_versionName = versionName;
						this.m_hasVersionName = true;
					},
					hasVersionName : function() {
						return this.m_hasVersionName;
					},
					getVersionName : function() {
						return this.m_versionName;
					},
					setVersionDisplayKey : function(versionDisplayKey) {
						this.m_versionDisplayKey = versionDisplayKey;
						this.m_hasVersionDisplayKey = true;
					},
					setVersionDescription : function(versionDescription) {
						this.m_versionDescription = versionDescription;
						this.m_hasVersionDescription = true;
					},
					hasVersionDescription : function() {
						return this.m_hasVersionDescription;
					},
					getVersionDescription : function() {
						return this.m_versionDescription;
					},
					setHierarchyShortText : function(hierarchyShortText) {
						this.m_hierarchyShortText = hierarchyShortText;
						this.m_hasHierarchyShortText = true;
					},
					hasHierarchyShortText : function() {
						return this.m_hasHierarchyShortText;
					},
					getHierarchyShortText : function() {
						return this.m_hierarchyShortText;
					},
					setHierarchyMediumText : function(hierarchyMediumText) {
						this.m_hierarchyMediumText = hierarchyMediumText;
						this.m_hasHierarchyMediumText = true;
					},
					hasHierarchyMediumText : function() {
						return this.m_hasHierarchyMediumText;
					},
					getHierarchyMediumText : function() {
						return this.m_hierarchyMediumText;
					},
					setHierarchyLongText : function(hierarchyLongText) {
						this.m_hierarchyLongText = hierarchyLongText;
						this.m_hasHierarchyLongText = true;
					},
					hasHierarchyLongText : function() {
						return this.m_hasHierarchyLongText;
					},
					getHierarchyLongText : function() {
						return this.m_hierarchyLongText;
					},
					getHierarchyDescription : function() {
						if (this.hasHierarchyShortText()
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(this.m_hierarchyShortText)) {
							return this.m_hierarchyShortText;
						} else {
							if (this.hasHierarchyMediumText()
									&& sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(this.m_hierarchyMediumText)) {
								return this.m_hierarchyMediumText;
							} else {
								if (this.hasHierarchyLongText()
										&& sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(this.m_hierarchyLongText)) {
									return this.m_hierarchyLongText;
								}
							}
						}
						return null;
					},
					setDateTo : function(dateTo) {
						this.m_dateTo = dateTo;
					},
					getDateTo : function() {
						return this.m_dateTo;
					},
					setDateFrom : function(dateFrom) {
						this.m_dateFrom = dateFrom;
					},
					getDateFrom : function() {
						return this.m_dateFrom;
					},
					setOwner : function(owner) {
						this.m_owner = owner;
						this.m_hasOwner = true;
					},
					hasOwner : function() {
						return this.m_hasOwner;
					},
					getOwner : function() {
						return this.m_owner;
					},
					setHierId : function(hierId) {
						this.m_hierId = hierId;
						this.m_hasHierId = true;
					},
					hasHierId : function() {
						return this.m_hasHierId;
					},
					getHierId : function() {
						return this.m_hierId;
					},
					setHierType : function(hierType) {
						this.m_hierType = hierType;
						this.m_hasHierType = true;
					},
					hasHierType : function() {
						return this.m_hasHierType;
					},
					getHierType : function() {
						return this.m_hierType;
					},
					setObjectVersion : function(objectVersion) {
						this.m_objectVersion = objectVersion;
						this.m_hasObjectVersion = true;
					},
					hasObjectVersion : function() {
						return this.m_hasObjectVersion;
					},
					getObjectVersion : function() {
						return this.m_objectVersion;
					},
					setIsRemote : function(isRemote) {
						this.m_isRemote = isRemote;
					},
					isRemote : function() {
						return this.m_isRemote;
					},
					clone : function() {
						return sap.firefly.HierarchyCatalogItem
								.createCopy(this);
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var levels;
						var i;
						var level;
						sb.append("[");
						if (this.m_dimensionName !== null) {
							sb.append(this.m_dimensionName);
						}
						sb.append("] - ");
						sb.append("[");
						if (this.m_hierarchyName !== null) {
							sb.append(this.m_hierarchyName);
						}
						sb.append("]");
						sb.append("[");
						if (this.hasHierarchyLongText()) {
							sb.append(this.getHierarchyLongText());
						} else {
							sb.append("<null>");
						}
						sb.append("|");
						if (this.hasHierarchyMediumText()) {
							sb.append(this.getHierarchyMediumText());
						} else {
							sb.append("<null>");
						}
						sb.append("|");
						if (this.hasHierarchyShortText()) {
							sb.append(this.getHierarchyShortText());
						} else {
							sb.append("<null>");
						}
						sb.append("]");
						sb.append("[");
						if (this.hasVersionName()) {
							sb.append(this.m_versionName);
						}
						sb.append("]");
						sb.append("[");
						if (this.hasVersionDescription()) {
							sb.append(this.m_versionDescription);
						}
						sb.append("]");
						sb.append("[");
						if (this.m_dateTo !== null) {
							sb.append(this.m_dateTo.toString());
						}
						sb.append("]");
						sb.append("[");
						if (this.m_dateFrom !== null) {
							sb.append(this.m_dateFrom.toString());
						}
						sb.append("]");
						sb.append("[");
						if (this.hasOwner()) {
							sb.append(this.m_owner);
						}
						sb.append("]");
						sb.append("[");
						if (this.hasHierId()) {
							sb.append(this.m_hierId);
						}
						sb.append("]");
						sb.append("[");
						sb.appendBoolean(this.m_isRemote);
						sb.append("]");
						if ((this.m_hierarchyType !== null)
								&& (this.m_hierarchyType !== sap.firefly.HierarchyType.UNKNOWN)) {
							sb.append("[");
							sb.append(this.m_hierarchyType.getName());
							sb.append("]");
							if (this.m_hierarchyType.isLeveledHierarchy()) {
								sb.append("[Is Leveled Hierarchy]");
							}
						}
						if (this.supportsHierarchyLevels()) {
							levels = this.getHierarchyLevels();
							if ((levels !== null) && (levels.size() > 0)) {
								for (i = 0; i < levels.size(); i++) {
									level = levels.get(i);
									sb.appendNewLine();
									sb.append(level.toString());
								}
							}
						}
						return sb.toString();
					},
					getVersionDisplayKey : function() {
						return this.m_versionDisplayKey;
					},
					hasVersionDisplayKey : function() {
						return this.m_hasVersionDisplayKey;
					},
					setSupportsHierarchyLevels : function(
							supportsHierarchyLevels) {
						this.m_supportsHierarchyLevels = supportsHierarchyLevels;
					},
					supportsHierarchyLevels : function() {
						return this.m_supportsHierarchyLevels;
					},
					setHierarchyLevels : function(hierarchyLevels) {
						if (this.supportsHierarchyLevels() === false) {
							sap.firefly.XException
									.createUnsupportedOperationException();
						}
						this.m_hierarchyLevels = hierarchyLevels;
					},
					getHierarchyLevels : function() {
						if (this.supportsHierarchyLevels() === false) {
							sap.firefly.XException
									.createUnsupportedOperationException();
						}
						return this.m_hierarchyLevels;
					},
					setHierarchyType : function(hierarchyType) {
						this.m_hierarchyType = hierarchyType;
					},
					getHierarchyType : function() {
						return this.m_hierarchyType;
					}
				});
$Firefly.createClass("sap.firefly.HierarchyCatalogLevel", sap.firefly.XObject,
		{
			$statics : {
				createCatalogLevel : function() {
					return new sap.firefly.HierarchyCatalogLevel();
				},
				createCopy : function(item) {
					var copy;
					if (item === null) {
						return null;
					}
					copy = sap.firefly.HierarchyCatalogLevel
							.createCatalogLevel();
					copy.setLevel(item.getLevel());
					copy.setLevelName(item.getLevelName());
					copy.setLevelDescription(item.getLevelDescription());
					copy.setLevelUniqueName(item.getLevelUniqueName());
					copy.setLevelDimensionName(item.getLevelDimensionName());
					copy.setLevelType(item.getLevelType());
					return copy;
				}
			},
			m_level : 0,
			m_levelName : null,
			m_levelDescription : null,
			m_levelUniqueName : null,
			m_levelDimensionName : null,
			m_levelType : null,
			setLevel : function(level) {
				this.m_level = level;
			},
			releaseObject : function() {
				this.m_levelName = null;
				this.m_levelDescription = null;
				this.m_levelUniqueName = null;
				this.m_levelDimensionName = null;
				sap.firefly.HierarchyCatalogLevel.$superclass.releaseObject
						.call(this);
			},
			getLevel : function() {
				return this.m_level;
			},
			setLevelName : function(levelName) {
				this.m_levelName = levelName;
			},
			getLevelName : function() {
				return this.m_levelName;
			},
			setLevelDescription : function(levelDescription) {
				this.m_levelDescription = levelDescription;
			},
			getLevelDescription : function() {
				return this.m_levelDescription;
			},
			setLevelUniqueName : function(levelUniqueName) {
				this.m_levelUniqueName = levelUniqueName;
			},
			getLevelUniqueName : function() {
				return this.m_levelUniqueName;
			},
			setLevelDimensionName : function(levelDimensionName) {
				this.m_levelDimensionName = levelDimensionName;
			},
			getLevelDimensionName : function() {
				return this.m_levelDimensionName;
			},
			toString : function() {
				var sb = sap.firefly.XStringBuffer.create();
				sb.append("Level[");
				sb.appendInt(this.m_level);
				sb.append("]");
				sb.append(" Name[");
				sb.append(this.m_levelName);
				sb.append("]");
				sb.append(" Description[");
				sb.append(this.m_levelDescription);
				sb.append("]");
				sb.append(" UniqueName[");
				sb.append(this.m_levelUniqueName);
				sb.append("]");
				sb.append(" DimensionName[");
				sb.append(this.m_levelDimensionName);
				sb.append("]");
				return sb.toString();
			},
			getLevelType : function() {
				return this.m_levelType;
			},
			setLevelType : function(levelType) {
				this.m_levelType = levelType;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.HierarchyCatalogResult",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(resultSet, dimensionName) {
							var object = new sap.firefly.HierarchyCatalogResult();
							object.setup(resultSet, dimensionName);
							return object;
						},
						createFromDimensionMetadata : function(hierarchiesList,
								dimensionName) {
							var object = new sap.firefly.HierarchyCatalogResult();
							var i;
							var hierarchyStructure;
							var item;
							var hierarchyName;
							var hierarchyDescription;
							var version;
							var structure;
							var dateTo;
							var dateToString;
							var levels;
							var levelList;
							var levelIndex;
							var levelStructure;
							var catalogLevel;
							var level;
							var levelName;
							var levelCaption;
							var levelUniqueName;
							var levelDimensionName;
							var levelType;
							object.m_items = sap.firefly.XList.create();
							for (i = 0; i < sap.firefly.PrUtils.getListSize(
									hierarchiesList, 0); i++) {
								hierarchyStructure = sap.firefly.PrUtils
										.getStructureElement(hierarchiesList, i);
								item = sap.firefly.HierarchyCatalogItem
										.createCatalogItem();
								item.setDimensionName(dimensionName);
								hierarchyName = sap.firefly.PrUtils
										.getStringProperty(
												hierarchyStructure,
												sap.firefly.InAConstants.QY_NAME);
								if (hierarchyName !== null) {
									item.setHierarchyName(hierarchyName
											.getStringValue());
								}
								hierarchyDescription = sap.firefly.PrUtils
										.getStringProperty(
												hierarchyStructure,
												sap.firefly.InAConstants.QY_DESCRIPTION);
								if (hierarchyDescription !== null) {
									item
											.setHierarchyLongText(hierarchyDescription
													.getStringValue());
								}
								version = sap.firefly.PrUtils
										.getStringProperty(
												hierarchyStructure,
												sap.firefly.InAConstants.QY_VERSION);
								if (version !== null) {
									item.setVersionName(version
											.getStringValue());
								}
								structure = sap.firefly.PrUtils
										.getStringProperty(
												hierarchyStructure,
												sap.firefly.InAConstants.QY_STRUCTURE);
								if (structure !== null) {
									item
											.setHierarchyType(sap.firefly.HierarchyType
													.lookup(structure
															.getStringValue()));
								}
								dateTo = sap.firefly.PrUtils.getStringProperty(
										hierarchyStructure,
										sap.firefly.InAConstants.QY_DATE_TO);
								if (dateTo !== null) {
									dateToString = dateTo.getStringValue();
									if (sap.firefly.XStringUtils
											.isNullOrEmpty(dateToString) === false) {
										item
												.setDateTo(sap.firefly.XDate
														.createDateFromIsoFormat(dateToString));
									}
								}
								levels = sap.firefly.PrUtils.getListProperty(
										hierarchyStructure,
										sap.firefly.InAConstants.QY_LEVELS);
								if (levels !== null) {
									item.setSupportsHierarchyLevels(true);
									levelList = sap.firefly.XList.create();
									for (levelIndex = 0; levelIndex < sap.firefly.PrUtils
											.getListSize(levels, 0); levelIndex++) {
										levelStructure = sap.firefly.PrUtils
												.getStructureElement(levels,
														levelIndex);
										if (levelStructure === null) {
											continue;
										}
										catalogLevel = sap.firefly.HierarchyCatalogLevel
												.createCatalogLevel();
										level = sap.firefly.PrUtils
												.getIntegerValueProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_LEVEL,
														-1);
										if (level > -1) {
											catalogLevel.setLevel(level);
										}
										levelName = sap.firefly.PrUtils
												.getStringProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_LEVEL_NAME);
										if (levelName !== null) {
											catalogLevel.setLevelName(levelName
													.getStringValue());
										}
										levelCaption = sap.firefly.PrUtils
												.getStringProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_LEVEL_CAPTION);
										if (levelCaption !== null) {
											catalogLevel
													.setLevelDescription(levelCaption
															.getStringValue());
										}
										levelUniqueName = sap.firefly.PrUtils
												.getStringProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_LEVEL_UNIQUE_NAME);
										if (levelUniqueName !== null) {
											catalogLevel
													.setLevelUniqueName(levelUniqueName
															.getStringValue());
										}
										levelDimensionName = sap.firefly.PrUtils
												.getStringProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_DIMENSION_NAME);
										if (levelDimensionName !== null) {
											catalogLevel
													.setLevelDimensionName(levelDimensionName
															.getStringValue());
										}
										levelType = sap.firefly.PrUtils
												.getIntegerProperty(
														levelStructure,
														sap.firefly.InAConstants.QY_LEVEL_TYPE);
										if (levelType !== null) {
											catalogLevel
													.setLevelType(sap.firefly.QInAConverter
															.lookupHierarchyLevelType(levelType
																	.getIntegerValue()));
										}
										levelList.add(catalogLevel);
									}
									item.setHierarchyLevels(levelList);
								}
								object.m_items.add(item);
							}
							return object;
						}
					},
					m_items : null,
					releaseObject : function() {
						this.m_items = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_items);
						sap.firefly.HierarchyCatalogResult.$superclass.releaseObject
								.call(this);
					},
					setup : function(resultSet, dimensionName) {
						var systemDescription;
						this.m_items = sap.firefly.XList.create();
						systemDescription = resultSet.getQueryModel()
								.getQueryManager().getSystemDescription();
						if (systemDescription.getSystemType() === sap.firefly.SystemType.HANA) {
							this.setupHana(resultSet);
						} else {
							this.setupBW(resultSet, dimensionName);
						}
					},
					setupHana : function(resultSet) {
						var queryModel = resultSet.getQueryModel();
						var dimensionNameField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.HANA_D_DIMENSION)
								.getFieldByName("KeyDimension");
						var hierarchyNameField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.HANA_D_NAME)
								.getFieldByName("KeyName");
						var hierarchyDescriptionField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.HANA_D_DESCRIPTION)
								.getFieldByName("KeyDescription");
						var versionNameField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.HANA_D_VERSION)
								.getFieldByName("KeyVersion");
						var dataToField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.HANA_D_DATE_TO)
								.getFieldByName("KeyDateTo");
						var rowsAxis = resultSet.getRowsAxis();
						var tuplesCount = rowsAxis.getTuplesCount();
						var i;
						var tuple;
						var item;
						var dimensionName;
						var hierarchyName;
						var hierarchyDescription;
						var versionName;
						var dateToFieldString;
						for (i = 0; i < tuplesCount; i++) {
							tuple = rowsAxis.getTupleByIndex(i);
							item = sap.firefly.HierarchyCatalogItem
									.createCatalogItem();
							if (dimensionNameField !== null) {
								dimensionName = tuple
										.getStringValueByField(dimensionNameField);
								item.setDimensionName(dimensionName);
							}
							if (hierarchyNameField !== null) {
								hierarchyName = tuple
										.getStringValueByField(hierarchyNameField);
								item.setHierarchyName(hierarchyName);
							}
							if (hierarchyDescriptionField !== null) {
								hierarchyDescription = tuple
										.getStringValueByField(hierarchyDescriptionField);
								item.setHierarchyLongText(hierarchyDescription);
							}
							if (versionNameField !== null) {
								versionName = tuple
										.getStringValueByField(versionNameField);
								item.setVersionName(versionName);
							}
							if (dataToField !== null) {
								dateToFieldString = tuple
										.getStringValueByField(dataToField);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(dateToFieldString)) {
									item
											.setDateTo(sap.firefly.XDate
													.createDateFromIsoFormat(dateToFieldString));
								}
							}
							this.m_items.add(item);
						}
					},
					setupBW : function(resultSet, dimensionName) {
						var queryModel = resultSet.getQueryModel();
						var convenienceCommands = queryModel
								.getConvenienceCommands();
						var hierarchyNameField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.BW_D_NAME)
								.getFieldByName(
										sap.firefly.HierarchyCatalogManager.BW_A_NAME_KEY);
						var hierarchyShortTextField = null;
						var hierarchyMediumTextField;
						var hierarchyLongTextField;
						var versionDisplayKeyField;
						var versionNameField;
						var versionLongTextField;
						var dataToField;
						var dataFromField;
						var dateFromDim;
						var ownerField;
						var ownerDim;
						var idField;
						var idDim;
						var typeField;
						var typeDim;
						var objVersField;
						var objVersDim;
						var isRemoteField;
						var remoteDim;
						var rowsAxis;
						var tuplesCount;
						var i;
						var tuple;
						var item;
						var dateToFieldString;
						var dateFromFieldString;
						var isRemote;
						var isRemoteString;
						if (convenienceCommands
								.containsResultSetField(
										sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
										sap.firefly.HierarchyCatalogManager.BW_A_TEXT_SHORT_TEXT)) {
							hierarchyShortTextField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_SHORT_TEXT);
						}
						hierarchyMediumTextField = null;
						if (convenienceCommands
								.containsResultSetField(
										sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
										sap.firefly.HierarchyCatalogManager.BW_A_TEXT_MEDIUM_TEXT)) {
							hierarchyMediumTextField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_MEDIUM_TEXT);
						}
						hierarchyLongTextField = null;
						if (convenienceCommands
								.containsResultSetField(
										sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
										sap.firefly.HierarchyCatalogManager.BW_A_TEXT_LONG_TEXT)) {
							hierarchyLongTextField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_LONG_TEXT);
						}
						versionDisplayKeyField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION)
								.getFieldByName(
										sap.firefly.HierarchyCatalogManager.BW_A_VERSION_DISPLAY_KEY);
						versionNameField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION)
								.getFieldByName(
										sap.firefly.HierarchyCatalogManager.BW_A_VERSION_KEY);
						versionLongTextField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION)
								.getFieldByName(
										sap.firefly.HierarchyCatalogManager.BW_A_VERSION_LONG_TEXT);
						dataToField = queryModel
								.getDimensionByName(
										sap.firefly.HierarchyCatalogManager.BW_D_DATE_TO)
								.getFieldByName(
										sap.firefly.HierarchyCatalogManager.BW_A_DATE_TO_KEY);
						dataFromField = null;
						dateFromDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM);
						if (dateFromDim !== null) {
							dataFromField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_DATE_FROM_KEY);
						}
						ownerField = null;
						ownerDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_OWNER);
						if (ownerDim !== null) {
							ownerField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_OWNER)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_OWNER_KEY);
						}
						idField = null;
						idDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_HIEID);
						if (idDim !== null) {
							idField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_HIEID)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_HIEID_KEY);
						}
						typeField = null;
						typeDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_HIETYPE);
						if (typeDim !== null) {
							typeField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_HIETYPE)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_HIETYPE_KEY);
						}
						objVersField = null;
						objVersDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS);
						if (objVersDim !== null) {
							objVersField = queryModel
									.getDimensionByName(
											sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS)
									.getFieldByName(
											sap.firefly.HierarchyCatalogManager.BW_A_OBJVERS_KEY);
						}
						isRemoteField = null;
						remoteDim = queryModel
								.getDimensionByName(sap.firefly.HierarchyCatalogManager.BW_D_IS_REMOTE);
						if (remoteDim !== null) {
							isRemoteField = remoteDim
									.getFieldByName(sap.firefly.HierarchyCatalogManager.BW_A_IS_REMOTE_KEY);
						}
						rowsAxis = resultSet.getRowsAxis();
						tuplesCount = rowsAxis.getTuplesCount();
						for (i = 0; i < tuplesCount; i++) {
							tuple = rowsAxis.getTupleByIndex(i);
							item = sap.firefly.HierarchyCatalogItem
									.createCatalogItem();
							item.setDimensionName(dimensionName);
							if (hierarchyNameField !== null) {
								item
										.setHierarchyName(tuple
												.getStringValueByField(hierarchyNameField));
							}
							if (hierarchyShortTextField !== null) {
								item
										.setHierarchyShortText(tuple
												.getStringValueByField(hierarchyShortTextField));
							}
							if (hierarchyMediumTextField !== null) {
								item
										.setHierarchyMediumText(tuple
												.getStringValueByField(hierarchyMediumTextField));
							}
							if (hierarchyLongTextField !== null) {
								item
										.setHierarchyLongText(tuple
												.getStringValueByField(hierarchyLongTextField));
							}
							if (versionNameField !== null) {
								item
										.setVersionName(tuple
												.getStringValueByField(versionNameField));
							}
							if (versionDisplayKeyField !== null) {
								item
										.setVersionDisplayKey(tuple
												.getStringValueByField(versionDisplayKeyField));
							}
							if (versionLongTextField !== null) {
								item
										.setVersionDescription(tuple
												.getStringValueByField(versionLongTextField));
							}
							if (dataToField !== null) {
								dateToFieldString = tuple
										.getStringValueByField(dataToField);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(dateToFieldString)) {
									item
											.setDateTo(sap.firefly.XDate
													.createDateFromSAPFormat(dateToFieldString));
								}
							}
							if (dataFromField !== null) {
								dateFromFieldString = tuple
										.getStringValueByField(dataFromField);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(dateFromFieldString)) {
									item
											.setDateFrom(sap.firefly.XDate
													.createDateFromSAPFormat(dateFromFieldString));
								}
							}
							if (ownerField !== null) {
								item.setOwner(tuple
										.getStringValueByField(ownerField));
							}
							if (idField !== null) {
								item.setHierId(tuple
										.getStringValueByField(idField));
							}
							if (typeField !== null) {
								item.setHierType(tuple
										.getStringValueByField(typeField));
							}
							if (objVersField !== null) {
								item.setObjectVersion(tuple
										.getStringValueByField(objVersField));
							}
							if (isRemoteField !== null) {
								isRemote = false;
								if (isRemoteField.getValueType() === sap.firefly.XValueType.STRING) {
									isRemoteString = tuple
											.getStringValueByField(isRemoteField);
									if (sap.firefly.XString
											.isEqual(
													isRemoteString,
													sap.firefly.InAConstants.VA_ABAP_TRUE)) {
										isRemote = true;
									}
								} else {
									if (isRemoteField.getValueType() === sap.firefly.XValueType.BOOLEAN) {
										isRemote = tuple
												.getBooleanValueByField(isRemoteField);
									}
								}
								item.setIsRemote(isRemote);
							}
							this.m_items.add(item);
						}
					},
					getObjectsIterator : function() {
						return this.m_items.getIterator();
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var i;
						if (this.m_items !== null) {
							for (i = 0; i < this.m_items.size(); i++) {
								if (i > 0) {
									sb.appendNewLine();
								}
								sb.append(this.m_items.get(i).toString());
							}
						}
						return sb.toString();
					},
					clone : function() {
						var copy = new sap.firefly.HierarchyCatalogResult();
						var i;
						var item;
						copy.m_items = sap.firefly.XList.create();
						for (i = 0; i < this.m_items.size(); i++) {
							item = this.m_items.get(i);
							copy.m_items.add(item.clone());
						}
						return copy;
					}
				});
$Firefly.createClass("sap.firefly.QHierarchyLevel", sap.firefly.XObject,
		{
			$statics : {
				create : function(hierarchy, uniqueName, level) {
					var object = new sap.firefly.QHierarchyLevel();
					object.setupHierarchyLevel(hierarchy, uniqueName, level);
					return object;
				}
			},
			m_level : 0,
			m_levelText : null,
			m_levelName : null,
			m_levelUniqueName : null,
			m_hierarchy : null,
			m_levelType : null,
			m_levelDimensionName : null,
			setupHierarchyLevel : function(hierarchy, uniqueName, level) {
				this.m_level = level;
				this.m_levelName = uniqueName;
				this.m_levelUniqueName = uniqueName;
				this.m_hierarchy = sap.firefly.XWeakReferenceUtil
						.getWeakRef(hierarchy);
				if (level === 0) {
					this.m_levelType = sap.firefly.HierarchyLevelType.ALL;
				} else {
					this.m_levelType = sap.firefly.HierarchyLevelType.REGULAR;
				}
			},
			clone : function() {
				var clone = sap.firefly.QHierarchyLevel.create(this
						.getHierarchy(), this.getLevelUniqueName(), this
						.getLevelNumber());
				clone.setLevelName(this.getLevelName());
				clone.setLevelText(this.getLevelText());
				clone.setLevelType(this.getLevelType());
				clone.setLevelDimensionName(this.getLevelDimensionName());
				return clone;
			},
			releaseObject : function() {
				this.m_levelText = null;
				this.m_levelName = null;
				this.m_levelUniqueName = null;
				this.m_hierarchy = null;
				this.m_levelType = null;
				sap.firefly.QHierarchyLevel.$superclass.releaseObject
						.call(this);
			},
			toString : function() {
				var sb = sap.firefly.XStringBuffer.create();
				sb.append(this.m_levelUniqueName);
				sb.append(": ");
				sb.append(this.m_levelText);
				return sb.toString();
			},
			getLevelNumber : function() {
				return this.m_level;
			},
			getLevelText : function() {
				return this.m_levelText;
			},
			getHierarchy : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_hierarchy);
			},
			getLevelName : function() {
				return this.m_levelName;
			},
			getLevelUniqueName : function() {
				return this.m_levelUniqueName;
			},
			setLevelText : function(text) {
				this.m_levelText = text;
			},
			setLevelName : function(levelName) {
				this.m_levelName = levelName;
			},
			getLevelType : function() {
				return this.m_levelType;
			},
			setLevelType : function(levelType) {
				this.m_levelType = levelType;
			},
			getLevelDimensionName : function() {
				return this.m_levelDimensionName;
			},
			setLevelDimensionName : function(levelDimensionName) {
				this.m_levelDimensionName = levelDimensionName;
			}
		});
$Firefly.createClass("sap.firefly.CsContext", sap.firefly.XObject, {
	$statics : {
		create : function() {
			return new sap.firefly.CsContext();
		}
	},
	m_thisObject : null,
	m_returnObject : null,
	releaseObject : function() {
		this.m_thisObject = null;
		this.m_returnObject = null;
		sap.firefly.CsContext.$superclass.releaseObject.call(this);
	},
	getThis : function() {
		return this.m_thisObject;
	},
	setThis : function(thisObject) {
		this.m_thisObject = thisObject;
	},
	getReturnValue : function() {
		return this.m_returnObject;
	},
	setReturnValue : function(returnObject) {
		this.m_returnObject = returnObject;
	}
});
$Firefly
		.createClass(
				"sap.firefly.QFactoryConstantsMap",
				sap.firefly.XObject,
				{
					$statics : {
						m_map : null,
						getInAConstant : function(qFactoryConstants) {
							return sap.firefly.QFactoryConstantsMap.m_map
									.getByKey(qFactoryConstants);
						},
						staticSetup : function() {
							sap.firefly.QFactoryConstantsMap.m_map = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QFactoryConstantsMap.m_map.put(
									sap.firefly.QFactoryConstants.FIELD_NAME,
									sap.firefly.InAConstants.QY_FIELD_NAME);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFactoryImpl",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							var newObj = new sap.firefly.QFactoryImpl();
							return newObj;
						}
					},
					createMemberNavigation : function(memberFunction) {
						var memberNavigation = new sap.firefly.QMemberNavigation();
						memberNavigation.setMemberFunction(memberFunction);
						return memberNavigation;
					},
					createNavigationParameterWithStringConstant : function(
							constantValue) {
						var parameter = new sap.firefly.QMemberNavigationParameter();
						parameter.setConstantValue(sap.firefly.XStringValue
								.create(constantValue));
						return parameter;
					},
					createNavigationParameterWithIntegerConstant : function(
							constantValue) {
						var parameter = new sap.firefly.QMemberNavigationParameter();
						parameter.setConstantValue(sap.firefly.XIntegerValue
								.create(constantValue));
						return parameter;
					},
					createNavigationParameterWithLevelLiteral : function(
							levelValue) {
						var parameter = new sap.firefly.QMemberNavigationParameter();
						parameter.setLevelValue(sap.firefly.XStringValue
								.create(levelValue));
						return parameter;
					},
					createNavigationParameterWithLevelNumber : function(
							levelValue) {
						var parameter = new sap.firefly.QMemberNavigationParameter();
						parameter.setLevelValue(sap.firefly.XIntegerValue
								.create(levelValue));
						return parameter;
					},
					createNavigationParameterWithMemberName : function(fqnName) {
						var parameter = new sap.firefly.QMemberNavigationParameter();
						parameter.setMemberValue(fqnName);
						return parameter;
					},
					newDimensionElement : function(selectField, hierarchyName,
							value) {
						return sap.firefly.QSelectValue
								._createDimensionElement2(selectField
										.getContext(), selectField,
										hierarchyName, value);
					},
					getInAConstant : function(factoryConstant) {
						return sap.firefly.QFactoryConstantsMap
								.getInAConstant(factoryConstant);
					},
					newDataSource : function(context) {
						return sap.firefly.QDataSource
								.createWithContext(context);
					},
					newFormulaAttributeExt : function(context) {
						return sap.firefly.QFormulaItemAttribute._createMember(
								context, null);
					},
					newFormulaConstant : function() {
						return this.newFormulaConstantExt(null);
					},
					newFormulaConstantExt : function(context) {
						return sap.firefly.QFormulaItemConstant
								._createConstant(context, null);
					},
					newFormulaOperationExt : function(context) {
						return sap.firefly.QFormulaItemOperation
								._createOperation(context, null);
					},
					newFormulaFunction : function() {
						return this.newFormulaFunctionExt(null);
					},
					newFormulaFunctionExt : function(context) {
						return sap.firefly.QFormulaItemFunction
								._createFunction(context, null);
					},
					newFormulaMember : function() {
						return this.newFormulaMemberExt(null);
					},
					newFormulaMemberExt : function(context) {
						return sap.firefly.QFormulaItemMember._createMember(
								context, null);
					},
					newFilterAnd : function() {
						return this.newFilterAndExt(null);
					},
					newFilterAndExt : function(context) {
						return sap.firefly.QFilterAnd._create(context, null);
					},
					newFilterTupleExt : function(context) {
						return sap.firefly.QFilterTuple._create(context, null);
					},
					newFilterOr : function() {
						return this.newFilterOrExt(null);
					},
					newFilterOrExt : function(context) {
						return sap.firefly.QFilterOr._create(context, null);
					},
					newFilterNot : function() {
						return this.newFilterNotExt(null);
					},
					newFilterNotExt : function(context) {
						return sap.firefly.QFilterNot._create(context, null);
					},
					newFilterOperation : function() {
						return sap.firefly.QFilterOperation._create(null, null,
								null);
					},
					newFilterOperation2 : function(application,
							filterExpression) {
						return sap.firefly.QFilterOperation._create(null,
								filterExpression, null);
					},
					newFilterOperationExt : function(context, filterExpression) {
						return sap.firefly.QFilterOperation._create(context,
								filterExpression, null);
					},
					newFilterCartesianProduct : function() {
						return sap.firefly.QFilterCartesianProduct._create(
								null, null);
					},
					newFilterCartesianProduct2 : function(application,
							filterExpression) {
						var olapApplication = application.getOlapEnvironment();
						var context = olapApplication.getContext();
						return sap.firefly.QFilterCartesianProduct._create(
								context, filterExpression);
					},
					newFilterCartesianProductExt : function(context,
							filterExpression) {
						return sap.firefly.QFilterCartesianProduct._create(
								context, filterExpression);
					},
					newFilterCartesianList : function() {
						return sap.firefly.QFilterCartesianList._create(null,
								null, null, null);
					},
					newFilterCartesianList2 : function(application,
							filterExpression) {
						var olapApplication = application.getOlapEnvironment();
						var context = olapApplication.getContext();
						return sap.firefly.QFilterCartesianList._create(
								context, filterExpression, null, null);
					},
					newFilterCartesianListExt : function(context,
							filterExpression) {
						return sap.firefly.QFilterCartesianList._create(
								context, filterExpression, null, null);
					},
					newFilterCartesianElement : function() {
						return sap.firefly.QFilterOperation._create(null, null,
								null);
					},
					newFilterCartesianElementExt : function(context) {
						return sap.firefly.QFilterOperation._create(context,
								null, null);
					},
					newDrillPathElement : function() {
						return sap.firefly.QDrillPathElement._create(null);
					},
					newDrillPathElementExt : function(context) {
						return sap.firefly.QDrillPathElement._create(context);
					},
					createNewAggregationLevel : function(name) {
						var registrationService = sap.firefly.RegistrationService
								.getInstance();
						var factoryClass = registrationService
								.getFirstReference(
										sap.firefly.OlapApiModule.AGGREGATION_LEVEL_FACTORY,
										null);
						var factory;
						if (factoryClass === null) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						factory = factoryClass.newInstance(this);
						if (factory === null) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						return factory.createIAggregationLevel(name);
					},
					newAggregationLevelExt : function(context, name) {
						return this.createNewAggregationLevel(name);
					},
					newDrillManager : function(context) {
						var queryModel = null;
						if (context !== null) {
							queryModel = context.getQueryModel();
						}
						return sap.firefly.QDrillManager.create(context,
								queryModel);
					},
					newCatalogSpace : function(application) {
						return sap.firefly.OlapCatalogSpace.create(application);
					}
				});
$Firefly.createClass("sap.firefly.QImExFlag", sap.firefly.XObject, {
	$statics : {
		DEFAULT_ALL : 3,
		DATASOURCE : 1,
		VARIABLES : 2,
		RUN_AS_USER : 4,
		HIDE : 8,
		DRILL_CONTEXT : 16
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInADataSourceBlending",
				sap.firefly.XObject,
				{
					$statics : {
						exportDataSourceBlending : function(format,
								blendingDefinition) {
							var inaRequest = sap.firefly.PrStructure.create();
							var inaMetadata = inaRequest
									.setNewStructureByName(sap.firefly.InAConstants.QY_METADATA);
							var inaDataSource = inaMetadata
									.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
							var objectName;
							var idx;
							var inaBlendingSources;
							var inaBlendingMappings;
							inaDataSource.setStringByName(
									sap.firefly.InAConstants.QY_TYPE,
									sap.firefly.QueryManagerMode.BLENDING
											.getName());
							objectName = sap.firefly.XStringBuffer.create();
							for (idx = 0; idx < blendingDefinition.getSources()
									.size(); idx++) {
								objectName.append(blendingDefinition
										.getSources().get(idx)
										.getQueryAliasName());
							}
							inaDataSource.setStringByName(
									sap.firefly.InAConstants.QY_OBJECT_NAME,
									objectName.toString());
							inaBlendingSources = sap.firefly.QInADataSourceBlending
									.exportBlendingSources(format,
											blendingDefinition.getSources());
							inaDataSource.setElementByName(
									sap.firefly.InAConstants.QY_SOURCES,
									inaBlendingSources);
							inaBlendingMappings = sap.firefly.QInADataSourceBlending
									.exportBlendingMappings(blendingDefinition
											.getMappings());
							inaDataSource.setElementByName(
									sap.firefly.InAConstants.QY_MAPPINGS,
									inaBlendingMappings);
							return inaDataSource;
						},
						exportBlendingSources : function(format, sources) {
							var inaSources = sap.firefly.PrList.create();
							var sourceIterator = sources.getIterator();
							var blendingQueryManager = null;
							var source;
							var queryModel;
							var inaSource;
							var inaDefiningContext;
							var inaQuery;
							var sdBlendingHost;
							var sdRemote;
							var mappingRemoteHost;
							var dataSource;
							var inaResultSetFeatures;
							while (sourceIterator.hasNext()) {
								source = sourceIterator.next();
								queryModel = source.getQueryModel();
								if (queryModel === null) {
									return null;
								}
								inaSource = sap.firefly.PrStructure.create();
								inaSource.setStringByName(
										sap.firefly.InAConstants.QY_TYPE,
										sap.firefly.InAConstants.QY_QUERY);
								inaSource.setStringByName(
										sap.firefly.InAConstants.QY_ALIAS_NAME,
										source.getQueryAliasName());
								inaSource
										.setStringByName(
												sap.firefly.InAConstants.QY_OBJECT_NAME,
												source.getQueryAliasName());
								inaDefiningContext = inaSource
										.setNewStructureByName(sap.firefly.InAConstants.QY_DEFINING_CONTEXT);
								inaQuery = queryModel.serializeToElement(
										format, null).asStructure();
								if (blendingQueryManager === null) {
									blendingQueryManager = queryModel
											.getQueryManager();
								} else {
									if (source.isRemoteSource()) {
										sdBlendingHost = blendingQueryManager
												.getSystemDescription();
										sdRemote = queryModel.getQueryManager()
												.getSystemDescription();
										mappingRemoteHost = sdRemote
												.getSystemMapping(sdBlendingHost
														.getName());
										dataSource = sap.firefly.PrStructure
												.create();
										dataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_OBJECT_NAME,
														mappingRemoteHost
																.getDeserializeTable());
										dataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_SCHEMA_NAME,
														mappingRemoteHost
																.getDeserializeSchema());
										dataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														sap.firefly.InAConstants.VA_RS_FORMAT_SERIALIZED_DATA);
										dataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_INSTANCE_ID,
														queryModel
																.getDataSource()
																.getInstanceId());
										inaQuery
												.setElementByName(
														sap.firefly.InAConstants.QY_DATA_SOURCE,
														dataSource);
									}
								}
								inaResultSetFeatures = sap.firefly.QInADataSourceBlending
										.exportResultSetFeatures(queryModel);
								inaQuery
										.setElementByName(
												sap.firefly.InAConstants.QY_RS_FEATURE_REQUEST,
												inaResultSetFeatures);
								inaDefiningContext.setElementByName(
										sap.firefly.InAConstants.QY_DEFINITION,
										inaQuery);
								inaSources.add(inaSource);
							}
							sourceIterator.releaseObject();
							return inaSources;
						},
						exportResultSetFeatures : function(sourceQueryModel) {
							var options = sap.firefly.PrStructure.create();
							var queryManager;
							options
									.setBooleanByName(
											sap.firefly.InAConstants.QY_USE_DEFAULT_ATTRIBUTE_KEY,
											false);
							queryManager = sourceQueryModel.getQueryManager();
							if (queryManager.getMaxResultRecords() !== -1) {
								options
										.setLongByName(
												sap.firefly.InAConstants.QY_MAX_RESULT_RECORDS,
												queryManager
														.getMaxResultRecords());
							}
							queryManager.fillPaging(options);
							options.setStringByName(
									sap.firefly.InAConstants.QY_RESULT_FORMAT,
									sap.firefly.InAConstants.VA_RS_FORMAT_V2);
							options
									.setStringByName(
											sap.firefly.InAConstants.QY_RESULT_ENCODING,
											sap.firefly.InAConstants.VA_RS_ENCODING_NONE);
							return options;
						},
						exportDimensionMapping : function(dimensionMapping) {
							var inaMapping = sap.firefly.PrStructure.create();
							var definitionIterator;
							var inaDefinitions;
							var inaAttributeMappings;
							var attributeMappingIterator;
							var attributeMapping;
							var inaAttributeMapping;
							inaMapping.setStringByName(
									sap.firefly.InAConstants.QY_DIMENSION_NAME,
									dimensionMapping.getMemberName());
							inaMapping.setStringByName(
									sap.firefly.InAConstants.QY_LINK_TYPE,
									dimensionMapping.getLinkType().getName());
							if (dimensionMapping.isPreservingMembers()) {
								inaMapping
										.setBooleanByName(
												sap.firefly.InAConstants.QY_PRESERVE_MEMBERS,
												true);
							}
							if (!dimensionMapping.isReturningOriginKeys()) {
								inaMapping
										.setBooleanByName(
												sap.firefly.InAConstants.QY_RETURN_ORIGIN_KEYS,
												false);
							}
							definitionIterator = dimensionMapping
									.getMappingDefinitions().getIterator();
							inaDefinitions = sap.firefly.QInADataSourceBlending
									.exportMappingDefinitions(definitionIterator);
							definitionIterator.releaseObject();
							inaMapping.setElementByName(
									sap.firefly.InAConstants.QY_MAPPING,
									inaDefinitions);
							if (((dimensionMapping.getLinkType() === sap.firefly.BlendingLinkType.ALL_DATA) || (dimensionMapping
									.getLinkType() === sap.firefly.BlendingLinkType.NONE))
									&& dimensionMapping.getConstantMappings()
											.hasElements()) {
								sap.firefly.QInADataSourceBlending
										.exportConstantMapping(inaDefinitions,
												dimensionMapping
														.getConstantMappings()
														.getIterator());
							}
							inaAttributeMappings = sap.firefly.PrList.create();
							attributeMappingIterator = dimensionMapping
									.getAttributeMappings().getIterator();
							while (attributeMappingIterator.hasNext()) {
								attributeMapping = attributeMappingIterator
										.next();
								inaAttributeMapping = sap.firefly.QInADataSourceBlending
										.exportAttributeMapping(attributeMapping);
								inaAttributeMappings.add(inaAttributeMapping);
							}
							attributeMappingIterator.releaseObject();
							if (!inaAttributeMappings.isEmpty()) {
								inaMapping
										.setElementByName(
												sap.firefly.InAConstants.QY_ATTRIBUTE_MAPPINGS,
												inaAttributeMappings);
							}
							return inaMapping;
						},
						exportAttributeMapping : function(attributeMapping) {
							var inaAttributeMapping = sap.firefly.PrStructure
									.create();
							var mappingIterator;
							var inaMappings;
							inaAttributeMapping.setStringByName(
									sap.firefly.InAConstants.QY_ATTRIBUTE_NAME,
									attributeMapping.getAttributeName());
							inaAttributeMapping.setBooleanByName(
									sap.firefly.InAConstants.QY_IS_LINK_KEY,
									attributeMapping.isLinkKey());
							mappingIterator = attributeMapping
									.getAttributeMappingDefinitions()
									.getIterator();
							inaMappings = sap.firefly.QInADataSourceBlending
									.exportMappingDefinitions(mappingIterator);
							mappingIterator.releaseObject();
							inaAttributeMapping.setElementByName(
									sap.firefly.InAConstants.QY_MAPPING,
									inaMappings);
							return inaAttributeMapping;
						},
						exportConstantMapping : function(inaDefinitions,
								definitionIterator) {
							var constantMapping;
							var inaConstantMapping;
							var inaMappingDefinition;
							var inaMember;
							while (definitionIterator.hasNext()) {
								constantMapping = definitionIterator.next();
								inaConstantMapping = sap.firefly.PrStructure
										.create();
								inaConstantMapping.setStringByName(
										sap.firefly.InAConstants.QY_ALIAS_NAME,
										constantMapping.getQueryAliasName());
								inaMappingDefinition = inaConstantMapping
										.setNewStructureByName(sap.firefly.InAConstants.QY_MAPPING_DEFINITION);
								inaMember = inaMappingDefinition
										.setNewStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
								inaMember.setStringByName(
										sap.firefly.InAConstants.QY_VALUE,
										constantMapping.getMemberName());
								inaMember
										.setStringByName(
												sap.firefly.InAConstants.QY_VALUE_TYPE,
												sap.firefly.QInAConverter
														.lookupValueTypeInA(constantMapping
																.getValueType()));
								inaDefinitions.add(inaConstantMapping);
							}
						},
						exportMappingDefinitions : function(definitionIterator) {
							var inaDefinitions = sap.firefly.PrList.create();
							var definition;
							var inaDefinition;
							var inaMappingDefinition;
							var inaMember;
							while (definitionIterator.hasNext()) {
								definition = definitionIterator.next();
								inaDefinition = inaDefinitions
										.addNewStructure();
								inaDefinition.setStringByName(
										sap.firefly.InAConstants.QY_ALIAS_NAME,
										definition.getQueryAliasName());
								inaMappingDefinition = inaDefinition
										.setNewStructureByName(sap.firefly.InAConstants.QY_MAPPING_DEFINITION);
								inaMember = inaMappingDefinition
										.setNewStructureByName(sap.firefly.InAConstants.QY_MEMBER);
								inaMember.setStringByName(
										sap.firefly.InAConstants.QY_NAME,
										definition.getMemberName());
							}
							return inaDefinitions;
						},
						exportBlendingMappings : function(mappings) {
							var inaMappings = sap.firefly.PrList.create();
							var mappingIterator = mappings.getIterator();
							var mapping;
							var inaMapping;
							while (mappingIterator.hasNext()) {
								mapping = mappingIterator.next();
								inaMapping = sap.firefly.QInADataSourceBlending
										.exportDimensionMapping(mapping);
								inaMappings.add(inaMapping);
							}
							return inaMappings;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADataSourceExtDims",
				sap.firefly.XObject,
				{
					$statics : {
						importQd : function(importer, dataSource, inaDataSource) {
							var extendedDimensionsBase;
							var inaExtendedDimensions;
							var extDimSize;
							var i;
							var inaExtendedDimension;
							var name;
							var joinFieldName;
							var joinFieldNameInExtendedDim;
							var extendedDimension;
							var joinTypeValue;
							var joinType;
							var inaJoinParameters;
							var joinParameters;
							var joinParamSize;
							var j;
							var inaExternalDataSource;
							var externalDataSource;
							var type;
							var inaType;
							var renamingMode;
							if (importer.m_supportsExtendedDimensions) {
								extendedDimensionsBase = dataSource
										.getExtendedDimensionsBase();
								extendedDimensionsBase.clear();
								inaExtendedDimensions = inaDataSource
										.getListByName(sap.firefly.InAConstants.QY_EXTENDED_DIMENSIONS);
								if (inaExtendedDimensions !== null) {
									extDimSize = inaExtendedDimensions.size();
									for (i = 0; i < extDimSize; i++) {
										inaExtendedDimension = inaExtendedDimensions
												.getStructureByIndex(i);
										name = inaExtendedDimension
												.getStringByName(sap.firefly.InAConstants.QY_NAME);
										joinFieldName = inaExtendedDimension
												.getStringByName(sap.firefly.InAConstants.QY_JOIN_FIELD_NAME);
										joinFieldNameInExtendedDim = inaExtendedDimension
												.getStringByName(sap.firefly.InAConstants.QY_JOIN_FIELD_NAME_IN_EXTENDED_DIMENSION);
										extendedDimension = sap.firefly.QExtendedDimension
												.create(name, joinFieldName,
														joinFieldNameInExtendedDim);
										extendedDimension
												.setText(inaExtendedDimension
														.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
										joinTypeValue = inaExtendedDimension
												.getStringByName(sap.firefly.InAConstants.QY_JOIN_TYPE);
										joinType = sap.firefly.JoinType
												.lookup(joinTypeValue);
										extendedDimension.setJoinType(joinType);
										inaJoinParameters = inaExtendedDimension
												.getListByName(sap.firefly.InAConstants.QY_JOIN_PARAMETERS);
										if (inaJoinParameters !== null) {
											joinParameters = extendedDimension
													.getJoinParameters();
											joinParameters.clear();
											joinParamSize = inaJoinParameters
													.size();
											for (j = 0; j < joinParamSize; j++) {
												joinParameters
														.add(inaJoinParameters
																.getStringByIndex(j));
											}
										}
										inaExternalDataSource = inaExtendedDimension
												.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
										if (inaExternalDataSource !== null) {
											externalDataSource = sap.firefly.QFactory2
													.newDataSource();
											sap.firefly.QInADataSourceProperties
													.importQd(
															externalDataSource,
															inaExternalDataSource);
											inaType = inaExternalDataSource
													.getStringByName(sap.firefly.InAConstants.QY_TYPE);
											if (inaType === null) {
												type = sap.firefly.MetaObjectType.DBVIEW;
											} else {
												type = sap.firefly.MetaObjectType
														.lookup(sap.firefly.XString
																.convertToLowerCase(inaType));
											}
											externalDataSource.setType(type);
											extendedDimension
													.setDataSource(externalDataSource);
										}
										renamingMode = inaExtendedDimension
												.getStringByName(sap.firefly.InAConstants.QY_FIELD_RENAMING_MODE);
										if (renamingMode !== null) {
											extendedDimension
													.setRenamingMode(renamingMode);
										}
										extendedDimensionsBase
												.add(extendedDimension);
									}
								}
							}
						},
						exportQd : function(exporter, dataSource, inaDataSource) {
							var extendedDimensions = dataSource
									.getExtendedDimensions();
							var inaExtendedDimensions;
							var extDimIdx;
							var extDimension;
							var joinType;
							var dimensionType;
							var externalDataSource;
							var joinParameters;
							var inaExtendedDimension;
							var inaJoinParameters;
							var joinParamSize;
							var joinParamIdx;
							var inaExternalDataSource;
							var type;
							var queryManager;
							if (sap.firefly.XCollectionUtils
									.hasElements(extendedDimensions)) {
								inaExtendedDimensions = inaDataSource
										.setNewListByName(sap.firefly.InAConstants.QY_EXTENDED_DIMENSIONS);
								for (extDimIdx = 0; extDimIdx < extendedDimensions
										.size(); extDimIdx++) {
									extDimension = extendedDimensions
											.get(extDimIdx);
									joinType = extDimension.getJoinType();
									if (joinType === null) {
										exporter
												.addError(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														sap.firefly.XStringUtils
																.concatenate3(
																		"Extended dimension '",
																		extDimension
																				.getName(),
																		"' is missing a JoinType"));
										return;
									}
									dimensionType = extDimension
											.getDimensionType();
									if (dimensionType
											.isTypeOf(sap.firefly.DimensionType.GIS_DIMENSION)
											&& joinType
													.isTypeOf(sap.firefly.JoinType._TIME)) {
										exporter
												.addError(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														"Spatial extended dimensions must not have join type INNER");
										return;
									} else {
										if ((dimensionType
												.isTypeOf(sap.firefly.DimensionType.TIME) || dimensionType
												.isTypeOf(sap.firefly.DimensionType.DATE))
												&& joinType
														.isTypeOf(sap.firefly.JoinType._SPATIAL)) {
											exporter
													.addError(
															sap.firefly.ErrorCodes.INVALID_PARAMETER,
															"Time extended dimensions must not have spatial join type");
											return;
										}
									}
									externalDataSource = extDimension
											.getDataSource();
									if (externalDataSource === null) {
										exporter
												.addError(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														sap.firefly.XStringUtils
																.concatenate3(
																		"Extended dimension '",
																		extDimension
																				.getName(),
																		"' is missing its DataSource"));
										return;
									}
									joinParameters = extDimension
											.getJoinParameters();
									if ((joinType === sap.firefly.JoinType.WITHIN_DISTANCE)
											&& joinParameters.isEmpty()) {
										exporter
												.addError(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														sap.firefly.XStringUtils
																.concatenate3(
																		"Extended dimension '",
																		extDimension
																				.getName(),
																		"' of joinType 'WITHIN_DISTANCE' is expected to have the 2 parameters 'distance' and 'unit of measure' (in that order)"));
										return;
									}
									inaExtendedDimension = inaExtendedDimensions
											.addNewStructure();
									inaExtendedDimension.setStringByName(
											sap.firefly.InAConstants.QY_NAME,
											extDimension.getName());
									inaExtendedDimension
											.setStringByName(
													sap.firefly.InAConstants.QY_DESCRIPTION,
													extDimension.getText());
									inaExtendedDimension
											.setIntegerByName(
													sap.firefly.InAConstants.QY_DIMENSION_TYPE,
													sap.firefly.QInAConverter
															.lookupDimensionTypeInA(dimensionType));
									inaExtendedDimension
											.setStringByName(
													sap.firefly.InAConstants.QY_JOIN_FIELD_NAME,
													extDimension.getJoinField());
									inaExtendedDimension
											.setStringByName(
													sap.firefly.InAConstants.QY_JOIN_FIELD_NAME_IN_EXTENDED_DIMENSION,
													extDimension
															.getJoinFieldNameExternal());
									inaExtendedDimension
											.setStringByName(
													sap.firefly.InAConstants.QY_JOIN_TYPE,
													joinType.getName());
									if (joinParameters.hasElements()) {
										inaJoinParameters = inaExtendedDimension
												.setNewListByName(sap.firefly.InAConstants.QY_JOIN_PARAMETERS);
										joinParamSize = joinParameters.size();
										for (joinParamIdx = 0; joinParamIdx < joinParamSize; joinParamIdx++) {
											inaJoinParameters
													.addString(joinParameters
															.get(joinParamIdx));
										}
									}
									inaExternalDataSource = inaExtendedDimension
											.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
									sap.firefly.QInADataSourceProperties
											.exportQd(exporter,
													externalDataSource,
													inaExternalDataSource,
													false);
									type = externalDataSource.getType();
									if (type === null) {
										inaExternalDataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														sap.firefly.MetaObjectType.DBVIEW
																.getCamelCaseName());
									} else {
										inaExternalDataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														type.getCamelCaseName());
									}
									queryManager = dataSource.getQueryManager();
									if (queryManager
											.supportsAnalyticCapabilityActive(sap.firefly.InACapabilities.AV_EXTENDED_DIMENSION_CHANGE_DEFAULT_RENAMING_AND_DESCRIPTION)) {
										inaExtendedDimension
												.setStringByNameNotNull(
														sap.firefly.InAConstants.QY_FIELD_RENAMING_MODE,
														extDimension
																.getRenamingMode());
									}
								}
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADataSourceProperties",
				sap.firefly.XObject,
				{
					$statics : {
						importQd : function(dataSource, structure) {
							var name = structure
									.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME);
							var environmentName;
							var packageName;
							var schemaName;
							var aliasName;
							var dataArea;
							var runAsUser;
							var text;
							dataSource.setName(name);
							environmentName = structure
									.getStringByName(sap.firefly.InAConstants.QY_ENVIRONMENT);
							dataSource.setEnvironmentName(environmentName);
							packageName = structure
									.getStringByName(sap.firefly.InAConstants.QY_PACKAGE_NAME);
							dataSource.setPackageName(packageName);
							schemaName = structure
									.getStringByName(sap.firefly.InAConstants.QY_SCHEMA_NAME);
							dataSource.setSchemaName(schemaName);
							aliasName = structure
									.getStringByName(sap.firefly.InAConstants.QY_ALIAS_NAME);
							dataSource.setAlias(aliasName);
							dataArea = structure
									.getStringByName(sap.firefly.InAConstants.QY_DATA_AREA);
							dataSource.setDataArea(dataArea);
							runAsUser = structure
									.getStringByName(sap.firefly.InAConstants.QY_RUN_AS_USER);
							dataSource.setRunAsUser(runAsUser);
							text = structure
									.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
							dataSource.setText(text);
						},
						exportQd : function(exporter, dataSource,
								inaDataSource, withRunAsUser) {
							var dataArea;
							var rriName;
							sap.firefly.QInAExportUtil.setNonEmptyString(
									inaDataSource,
									sap.firefly.InAConstants.QY_OBJECT_NAME,
									dataSource.getObjectName());
							sap.firefly.QInAExportUtil.setNonEmptyString(
									inaDataSource,
									sap.firefly.InAConstants.QY_ENVIRONMENT,
									dataSource.getEnvironmentName());
							sap.firefly.QInAExportUtil.setNonEmptyString(
									inaDataSource,
									sap.firefly.InAConstants.QY_PACKAGE_NAME,
									dataSource.getPackageName());
							sap.firefly.QInAExportUtil.setNonEmptyString(
									inaDataSource,
									sap.firefly.InAConstants.QY_SCHEMA_NAME,
									dataSource.getSchemaName());
							sap.firefly.QInAExportUtil.setNonEmptyString(
									inaDataSource,
									sap.firefly.InAConstants.QY_ALIAS_NAME,
									dataSource.getAlias());
							dataArea = dataSource.getDataArea();
							if (sap.firefly.XString
									.isEqual(
											dataArea,
											sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT) === false) {
								sap.firefly.QInAExportUtil.setNonEmptyString(
										inaDataSource,
										sap.firefly.InAConstants.QY_DATA_AREA,
										dataArea);
							}
							if (withRunAsUser) {
								sap.firefly.QInAExportUtil
										.setNonEmptyString(
												inaDataSource,
												sap.firefly.InAConstants.QY_RUN_AS_USER,
												dataSource.getRunAsUser());
							}
							if ((exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY))
									|| exporter.m_mode.containsMetadata()) {
								sap.firefly.QInAExportUtil
										.setNonEmptyString(
												inaDataSource,
												sap.firefly.InAConstants.QY_DESCRIPTION,
												dataSource.getText());
							}
							if ((exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_DATA))
									|| (exporter.m_mode === sap.firefly.QModelFormat.INA_VALUE_HELP)) {
								sap.firefly.QInAExportUtil
										.setNonEmptyString(
												inaDataSource,
												sap.firefly.InAConstants.QY_INSTANCE_ID,
												dataSource.getInstanceId());
								rriName = dataSource.getRriName();
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(rriName)) {
									sap.firefly.QInAExportUtil
											.setNonEmptyString(inaDataSource,
													rriName, dataSource
															.getRriValue());
								}
							}
						}
					}
				});
$Firefly.createClass("sap.firefly.QInAComponent", sap.firefly.XObject,
		{
			getComponentType : function() {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			},
			m_minVersion : 0,
			m_maxVersion : 0,
			importComponent : function(importer, inaElement, modelComponent,
					parentComponent, context) {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			},
			exportComponent : function(exporter, modelComponent,
					inaParentStructure, flags) {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			},
			getModelFormat : function() {
				return null;
			},
			isMatching : function(version, inaImportElement) {
				if (this.m_minVersion === 0) {
					this.m_minVersion = this.getMinVersion();
					this.m_maxVersion = this.getMaxVersion();
				}
				return (this.m_minVersion <= version)
						&& (version <= this.m_maxVersion);
			},
			getMinVersion : function() {
				return sap.firefly.XVersion.MIN;
			},
			getMaxVersion : function() {
				return sap.firefly.XVersion.MAX;
			},
			getName : function() {
				return this.getComponentType().getName();
			},
			getTagName : function() {
				return null;
			},
			toString : function() {
				return this.getName();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAConverter",
				sap.firefly.XObject,
				{
					$statics : {
						s_lookupComparison : null,
						s_lookupComparisonIna : null,
						s_lookupPresentationType : null,
						s_lookupPresentationTypeIna : null,
						s_lookupInfoObjectType : null,
						s_lookupInfoObjectTypeIna : null,
						s_lookupVisibilityType : null,
						s_lookupVisibilityTypeIna : null,
						s_lookupReadMode : null,
						s_lookupReadModeIna : null,
						s_lookupEncoding : null,
						s_lookupSortType : null,
						s_lookupSortTypeIna : null,
						s_lookupAggregationType : null,
						s_lookupAggregationTypeIna : null,
						s_lookupComponentType : null,
						s_lookupComponentTypeIna : null,
						s_lookupValueType : null,
						staticSetup : function() {
							sap.firefly.QInAConverter.setupValueTypeMap();
							sap.firefly.QInAConverter.setupComparisonMapping();
							sap.firefly.QInAConverter
									.setupAggregationTypeMapping();
							sap.firefly.QInAConverter
									.setupPresentationMapping();
							sap.firefly.QInAConverter.s_lookupInfoObjectType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupInfoObjectTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_CHA,
											sap.firefly.InfoObjectType.CHA);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_KYF,
											sap.firefly.InfoObjectType.KYF);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_TIM,
											sap.firefly.InfoObjectType.TIM);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_UNI,
											sap.firefly.InfoObjectType.UNI);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_DPA,
											sap.firefly.InfoObjectType.DPA);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_ATR,
											sap.firefly.InfoObjectType.ATR);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_MTA,
											sap.firefly.InfoObjectType.MTA);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_XXL,
											sap.firefly.InfoObjectType.XXL);
							sap.firefly.QInAConverter
									.mapInfoObjectType(
											sap.firefly.InAConstants.VA_INFO_OBJ_TYPE_ALL,
											sap.firefly.InfoObjectType.ALL);
							sap.firefly.QInAConverter.setupVisibilityMapping();
							sap.firefly.QInAConverter.setupReadmodeMapping();
							sap.firefly.QInAConverter.s_lookupEncoding = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter
									.mapEncoding(
											sap.firefly.InAConstants.VA_RS_ENCODING_NONE,
											sap.firefly.ResultSetEncoding.NONE);
							sap.firefly.QInAConverter
									.mapEncoding(
											sap.firefly.InAConstants.VA_RS_ENCODING_AUTO,
											sap.firefly.ResultSetEncoding.AUTO);
							sap.firefly.QInAConverter
									.mapEncoding(
											sap.firefly.InAConstants.VA_RS_ENCODING_DELTA_RUN_LENGTH,
											sap.firefly.ResultSetEncoding.DELTA_RUN_LENGTH);
							sap.firefly.QInAConverter.setupSortingMapping();
							sap.firefly.QInAConverter
									.setupComponentTypeMapping();
						},
						setupComparisonMapping : function() {
							sap.firefly.QInAConverter.s_lookupComparison = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupComparisonIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_EQUAL,
											sap.firefly.ComparisonOperator.EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_EQUAL2,
											sap.firefly.ComparisonOperator.EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_EQUAL3,
											sap.firefly.ComparisonOperator.EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_EQUAL4,
											sap.firefly.ComparisonOperator.EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NOT_EQUAL,
											sap.firefly.ComparisonOperator.NOT_EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_GREATER,
											sap.firefly.ComparisonOperator.GREATER_THAN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_LESS,
											sap.firefly.ComparisonOperator.LESS_THAN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_GREATER_EQUAL,
											sap.firefly.ComparisonOperator.GREATER_EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_LESS_EQUAL,
											sap.firefly.ComparisonOperator.LESS_EQUAL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_LIKE,
											sap.firefly.ComparisonOperator.LIKE);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_MATCH,
											sap.firefly.ComparisonOperator.MATCH);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NOT_MATCH,
											sap.firefly.ComparisonOperator.NOT_MATCH);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_IS_NULL,
											sap.firefly.ComparisonOperator.IS_NULL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_IS_NULL2,
											sap.firefly.ComparisonOperator.IS_NULL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_BETWEEN,
											sap.firefly.ComparisonOperator.BETWEEN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NOT_BETWEEN,
											sap.firefly.ComparisonOperator.NOT_BETWEEN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN,
											sap.firefly.ComparisonOperator.NOT_BETWEEN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_BETWEEN_EXCLUDING,
											sap.firefly.ComparisonOperator.BETWEEN_EXCLUDING);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NOT_BETWEEN_EXCLUDING,
											sap.firefly.ComparisonOperator.NOT_BETWEEN_EXCLUDING);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_FUZZY,
											sap.firefly.ComparisonOperator.FUZZY);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SEARCH,
											sap.firefly.ComparisonOperator.SEARCH);
							sap.firefly.QInAConverter.mapComparison(
									sap.firefly.InAConstants.VA_COMPARISON_ALL,
									sap.firefly.ComparisonOperator.ALL);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_AGGREGATED,
											sap.firefly.ComparisonOperator.AGGREGATED);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_NON_AGGREGATED,
											sap.firefly.ComparisonOperator.NON_AGGREGATED);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_CONTAINS,
											sap.firefly.SpatialComparisonOperator.CONTAINS);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_COVERS,
											sap.firefly.SpatialComparisonOperator.COVERS);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_CROSSES,
											sap.firefly.SpatialComparisonOperator.CROSSES);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_DISJOINT,
											sap.firefly.SpatialComparisonOperator.DISJOINT);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_OVERLAPS,
											sap.firefly.SpatialComparisonOperator.OVERLAPS);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_TOUCHES,
											sap.firefly.SpatialComparisonOperator.TOUCHES);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_INTERSECTS_RECT,
											sap.firefly.SpatialComparisonOperator.INTERSECTS_RECT);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_INTERSECT_RECT,
											sap.firefly.SpatialComparisonOperator.INTERSECTS_RECT);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_INTERSECTS,
											sap.firefly.SpatialComparisonOperator.INTERSECTS);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_WITHIN,
											sap.firefly.SpatialComparisonOperator.WITHIN);
							sap.firefly.QInAConverter
									.mapComparison(
											sap.firefly.InAConstants.VA_COMPARISON_SPATIAL_WITHIN_DISTANCE,
											sap.firefly.SpatialComparisonOperator.WITHIN_DISTANCE);
						},
						setupAggregationTypeMapping : function() {
							sap.firefly.QInAConverter.s_lookupAggregationType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupAggregationTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_AVERAGE,
									sap.firefly.AggregationType.AVERAGE);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_COUNT,
									sap.firefly.AggregationType.COUNT);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_COUNT_DISTINCT,
											sap.firefly.AggregationType.COUNT_DISTINCT);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_FIRST,
									sap.firefly.AggregationType.FIRST);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_LAST,
									sap.firefly.AggregationType.LAST);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_MAX,
									sap.firefly.AggregationType.MAX);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_MIN,
									sap.firefly.AggregationType.MIN);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_RANK,
									sap.firefly.AggregationType.RANK);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_RANK_DENSE,
									sap.firefly.AggregationType.RANK_DENSE);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_RANK_OLYMPIC,
											sap.firefly.AggregationType.RANK_OLYMPIC);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_RANK_PERCENT,
											sap.firefly.AggregationType.RANK_PERCENT);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_RANK_PERCENTILE,
											sap.firefly.AggregationType.RANK_PERCENTILE);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_STANDARD_DEVIATION,
											sap.firefly.AggregationType.STANDARD_DEVIATION);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_SUM,
									sap.firefly.AggregationType.SUM);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_VARIANCE,
									sap.firefly.AggregationType.VARIANCE);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_NOP_NULL,
									sap.firefly.AggregationType.NOP_NULL);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_NOP_NULL_ZERO,
											sap.firefly.AggregationType.NOP_NULL_ZERO);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_AVERAGE_NULL,
											sap.firefly.AggregationType.AVERAGE_NULL);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_AVERAGE_NULL_ZERO,
											sap.firefly.AggregationType.AVERAGE_NULL_ZERO);
							sap.firefly.QInAConverter.mapAggregationType(
									sap.firefly.InAConstants.VA_AGG_COUNT_NULL,
									sap.firefly.AggregationType.COUNT_NULL);
							sap.firefly.QInAConverter
									.mapAggregationType(
											sap.firefly.InAConstants.VA_AGG_COUNT_NULL_ZERO,
											sap.firefly.AggregationType.COUNT_NULL_ZERO);
						},
						setupPresentationMapping : function() {
							sap.firefly.QInAConverter.s_lookupPresentationType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupPresentationTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_UNDEFINED,
											sap.firefly.PresentationType.UNDEFINED);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_KEY,
											sap.firefly.PresentationType.KEY);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_KEY_NOT_COMPOUND,
											sap.firefly.PresentationType.KEY_NOT_COMPOUND);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_DISPLAY_KEY,
											sap.firefly.PresentationType.DISPLAY_KEY);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_DISPLAY_KEY_MIXED_COMPOUNDMENT,
											sap.firefly.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_DISPLAY_KEY_NOT_COMPOUND,
											sap.firefly.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_ID,
											sap.firefly.PresentationType.ID);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_TEXT,
											sap.firefly.PresentationType.TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_SHORT_TEXT,
											sap.firefly.PresentationType.SHORT_TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_MEDIUM_TEXT,
											sap.firefly.PresentationType.MEDIUM_TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_LONG_TEXT,
											sap.firefly.PresentationType.LONG_TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_XL_LONG_TEXT,
											sap.firefly.PresentationType.XL_LONG_TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_HIERARCHY_KEY,
											sap.firefly.PresentationType.HIERARCHY_KEY);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_HIERARCHY_TEXT,
											sap.firefly.PresentationType.HIERARCHY_TEXT);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_HIERARCHY_DISPLAY_KEY,
											sap.firefly.PresentationType.HIERARCHY_DISPLAY_KEY);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_WHY_FOUND,
											sap.firefly.PresentationType.WHY_FOUND);
							sap.firefly.QInAConverter
									.mapPresentationType(
											sap.firefly.InAConstants.VA_PRESENTATION_TYPE_RELATED_ACTIONS,
											sap.firefly.PresentationType.RELATED_ACTIONS);
						},
						setupVisibilityMapping : function() {
							sap.firefly.QInAConverter.s_lookupVisibilityType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupVisibilityTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_CENTRAL,
											sap.firefly.VisibilityType.CENTRAL);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_CENTRAL_NOT_VISIBLE,
											sap.firefly.VisibilityType.CENTRAL_NOT_VISIBLE);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_CENTRAL_DISPLAY_ONLY,
											sap.firefly.VisibilityType.CENTRAL_DISPLAY_ONLY);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_CENTRAL_CHANGE_TO_EXISTING,
											sap.firefly.VisibilityType.CENTRAL_CHANGE_TO_EXISTING);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_CENTRAL_ADD_NEW,
											sap.firefly.VisibilityType.CENTRAL_ADD_NEW);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_LOCAL,
											sap.firefly.VisibilityType.LOCAL);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_LOCAL_NOT_VISIBLE,
											sap.firefly.VisibilityType.LOCAL_NOT_VISIBLE);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_LOCAL_DISPLAY_ONLY,
											sap.firefly.VisibilityType.LOCAL_DISPLAY_ONLY);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_LOCAL_CHANGE_TO_EXISTING,
											sap.firefly.VisibilityType.LOCAL_CHANGE_TO_EXISTING);
							sap.firefly.QInAConverter
									.mapVisibilityType(
											sap.firefly.InAConstants.VA_VISIBILITY_TYPE_LOCAL_ADD_NEW,
											sap.firefly.VisibilityType.LOCAL_ADD_NEW);
						},
						setupReadmodeMapping : function() {
							sap.firefly.QInAConverter.s_lookupReadMode = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupReadModeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_DEFAULT,
									sap.firefly.QMemberReadMode.DEFAULT_VALUE);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_UNDEFINED,
									sap.firefly.QMemberReadMode.UNDEFINED);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_NONE,
									sap.firefly.QMemberReadMode.UNDEFINED);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_MASTER,
									sap.firefly.QMemberReadMode.MASTER);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_MASTER_AND_SPACE,
											sap.firefly.QMemberReadMode.MASTER_AND_SPACE);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_MASTER_AND_SPACE_AND_STATE,
											sap.firefly.QMemberReadMode.MASTER_AND_SPACE_AND_STATE);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_REL_MASTER,
									sap.firefly.QMemberReadMode.REL_MASTER);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_REL_MASTER_AND_SPACE,
											sap.firefly.QMemberReadMode.REL_MASTER_AND_SPACE);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_REL_MASTER_AND_SPACE_AND_STATE,
											sap.firefly.QMemberReadMode.REL_MASTER_AND_SPACE_AND_STATE);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_BOOKED,
									sap.firefly.QMemberReadMode.BOOKED);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_BOOKED_AND_SPACE,
											sap.firefly.QMemberReadMode.BOOKED_AND_SPACE);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_BOOKED_AND_SPACE_AND_STATE,
											sap.firefly.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE);
							sap.firefly.QInAConverter.mapReadMode(
									sap.firefly.InAConstants.VA_RM_REL_BOOKED,
									sap.firefly.QMemberReadMode.REL_BOOKED);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_REL_BOOKED_AND_SPACE,
											sap.firefly.QMemberReadMode.REL_BOOKED_AND_SPACE);
							sap.firefly.QInAConverter
									.mapReadMode(
											sap.firefly.InAConstants.VA_RM_REL_BOOKED_AND_SPACE_AND_STATE,
											sap.firefly.QMemberReadMode.REL_BOOKED_AND_SPACE_AND_STATE);
						},
						setupSortingMapping : function() {
							sap.firefly.QInAConverter.s_lookupSortType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupSortTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_MEMBER,
											sap.firefly.SortType.MEMBER_KEY);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_MEMBER_KEY,
											sap.firefly.SortType.MEMBER_KEY);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_MEMBER_TEXT,
											sap.firefly.SortType.MEMBER_TEXT);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_FIELD,
											sap.firefly.SortType.FIELD);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_SELECTION,
											sap.firefly.SortType.FILTER);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_FILTER,
											sap.firefly.SortType.FILTER);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_DATA_CELL,
											sap.firefly.SortType.DATA_CELL_VALUE);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_HIERARCHY,
											sap.firefly.SortType.HIERARCHY);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_MEASURE,
											sap.firefly.SortType.MEASURE);
							sap.firefly.QInAConverter
									.mapSortType(
											sap.firefly.InAConstants.VA_SORT_TYPE_COMPLEX,
											sap.firefly.SortType.COMPLEX);
						},
						setupComponentTypeMapping : function() {
							sap.firefly.QInAConverter.s_lookupComponentType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupComponentTypeIna = sap.firefly.XHashMapOfStringByString
									.create();
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_AXIS,
									sap.firefly.OlapComponentType.AXIS);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_CONDITION,
											sap.firefly.OlapComponentType.CONDITION);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_QUERY_MODEL,
											sap.firefly.OlapComponentType.QUERY_MODEL);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_FILTER,
									sap.firefly.OlapComponentType.SELECTOR);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_FILTER_EXPRESSION,
											sap.firefly.OlapComponentType.FILTER_EXPRESSION);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_FILTER_CARTESIAN_PRODUCT,
											sap.firefly.FilterComponentType.CARTESIAN_PRODUCT);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_FILTER_CARTESIAN_LIST,
											sap.firefly.FilterComponentType.CARTESIAN_LIST);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_FILTER_OPERATION,
											sap.firefly.FilterComponentType.OPERATION);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_FILTER_ALGEBRA,
											sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_MEMBER_RESTRICTED,
											sap.firefly.MemberType.RESTRICTED_MEASURE);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_DIMENSION_MEMBER_VARIABLE,
											sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_HIERARCHY_NODE_VARIABLE,
											sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_CELL_VALUE_OPERAND,
											sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_SORTING,
									sap.firefly.OlapComponentType.SORT_MANAGER);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_SORT_OPERATION,
											sap.firefly.OlapComponentType.GENERIC_SORTING);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_TOTALS,
									sap.firefly.OlapComponentType.TOTALS);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_FIELD,
									sap.firefly.OlapComponentType.FIELD);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_DIMENSION_MGR,
											sap.firefly.OlapComponentType.DIMENSION_MANAGER);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_DIMENSION,
											sap.firefly.OlapComponentType.ABSTRACT_DIMENSION);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_BASIC_MEASURE,
											sap.firefly.MemberType.BASIC_MEASURE);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_FORMULA,
									sap.firefly.MemberType.FORMULA);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.VA_CTYPE_MEMBERS,
									sap.firefly.OlapComponentType.MEMBERS);
							sap.firefly.QInAConverter
									.mapComponentType(
											sap.firefly.InAConstants.VA_CTYPE_DRILL_MANAGER,
											sap.firefly.OlapComponentType.DRILL_MANAGER);
							sap.firefly.QInAConverter.mapComponentType(
									sap.firefly.InAConstants.QY_CODE_TUPLE,
									sap.firefly.FilterComponentType.TUPLE);
						},
						setupValueTypeMap : function() {
							sap.firefly.QInAConverter.s_lookupValueType = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_STRING,
											sap.firefly.XValueType.STRING);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_NUMC,
									sap.firefly.XValueType.NUMC);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_DOUBLE,
											sap.firefly.XValueType.DOUBLE);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_LONG,
									sap.firefly.XValueType.LONG);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_INT,
									sap.firefly.XValueType.INTEGER);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_BOOL,
									sap.firefly.XValueType.BOOLEAN);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_AMOUNT,
											sap.firefly.XValueType.AMOUNT);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_DATE,
									sap.firefly.XValueType.DATE);
							sap.firefly.QInAConverter.s_lookupValueType.put(
									sap.firefly.InAConstants.VA_DATA_TYPE_TIME,
									sap.firefly.XValueType.TIME);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_TIMESTAMP,
											sap.firefly.XValueType.DATE_TIME);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_TIMESPAN,
											sap.firefly.XValueType.TIMESPAN);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_PROPERTIES,
											sap.firefly.XValueType.PROPERTIES);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_STRUCTURE,
											sap.firefly.XValueType.STRUCTURE);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_STRUCTURE_LIST,
											sap.firefly.XValueType.STRUCTURE_LIST);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_POINT,
											sap.firefly.XValueType.POINT);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_GEOMETRY,
											sap.firefly.XValueType.POLYGON);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_LINE_STRING,
											sap.firefly.XValueType.LINE_STRING);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_LANGUAGE,
											sap.firefly.XValueType.LANGUAGE);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_DECIMAL_FLOAT,
											sap.firefly.XValueType.DECIMAL_FLOAT);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_VARIABLE,
											sap.firefly.XValueType.VARIABLE);
							sap.firefly.QInAConverter.s_lookupValueType
									.put(
											sap.firefly.InAConstants.VA_DATA_TYPE_CURRENT_MEMBER,
											sap.firefly.XValueType.CURRENT_MEMBER);
						},
						mapAggregationType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupAggregationType
									.put(inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupAggregationTypeIna
									.put(ffConstant.getName(), inaConstant);
						},
						mapComponentType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupComponentType
									.put(inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupComponentTypeIna
									.put(ffConstant.getName(), inaConstant);
						},
						mapSortType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupSortType.put(
									inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupSortTypeIna.put(
									ffConstant.getName(), inaConstant);
						},
						mapEncoding : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupEncoding.put(
									inaConstant, ffConstant);
						},
						mapComparison : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupComparison.put(
									inaConstant, ffConstant);
							if (sap.firefly.QInAConverter.s_lookupComparisonIna
									.containsKey(ffConstant.getName()) === false) {
								sap.firefly.QInAConverter.s_lookupComparisonIna
										.put(ffConstant.getName(), inaConstant);
							}
						},
						mapPresentationType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupPresentationType
									.put(inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupPresentationTypeIna
									.put(ffConstant.getName(), inaConstant);
						},
						mapInfoObjectType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupInfoObjectType
									.put(inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupInfoObjectTypeIna
									.put(ffConstant.getName(), inaConstant);
						},
						mapVisibilityType : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupVisibilityType
									.put(inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupVisibilityTypeIna
									.put(ffConstant.getName(), inaConstant);
						},
						mapReadMode : function(inaConstant, ffConstant) {
							sap.firefly.QInAConverter.s_lookupReadMode.put(
									inaConstant, ffConstant);
							sap.firefly.QInAConverter.s_lookupReadModeIna.put(
									ffConstant.getName(), inaConstant);
						},
						lookupMeasureStructureMemberTypeIna : function(
								memberType) {
							if (memberType
									.isEqualTo(sap.firefly.MemberType.RESTRICTED_MEASURE)) {
								return sap.firefly.InAConstants.QY_SELECTION_MEASURE;
							}
							if (memberType
									.isEqualTo(sap.firefly.MemberType.FORMULA)) {
								return sap.firefly.InAConstants.QY_FORMULA_MEASURE;
							}
							return sap.firefly.InAConstants.QY_MEASURE;
						},
						lookupAggregationTypeInA : function(ffConstant) {
							if (ffConstant === null) {
								return null;
							}
							return sap.firefly.QInAConverter.s_lookupAggregationTypeIna
									.getByKey(ffConstant.getName());
						},
						lookupAggregationType : function(inaConstant) {
							if (inaConstant === null) {
								return null;
							}
							return sap.firefly.QInAConverter.s_lookupAggregationType
									.getByKey(inaConstant);
						},
						lookupAggregationType2 : function(inaAggregationType) {
							if (inaAggregationType === 1) {
								return sap.firefly.AggregationType.SUM;
							}
							if (inaAggregationType === 2) {
								return sap.firefly.AggregationType.COUNT;
							}
							if (inaAggregationType === 3) {
								return sap.firefly.AggregationType.MIN;
							}
							if (inaAggregationType === 4) {
								return sap.firefly.AggregationType.MAX;
							}
							if (inaAggregationType === 5) {
								return sap.firefly.AggregationType.AVERAGE;
							}
							if (inaAggregationType === 6) {
								return sap.firefly.AggregationType.COUNT_DISTINCT;
							}
							if (inaAggregationType === 7) {
								return sap.firefly.AggregationType.LAST;
							}
							if (inaAggregationType === 8) {
								return sap.firefly.AggregationType.FIRST;
							}
							if (inaAggregationType === 9) {
								return sap.firefly.AggregationType.VARIANCE;
							}
							if (inaAggregationType === 10) {
								return sap.firefly.AggregationType.STANDARD_DEVIATION;
							}
							if (inaAggregationType === 11) {
								return sap.firefly.AggregationType.NOP_NULL;
							}
							if (inaAggregationType === 12) {
								return sap.firefly.AggregationType.NOP_NULL_ZERO;
							}
							return null;
						},
						lookupComparisonInA : function(ffConstant) {
							if (ffConstant === null) {
								return null;
							}
							return sap.firefly.QInAConverter.s_lookupComparisonIna
									.getByKey(ffConstant.getName());
						},
						lookupComparison : function(inaConstant) {
							return sap.firefly.QInAConverter.s_lookupComparison
									.getByKey(inaConstant);
						},
						lookupPresentationType : function(inaConstant) {
							var ffConstant = sap.firefly.QInAConverter.s_lookupPresentationType
									.getByKey(inaConstant);
							if (ffConstant === null) {
								ffConstant = sap.firefly.PresentationType.VALUE;
							}
							return ffConstant;
						},
						lookupPresentationTypeInA : function(ffConstant) {
							return sap.firefly.QInAConverter.s_lookupPresentationTypeIna
									.getByKey(ffConstant.getName());
						},
						lookupInfoObjectType : function(inaConstant) {
							return sap.firefly.QInAConverter.s_lookupInfoObjectType
									.getByKey(inaConstant);
						},
						lookupInfoObjectTypeInA : function(ffConstant) {
							return sap.firefly.QInAConverter.s_lookupInfoObjectTypeIna
									.getByKey(ffConstant.getName());
						},
						lookupVisibilityType : function(inaConstant) {
							return sap.firefly.QInAConverter.s_lookupVisibilityType
									.getByKey(inaConstant);
						},
						lookupVisibilityTypeInA : function(ffConstant) {
							return sap.firefly.QInAConverter.s_lookupVisibilityTypeIna
									.getByKey(ffConstant.getName());
						},
						lookupSortDirectionInA : function(sortDirection) {
							if (sortDirection === sap.firefly.XSortDirection.ASCENDING) {
								return sap.firefly.InAConstants.VA_SORTING_ASCENDING;
							}
							if (sortDirection === sap.firefly.XSortDirection.DESCENDING) {
								return sap.firefly.InAConstants.VA_SORTING_DESCENDING;
							}
							if (sortDirection === sap.firefly.XSortDirection.NONE) {
								return sap.firefly.InAConstants.VA_SORTING_NONE;
							}
							return sap.firefly.InAConstants.VA_SORTING_DEFAULT;
						},
						lookupSortDirectionInA2 : function(sortDirection) {
							if (sortDirection === sap.firefly.XSortDirection.ASCENDING) {
								return sap.firefly.InAConstants.VA_DIRECTION_ASCENDING;
							}
							if (sortDirection === sap.firefly.XSortDirection.DESCENDING) {
								return sap.firefly.InAConstants.VA_DIRECTION_DESCENDING;
							}
							return sap.firefly.InAConstants.VA_DIRECTION_NONE;
						},
						lookupSortDirection : function(inaSortDirection) {
							if (inaSortDirection === sap.firefly.InAConstants.VA_SORTING_ASCENDING) {
								return sap.firefly.XSortDirection.ASCENDING;
							}
							if (inaSortDirection === sap.firefly.InAConstants.VA_SORTING_DESCENDING) {
								return sap.firefly.XSortDirection.DESCENDING;
							}
							if (inaSortDirection === sap.firefly.InAConstants.VA_SORTING_NONE) {
								return sap.firefly.XSortDirection.NONE;
							}
							return sap.firefly.XSortDirection.DEFAULT_VALUE;
						},
						lookupSortDirection2 : function(inaSortDirection) {
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.VA_DIRECTION_ASCENDING,
											inaSortDirection)) {
								return sap.firefly.XSortDirection.ASCENDING;
							}
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.VA_DIRECTION_DESCENDING,
											inaSortDirection)) {
								return sap.firefly.XSortDirection.DESCENDING;
							}
							return sap.firefly.XSortDirection.NONE;
						},
						lookupDimensionType : function(inaDimType) {
							if ((inaDimType < 1)
									|| (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_NON_STRUCT_C)) {
								return sap.firefly.DimensionType.DIMENSION;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_TIME) {
								return sap.firefly.DimensionType.TIME;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_MEASURE_STRUCT) {
								return sap.firefly.DimensionType.MEASURE_STRUCTURE;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_CURRENCY) {
								return sap.firefly.DimensionType.CURRENCY;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_UNIT) {
								return sap.firefly.DimensionType.UNIT;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_SECONDARY_STRUCT) {
								return sap.firefly.DimensionType.SECONDARY_STRUCTURE;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_DATE) {
								return sap.firefly.DimensionType.DATE;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_HIERARCHY_VERSION) {
								return sap.firefly.DimensionType.HIERARCHY_VERSION;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_HIERARCHY_NAME) {
								return sap.firefly.DimensionType.HIERARCHY_NAME;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_GEO) {
								return sap.firefly.DimensionType.GIS_DIMENSION;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_VERSION) {
								return sap.firefly.DimensionType.VERSION;
							}
							if (inaDimType === sap.firefly.InAConstants.VA_DIMENSION_TYPE_ACCOUNTS) {
								return sap.firefly.DimensionType.ACCOUNT;
							}
							throw sap.firefly.XException
									.createIllegalStateException("Unknown dimension type");
						},
						lookupDimensionTypeInA : function(dimType) {
							if ((dimType === sap.firefly.DimensionType.DIMENSION)
									|| (dimType === sap.firefly.DimensionType.CALCULATED_DIMENSION)) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_NON_STRUCT_C;
							}
							if (dimType === sap.firefly.DimensionType.TIME) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_TIME;
							}
							if (dimType === sap.firefly.DimensionType.DATE) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_DATE;
							}
							if (dimType === sap.firefly.DimensionType.HIERARCHY_VERSION) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_HIERARCHY_VERSION;
							}
							if (dimType === sap.firefly.DimensionType.MEASURE_STRUCTURE) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_MEASURE_STRUCT;
							}
							if (dimType === sap.firefly.DimensionType.SECONDARY_STRUCTURE) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_SECONDARY_STRUCT;
							}
							if (dimType === sap.firefly.DimensionType.CURRENCY) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_CURRENCY;
							}
							if (dimType === sap.firefly.DimensionType.UNIT) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_UNIT;
							}
							if (dimType === sap.firefly.DimensionType.HIERARCHY_NAME) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_HIERARCHY_NAME;
							}
							if (dimType === sap.firefly.DimensionType.ACCOUNT) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_ACCOUNTS;
							}
							if (dimType === sap.firefly.DimensionType.VERSION) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_VERSION;
							}
							if (dimType === sap.firefly.DimensionType.GIS_DIMENSION) {
								return sap.firefly.InAConstants.VA_DIMENSION_TYPE_GEO;
							}
							throw sap.firefly.XException
									.createIllegalStateException("Unknown dimension type");
						},
						lookupResultSetState : function(inaResultSetState) {
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_DATA_AVAILABLE) {
								return sap.firefly.ResultSetState.DATA_AVAILABLE;
							}
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_NO_DATA_AVAILABLE_A) {
								return sap.firefly.ResultSetState.NO_DATA_AVAILABLE;
							}
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_NO_DATA_AVAILABLE_B) {
								return sap.firefly.ResultSetState.NO_DATA_AVAILABLE;
							}
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_LIMIT_EXCEEDED) {
								return sap.firefly.ResultSetState.SIZE_LIMIT_EXCEEDED;
							}
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_SUCCESSFUL_PERSISTED) {
								return sap.firefly.ResultSetState.SUCCESSFUL_PERSISTED;
							}
							if (inaResultSetState === sap.firefly.InAConstants.VA_RESULT_SET_STATE_EMPTY_JSON) {
								return sap.firefly.ResultSetState.EMPTY_JSON;
							}
							return sap.firefly.ResultSetState.ERROR;
						},
						lookupReadModeInA : function(readMode) {
							return sap.firefly.QInAConverter.s_lookupReadModeIna
									.getByKey(readMode.getName());
						},
						lookupReadMode : function(readMode) {
							return sap.firefly.QInAConverter.s_lookupReadMode
									.getByKey(readMode);
						},
						lookupDrillState : function(drillState) {
							if (drillState === sap.firefly.InAConstants.VA_DRILL_STATE_COLLAPSED) {
								return sap.firefly.DrillState.COLLAPSED;
							}
							if (drillState === sap.firefly.InAConstants.VA_DRILL_STATE_EXPANDED) {
								return sap.firefly.DrillState.EXPANDED;
							}
							if (drillState === sap.firefly.InAConstants.VA_DRILL_STATE_LEAF) {
								return sap.firefly.DrillState.LEAF;
							}
							return null;
						},
						lookupDrillStateOp : function(drillState) {
							if (sap.firefly.XString
									.isEqual(
											drillState,
											sap.firefly.InAConstants.VA_DRILL_STATE_OP_COLLAPSED)) {
								return sap.firefly.DrillState.COLLAPSED;
							}
							if (sap.firefly.XString
									.isEqual(
											drillState,
											sap.firefly.InAConstants.VA_DRILL_STATE_OP_EXPANDED)) {
								return sap.firefly.DrillState.EXPANDED;
							}
							return null;
						},
						lookupDrillStateInA : function(drillState) {
							if (drillState === sap.firefly.DrillState.COLLAPSED) {
								return sap.firefly.InAConstants.VA_DRILL_STATE_OP_COLLAPSED;
							}
							if (drillState === sap.firefly.DrillState.EXPANDED) {
								return sap.firefly.InAConstants.VA_DRILL_STATE_OP_EXPANDED;
							}
							return null;
						},
						lookupEncoding : function(encoding) {
							return sap.firefly.QInAConverter.s_lookupEncoding
									.getByKey(encoding);
						},
						lookupHierarchyLevelTypeIna : function(
								hierarchyLevelType) {
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.ALL) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_ALL;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_YEAR) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_YEAR;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_HALF_YEAR) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_HALFYEAR;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_QUARTER) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_QUARTER;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_MONTH) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_MONTH;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_WEEK) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_WEEK;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_DAY) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_DAY;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_HOUR) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_HOUR;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_MINUTE) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_MINUTES;
							}
							if (hierarchyLevelType === sap.firefly.HierarchyLevelType.TIME_SECOND) {
								return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_SECONDS;
							}
							return sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_REGULAR;
						},
						lookupHierarchyLevelType : function(intType) {
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_ALL) {
								return sap.firefly.HierarchyLevelType.ALL;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_YEAR) {
								return sap.firefly.HierarchyLevelType.TIME_YEAR;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_HALFYEAR) {
								return sap.firefly.HierarchyLevelType.TIME_HALF_YEAR;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_QUARTER) {
								return sap.firefly.HierarchyLevelType.TIME_QUARTER;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_MONTH) {
								return sap.firefly.HierarchyLevelType.TIME_MONTH;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_WEEK) {
								return sap.firefly.HierarchyLevelType.TIME_WEEK;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_DAY) {
								return sap.firefly.HierarchyLevelType.TIME_DAY;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_HOUR) {
								return sap.firefly.HierarchyLevelType.TIME_HOUR;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_MINUTES) {
								return sap.firefly.HierarchyLevelType.TIME_MINUTE;
							}
							if (intType === sap.firefly.InAConstants.VA_HIERARCHY_LEVEL_TYPE_TIME_SECONDS) {
								return sap.firefly.HierarchyLevelType.TIME_SECOND;
							}
							return sap.firefly.HierarchyLevelType.REGULAR;
						},
						lookupException : function(inaException) {
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_NORMAL) {
								return sap.firefly.ValueException.NORMAL;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_NULL) {
								return sap.firefly.ValueException.NULL_VALUE;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_ZERO) {
								return sap.firefly.ValueException.ZERO;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_UNDEFINED) {
								return sap.firefly.ValueException.UNDEFINED;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_OVERFLOW) {
								return sap.firefly.ValueException.OVERFLOW;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_NO_PRESENTATION) {
								return sap.firefly.ValueException.NO_PRESENTATION;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_DIFF0) {
								return sap.firefly.ValueException.DIFF0;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_ERROR) {
								return sap.firefly.ValueException.ERROR;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_NO_AUTHORITY) {
								return sap.firefly.ValueException.NO_AUTHORITY;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_MIXED_CURRENCIES_OR_UNITS) {
								return sap.firefly.ValueException.MIXED_CURRENCIES_OR_UNITS;
							}
							if (inaException === sap.firefly.InAConstants.VA_EXCEPTION_UNDEFINED_NOP) {
								return sap.firefly.ValueException.UNDEFINED_NOP;
							}
							return sap.firefly.ValueException.ERROR;
						},
						lookupSingleValueCalculation : function(inaType) {
							if (sap.firefly.XString.isEqual(inaType, " ")) {
								return sap.firefly.SingleValueCalculation.NOT_DEFINED;
							}
							if (sap.firefly.XString.isEqual(inaType, "1")) {
								return sap.firefly.SingleValueCalculation.SUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "2")) {
								return sap.firefly.SingleValueCalculation.MAXIMUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "3")) {
								return sap.firefly.SingleValueCalculation.MINIMUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "4")) {
								return sap.firefly.SingleValueCalculation.COUNTER_FOR_ALL_DETAILED_VALUES;
							}
							if (sap.firefly.XString.isEqual(inaType, "5")) {
								return sap.firefly.SingleValueCalculation.COUNTER_FOR_ALL_DETAILED_VALUES_NZ_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "6")) {
								return sap.firefly.SingleValueCalculation.AVERAGE;
							}
							if (sap.firefly.XString.isEqual(inaType, "7")) {
								return sap.firefly.SingleValueCalculation.AVERAGE_DETAILED_VALUES_NOT_ZERO_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "0")) {
								return sap.firefly.SingleValueCalculation.HIDE;
							}
							if (sap.firefly.XString.isEqual(inaType, "O")) {
								return sap.firefly.SingleValueCalculation.OLYMPIC_RANK_NUMBER;
							}
							if (sap.firefly.XString.isEqual(inaType, "B")) {
								return sap.firefly.SingleValueCalculation.MOVING_MIN_VALUE;
							}
							if (sap.firefly.XString.isEqual(inaType, "C")) {
								return sap.firefly.SingleValueCalculation.NORMALIZED_NEXT_GROUP_LEVEL_RESULT;
							}
							if (sap.firefly.XString.isEqual(inaType, "D")) {
								return sap.firefly.SingleValueCalculation.MAX_VALUE_NOT_ZERO_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "E")) {
								return sap.firefly.SingleValueCalculation.MINIMUM_VALUES_NOT_ZERO_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "G")) {
								return sap.firefly.SingleValueCalculation.NORMALIZED_OVERALL_RESULT;
							}
							if (sap.firefly.XString.isEqual(inaType, "R")) {
								return sap.firefly.SingleValueCalculation.NORMALIZED_UNRESTRICTED_OVERALL_RESULT;
							}
							if (sap.firefly.XString.isEqual(inaType, "S")) {
								return sap.firefly.SingleValueCalculation.RANK_NUMBER;
							}
							return null;
						},
						lookupResultCalculation : function(inaType) {
							if (sap.firefly.XString.isEqual(inaType, "00")) {
								return sap.firefly.ResultCalculation.NOT_DEFINED;
							}
							if (sap.firefly.XString.isEqual(inaType, "01")) {
								return sap.firefly.ResultCalculation.SUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "02")) {
								return sap.firefly.ResultCalculation.MAXIMUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "03")) {
								return sap.firefly.ResultCalculation.MINIMUM;
							}
							if (sap.firefly.XString.isEqual(inaType, "04")) {
								return sap.firefly.ResultCalculation.COUNTER_FOR_ALL_DETAILED_VALUES;
							}
							if (sap.firefly.XString.isEqual(inaType, "05")) {
								return sap.firefly.ResultCalculation.COUNTER_FOR_ALL_DETAILED_VALUES_NZ_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "06")) {
								return sap.firefly.ResultCalculation.AVERAGE;
							}
							if (sap.firefly.XString.isEqual(inaType, "07")) {
								return sap.firefly.ResultCalculation.AVERAGE_DETAILED_VALUES_NOT_ZERO_NULL_ERROR;
							}
							if (sap.firefly.XString.isEqual(inaType, "08")) {
								return sap.firefly.ResultCalculation.STANDARD_DEVIATION;
							}
							if (sap.firefly.XString.isEqual(inaType, "09")) {
								return sap.firefly.ResultCalculation.VARIANCE;
							}
							if (sap.firefly.XString.isEqual(inaType, "11")) {
								return sap.firefly.ResultCalculation.FIRST_VALUE;
							}
							if (sap.firefly.XString.isEqual(inaType, "12")) {
								return sap.firefly.ResultCalculation.LAST_VALUE;
							}
							if (sap.firefly.XString.isEqual(inaType, "13")) {
								return sap.firefly.ResultCalculation.SUMMATION_OF_ROUNDED_VALUES;
							}
							if (sap.firefly.XString.isEqual(inaType, "14")) {
								return sap.firefly.ResultCalculation.HIDE;
							}
							return null;
						},
						lookupMemberType : function(inaType) {
							if (inaType === 1) {
								return sap.firefly.MemberType.RESULT;
							}
							if (inaType === 2) {
								return sap.firefly.MemberType.CONDITION_RESULT;
							}
							if (inaType === 3) {
								return sap.firefly.MemberType.CONDITION_OTHERS_RESULT;
							}
							return sap.firefly.MemberType.MEMBER;
						},
						lookupMeasureStructureMemberType : function(
								inaMemberType) {
							if (sap.firefly.XString.isEqual(inaMemberType,
									sap.firefly.InAConstants.QY_MEASURE)) {
								return sap.firefly.MemberType.MEASURE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaMemberType,
											sap.firefly.InAConstants.QY_SELECTION_MEASURE)) {
								return sap.firefly.MemberType.RESTRICTED_MEASURE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaMemberType,
											sap.firefly.InAConstants.QY_FORMULA_MEASURE)) {
								return sap.firefly.MemberType.FORMULA;
							}
							return null;
						},
						lookupValueTypeByInt : function(cellValueType) {
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DOUBLE) {
								return sap.firefly.XValueType.DOUBLE;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_PERCENT) {
								return sap.firefly.XValueType.PERCENT;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DATE) {
								return sap.firefly.XValueType.DATE;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_TIME) {
								return sap.firefly.XValueType.TIME;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DATE_TIME) {
								return sap.firefly.XValueType.DATE_TIME;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_STRING) {
								return sap.firefly.XValueType.STRING;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_AMOUNT) {
								return sap.firefly.XValueType.AMOUNT;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_QUANTITY) {
								return sap.firefly.XValueType.QUANTITY;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_PRICE) {
								return sap.firefly.XValueType.PRICE;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DIMENSION_MEMBER) {
								return sap.firefly.XValueType.DIMENSION_MEMBER;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_INTEGER) {
								return sap.firefly.XValueType.INTEGER;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DEC_FLOAT) {
								return sap.firefly.XValueType.DECIMAL_FLOAT;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_TIMESTAMP) {
								return sap.firefly.XValueType.DATE_TIME;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_BOOL) {
								return sap.firefly.XValueType.BOOLEAN;
							}
							if (cellValueType === sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_GEOMETRY) {
								return sap.firefly.XValueType.POLYGON;
							}
							return sap.firefly.XValueType.DOUBLE;
						},
						lookupIntByValueType : function(valueType) {
							if (valueType === sap.firefly.XValueType.DOUBLE) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DOUBLE;
							}
							if (valueType === sap.firefly.XValueType.PERCENT) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_PERCENT;
							}
							if (valueType === sap.firefly.XValueType.DATE) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DATE;
							}
							if (valueType === sap.firefly.XValueType.TIME) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_TIME;
							}
							if (valueType === sap.firefly.XValueType.DATE_TIME) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DATE_TIME;
							}
							if (valueType === sap.firefly.XValueType.STRING) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_STRING;
							}
							if (valueType === sap.firefly.XValueType.AMOUNT) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_AMOUNT;
							}
							if (valueType === sap.firefly.XValueType.QUANTITY) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_QUANTITY;
							}
							if (valueType === sap.firefly.XValueType.PRICE) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_PRICE;
							}
							if (valueType === sap.firefly.XValueType.DIMENSION_MEMBER) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DIMENSION_MEMBER;
							}
							if (valueType === sap.firefly.XValueType.INTEGER) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_INTEGER;
							}
							if (valueType === sap.firefly.XValueType.DECIMAL_FLOAT) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DEC_FLOAT;
							}
							if (valueType === sap.firefly.XValueType.DATE_TIME) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_TIMESTAMP;
							}
							if (valueType === sap.firefly.XValueType.BOOLEAN) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_BOOL;
							}
							if (valueType === sap.firefly.XValueType.POLYGON) {
								return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_GEOMETRY;
							}
							return sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DOUBLE;
						},
						lookupValueTypeInA : function(dataType) {
							if (dataType === sap.firefly.XValueType.STRING) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_STRING;
							}
							if (dataType === sap.firefly.XValueType.NUMC) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_NUMC;
							}
							if (dataType === sap.firefly.XValueType.DOUBLE) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_DOUBLE;
							}
							if (dataType === sap.firefly.XValueType.DECIMAL_FLOAT) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_DECIMAL_FLOAT;
							}
							if (dataType === sap.firefly.XValueType.LONG) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_LONG;
							}
							if (dataType === sap.firefly.XValueType.INTEGER) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_INT;
							}
							if (dataType === sap.firefly.XValueType.BOOLEAN) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_BOOL;
							}
							if (dataType === sap.firefly.XValueType.DATE) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_DATE;
							}
							if (dataType === sap.firefly.XValueType.TIME) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_TIME;
							}
							if (dataType === sap.firefly.XValueType.DATE_TIME) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_TIMESTAMP;
							}
							if (dataType === sap.firefly.XValueType.TIMESPAN) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_TIMESPAN;
							}
							if (dataType === sap.firefly.XValueType.PROPERTIES) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_PROPERTIES;
							}
							if (dataType === sap.firefly.XValueType.STRUCTURE) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_STRUCTURE;
							}
							if (dataType === sap.firefly.XValueType.STRUCTURE_LIST) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_STRUCTURE_LIST;
							}
							if (dataType === sap.firefly.XValueType.POINT) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_POINT;
							}
							if (dataType === sap.firefly.XValueType.POLYGON) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_GEOMETRY;
							}
							if (dataType === sap.firefly.XValueType.LINE_STRING) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_LINE_STRING;
							}
							if (dataType === sap.firefly.XValueType.VARIABLE) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_VARIABLE;
							}
							if (dataType === sap.firefly.XValueType.CURRENT_MEMBER) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_CURRENT_MEMBER;
							}
							if (dataType === sap.firefly.XValueType.LANGUAGE) {
								return sap.firefly.InAConstants.VA_DATA_TYPE_LANGUAGE;
							}
							return null;
						},
						lookupValueType : function(dataType) {
							var valueType = sap.firefly.QInAConverter.s_lookupValueType
									.getByKey(dataType);
							if (valueType === null) {
								return sap.firefly.XValueType.UNSUPPORTED;
							}
							return valueType;
						},
						lookupAlignment : function(inaAlignment) {
							if (sap.firefly.XString
									.isEqual(
											inaAlignment,
											sap.firefly.InAConstants.VA_RS_ALIGNMENT_TOP)) {
								return sap.firefly.ResultAlignment.TOP;
							}
							if (sap.firefly.XString
									.isEqual(
											inaAlignment,
											sap.firefly.InAConstants.VA_RS_ALIGNMENT_BOTTOM)) {
								return sap.firefly.ResultAlignment.BOTTOM;
							}
							if (sap.firefly.XString
									.isEqual(
											inaAlignment,
											sap.firefly.InAConstants.VA_RS_ALIGNMENT_TOP_BOTTOM)) {
								return sap.firefly.ResultAlignment.TOPBOTTOM;
							}
							if (sap.firefly.XString
									.isEqual(
											inaAlignment,
											sap.firefly.InAConstants.VA_RS_ALIGNMENT_STRUCTURE)) {
								return sap.firefly.ResultAlignment.STRUCTURE;
							}
							return sap.firefly.ResultAlignment.NONE;
						},
						lookupAlignmentInA : function(alignment) {
							if (alignment === sap.firefly.ResultAlignment.TOP) {
								return sap.firefly.InAConstants.VA_RS_ALIGNMENT_TOP;
							}
							if (alignment === sap.firefly.ResultAlignment.BOTTOM) {
								return sap.firefly.InAConstants.VA_RS_ALIGNMENT_BOTTOM;
							}
							if (alignment === sap.firefly.ResultAlignment.TOPBOTTOM) {
								return sap.firefly.InAConstants.VA_RS_ALIGNMENT_TOP_BOTTOM;
							}
							if (alignment === sap.firefly.ResultAlignment.STRUCTURE) {
								return sap.firefly.InAConstants.VA_RS_ALIGNMENT_STRUCTURE;
							}
							return sap.firefly.InAConstants.VA_RS_ALIGNMENT_NONE;
						},
						lookupReordering : function(inaReordering) {
							if (sap.firefly.XString
									.isEqual(
											inaReordering,
											sap.firefly.InAConstants.VA_REORDERING_FULL)) {
								return sap.firefly.ReorderingCapability.FULL;
							}
							if (sap.firefly.XString
									.isEqual(
											inaReordering,
											sap.firefly.InAConstants.VA_REORDERING_RESTRICTED)) {
								return sap.firefly.ReorderingCapability.RESTRICTED;
							}
							return sap.firefly.ReorderingCapability.NONE;
						},
						lookupReorderingInA : function(reorderingCapability) {
							if (reorderingCapability === sap.firefly.ReorderingCapability.FULL) {
								return sap.firefly.InAConstants.VA_REORDERING_FULL;
							}
							if (reorderingCapability === sap.firefly.ReorderingCapability.RESTRICTED) {
								return sap.firefly.InAConstants.VA_REORDERING_RESTRICTED;
							}
							return sap.firefly.InAConstants.VA_REORDERING_NONE;
						},
						lookupAxisType : function(inaAxisType) {
							if (sap.firefly.XString.isEqual(inaAxisType,
									sap.firefly.InAConstants.VA_AXIS_COLS)) {
								return sap.firefly.AxisType.COLUMNS;
							}
							if (sap.firefly.XString.isEqual(inaAxisType,
									sap.firefly.InAConstants.VA_AXIS_ROWS)) {
								return sap.firefly.AxisType.ROWS;
							}
							if (sap.firefly.XString.isEqual(inaAxisType,
									sap.firefly.InAConstants.VA_AXIS_NONE)
									|| sap.firefly.XString
											.isEqual(
													inaAxisType,
													sap.firefly.InAConstants.VA_AXIS_FREE)) {
								return sap.firefly.AxisType.FREE;
							}
							if (sap.firefly.XString.isEqual(inaAxisType,
									sap.firefly.InAConstants.VA_AXIS_DYNAMIC)) {
								return sap.firefly.AxisType.DYNAMIC;
							}
							if (sap.firefly.XString.isEqual(inaAxisType,
									sap.firefly.InAConstants.VA_AXIS_FILTER)) {
								return sap.firefly.AxisType.FILTER;
							}
							if (sap.firefly.XString
									.isEqual(
											inaAxisType,
											sap.firefly.InAConstants.VA_AXIS_REPOSITORY)
									|| sap.firefly.XString
											.isEqual(
													inaAxisType,
													sap.firefly.InAConstants.VA_AXIS_TECHNICAL)) {
								return sap.firefly.AxisType.REPOSITORY;
							}
							return sap.firefly.AxisType.FREE;
						},
						lookupAxisTypeInA : function(axisType) {
							if (axisType === sap.firefly.AxisType.COLUMNS) {
								return sap.firefly.InAConstants.VA_AXIS_COLS;
							}
							if (axisType === sap.firefly.AxisType.ROWS) {
								return sap.firefly.InAConstants.VA_AXIS_ROWS;
							}
							if (axisType === sap.firefly.AxisType.FREE) {
								return sap.firefly.InAConstants.VA_AXIS_NONE;
							}
							if (axisType === sap.firefly.AxisType.DYNAMIC) {
								return sap.firefly.InAConstants.VA_AXIS_DYNAMIC;
							}
							if (axisType === sap.firefly.AxisType.FILTER) {
								return sap.firefly.InAConstants.VA_AXIS_FILTER;
							}
							if (axisType === sap.firefly.AxisType.REPOSITORY) {
								return sap.firefly.InAConstants.VA_AXIS_REPOSITORY;
							}
							return null;
						},
						lookupAxisTypeInt : function(inaAxisType) {
							if (inaAxisType === 1) {
								return sap.firefly.AxisType.ROWS;
							}
							if (inaAxisType === 2) {
								return sap.firefly.AxisType.COLUMNS;
							}
							return sap.firefly.AxisType.FREE;
						},
						lookupAxisTypeInAInt : function(axisType) {
							if (axisType === sap.firefly.AxisType.ROWS) {
								return 1;
							}
							if (axisType === sap.firefly.AxisType.COLUMNS) {
								return 2;
							}
							if (axisType === sap.firefly.AxisType.FREE) {
								return 3;
							}
							return 0;
						},
						lookupSuppressionType : function(suppressionTypeInA) {
							if (suppressionTypeInA === sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_TOTAL_IS_ZERO) {
								return sap.firefly.ZeroSuppressionType.TOTAL_IS_ZERO;
							}
							if (suppressionTypeInA === sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_ALL_CELLS_ARE_ZERO) {
								return sap.firefly.ZeroSuppressionType.ALL_CELLS_ARE_ZERO;
							}
							return sap.firefly.ZeroSuppressionType.NONE;
						},
						lookupSuppressionTypeInA : function(suppressionType) {
							if (suppressionType === sap.firefly.ZeroSuppressionType.TOTAL_IS_ZERO) {
								return sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_TOTAL_IS_ZERO;
							}
							if (suppressionType === sap.firefly.ZeroSuppressionType.ALL_CELLS_ARE_ZERO) {
								return sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_ALL_CELLS_ARE_ZERO;
							}
							return sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_NONE;
						},
						lookupFieldLayoutType : function(inaFieldLayoutType) {
							if (sap.firefly.XString
									.isEqual(
											inaFieldLayoutType,
											sap.firefly.InAConstants.VA_FIELD_LAYOUT_TYPE_ATTRIBUTE_BASED)) {
								return sap.firefly.FieldLayoutType.ATTRIBUTE_BASED;
							}
							if (sap.firefly.XString
									.isEqual(
											inaFieldLayoutType,
											sap.firefly.InAConstants.VA_FIELD_LAYOUT_TYPE_ATTRIBUTES_AND_PRESENTATIONS)) {
								return sap.firefly.FieldLayoutType.ATTRIBUTES_AND_PRESENTATIONS;
							}
							return sap.firefly.FieldLayoutType.FIELD_BASED;
						},
						lookupFieldLayoutTypeInA : function(fieldLayoutType) {
							if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
								return sap.firefly.InAConstants.VA_FIELD_LAYOUT_TYPE_ATTRIBUTE_BASED;
							}
							if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTES_AND_PRESENTATIONS) {
								return sap.firefly.InAConstants.VA_FIELD_LAYOUT_TYPE_ATTRIBUTES_AND_PRESENTATIONS;
							}
							return sap.firefly.InAConstants.VA_FIELD_LAYOUT_TYPE_FIELD_BASED;
						},
						lookupLowerLevelNodeAlignment : function(inaAlignment) {
							if (sap.firefly.XString
									.isEqual(
											inaAlignment,
											sap.firefly.InAConstants.VA_ALIGNMENT_ABOVE)) {
								return sap.firefly.Alignment.CHILDREN_ABOVE_PARENT;
							} else {
								if (sap.firefly.XString
										.isEqual(
												inaAlignment,
												sap.firefly.InAConstants.VA_ALIGNMENT_BELOW)) {
									return sap.firefly.Alignment.CHILDREN_BELOW_PARENT;
								} else {
									return sap.firefly.Alignment.DEFAULT_VALUE;
								}
							}
						},
						lookupLowerLevelNodeAlignmentInA : function(alignment) {
							if (alignment === sap.firefly.Alignment.CHILDREN_ABOVE_PARENT) {
								return sap.firefly.InAConstants.VA_ALIGNMENT_ABOVE;
							}
							if (alignment === sap.firefly.Alignment.CHILDREN_BELOW_PARENT) {
								return sap.firefly.InAConstants.VA_ALIGNMENT_BELOW;
							}
							return sap.firefly.InAConstants.VA_ALIGNMENT_DEFAULT;
						},
						lookupLowerLevelNodeAlignmentInA2 : function(alignment) {
							if (alignment === sap.firefly.Alignment.CHILDREN_ABOVE_PARENT) {
								return sap.firefly.InAConstants.VA_ALIGNMENT_BELOW;
							}
							if (alignment === sap.firefly.Alignment.CHILDREN_BELOW_PARENT) {
								return sap.firefly.InAConstants.VA_ALIGNMENT_ABOVE;
							}
							return sap.firefly.InAConstants.VA_ALIGNMENT_DEFAULT;
						},
						lookupResultSetVisibility : function(visibility) {
							if (sap.firefly.XString
									.isEqual(
											visibility,
											sap.firefly.InAConstants.VA_RS_VISIBILITY_VISIBLE)) {
								return sap.firefly.ResultVisibility.VISIBLE;
							}
							if (sap.firefly.XString
									.isEqual(
											visibility,
											sap.firefly.InAConstants.VA_RS_VISIBILITY_CONDITIONAL)) {
								return sap.firefly.ResultVisibility.CONDITIONAL;
							}
							return sap.firefly.ResultVisibility.HIDDEN;
						},
						lookupResultSetVisibilityInA : function(visibility) {
							if (visibility === sap.firefly.ResultVisibility.VISIBLE) {
								return sap.firefly.InAConstants.VA_RS_VISIBILITY_VISIBLE;
							}
							if (visibility === sap.firefly.ResultVisibility.CONDITIONAL) {
								return sap.firefly.InAConstants.VA_RS_VISIBILITY_CONDITIONAL;
							}
							return sap.firefly.InAConstants.VA_RS_VISIBILITY_HIDDEN;
						},
						lookupAlertLevel : function(inaAlertLevel) {
							if (inaAlertLevel === 0) {
								return sap.firefly.AlertLevel.NORMAL;
							}
							if (inaAlertLevel === 1) {
								return sap.firefly.AlertLevel.GOOD_1;
							}
							if (inaAlertLevel === 2) {
								return sap.firefly.AlertLevel.GOOD_2;
							}
							if (inaAlertLevel === 3) {
								return sap.firefly.AlertLevel.GOOD_3;
							}
							if (inaAlertLevel === 4) {
								return sap.firefly.AlertLevel.CRITICAL_1;
							}
							if (inaAlertLevel === 5) {
								return sap.firefly.AlertLevel.CRITICAL_2;
							}
							if (inaAlertLevel === 6) {
								return sap.firefly.AlertLevel.CRITICAL_3;
							}
							if (inaAlertLevel === 7) {
								return sap.firefly.AlertLevel.BAD_1;
							}
							if (inaAlertLevel === 8) {
								return sap.firefly.AlertLevel.BAD_2;
							}
							if (inaAlertLevel === 9) {
								return sap.firefly.AlertLevel.BAD_3;
							}
							return null;
						},
						lookupOperatorInA : function(theOperator) {
							if (theOperator === sap.firefly.ComparisonOperator.EQUAL) {
								return "=";
							}
							return theOperator.getDisplayString();
						},
						lookupSortType : function(sortType) {
							return sap.firefly.QInAConverter.s_lookupSortType
									.getByKey(sortType);
						},
						lookupSortTypeInA : function(sortType) {
							return sap.firefly.QInAConverter.s_lookupSortTypeIna
									.getByKey(sortType.getName());
						},
						lookupConfigLevel : function(inaConfigLevel) {
							if (sap.firefly.XString
									.isEqual(
											inaConfigLevel,
											sap.firefly.InAConstants.VA_CONFIG_LEVEL_QUERY)) {
								return sap.firefly.QModelLevel.QUERY;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConfigLevel,
											sap.firefly.InAConstants.VA_CONFIG_LEVEL_AXIS)) {
								return sap.firefly.QModelLevel.AXES;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConfigLevel,
											sap.firefly.InAConstants.VA_CONFIG_LEVEL_DIMENSION)) {
								return sap.firefly.QModelLevel.DIMENSIONS;
							}
							return sap.firefly.QModelLevel.NONE;
						},
						lookupConfigLevelInA : function(configLevel) {
							if (configLevel === sap.firefly.QModelLevel.QUERY) {
								return sap.firefly.InAConstants.VA_CONFIG_LEVEL_QUERY;
							}
							if (configLevel === sap.firefly.QModelLevel.AXES) {
								return sap.firefly.InAConstants.VA_CONFIG_LEVEL_AXIS;
							}
							if (configLevel === sap.firefly.QModelLevel.DIMENSIONS) {
								return sap.firefly.InAConstants.VA_CONFIG_LEVEL_DIMENSION;
							}
							return sap.firefly.InAConstants.VA_CONFIG_LEVEL_NONE;
						},
						lookupComparisonGroup : function(inaComparisonGroup) {
							if (sap.firefly.XString
									.isEqual(
											inaComparisonGroup,
											sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_SINGLE_VALUE)) {
								return sap.firefly.QSetSignComparisonOperatorGroup.SINGLE_VALUE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaComparisonGroup,
											sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_INTERVAL)) {
								return sap.firefly.QSetSignComparisonOperatorGroup.INTERVAL;
							}
							if (sap.firefly.XString
									.isEqual(
											inaComparisonGroup,
											sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_RANGE)) {
								return sap.firefly.QSetSignComparisonOperatorGroup.RANGE;
							}
							return null;
						},
						lookupComparisonGroupInA : function(comparisonGroup) {
							if (comparisonGroup === sap.firefly.QSetSignComparisonOperatorGroup.INTERVAL) {
								return sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_INTERVAL;
							}
							if (comparisonGroup === sap.firefly.QSetSignComparisonOperatorGroup.RANGE) {
								return sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_RANGE;
							}
							if (comparisonGroup === sap.firefly.QSetSignComparisonOperatorGroup.SINGLE_VALUE) {
								return sap.firefly.InAConstants.VA_CAPABILITY_COMPARISON_GROUP_SINGLE_VALUE;
							}
							return null;
						},
						lookupComponentTypeInA : function(componentType) {
							var key = componentType.getName();
							return sap.firefly.QInAConverter.s_lookupComponentTypeIna
									.getByKey(key);
						},
						lookupComponentType : function(inaComponentType) {
							return sap.firefly.QInAConverter.s_lookupComponentType
									.getByKey(inaComponentType);
						},
						lookupResultStructureElementInA : function(ffConstant) {
							if (ffConstant === sap.firefly.ResultStructureElement.MEMBERS) {
								return sap.firefly.InAConstants.VA_RESULT_MEMBERS;
							}
							if (ffConstant === sap.firefly.ResultStructureElement.TOTAL) {
								return sap.firefly.InAConstants.VA_RESULT_TOTAL;
							}
							if (ffConstant === sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS) {
								return sap.firefly.InAConstants.VA_RESULT_TOTAL_INCLUDED_MEMBERS;
							}
							if (ffConstant === sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS) {
								return sap.firefly.InAConstants.VA_RESULT_TOTAL_REMAINING_MEMBERS;
							}
							return null;
						},
						lookupResultStructureElement : function(inaConstant) {
							if (sap.firefly.XString.isEqual(inaConstant,
									sap.firefly.InAConstants.VA_RESULT_MEMBERS)) {
								return sap.firefly.ResultStructureElement.MEMBERS;
							}
							if (sap.firefly.XString.isEqual(inaConstant,
									sap.firefly.InAConstants.VA_RESULT_TOTAL)) {
								return sap.firefly.ResultStructureElement.TOTAL;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_RESULT_TOTAL_INCLUDED_MEMBERS)) {
								return sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_RESULT_TOTAL_REMAINING_MEMBERS)) {
								return sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS;
							}
							return null;
						},
						lookupTextTransformationInA : function(ffConstant) {
							if (ffConstant === sap.firefly.TextTransformationType.CAPITALIZE) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_CAPITALIZE;
							}
							if (ffConstant === sap.firefly.TextTransformationType.LOWERCASE) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_LOWERCASE;
							}
							if (ffConstant === sap.firefly.TextTransformationType.UPPERCASE) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_UPPERCASE;
							}
							if (ffConstant === sap.firefly.TextTransformationType.STRING_TRANSFORMATION) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_STRING_TRANSFORMATION;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_BINARY) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_BINARY;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_EWKB) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_EWKB;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_EWKT) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_EWKT;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_GEOJSON) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_GEOJSON;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_SVG) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_SVG;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_TEXT) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_TEXT;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_WKB) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_WKB;
							}
							if (ffConstant === sap.firefly.TextTransformationType.SPATIAL_AS_WKT) {
								return sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_WKT;
							}
							return null;
						},
						lookupTextTransformation : function(inaConstant) {
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_CAPITALIZE)) {
								return sap.firefly.TextTransformationType.CAPITALIZE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_LOWERCASE)) {
								return sap.firefly.TextTransformationType.LOWERCASE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_UPPERCASE)) {
								return sap.firefly.TextTransformationType.UPPERCASE;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_STRING_TRANSFORMATION)) {
								return sap.firefly.TextTransformationType.STRING_TRANSFORMATION;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_BINARY)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_BINARY;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_EWKB)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_EWKB;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_EWKT)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_EWKT;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_GEOJSON)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_GEOJSON;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_SVG)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_SVG;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_TEXT)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_TEXT;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_WKB)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_WKB;
							}
							if (sap.firefly.XString
									.isEqual(
											inaConstant,
											sap.firefly.InAConstants.VA_TEXT_TRANSFORMATION_SPATIAL_AS_WKT)) {
								return sap.firefly.TextTransformationType.SPATIAL_AS_WKT;
							}
							return null;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAExportFactory",
				sap.firefly.XObject,
				{
					$statics : {
						createForValueHelp : function(application, capabilities) {
							var newObject = new sap.firefly.QInAExport();
							newObject.setupImportExport(application,
									sap.firefly.QModelFormat.INA_VALUE_HELP,
									capabilities,
									sap.firefly.QContextType.SELECTOR);
							return newObject;
						},
						createForData : function(application, capabilities) {
							var newObject = new sap.firefly.QInAExport();
							newObject.setupImportExport(application,
									sap.firefly.QModelFormat.INA_DATA,
									capabilities,
									sap.firefly.QContextType.RESULT_SET);
							return newObject;
						},
						createForRepository : function(application,
								capabilities) {
							var exportInARepository = new sap.firefly.QInAExport();
							exportInARepository.setupImportExport(application,
									sap.firefly.QModelFormat.INA_REPOSITORY,
									capabilities, null);
							return exportInARepository;
						},
						createForLayer : function(application, capabilities) {
							var exportLayer = new sap.firefly.QInAExport();
							exportLayer.setupImportExport(application,
									sap.firefly.QModelFormat.LAYER,
									capabilities, null);
							return exportLayer;
						},
						createForCloning : function(application, capabilities) {
							var newObject = new sap.firefly.QInAExport();
							newObject.setupImportExport(application,
									sap.firefly.QModelFormat.INA_CLONE,
									capabilities, null);
							return newObject;
						},
						createForBlending : function(application) {
							var newObject = new sap.firefly.QInAExport();
							newObject
									.setupImportExport(
											application,
											sap.firefly.QModelFormat.INA_METADATA_BLENDING,
											null, null);
							return newObject;
						},
						create : function(application, modelFormat,
								capabilities, memberReadModeContext) {
							var newObject = new sap.firefly.QInAExport();
							newObject.setupImportExport(application,
									modelFormat, capabilities,
									memberReadModeContext);
							return newObject;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAExportUtil",
				sap.firefly.XObject,
				{
					$statics : {
						extendStructure : function(exporter, modelComponent,
								source) {
							var protocolExtension;
							var structure;
							var names;
							var i;
							var name;
							if (exporter.m_mode === sap.firefly.QModelFormat.INA_DATA) {
								protocolExtension = modelComponent
										.getProtocolExtension();
								if (protocolExtension !== null) {
									structure = protocolExtension;
									if (modelComponent
											.isProtocolExtensionReplacing()) {
										return structure;
									}
									names = structure
											.getStructureElementNames();
									for (i = 0; i < names.size(); i++) {
										name = names.get(i);
										source.setElementByName(name, structure
												.getElementByName(name));
									}
								}
							}
							return source;
						},
						extendStructureWithTagging : function(exporter,
								modelComponentBase, source) {
							var tagging;
							var keyList;
							var componentTaggingList;
							var i;
							var currentKey;
							var currentValue;
							var newKeyValuePair;
							if (exporter.m_mode === sap.firefly.QModelFormat.INA_REPOSITORY) {
								tagging = modelComponentBase.getTagging();
								if (sap.firefly.XCollectionUtils
										.hasElements(tagging)) {
									keyList = tagging
											.getKeysAsReadOnlyListOfString();
									componentTaggingList = source
											.setNewListByName(sap.firefly.InAConstants.QY_COMPONENT_TAGS);
									for (i = 0; i < keyList.size(); i++) {
										currentKey = keyList.get(i);
										currentValue = tagging
												.getByKey(currentKey);
										newKeyValuePair = sap.firefly.PrStructure
												.create();
										componentTaggingList
												.add(newKeyValuePair);
										newKeyValuePair
												.setStringByName(
														sap.firefly.InAConstants.QY_COMPONENT_TAGS_KEY,
														currentKey);
										if (currentValue === null) {
											newKeyValuePair
													.setNullByName(sap.firefly.InAConstants.QY_COMPONENT_TAGS_VALUE);
										} else {
											newKeyValuePair
													.setStringByName(
															sap.firefly.InAConstants.QY_COMPONENT_TAGS_VALUE,
															currentValue);
										}
									}
								}
							}
							return source;
						},
						extendList : function(modelComponent, source) {
							var protocolExtension;
							var list;
							var i;
							if (source !== null) {
								protocolExtension = modelComponent
										.getProtocolExtension();
								if (protocolExtension !== null) {
									list = protocolExtension;
									if (modelComponent
											.isProtocolExtensionReplacing()) {
										return list;
									}
									for (i = 0; i < list.size(); i++) {
										source.add(list.getElementByIndex(i));
									}
								}
							}
							return source;
						},
						setDate : function(exporter, structure, parameterName,
								date) {
							if (date !== null) {
								if (exporter.m_supportsSAPDateFormat) {
									structure.setStringByName(parameterName,
											date.toSAPFormat());
								} else {
									structure.setStringByName(parameterName,
											date.toIsoFormat());
								}
							}
						},
						setNonEmptyString : function(structure, parameterName,
								value) {
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(value)) {
								structure.setStringByName(parameterName, value);
							}
						},
						dateTimeToString : function(exporter, value) {
							if (exporter.m_supportsSAPDateFormat) {
								return value.toSAPFormat();
							}
							return value.toIsoFormat();
						},
						dateToString : function(exporter, value) {
							if (exporter.m_supportsSAPDateFormat) {
								return value.toSAPFormat();
							}
							return value.toIsoFormat();
						},
						timeToString : function(exporter, value) {
							if (exporter.m_supportsSAPDateFormat) {
								return value.toSAPFormat();
							}
							return value.toIsoFormat();
						}
					}
				});
$Firefly.createClass("sap.firefly.QInAImportFactory", sap.firefly.XObject, {
	$statics : {
		createForData : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_DATA, capabilities);
		},
		createForDataReinit : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_DATA_REINIT, capabilities);
		},
		createForRepository : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_REPOSITORY, capabilities);
		},
		createForMetadata : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_METADATA, capabilities);
		},
		createForMetadataCore : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_METADATA_CORE, capabilities);
		},
		createForCloning : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.INA_CLONE, capabilities);
		},
		createForLayer : function(application, capabilities) {
			return sap.firefly.QInAImportFactory.create(application,
					sap.firefly.QModelFormat.LAYER, capabilities);
		},
		create : function(application, modelFormat, capabilities) {
			var object = new sap.firefly.QInAImport();
			object.setupImportExport(application, modelFormat, capabilities,
					null);
			return object;
		}
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInAImportUtil",
				sap.firefly.XObject,
				{
					$statics : {
						importComponentTagging : function(importer, inaElement,
								modelComponent) {
							var inAStructure;
							var componentTagList;
							var componentTagging;
							var i;
							var currentComponentTag;
							var currentKey;
							if (inaElement !== null) {
								if ((importer.m_mode === sap.firefly.QModelFormat.INA_REPOSITORY)
										&& (inaElement.isStructure())
										&& (modelComponent !== null)) {
									inAStructure = inaElement;
									componentTagList = inAStructure
											.getListByName(sap.firefly.InAConstants.QY_COMPONENT_TAGS);
									if (!sap.firefly.PrUtils
											.isListEmpty(componentTagList)) {
										componentTagging = modelComponent
												.getTagging();
										for (i = 0; i < componentTagList.size(); i++) {
											currentComponentTag = componentTagList
													.getStructureByIndex(i);
											if (currentComponentTag !== null) {
												currentKey = currentComponentTag
														.getStringByName(sap.firefly.InAConstants.QY_COMPONENT_TAGS_KEY);
												if (sap.firefly.XStringUtils
														.isNotNullAndNotEmpty(currentKey)) {
													componentTagging
															.put(
																	currentKey,
																	currentComponentTag
																			.getStringByName(sap.firefly.InAConstants.QY_COMPONENT_TAGS_VALUE));
												}
											}
										}
									}
								}
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInASpatialClustering",
				sap.firefly.XObject,
				{
					$statics : {
						exportSpatialClusteringRequest : function(exporter,
								clusterSettings) {
							var request = sap.firefly.PrStructure.create();
							var inaAnalytics = request
									.setNewStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
							var clusterField = clusterSettings
									.getClusterField();
							var queryModel = clusterField.getQueryModel();
							var inaDataSource = exporter.exportDataSource(
									queryModel.getDataSource(), false);
							var inaDimension;
							var inaCluster;
							var inaMeasure;
							var inaDimensionList;
							var freeAxis;
							var sizeFreeAxis;
							var idxFree;
							var freeDimension;
							var freeDimensionType;
							var inaDefinition;
							inaAnalytics.setElementByName(
									sap.firefly.InAConstants.QY_DATA_SOURCE,
									inaDataSource);
							inaDimension = (exporter)
									.exportDimension(clusterField
											.getDimension());
							inaDimension
									.setStringByName(
											sap.firefly.InAConstants.QY_AXIS,
											sap.firefly.QInAConverter
													.lookupAxisTypeInA(sap.firefly.AxisType.ROWS));
							inaCluster = sap.firefly.QInASpatialClustering
									.exportSpatialClusterSettings(clusterSettings);
							inaDimension.setElementByName("ClusterDefinition",
									inaCluster);
							inaMeasure = exporter
									.exportStructureDimension(queryModel
											.getMeasureDimension());
							inaMeasure
									.setStringByName(
											sap.firefly.InAConstants.QY_AXIS,
											sap.firefly.QInAConverter
													.lookupAxisTypeInA(sap.firefly.AxisType.COLUMNS));
							inaDimensionList = sap.firefly.PrList.create();
							inaDimensionList.add(inaDimension);
							inaDimensionList.add(inaMeasure);
							freeAxis = queryModel
									.getAxis(sap.firefly.AxisType.FREE);
							sizeFreeAxis = freeAxis.size();
							for (idxFree = 0; idxFree < sizeFreeAxis; idxFree++) {
								freeDimension = freeAxis.get(idxFree);
								freeDimensionType = freeDimension
										.getDimensionType();
								if (freeDimensionType === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
									inaDimensionList
											.add((exporter)
													.exportCalculatedDimension(freeDimension));
								}
							}
							inaDefinition = inaAnalytics
									.setNewStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
							inaDefinition.setElementByName(
									sap.firefly.InAConstants.QY_DIMENSIONS,
									inaDimensionList);
							(exporter).exportFilter(queryModel.getSelector(),
									inaDefinition);
							if (queryModel.supportsConditions()
									&& (queryModel.getConditionManager()
											.getEffectiveConditions().size() > 0)) {
								(exporter).exportConditionManager(queryModel
										.getConditionManager(), inaDefinition);
							}
							exporter.exportVariables(queryModel
									.getVariableContainer(), inaDefinition);
							inaDefinition
									.setElementByName(
											sap.firefly.InAConstants.QY_RS_FEATURE_REQUEST,
											sap.firefly.QInASpatialClustering
													.exportResultSetFeatures(queryModel));
							return request;
						},
						exportSpatialClusterSettings : function(clusterSettings) {
							var inaCluster = sap.firefly.PrStructure.create();
							var inaParameters;
							var parameters;
							var keys;
							var key;
							var value;
							inaCluster.setBooleanByName(
									sap.firefly.InAConstants.QY_ACTIVE,
									clusterSettings.isActive());
							inaCluster.setStringByName("ClusterAlgorithm",
									clusterSettings.getClusterAlgorithm()
											.getName());
							inaCluster
									.setStringByName("GeometryAttribute",
											clusterSettings.getClusterField()
													.getName());
							inaParameters = inaCluster
									.setNewStructureByName("ClusterParameters");
							parameters = clusterSettings.getParameters();
							keys = parameters.getKeysAsIteratorOfString();
							while (keys.hasNext()) {
								key = keys.next();
								value = parameters.getByKey(key);
								if (value.getValueType() === sap.firefly.XValueType.INTEGER) {
									inaParameters.setIntegerByName(key, (value)
											.getIntegerValue());
								} else {
									if (value.getValueType() === sap.firefly.XValueType.DOUBLE) {
										inaParameters.setDoubleByName(key,
												(value).getDoubleValue());
									} else {
										inaParameters.setStringByName(key,
												value.toString());
									}
								}
							}
							return inaCluster;
						},
						exportResultSetFeatures : function(sourceQueryModel) {
							var options = sap.firefly.PrStructure.create();
							var queryManager;
							options
									.setBooleanByName(
											sap.firefly.InAConstants.QY_USE_DEFAULT_ATTRIBUTE_KEY,
											false);
							queryManager = sourceQueryModel.getQueryManager();
							if (queryManager.getMaxResultRecords() !== -1) {
								options
										.setLongByName(
												sap.firefly.InAConstants.QY_MAX_RESULT_RECORDS,
												queryManager
														.getMaxResultRecords());
							}
							queryManager.fillPaging(options);
							options.setStringByName(
									sap.firefly.InAConstants.QY_RESULT_FORMAT,
									sap.firefly.InAConstants.VA_RS_FORMAT_V2);
							options
									.setStringByName(
											sap.firefly.InAConstants.QY_RESULT_ENCODING,
											sap.firefly.InAConstants.VA_RS_ENCODING_NONE);
							return options;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAValueHelp",
				sap.firefly.XObject,
				{
					$statics : {
						exportVariableHelpRequest : function(exporter,
								queryModel, dimension, variable) {
							var request = sap.firefly.QInAValueHelp
									.exportMemberHelpRequest(exporter,
											queryModel, dimension);
							var inaAnalytics = request
									.getStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
							var inaDefinition = inaAnalytics
									.getStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
							var inaDimension = inaDefinition.getListByName(
									sap.firefly.InAConstants.QY_DIMENSIONS)
									.getStructureByIndex(0);
							var variables;
							var newVariable;
							var type;
							var directives;
							if (variable.getHierarchyName() !== null) {
								sap.firefly.QInAValueHelp
										.exportVariableHierarchyInformation(
												inaDimension, variable);
							}
							variables = inaDefinition
									.setNewListByName(sap.firefly.InAConstants.QY_VARIABLES);
							newVariable = variables.addNewStructure();
							newVariable.setStringByName(
									sap.firefly.InAConstants.QY_NAME, variable
											.getName());
							type = inaAnalytics.getStructureByName(
									sap.firefly.InAConstants.QY_DATA_SOURCE)
									.getStringByName(
											sap.firefly.InAConstants.QY_TYPE);
							if (sap.firefly.XString.isEqual(type,
									sap.firefly.MetaObjectType.QUERY_VALUEHELP
											.getCamelCaseName())) {
								directives = inaAnalytics
										.setNewStructureByName(sap.firefly.InAConstants.QY_PROCESSING_DIRECTIVES);
								directives
										.setStringByName(
												sap.firefly.InAConstants.QY_PROCESSING_STEP,
												sap.firefly.InAConstants.VA_PROCESSING_STEP_DEFINITION);
							} else {
								inaDefinition
										.setStringByName(
												sap.firefly.InAConstants.QY_VALUEHELP_FOR_VARIABLE,
												variable.getName());
								exporter.exportVariables(queryModel
										.getVariableContainer(), inaDefinition);
								if (dimension
										.getReadMode(sap.firefly.QContextType.SELECTOR) === sap.firefly.QMemberReadMode.MASTER) {
									inaDefinition
											.setStringByName(
													sap.firefly.InAConstants.QY_READ_MODE,
													sap.firefly.InAConstants.VA_RM_MASTER);
								}
								if (inaDefinition
										.hasValueByName(sap.firefly.InAConstants.QY_FIXED_FILTER)) {
									inaDefinition
											.setElementByName(
													sap.firefly.InAConstants.QY_FIXED_FILTER,
													null);
								}
							}
							return request;
						},
						setStringIfNotEmpty : function(name, value, structure) {
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(value)) {
								structure.setStringByName(name, value);
							}
						},
						throwErrorForDependentVariable : function(variable,
								dependentVariable) {
							var message = sap.firefly.XStringBuffer.create();
							message.append("The dependent variable '");
							message.append(dependentVariable.getName());
							message.append("' of the variable '");
							message.append(variable.getName());
							message.append("' has no value set.");
							throw sap.firefly.XException
									.createIllegalStateException(message
											.toString());
						},
						exportVariableHierarchyInformation : function(
								structure, variable) {
							var inaHierarchy = structure
									.setNewStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
							var dependentVariables;
							var iterator;
							var someVariable;
							var hierarchyNameVariable;
							var hierarchyName;
							var dimensionMemberVariable;
							var someValue;
							if (variable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
								sap.firefly.QInAValueHelp.setStringIfNotEmpty(
										sap.firefly.InAConstants.QY_NAME,
										variable.getHierarchyName(),
										inaHierarchy);
								sap.firefly.QInAValueHelp.setStringIfNotEmpty(
										sap.firefly.InAConstants.QY_DUE_DATE,
										variable.getHierarchyKeyDate(),
										inaHierarchy);
								sap.firefly.QInAValueHelp.setStringIfNotEmpty(
										sap.firefly.InAConstants.QY_VERSION,
										variable.getHierarchyVersion(),
										inaHierarchy);
								inaHierarchy
										.setIntegerByName(
												sap.firefly.InAConstants.QY_INITIAL_DRILL_LEVEL,
												variable.getDimension()
														.getSelectorRootLevel());
							} else {
								dependentVariables = variable
										.getDependentVariables();
								iterator = dependentVariables.getIterator();
								while (iterator.hasNext()) {
									someVariable = iterator.next();
									if (someVariable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
										hierarchyNameVariable = someVariable;
										hierarchyName = hierarchyNameVariable
												.getValueByString();
										if (sap.firefly.XStringUtils
												.isNullOrEmpty(hierarchyName)) {
											sap.firefly.QInAValueHelp
													.throwErrorForDependentVariable(
															variable,
															hierarchyNameVariable);
										}
										inaHierarchy
												.setStringByName(
														sap.firefly.InAConstants.QY_NAME,
														hierarchyName);
									} else {
										if (someVariable.getVariableType() === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE) {
											dimensionMemberVariable = someVariable;
											someValue = dimensionMemberVariable
													.getValueByString();
											if (sap.firefly.XStringUtils
													.isNullOrEmpty(someValue)) {
												sap.firefly.QInAValueHelp
														.throwErrorForDependentVariable(
																variable,
																dimensionMemberVariable);
											}
											if (dimensionMemberVariable
													.getDimension()
													.getDimensionType() === sap.firefly.DimensionType.DATE) {
												sap.firefly.QInAValueHelp
														.setStringIfNotEmpty(
																sap.firefly.InAConstants.QY_DATE_TO,
																someValue,
																inaHierarchy);
											} else {
												sap.firefly.QInAValueHelp
														.setStringIfNotEmpty(
																sap.firefly.InAConstants.QY_VERSION,
																someValue,
																inaHierarchy);
											}
										}
									}
								}
								iterator.releaseObject();
								inaHierarchy
										.setIntegerByName(
												sap.firefly.InAConstants.QY_INITIAL_DRILL_LEVEL,
												variable.getDimension()
														.getSelectorRootLevel());
							}
						},
						exportMemberHelpRequest : function(exporter,
								queryModel, dimension) {
							var request;
							var inaAnalytics;
							var inaDimensionList;
							var inaDefinition;
							var selectorFilterUsage;
							var isQueryFilter;
							var selectionContainer;
							var selectorHierarchyNode;
							var hierarchyNodeFilter;
							var hierarchyNavigations1;
							var iterator;
							var node;
							var hierarchyNavigation1;
							var drillNode;
							var selectorHierarchyNodeName;
							var hierarchyNavigations2;
							var hierarchyNavigation2;
							var drillMember;
							var complexRoot;
							var cartesianProduct;
							if ((queryModel === null) || (dimension === null)) {
								return null;
							}
							request = sap.firefly.PrStructure.create();
							inaAnalytics = request
									.setNewStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
							sap.firefly.QInADataSource.exportDataSource(
									exporter, queryModel.getDataSource(),
									false, inaAnalytics);
							inaDimensionList = sap.firefly.PrList.create();
							inaDimensionList.add(exporter
									.exportDimension(dimension));
							inaDefinition = inaAnalytics
									.setNewStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
							inaDefinition.setElementByName(
									sap.firefly.InAConstants.QY_DIMENSIONS,
									inaDimensionList);
							exporter.exportVariables(queryModel
									.getVariableContainer(), inaDefinition);
							exporter.exportFixedFilter(
									queryModel.getSelector(), inaDefinition);
							sap.firefly.QInAValueHelp.setOptionsVh(exporter,
									inaDefinition, dimension);
							if (exporter.m_supportsExtendedSort) {
								sap.firefly.QInAValueHelp.exportExtendedSortVh(
										inaDefinition, dimension);
							}
							selectorFilterUsage = dimension
									.getSelectorFilterUsage();
							isQueryFilter = true;
							selectionContainer = null;
							if (selectorFilterUsage
									.isEqualTo(sap.firefly.QueryFilterUsage.QUERY_FILTER)) {
								selectionContainer = dimension.getQueryModel()
										.getSelector()
										.getSelectionStateContainer();
							} else {
								if (selectorFilterUsage
										.isEqualTo(sap.firefly.QueryFilterUsage.QUERY_FILTER_EXCLUDING_DIMENSION)) {
									selectionContainer = dimension
											.getQueryModel().getSelector()
											.getSelectionStateContainer();
									sap.firefly.QInAValueHelp
											.removeFilterOnDimensionVh(
													selectionContainer,
													dimension);
								} else {
									if (selectorFilterUsage
											.isEqualTo(sap.firefly.QueryFilterUsage.SELECTOR_FILTER)) {
										selectionContainer = dimension
												.getQueryModel().getSelector()
												.getSelectorContainer();
										isQueryFilter = false;
									}
								}
							}
							selectorHierarchyNode = dimension
									.getSelectorHierarchyNode();
							hierarchyNodeFilter = null;
							if ((selectorHierarchyNode !== null)
									&& dimension.isSelectorHierarchyActive()) {
								hierarchyNavigations1 = inaDefinition
										.setNewListByName(sap.firefly.InAConstants.QY_HIERARCHY_NAVIGATIONS);
								iterator = dimension.getNavigationNodes()
										.getIterator();
								while (iterator.hasNext()) {
									node = iterator.next();
									hierarchyNavigation1 = hierarchyNavigations1
											.addNewStructure();
									hierarchyNavigation1
											.setStringByName(
													sap.firefly.InAConstants.QY_DRILL_STATE,
													sap.firefly.QInAConverter
															.lookupDrillStateInA(sap.firefly.DrillState.EXPANDED));
									drillNode = hierarchyNavigation1
											.setNewStructureByName(sap.firefly.InAConstants.QY_DRILL_MEMBER);
									drillNode
											.setStringByName(
													sap.firefly.InAConstants.QY_DIMENSION_NAME,
													node.getDimension()
															.getName());
									drillNode
											.setStringByName(
													sap.firefly.InAConstants.QY_FIELD_NAME,
													node
															.getDimension()
															.getSelectorKeyField()
															.getName());
									drillNode.setStringByName(
											sap.firefly.InAConstants.QY_MEMBER,
											node.getName());
								}
								iterator.releaseObject();
								if (isQueryFilter
										&& (selectionContainer !== null)) {
									hierarchyNodeFilter = selectionContainer
											.addSingleMemberFilterByDimension(
													dimension,
													selectorHierarchyNode
															.getName(),
													sap.firefly.ComparisonOperator.EQUAL);
								}
							} else {
								selectorHierarchyNodeName = dimension
										.getSelectorHierarchyNodeName();
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(selectorHierarchyNodeName)) {
									hierarchyNavigations2 = inaDefinition
											.setNewListByName(sap.firefly.InAConstants.QY_HIERARCHY_NAVIGATIONS);
									hierarchyNavigation2 = hierarchyNavigations2
											.addNewStructure();
									hierarchyNavigation2
											.setStringByName(
													sap.firefly.InAConstants.QY_DRILL_STATE,
													sap.firefly.QInAConverter
															.lookupDrillStateInA(sap.firefly.DrillState.EXPANDED));
									drillMember = hierarchyNavigation2
											.setNewStructureByName(sap.firefly.InAConstants.QY_DRILL_MEMBER);
									drillMember
											.setStringByName(
													sap.firefly.InAConstants.QY_DIMENSION_NAME,
													dimension.getName());
									drillMember
											.setStringByName(
													sap.firefly.InAConstants.QY_FIELD_NAME,
													dimension
															.getSelectorKeyField()
															.getName());
									drillMember.setStringByName(
											sap.firefly.InAConstants.QY_MEMBER,
											selectorHierarchyNodeName);
									if (isQueryFilter
											&& (selectionContainer !== null)) {
										hierarchyNodeFilter = selectionContainer
												.addSingleMemberFilterByDimension(
														dimension,
														selectorHierarchyNodeName,
														sap.firefly.ComparisonOperator.EQUAL);
									}
								}
							}
							sap.firefly.QInAValueHelp
									.exportFilterSelectorVh(exporter,
											inaDefinition, selectionContainer);
							if (isQueryFilter && (selectionContainer !== null)
									&& (hierarchyNodeFilter !== null)) {
								complexRoot = selectionContainer
										.getComplexSelectionRoot();
								if (complexRoot !== null) {
									(complexRoot)
											.removeElement(hierarchyNodeFilter);
								} else {
									cartesianProduct = selectionContainer
											.getCartesianProduct();
									if (cartesianProduct !== null) {
										cartesianProduct
												.removeElement(hierarchyNodeFilter);
									}
								}
							}
							return request;
						},
						exportExtendedSortVh : function(inaDefinition,
								dimension) {
							var inaSort = inaDefinition
									.setNewListByName(sap.firefly.InAConstants.QY_SORT);
							var inaDimensionSort = inaSort.addNewStructure();
							inaDimensionSort.setStringByName(
									sap.firefly.InAConstants.QY_DIMENSION,
									dimension.getName());
							inaDimensionSort.setStringByName(
									sap.firefly.InAConstants.QY_DIRECTION,
									sap.firefly.QInAConverter
											.lookupSortDirectionInA2(dimension
													.getSelectorOrder()));
							inaDimensionSort
									.setStringByName(
											sap.firefly.InAConstants.QY_SORT_TYPE,
											sap.firefly.InAConstants.VA_SORT_TYPE_MEMBER_KEY);
						},
						removeFilterOnDimensionVh : function(
								querySelectionState, dimension) {
							var cartesianProduct = querySelectionState
									.getCartesianProduct();
							var filterIndex = 0;
							var cartesianChild;
							while (filterIndex < cartesianProduct.size()) {
								cartesianChild = cartesianProduct
										.getCartesianChild(filterIndex);
								if (cartesianChild.getDimension().isEqualTo(
										dimension)) {
									cartesianProduct.removeAt(filterIndex);
								} else {
									filterIndex++;
								}
							}
						},
						exportFilterSelectorVh : function(exporter,
								inaDefinition, filterExpression) {
							var filterStructureElement = exporter
									.exportFilterExpression(filterExpression);
							if (filterStructureElement !== null) {
								inaDefinition.setElementByName(
										sap.firefly.InAConstants.QY_FILTER,
										filterStructureElement);
							}
						},
						setOptionsVh : function(exporter, inaDefinition,
								dimension) {
							var resultSetFeatureRequest = inaDefinition
									.setNewStructureByName(sap.firefly.InAConstants.QY_RS_FEATURE_REQUEST);
							var queryModel;
							var subSetDescription;
							resultSetFeatureRequest
									.setBooleanByName(
											sap.firefly.InAConstants.QY_USE_DEFAULT_ATTRIBUTE_KEY,
											false);
							if (dimension.isSelectorGettingInterval()
									&& exporter.m_capabilities
											.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_RESULT_SET_INTERVAL)) {
								resultSetFeatureRequest
										.setBooleanByName(
												sap.firefly.InAConstants.QY_ONLY_INTERVAL,
												true);
							}
							resultSetFeatureRequest.setStringByName(
									sap.firefly.InAConstants.QY_RESULT_FORMAT,
									sap.firefly.InAConstants.VA_RS_FORMAT_V2);
							resultSetFeatureRequest
									.setStringByName(
											sap.firefly.InAConstants.QY_RESULT_ENCODING,
											sap.firefly.InAConstants.VA_RS_ENCODING_NONE);
							queryModel = dimension.getQueryModel();
							if (exporter.isAbap(queryModel)
									&& queryModel.supportsKeepOriginalTexts()) {
								resultSetFeatureRequest
										.setBooleanByName(
												sap.firefly.InAConstants.QY_RESULT_KEEP_ORIGINAL_TEXTS,
												queryModel
														.isKeepingOriginalTexts());
							}
							subSetDescription = resultSetFeatureRequest
									.setNewStructureByName(sap.firefly.InAConstants.QY_SUBSET_DESCRIPTION);
							subSetDescription.setIntegerByName(
									sap.firefly.InAConstants.QY_ROW_FROM,
									dimension.getSelectorPagingStart());
							subSetDescription.setIntegerByName(
									sap.firefly.InAConstants.QY_ROW_TO,
									dimension.getSelectorPagingEnd());
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAValueUtils",
				sap.firefly.XObject,
				{
					$statics : {
						importValueByType : function(importer, inaElement,
								parameterName, valueType) {
							return sap.firefly.QInAValueUtils
									._importValueInternal(importer, null,
											inaElement, parameterName,
											valueType, null, true);
						},
						importValue : function(importer, valueBag, inaElement,
								parameterName, valueType, field) {
							sap.firefly.QInAValueUtils._importValueInternal(
									importer, valueBag, inaElement,
									parameterName, valueType, field, false);
						},
						getDoubleValue : function(inaElement, parameterName2) {
							var doubleValue;
							var doubleElement = inaElement
									.getElementByName(parameterName2);
							var stringValue;
							if (doubleElement.isString()) {
								stringValue = (doubleElement).getStringValue();
								doubleValue = sap.firefly.XDouble
										.convertStringToDouble(stringValue);
							} else {
								if (doubleElement.isDouble()) {
									doubleValue = (doubleElement)
											.getDoubleValue();
								} else {
									if (doubleElement.isInteger()) {
										doubleValue = (doubleElement)
												.getIntegerValue();
									} else {
										doubleValue = 0;
									}
								}
							}
							return doubleValue;
						},
						_importValueInternal : function(importer, valueBag,
								inaElement, parameterName, valueType, field,
								returnValue) {
							var useSapDateFormat = importer.m_supportsSAPDateFormat;
							var fieldValue = null;
							var useFieldLiteralValue = sap.firefly.PrUtils
									.getBooleanValueProperty(
											inaElement,
											sap.firefly.InAConstants.QY_FIELD_LITERAL_VALUE,
											false);
							var parameterName2 = parameterName;
							var valueType2;
							var inaValueType;
							var stringValue;
							var dimension;
							var dimensionMember;
							var doubleValue;
							var intValue;
							var booleanValue;
							var longValue;
							var dateValue;
							var timeValue;
							var dateTimeValue;
							var geometry;
							if (parameterName2 === null) {
								parameterName2 = "Value";
							}
							valueType2 = valueType;
							if (valueType2 === null) {
								inaValueType = inaElement
										.getStringByName(sap.firefly.XString
												.concatenate2(parameterName2,
														"Type"));
								valueType2 = sap.firefly.QInAConverter
										.lookupValueType(inaValueType);
								useSapDateFormat = false;
							}
							if (valueType2 === sap.firefly.XValueType.STRING) {
								stringValue = inaElement
										.getStringByName(parameterName2);
								if (returnValue) {
									return sap.firefly.XStringValue
											.create(stringValue);
								}
								if ((field === null)
										|| (useFieldLiteralValue === false)) {
									valueBag.setStringValue(stringValue);
								} else {
									dimension = field.getDimension();
									dimensionMember = dimension
											.getDimensionMember(stringValue,
													false);
									if (dimension.isStructure()
											&& (dimensionMember !== null)) {
										valueBag
												.setDimensionMember(dimensionMember);
									} else {
										fieldValue = field
												.createFieldLiteralValue();
										fieldValue
												.setLiteralString(stringValue);
										valueBag.setFieldValue(fieldValue);
									}
								}
							} else {
								if ((valueType2 === sap.firefly.XValueType.DOUBLE)
										|| (valueType2 === sap.firefly.XValueType.DECIMAL_FLOAT)) {
									doubleValue = sap.firefly.QInAValueUtils
											.getDoubleValue(inaElement,
													parameterName2);
									if (returnValue) {
										return sap.firefly.XDoubleValue
												.create(doubleValue);
									}
									if ((field === null)
											|| (useFieldLiteralValue === false)) {
										valueBag.setDoubleValue(doubleValue);
									} else {
										fieldValue = field
												.createFieldLiteralValue();
										fieldValue
												.setLiteralDouble(doubleValue);
										valueBag.setFieldValue(fieldValue);
									}
								} else {
									if (valueType2 === sap.firefly.XValueType.INTEGER) {
										intValue = inaElement
												.getIntegerByName(parameterName2);
										if (returnValue) {
											return sap.firefly.XIntegerValue
													.create(intValue);
										}
										if ((field === null)
												|| (useFieldLiteralValue === false)) {
											valueBag.setIntegerValue(intValue);
										} else {
											fieldValue = field
													.createFieldLiteralValue();
											fieldValue.setLiteralInt(intValue);
											valueBag.setFieldValue(fieldValue);
										}
									} else {
										if (valueType2 === sap.firefly.XValueType.BOOLEAN) {
											booleanValue = inaElement
													.getBooleanByName(parameterName2);
											if (returnValue) {
												return sap.firefly.XBooleanValue
														.create(booleanValue);
											}
											valueBag
													.setBooleanValue(booleanValue);
										} else {
											if (valueType2 === sap.firefly.XValueType.LONG) {
												longValue = sap.firefly.PrUtils
														.getLongValueProperty(
																inaElement,
																parameterName2,
																0);
												if (returnValue) {
													return sap.firefly.XLongValue
															.create(longValue);
												}
												if ((field === null)
														|| (useFieldLiteralValue === false)) {
													valueBag
															.setLongValue(longValue);
												} else {
													fieldValue = field
															.createFieldLiteralValue();
													fieldValue
															.setLiteralLong(longValue);
													valueBag
															.setFieldValue(fieldValue);
												}
											} else {
												if (valueType2 === sap.firefly.XValueType.DATE) {
													stringValue = inaElement
															.getStringByName(parameterName2);
													dateValue = sap.firefly.XDate
															.createDateFromStringWithFlag(
																	stringValue,
																	useSapDateFormat);
													if (returnValue) {
														return dateValue;
													}
													if ((field === null)
															|| (useFieldLiteralValue === false)) {
														valueBag
																.setDateValue(dateValue);
													} else {
														fieldValue = field
																.createFieldLiteralValue();
														fieldValue
																.setLiteralDate(dateValue);
														valueBag
																.setFieldValue(fieldValue);
													}
												} else {
													if (valueType2 === sap.firefly.XValueType.TIME) {
														stringValue = inaElement
																.getStringByName(parameterName2);
														timeValue = sap.firefly.XTime
																.createTimeFromStringWithFlag(
																		stringValue,
																		useSapDateFormat);
														if (returnValue) {
															return timeValue;
														}
														valueBag
																.setTimeValue(timeValue);
													} else {
														if (valueType2 === sap.firefly.XValueType.DATE_TIME) {
															stringValue = inaElement
																	.getStringByName(parameterName2);
															dateTimeValue = sap.firefly.XDateTime
																	.createDateTimeFromStringWithFlag(
																			stringValue,
																			useSapDateFormat);
															if (returnValue) {
																return dateTimeValue;
															}
															if ((field === null)
																	|| (useFieldLiteralValue === false)) {
																valueBag
																		.setDateTimeValue(dateTimeValue);
															} else {
																fieldValue = field
																		.createFieldLiteralValue();
																fieldValue
																		.setLiteralDate(dateTimeValue);
																valueBag
																		.setFieldValue(fieldValue);
															}
														} else {
															if (valueType2
																	.isSpatial()) {
																stringValue = inaElement
																		.getStringByName(parameterName2);
																geometry = sap.firefly.XGeometryValue
																		.createGeometryValueWithWkt(stringValue);
																if (returnValue) {
																	return geometry;
																}
																valueBag
																		.setValue(geometry);
																if (importer.m_supportsSpatialFilterSrid
																		&& inaElement
																				.hasValueByName(sap.firefly.InAConstants.QY_SRID)) {
																	if (returnValue) {
																		importer
																				.addError(
																						sap.firefly.ErrorCodes.INVALID_TOKEN,
																						sap.firefly.XStringUtils
																								.concatenate3(
																										"Unsupported value type '",
																										valueType2
																												.getName(),
																										"'"));
																		return null;
																	}
																	valueBag
																			.getGeometry()
																			.setSrid(
																					sap.firefly.XIntegerValue
																							.create(inaElement
																									.getIntegerByName(sap.firefly.InAConstants.QY_SRID)));
																}
															} else {
																if (valueType2 === sap.firefly.XValueType.UNSUPPORTED) {
																	return null;
																} else {
																	if ((valueType2 === sap.firefly.XValueType.VARIABLE)
																			|| (valueType2 === sap.firefly.XValueType.CURRENT_MEMBER)) {
																		if (returnValue === false) {
																			valueBag
																					.setFilterValueType(valueType2);
																		}
																		return null;
																	} else {
																		importer
																				.addError(
																						sap.firefly.ErrorCodes.INVALID_TOKEN,
																						sap.firefly.XStringUtils
																								.concatenate3(
																										"Unsupported value type '",
																										valueType2
																												.getName(),
																										"'"));
																		return null;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							return null;
						},
						exportValue : function(exporter, parameterName2,
								inaElement, valueAccess, valueType) {
							sap.firefly.QInAValueUtils.exportFieldValue(
									exporter, parameterName2, inaElement, null,
									valueAccess, valueType);
						},
						exportFieldValue : function(exporter, parameterName2,
								inaElement, field, valueAccess, valueType) {
							var useSapDateFormat = exporter.m_supportsSAPDateFormat;
							var parameterName = parameterName2;
							var valueType2;
							var inaValueType;
							var dateValue;
							var timeValue;
							var dateTimeValue;
							var geometry;
							var srid;
							if (parameterName === null) {
								parameterName = "Value";
							}
							valueType2 = valueType;
							if (valueType2 === null) {
								valueType2 = valueAccess.getValueType();
								inaValueType = sap.firefly.QInAConverter
										.lookupValueTypeInA(valueType2);
								inaElement.setStringByName(sap.firefly.XString
										.concatenate2(parameterName, "Type"),
										inaValueType);
								useSapDateFormat = false;
							}
							if (valueType2 === sap.firefly.XValueType.STRING) {
								inaElement.setStringByName(parameterName,
										valueAccess.getStringValue());
							} else {
								if (valueType2 === sap.firefly.XValueType.INTEGER) {
									inaElement.setIntegerByName(parameterName,
											valueAccess.getIntegerValue());
								} else {
									if (valueType2 === sap.firefly.XValueType.LONG) {
										inaElement.setLongByName(parameterName,
												valueAccess.getLongValue());
									} else {
										if ((valueType2 === sap.firefly.XValueType.DOUBLE)
												|| (valueType2 === sap.firefly.XValueType.DECIMAL_FLOAT)) {
											inaElement.setDoubleByName(
													parameterName, valueAccess
															.getDoubleValue());
										} else {
											if (valueType2 === sap.firefly.XValueType.BOOLEAN) {
												inaElement
														.setBooleanByName(
																parameterName,
																valueAccess
																		.getBooleanValue());
											} else {
												if (valueType2 === sap.firefly.XValueType.DATE) {
													dateValue = valueAccess
															.getDateValue();
													if (dateValue !== null) {
														if (useSapDateFormat) {
															inaElement
																	.setStringByName(
																			parameterName,
																			dateValue
																					.toSAPFormat());
														} else {
															inaElement
																	.setStringByName(
																			parameterName,
																			dateValue
																					.toIsoFormat());
														}
													}
												} else {
													if (valueType2 === sap.firefly.XValueType.TIME) {
														timeValue = valueAccess
																.getTimeValue();
														if (useSapDateFormat) {
															inaElement
																	.setStringByName(
																			parameterName,
																			timeValue
																					.toSAPFormat());
														} else {
															inaElement
																	.setStringByName(
																			parameterName,
																			timeValue
																					.toIsoFormat());
														}
													} else {
														if (valueType2 === sap.firefly.XValueType.DATE_TIME) {
															dateTimeValue = valueAccess
																	.getDateTimeValue();
															if (useSapDateFormat) {
																inaElement
																		.setStringByName(
																				parameterName,
																				dateTimeValue
																						.toSAPFormat());
															} else {
																inaElement
																		.setStringByName(
																				parameterName,
																				dateTimeValue
																						.toIsoFormat());
															}
														}
													}
												}
											}
										}
									}
								}
							}
							if ((valueType2 !== null) && valueType2.isSpatial()) {
								geometry = valueAccess.getGeometry();
								inaElement.setStringByName(parameterName,
										geometry.toWKT());
								srid = geometry.getSrid();
								if (exporter.m_supportsSpatialFilterSrid
										&& (srid !== null)) {
									inaElement.setIntegerByName(
											sap.firefly.InAConstants.QY_SRID,
											srid.getIntegerValue());
								}
							}
							if (field !== null) {
								inaElement
										.setBooleanByName(
												sap.firefly.InAConstants.QY_FIELD_LITERAL_VALUE,
												true);
							}
						},
						exportFilterValue : function(exporter, parameterName,
								inaElement, value, valueType) {
							var variableValue;
							if (valueType === sap.firefly.XValueType.VARIABLE) {
								variableValue = value.getVariableValue();
								if (variableValue !== null) {
									inaElement.setStringByName(parameterName,
											variableValue.getName());
									if (sap.firefly.XString.isEqual(
											parameterName,
											sap.firefly.InAConstants.QY_LOW)) {
										inaElement
												.setStringByName(
														sap.firefly.InAConstants.QY_LOW_IS,
														sap.firefly.InAConstants.VA_IS_VARIABLE);
									} else {
										if (sap.firefly.XString
												.isEqual(
														parameterName,
														sap.firefly.InAConstants.QY_HIGH)) {
											inaElement
													.setStringByName(
															sap.firefly.InAConstants.QY_HIGH_IS,
															sap.firefly.InAConstants.VA_IS_VARIABLE);
										}
									}
								}
							} else {
								sap.firefly.QInAValueUtils.exportValue(
										exporter, parameterName, inaElement,
										value, valueType);
							}
						},
						importSupplements : function(importer, value,
								structure, parameter, supplementFields) {
							var supplementValues;
							var sizeA;
							var sizeB;
							var i;
							if ((importer.m_supportsSupplements)
									&& (parameter !== null)
									&& (sap.firefly.XCollectionUtils
											.hasElements(supplementFields))) {
								supplementValues = structure
										.getListByName(parameter);
								if (supplementValues !== null) {
									sizeA = supplementValues.size();
									sizeB = supplementFields.size();
									if (sizeA === sizeB) {
										for (i = 0; i < sizeA; i++) {
											value
													.addSupplementValue(
															supplementFields
																	.get(i)
																	.getName(),
															supplementValues
																	.getStringByIndex(i));
										}
									} else {
										importer
												.addWarning(
														sap.firefly.ErrorCodes.INVALID_STATE,
														"InA protocol error: Supplement sizes of values and field names do not match.");
									}
								}
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdCapabilities",
				sap.firefly.XObject,
				{
					$statics : {
						importCapabilities : function(sysCapabilities,
								queryCapabilities) {
							var systemType = queryCapabilities.getSystemType();
							var isBW = false;
							var isHana = false;
							var isBPCS = false;
							var supportsHierarchyPath;
							var supportsUniqueHierarchyPath;
							if (systemType !== null) {
								isBW = systemType
										.isTypeOf(sap.firefly.SystemType.BW);
								isHana = systemType
										.isTypeOf(sap.firefly.SystemType.HANA);
								isBPCS = systemType
										.isTypeOf(sap.firefly.SystemType.BPCS);
							}
							queryCapabilities
									.setSupportsShutdown(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_STATEFUL_DATAPROVIDER,
													isBW || isHana));
							queryCapabilities
									.setSupportsDirectVariableTransfer(!isBW);
							queryCapabilities.setSupportsCheckVariables(!isBW);
							queryCapabilities
									.setSupportsReInitVariables(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_VARIABLE_RE_SUBMIT,
													false));
							queryCapabilities
									.setSupportsHierarchyPath(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_PATH,
													false));
							queryCapabilities
									.setSupportsReturnedDataSelection(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_RETURNED_DATA_SELECTION,
													false));
							queryCapabilities
									.setSupportsSapDateFormat(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SAP_DATE,
													false));
							queryCapabilities
									.setSupportsObtainability(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_OBTAINABILITY,
													false));
							queryCapabilities
									.setSupportsDataCellMixedValues(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_DATA_CELL_MIXED_VALUES,
													false));
							queryCapabilities
									.setSupportsCustomDimensionFilterCapability(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_FILTER_CAPABILITIES,
													isBW));
							queryCapabilities
									.setSupportsSpatialTransformations(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_TRANSFORMATIONS,
													false));
							queryCapabilities
									.setSupportsSpatialClustering(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_CLUSTERING,
													false));
							queryCapabilities
									.setSupportsCubeBlending(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CUBE_BLENDING,
													false));
							queryCapabilities
									.setSupportsCubeBlendingProperties(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CUBE_BLENDING_PROPERTIES,
													false));
							queryCapabilities
									.setSupportsCubeBlendingOutOfContext(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CUBE_BLENDING_OUT_OF_CONTEXT,
													false));
							queryCapabilities
									.setSupportsExceptionAggregationDimsFormulas(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTION_AGGREGATION_DIMS_FORMULAS,
													false));
							queryCapabilities
									.setSupportsMetadataDataCategory(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_METADATA_DATA_CATEGORY,
													false));
							queryCapabilities
									.setSupportsIgnoreExternalDimension(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_IGNORE_EXTERNAL_DIMENSIONS,
													false));
							queryCapabilities
									.setSupportsHierarchyTrapezoidFilter(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_TRAPEZOID_FILTER,
													false));
							queryCapabilities
									.setSupportsHierarchyLevelMetadata(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_METADATA_HIERARCHY_LEVELS,
													false));
							queryCapabilities
									.setSupportsHierarchyNavigationDeltaModel(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_NAVIGATION_DELTA_MODE,
													false));
							queryCapabilities
									.setSupportsHierarchyMetadata(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_METADATA_HIERARCHY_STRUCTURE,
													false));
							queryCapabilities
									.setSupportsAverageCountNullZero(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_AVERAGE_COUNT_NULL_ZERO,
													false));
							queryCapabilities
									.setSupportsLocaleSorting(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_LOCALE_SORTING,
													false));
							queryCapabilities
									.setSupportsCeScenarioParams(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CE_SCENARIO_PARAMS,
													false));
							queryCapabilities
									.setSupportsKeepOriginalTexts(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_ORIGINAL_TEXTS,
													false));
							queryCapabilities
									.setSupportsRestrictedMeasures(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_RESTRICTED_KEYFIGURES,
													isHana));
							queryCapabilities
									.setSupportsFormulaMeasures(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CALCULATED_KEYFIGURES,
													isHana));
							queryCapabilities
									.setSupportsHierarchyLevelOffsetFilter(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_LEVELOFFSET_FILTER,
													false));
							queryCapabilities
									.setSupportsExceptions(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTIONS,
													false));
							queryCapabilities
									.setSupportsExceptionSettings(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTION_SETTINGS,
													false));
							queryCapabilities
									.setSupportsMemberVisibility(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_MEMBER_VISIBILITY,
													false));
							queryCapabilities
									.setSupportsUnifiedDataCells(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_UNIFIED_DATA_CELLS,
													false));
							queryCapabilities
									.setSupportsCartesianFilterIntersect(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CARTESIAN_FILTER_INTERSECT,
													false));
							queryCapabilities
									.setSupportsExpandBottomUp(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_EXPAND_BOTTOM_UP,
													false));
							supportsHierarchyPath = sap.firefly.QInAMdCapabilities
									.supports(
											sysCapabilities,
											sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_PATH,
											false);
							supportsUniqueHierarchyPath = sap.firefly.QInAMdCapabilities
									.supports(
											sysCapabilities,
											sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_PATH_UNIQUE_NAME,
											false);
							queryCapabilities
									.setSupportsUniqueHierarchyPath(supportsHierarchyPath
											&& supportsUniqueHierarchyPath);
							queryCapabilities
									.setSupportsCellValueOperands(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CELL_VALUE_OPERAND,
													false));
							queryCapabilities
									.setSupportsComplexSelections(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_COMPLEX_FILTERS,
													false));
							queryCapabilities
									.setSupportsSelectionVisibilityContainer(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_VISIBILITY_FILTER,
													false));
							queryCapabilities
									.setSupportsSetOperand(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SET_OPERAND,
													false));
							queryCapabilities
									.setSupportsConvertToFlatFilter(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_HIERARCHY_SELECTION_AS_FLAT_SELECTION,
													false));
							queryCapabilities
									.setSupportsCummulative(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_CUMMULATIVE,
													false));
							queryCapabilities
									.setSupportsHierarchyNavCounter(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_NAV_COUNTER,
													false));
							queryCapabilities
									.setSupportsHierarchyAttHierFields(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_ATT_HIER_ATT_FIELDS,
													false));
							queryCapabilities
									.setSupportsHierarchyCarryingDim(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_ATT_HIER_ATT_FIELDS,
													isBW || isBPCS));
							queryCapabilities
									.setSupportsSortType(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SORT_TYPE,
													false));
							queryCapabilities
									.setSupportsExtendedSort(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_EXTENDED_SORT,
													false));
							queryCapabilities
									.setSupportsSpatialFilter(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_FILTER,
													false));
							if (queryCapabilities.supportsSpatialFilter()) {
								queryCapabilities
										.setSupportsSpatialFilterSrid(sap.firefly.QInAMdCapabilities
												.supports(
														sysCapabilities,
														sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_FILTER_WITH_SRID,
														false));
							}
							queryCapabilities
									.setSupportsExtendedDimensions(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_EXTENDED_DIMENSIONS,
													false));
							queryCapabilities
									.setSupportsDataCells(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_QUERY_DATA_CELLS,
													false));
							queryCapabilities
									.setSupportsConditions(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_CONDITIONS,
													false));
							queryCapabilities
									.setSupportsInputReadinessStates(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_INPUT_READINESS_STATES,
													false));
							queryCapabilities
									.setSupportsSortNewValues(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_CAPABILITY_SORT_NEW_VALUES,
													false));
							queryCapabilities
									.setSupportsIgnoreUnitOfZeroValueInAggregation(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_IGNORE_UNIT_ZEROVALUE_IN_AGGREGATION,
													false));
							queryCapabilities
									.setSupportsCubeBlendingWithNSubqueries(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InactiveCapabilities.CUBE_BLENDING_N_QUERIES
															.getName(), false));
							queryCapabilities
									.setSupportsDataRefreshAndDataTopicality(sap.firefly.QInAMdCapabilities
											.supports(
													sysCapabilities,
													sap.firefly.InACapabilities.AV_SUPPORTS_DATA_REFRESH_AND_DATA_TOPICALITY,
													false));
						},
						supports : function(capabilityContainer, name,
								defaultValue) {
							var flag = defaultValue;
							if (capabilityContainer !== null) {
								flag = flag
										|| capabilityContainer
												.containsKey(name);
							}
							return flag;
						}
					}
				});
$Firefly.createClass("sap.firefly.RsHiChartRenderer", sap.firefly.XObject, {
	$statics : {
		create : function() {
			return new sap.firefly.RsHiChartRenderer();
		},
		checkList : function(list, string) {
			var n = list.size();
			var validation = false;
			var mylist;
			var myStructure;
			var toCompare;
			if (n > 0) {
				n = n - 1;
				mylist = list.asList();
				myStructure = mylist.getStructureByIndex(n);
				toCompare = myStructure.getStringByName("name");
				validation = sap.firefly.XString.isEqual(toCompare, string);
			}
			return validation;
		},
		adjustlist : function(string) {
			return sap.firefly.XString.substring(string, 0, sap.firefly.XString
					.size(string) - 1);
		}
	},
	render : function(type, rs) {
		var theChartData = sap.firefly.PrStructure.create();
		var charType = sap.firefly.XString.convertToLowerCase(type.getName());
		var cursorColumnsAxis;
		var cursorRowsAxis;
		theChartData = sap.firefly.RsHiChartVizUtils.general(theChartData,
				charType);
		cursorColumnsAxis = rs.getCursorColumnsAxis();
		cursorRowsAxis = rs.getCursorRowsAxis();
		if (sap.firefly.XString.isEqual(charType, "column")
				|| sap.firefly.XString.isEqual(charType, "bellcurve")
				|| sap.firefly.XString.isEqual(charType, "line")
				|| sap.firefly.XString.isEqual(charType, "bar")
				|| sap.firefly.XString.isEqual(charType, "spline")
				|| sap.firefly.XString.isEqual(charType, "area")) {
			theChartData = sap.firefly.RsHiChartVizUtilsSimple.generate(
					theChartData, charType);
			theChartData = sap.firefly.RsHighChartSimpleRendrer.cartesian(
					cursorColumnsAxis, cursorRowsAxis, theChartData, rs);
		} else {
			if (sap.firefly.XString.isEqual(charType, "pie")
					|| sap.firefly.XString.isEqual(charType, "wordcloud")
					|| sap.firefly.XString.isEqual(charType, "variablepie")) {
				theChartData = sap.firefly.RsHiChartVizUtilsPolar.generate(
						theChartData, charType);
				theChartData = sap.firefly.RsHighChartPolarRendrer.polar(
						cursorColumnsAxis, cursorRowsAxis, theChartData, rs);
			} else {
				if (sap.firefly.XString.isEqual(charType, "scatter")
						|| sap.firefly.XString.isEqual(charType, "bubble")) {
					theChartData = sap.firefly.RsHiChartVizUtilsCorrelation
							.generate(theChartData, charType);
					theChartData = sap.firefly.RsHighChartPolarRendrer
							.polar(cursorColumnsAxis, cursorRowsAxis,
									theChartData, rs);
				}
			}
		}
		return theChartData;
	}
});
$Firefly
		.createClass(
				"sap.firefly.RsHighChartPolarRendrer",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHighChartPolarRendrer();
						},
						polar : function(cursorColumnsAxis1, cursorRowsAxis1,
								theChartDatas, rs) {
							var dimensionList = sap.firefly.XListOfString
									.create();
							var measurenamelist = sap.firefly.XListOfString
									.create();
							var MeasureGroup = null;
							var dimensionGroup = null;
							var chartTitle = null;
							var tuplesRows = cursorRowsAxis1.getTuplesCount();
							var chartType = theChartDatas.getStructureByName(
									"chart").getStringByName("type");
							var hideTotalOnRows = true;
							var seriesList = theChartDatas
									.setNewListByName("series");
							var polarLayer = seriesList.addNewStructure();
							var newList = polarLayer.setNewListByName("data");
							var categoriesList = sap.firefly.XListOfString
									.create();
							var intermediate2 = sap.firefly.PrList.create();
							var chartlang = theChartDatas
									.setNewStructureByName("lang");
							var fieldValueV;
							var MeasureName;
							var measurePresentationType;
							var i;
							var DatapolarLayer;
							var dataList;
							var j;
							var istotaltiy;
							var FormatedValueD;
							var dimensionPresentationType;
							var DimensionField;
							var dimensionName;
							var istotal;
							var dataCell1;
							var valueType;
							var doubleValue;
							var intermediate1;
							var title;
							cursorColumnsAxis1.setTupleCursorBeforeStart();
							while (cursorColumnsAxis1.hasNextTuple()) {
								cursorColumnsAxis1.nextTuple();
								while (cursorColumnsAxis1.hasNextTupleElement()) {
									cursorColumnsAxis1.nextTupleElement();
									cursorRowsAxis1.setTupleCursorBeforeStart();
									while (cursorColumnsAxis1
											.hasNextFieldValue()) {
										cursorColumnsAxis1.nextFieldValue();
										fieldValueV = cursorColumnsAxis1
												.getFieldValue();
										MeasureName = fieldValueV
												.getFormattedValue();
										measurePresentationType = cursorColumnsAxis1
												.getField()
												.getPresentationType();
										if (measurePresentationType === sap.firefly.PresentationType.LONG_TEXT) {
											i = cursorColumnsAxis1
													.getTupleCursorIndex();
											DatapolarLayer = sap.firefly.PrStructure
													.create();
											dataList = DatapolarLayer
													.setNewListByName("dataList");
											for (j = 0; j < tuplesRows; j++) {
												istotaltiy = false;
												cursorRowsAxis1
														.setTupleCursorToIndex(j);
												while (cursorRowsAxis1
														.hasNextTupleElement()) {
													cursorRowsAxis1
															.nextTupleElement();
													while (cursorRowsAxis1
															.hasNextFieldValue()) {
														cursorRowsAxis1
																.nextFieldValue();
														sap.firefly.XLogger
																.println(cursorRowsAxis1
																		.getDimensionMemberType()
																		.getName());
														FormatedValueD = cursorRowsAxis1
																.getFormattedValue();
														dimensionPresentationType = cursorRowsAxis1
																.getField()
																.getPresentationType();
														if ((dimensionPresentationType === sap.firefly.PresentationType.SHORT_TEXT)
																|| (dimensionPresentationType === sap.firefly.PresentationType.LONG_TEXT)
																|| (dimensionPresentationType === sap.firefly.PresentationType.MEDIUM_TEXT)) {
															DimensionField = cursorRowsAxis1
																	.getField();
															dimensionName = DimensionField
																	.getDimension()
																	.getName();
															if (!dimensionList
																	.contains(dimensionName)) {
																dimensionGroup = sap.firefly.XStringUtils
																		.concatenate3(
																				dimensionName,
																				",",
																				dimensionGroup);
																dimensionList
																		.add(dimensionName);
															}
															istotal = (cursorRowsAxis1
																	.getDimensionMemberType() === sap.firefly.MemberType.RESULT)
																	&& hideTotalOnRows;
															if (istotal) {
																istotaltiy = true;
															} else {
																categoriesList
																		.add(FormatedValueD);
															}
														}
													}
												}
												dataCell1 = rs
														.getDataCell(i, j);
												if ((dataCell1.getXValue() !== null)) {
													if (!measurenamelist
															.contains(MeasureName)) {
														MeasureGroup = sap.firefly.XStringUtils
																.concatenate3(
																		MeasureName,
																		",",
																		MeasureGroup);
														measurenamelist
																.add(MeasureName);
													}
													if (!DatapolarLayer
															.hasStringByName(MeasureName)) {
														DatapolarLayer
																.setStringByName(
																		"name",
																		MeasureName);
													}
													valueType = dataCell1
															.getValueType();
													if (valueType === sap.firefly.XValueType.DOUBLE) {
														doubleValue = dataCell1
																.getDoubleValue();
														if (!istotaltiy) {
															dataList
																	.addDouble(doubleValue);
														}
													}
												}
											}
											intermediate1 = intermediate2
													.addNewList();
											intermediate1.addAll(dataList);
										}
									}
								}
							}
							sap.firefly.RsHighChartPolarRendrer
									.adjustFormattoNonCartesian(intermediate2,
											newList, chartType, categoriesList,
											measurenamelist, theChartDatas);
							if (seriesList.size() === 0) {
								chartlang
										.setStringByName("noData",
												"At least one measure is required to build a chart.");
							} else {
								MeasureGroup = sap.firefly.RsHiChartRenderer
										.adjustlist(MeasureGroup);
								dimensionGroup = sap.firefly.RsHiChartRenderer
										.adjustlist(dimensionGroup);
								chartTitle = sap.firefly.XStringUtils
										.concatenate3(MeasureGroup, " Per ",
												dimensionGroup);
								title = theChartDatas
										.getStructureByName("title");
								title.setStringByName("text", chartTitle);
							}
							return theChartDatas;
						},
						adjustFormattoNonCartesian : function(intermediate2,
								newList, chartType, categoriesList,
								measurenamelist, theChartDatas) {
							var zlist;
							var ztitle = "Size";
							var ylist;
							var maxListSize = 0;
							var p;
							var newstruct;
							var yValue;
							var zValue;
							var s;
							var xtitle;
							var ytitle;
							var xAxistitle;
							var yAxistitle;
							var xlist;
							var a;
							var nestedlist;
							var Valuex;
							var Valuey;
							var name;
							var e;
							var Valuez;
							var bubleList;
							if (sap.firefly.XString.isEqual(chartType, "pie")
									|| sap.firefly.XString.isEqual(chartType,
											"variablepie")
									|| sap.firefly.XString.isEqual(chartType,
											"wordcloud")) {
								ylist = intermediate2.getListByIndex(0);
								if (intermediate2.size() > 1) {
									zlist = intermediate2.getListByIndex(1);
								} else {
									zlist = intermediate2.getListByIndex(0);
								}
								maxListSize = sap.firefly.XMath.getMaximum(
										zlist.size(), ylist.size());
								for (p = 0; p < maxListSize; p++) {
									newstruct = newList.addNewStructure();
									yValue = ylist.getDoubleByIndex(p);
									zValue = zlist.getDoubleByIndex(p);
									if (sap.firefly.XString.isEqual(chartType,
											"pie")
											|| sap.firefly.XString.isEqual(
													chartType, "variablepie")) {
										newstruct.setDoubleByName("y", yValue);
										newstruct.setDoubleByName("z", zValue);
									} else {
										if (sap.firefly.XString.isEqual(
												chartType, "wordcloud")) {
											newstruct.setDoubleByName("weight",
													yValue);
										}
									}
									s = categoriesList.get(p);
									newstruct.setStringByName("name", s);
								}
							} else {
								xtitle = measurenamelist.get(0);
								ytitle = measurenamelist.get(1);
								xAxistitle = theChartDatas.getStructureByName(
										"xAxis").getStructureByName("title");
								yAxistitle = theChartDatas.getStructureByName(
										"yAxis").getStructureByName("title");
								yAxistitle.setStringByName("text", ytitle);
								xAxistitle.setStringByName("text", xtitle);
								xlist = intermediate2.getListByIndex(0);
								ylist = intermediate2.getListByIndex(1);
								maxListSize = sap.firefly.XMath.getMaximum(
										xlist.size(), ylist.size());
								for (a = 0; a < maxListSize; a++) {
									nestedlist = newList.addNewStructure();
									Valuex = xlist.getDoubleByIndex(a);
									Valuey = ylist.getDoubleByIndex(a);
									name = categoriesList.get(a);
									nestedlist.setStringByName("name", name);
									nestedlist.setDoubleByName("x", Valuex);
									nestedlist.setDoubleByName("y", Valuey);
									nestedlist.setStringByName("SeriesX",
											xtitle);
									nestedlist.setStringByName("SeriesY",
											ytitle);
								}
								if (intermediate2.size() > 2) {
									zlist = intermediate2.getListByIndex(2);
								} else {
									zlist = intermediate2.getListByIndex(1);
								}
								for (e = 0; e < zlist.size(); e++) {
									Valuez = zlist.getDoubleByIndex(e);
									bubleList = newList.getStructureByIndex(e);
									bubleList.setDoubleByName("z", Valuez);
									bubleList
											.setStringByName("SeriesZ", ztitle);
								}
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsHighChartSimpleRendrer",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHighChartSimpleRendrer();
						},
						cartesian : function(cursorColumnsAxis1,
								cursorRowsAxis1, theChartDatas, rs) {
							var dimensionList = sap.firefly.XListOfString
									.create();
							var measurenamelist = sap.firefly.XListOfString
									.create();
							var MeasureGroup = null;
							var categoriesNestedList = null;
							var dimensionGroup = null;
							var chartTitle = null;
							var row = -1;
							var rowTupleElements = cursorRowsAxis1
									.getTupleElementsCount();
							var tuplesRows = cursorRowsAxis1.getTuplesCount();
							var hideTotalOnRows = true;
							var seriesList = theChartDatas
									.setNewListByName("series");
							var xAxis = theChartDatas
									.getStructureByName("xAxis");
							var categoriesList = xAxis
									.setNewListByName("categories");
							var chartlang = theChartDatas
									.setNewStructureByName("lang");
							var fieldValueV;
							var MeasureName;
							var measurePresentationType;
							var i;
							var DataLayer;
							var dataList;
							var j;
							var istotaltiy;
							var currentRowTupleElementIndex;
							var DimensionMemeber;
							var dimensionPresentationType;
							var DimensionField;
							var dimensionName;
							var istotal;
							var check;
							var categoriesStructure;
							var dataCell1;
							var valueType;
							var doubleValue;
							var title;
							cursorColumnsAxis1.setTupleCursorBeforeStart();
							while (cursorColumnsAxis1.hasNextTuple()) {
								cursorColumnsAxis1.nextTuple();
								while (cursorColumnsAxis1.hasNextTupleElement()) {
									cursorColumnsAxis1.nextTupleElement();
									cursorRowsAxis1.setTupleCursorBeforeStart();
									while (cursorColumnsAxis1
											.hasNextFieldValue()) {
										cursorColumnsAxis1.nextFieldValue();
										fieldValueV = cursorColumnsAxis1
												.getFieldValue();
										MeasureName = fieldValueV
												.getFormattedValue();
										measurePresentationType = cursorColumnsAxis1
												.getField()
												.getPresentationType();
										if (measurePresentationType === sap.firefly.PresentationType.LONG_TEXT) {
											i = cursorColumnsAxis1
													.getTupleCursorIndex();
											DataLayer = seriesList
													.addNewStructure();
											dataList = DataLayer
													.setNewListByName("data");
											for (j = 0; j < tuplesRows; j++) {
												istotaltiy = false;
												currentRowTupleElementIndex = 0;
												cursorRowsAxis1
														.setTupleCursorToIndex(j);
												while (cursorRowsAxis1
														.hasNextTupleElement()) {
													cursorRowsAxis1
															.nextTupleElement();
													while (cursorRowsAxis1
															.hasNextFieldValue()) {
														cursorRowsAxis1
																.nextFieldValue();
														DimensionMemeber = cursorRowsAxis1
																.getFormattedValue();
														dimensionPresentationType = cursorRowsAxis1
																.getField()
																.getPresentationType();
														if ((dimensionPresentationType === sap.firefly.PresentationType.SHORT_TEXT)
																|| (dimensionPresentationType === sap.firefly.PresentationType.LONG_TEXT)
																|| (dimensionPresentationType === sap.firefly.PresentationType.MEDIUM_TEXT)) {
															DimensionField = cursorRowsAxis1
																	.getField();
															dimensionName = DimensionField
																	.getDimension()
																	.getName();
															if (!dimensionList
																	.contains(dimensionName)) {
																dimensionGroup = sap.firefly.XStringUtils
																		.concatenate3(
																				dimensionName,
																				",",
																				dimensionGroup);
																dimensionList
																		.add(dimensionName);
															}
															istotal = (cursorRowsAxis1
																	.getDimensionMemberType() === sap.firefly.MemberType.RESULT)
																	&& hideTotalOnRows;
															if (istotal) {
																istotaltiy = true;
															} else {
																currentRowTupleElementIndex = currentRowTupleElementIndex + 1;
																if ((row < j)
																		&& (rowTupleElements > 1)) {
																	check = sap.firefly.RsHiChartRenderer
																			.checkList(
																					categoriesList,
																					DimensionMemeber);
																	if (!check
																			&& (currentRowTupleElementIndex < tuplesRows)) {
																		categoriesStructure = categoriesList
																				.addNewStructure();
																		categoriesNestedList = categoriesStructure
																				.setNewListByName("categories");
																		categoriesStructure
																				.setStringByName(
																						"name",
																						DimensionMemeber);
																	}
																	row = j;
																} else {
																	if (rowTupleElements === 1) {
																		categoriesList
																				.addString(DimensionMemeber);
																	} else {
																		categoriesNestedList
																				.addString(DimensionMemeber);
																	}
																}
															}
														}
													}
												}
												dataCell1 = rs
														.getDataCell(i, j);
												if ((dataCell1.getXValue() !== null)) {
													if (!measurenamelist
															.contains(MeasureName)) {
														MeasureGroup = sap.firefly.XStringUtils
																.concatenate3(
																		MeasureName,
																		",",
																		MeasureGroup);
														measurenamelist
																.add(MeasureName);
													}
													if (!DataLayer
															.hasStringByName(MeasureName)) {
														DataLayer
																.setStringByName(
																		"name",
																		MeasureName);
													}
													valueType = dataCell1
															.getValueType();
													if (valueType === sap.firefly.XValueType.DOUBLE) {
														doubleValue = dataCell1
																.getDoubleValue();
														if (!istotaltiy) {
															dataList
																	.addDouble(doubleValue);
														}
													}
												}
											}
										}
									}
								}
							}
							if ((categoriesList.size() === 0)
									&& (seriesList.size() === 0)) {
								chartlang
										.setStringByName("noData",
												"At least one measure is required to build a chart.");
							} else {
								MeasureGroup = sap.firefly.RsHiChartRenderer
										.adjustlist(MeasureGroup);
								dimensionGroup = sap.firefly.RsHiChartRenderer
										.adjustlist(dimensionGroup);
								chartTitle = sap.firefly.XStringUtils
										.concatenate3(MeasureGroup, " Per ",
												dimensionGroup);
								title = theChartDatas
										.getStructureByName("title");
								title.setStringByName("text", chartTitle);
							}
							return theChartDatas;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsHiChartVizUtils",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHiChartVizUtils();
						},
						general : function(theChartData, charType) {
							var isInverted = false;
							var chartTypeInfo = theChartData
									.setNewStructureByName("chart");
							var chartlang = theChartData
									.setNewStructureByName("lang");
							var boost;
							var credits;
							var chartTypeInfostyle;
							var chartTypeInfospacing;
							var legend;
							var legenditemStyle;
							var plotOptions;
							var plotOptionsSeries;
							var title;
							var titleStyle;
							var plotOptionChartTypeStructure;
							var colors;
							var dataLabels;
							var dataLabelsStyle;
							chartlang.setStringByName("decimalPoint", ",");
							chartlang.setStringByName("thousandsSep", ".");
							chartTypeInfo.setBooleanByName("inverted",
									isInverted);
							chartTypeInfo.setIntegerByName("marginTop", 100);
							boost = theChartData.setNewStructureByName("boost");
							credits = theChartData
									.setNewStructureByName("credits");
							credits.setBooleanByName("enabled", false);
							boost.setBooleanByName("useGPUTranslations", true);
							boost.setStringByName("seriesThreshold", "200");
							chartTypeInfo.setStringByName("height", "600px");
							chartTypeInfostyle = chartTypeInfo
									.setNewStructureByName("style");
							chartTypeInfostyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							chartTypeInfostyle.setStringByName("fontSize",
									"13px");
							chartTypeInfospacing = chartTypeInfo
									.setNewStructureByName("spacing");
							chartTypeInfospacing.setIntegerByName(
									"spacingBottom", 10);
							chartTypeInfospacing.setIntegerByName("spacingTop",
									20);
							legend = theChartData
									.setNewStructureByName("legend");
							legend.setBooleanByName("enabled", true);
							legend.setBooleanByName("squareSymbol", true);
							legend.setIntegerByName("symbolRadius", 0);
							legend.setStringByName("verticalAlign", "top");
							legenditemStyle = legend
									.setNewStructureByName("itemStyle");
							legenditemStyle.setStringByName("fontSize", "12px");
							legenditemStyle.setStringByName("fontWeight",
									"normal");
							legenditemStyle.setStringByName("fontSize", "12px");
							plotOptions = theChartData
									.setNewStructureByName("plotOptions");
							plotOptionsSeries = plotOptions
									.setNewStructureByName("series");
							plotOptionsSeries.setIntegerByName(
									"boostThreshold", 200);
							plotOptionsSeries.setIntegerByName("cropThreshold",
									50);
							plotOptionsSeries.setIntegerByName(
									"turboThreshold", 100);
							title = theChartData.setNewStructureByName("title");
							title.setStringByName("align", "left");
							titleStyle = title.setNewStructureByName("style");
							titleStyle.setStringByName("fontWeight", "normal");
							titleStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							titleStyle.setStringByName("fontSize", "16px");
							titleStyle
									.setStringByName("color", "rgb(88,89,91)");
							plotOptionChartTypeStructure = plotOptions
									.setNewStructureByName(charType);
							colors = theChartData.setNewListByName("colors");
							colors.addString("#ffaa49");
							colors.addString("#e453a2");
							colors.addString("#71d3c3");
							colors.addString("#3391d5");
							colors.addString("#a49f9e");
							colors.addString("#add4d8");
							colors.addString("#006f91");
							colors.addString("#ffaecf");
							colors.addString("#7761c6");
							plotOptionChartTypeStructure.setBooleanByName(
									"showInLegend", true);
							dataLabels = plotOptionChartTypeStructure
									.setNewStructureByName("dataLabels");
							dataLabels.setBooleanByName("enabled", true);
							dataLabels
									.setBooleanByName("hideWhenOverlap", true);
							dataLabelsStyle = dataLabels
									.setNewStructureByName("style");
							dataLabelsStyle.setStringByName("fontWeight",
									"bold");
							dataLabelsStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							dataLabelsStyle.setStringByName("fontSize", "12px");
							dataLabelsStyle.setStringByName("color",
									"rgb(88,89,91)");
							return theChartData;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsHiChartVizUtilsCorrelation",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHiChartVizUtilsCorrelation();
						},
						generate : function(theChartData, chartType) {
							var isPlotLines = false;
							var chartTypeInfo = theChartData
									.getStructureByName("chart");
							var chartTypeInfostyle;
							var chartTypeInfospacing;
							var xAxis;
							var xAxisTitle;
							var xAxisTitleStyle;
							var yAxis;
							var yAxisTitle;
							var yAxisTitleStyle;
							var legend;
							var legenditemStyle;
							var plotOptions;
							var plotOptionChartTypeStructure;
							var dataLabels;
							var plotLines;
							var plotLinepProp;
							var plotLineslabels;
							var title;
							var titleStyle;
							chartTypeInfo.setStringByName("type", chartType);
							chartTypeInfo.setStringByName("height", "600px");
							chartTypeInfostyle = chartTypeInfo
									.setNewStructureByName("style");
							chartTypeInfostyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							chartTypeInfostyle.setStringByName("fontSize",
									"13px");
							chartTypeInfospacing = chartTypeInfo
									.setNewStructureByName("spacing");
							chartTypeInfospacing.setIntegerByName(
									"spacingBottom", 10);
							xAxis = theChartData.setNewStructureByName("xAxis");
							xAxis.setIntegerByName("lineWidth", 2);
							xAxis.setStringByName("lineColor",
									"rgb(166, 168, 171)");
							xAxis.setStringByName("tickColor",
									"rgb(166, 168, 171)");
							xAxisTitle = xAxis.setNewStructureByName("title");
							xAxisTitleStyle = xAxisTitle
									.setNewStructureByName("style");
							xAxisTitleStyle.setStringByName("color", "#000000");
							xAxisTitleStyle.setStringByName("fontWeight",
									"bold");
							yAxis = theChartData.setNewStructureByName("yAxis");
							yAxis.setIntegerByName("lineWidth", 2);
							yAxis.setIntegerByName("gridLineWidth", 0);
							yAxis.setStringByName("lineColor",
									"rgb(166, 168, 171)");
							yAxis.setStringByName("tickColor",
									"rgb(166, 168, 171)");
							yAxisTitle = yAxis.setNewStructureByName("title");
							yAxisTitleStyle = yAxisTitle
									.setNewStructureByName("style");
							yAxisTitleStyle.setStringByName("fontWeight",
									"bold");
							yAxisTitleStyle.setStringByName("color", "#000000");
							legend = theChartData
									.setNewStructureByName("legend");
							legend.setBooleanByName("enabled", false);
							legend.setBooleanByName("squareSymbol", true);
							legend.setIntegerByName("symbolRadius", 0);
							legend.setStringByName("layout", "vertical");
							legend.setStringByName("align", "right");
							legend.setStringByName("verticalAlign", "top");
							legenditemStyle = legend
									.setNewStructureByName("itemStyle");
							legenditemStyle.setStringByName("fontSize", "12px");
							legenditemStyle.setStringByName("fontWeight",
									"normal");
							plotOptions = theChartData
									.setNewStructureByName("plotOptions");
							plotOptionChartTypeStructure = plotOptions
									.setNewStructureByName(chartType);
							dataLabels = plotOptionChartTypeStructure
									.setNewStructureByName("dataLabels");
							dataLabels.setBooleanByName("enabled", false);
							if (isPlotLines) {
								plotLines = yAxis.setNewListByName("plotLines");
								plotLinepProp = plotLines.addNewStructure();
								plotLinepProp.setStringByName("color",
										"rgb(51, 145, 213)");
								plotLineslabels = plotLinepProp
										.setNewStructureByName("label");
								plotLineslabels.setStringByName("text",
										"referenceLine");
								plotLinepProp.setStringByName("dashStyle",
										"ShortDot");
								plotLinepProp.setIntegerByName("value", 10000);
								plotLinepProp.setIntegerByName("width", 2);
							}
							title = theChartData.setNewStructureByName("title");
							title.setStringByName("align", "left");
							titleStyle = title.setNewStructureByName("style");
							titleStyle.setStringByName("fontWeight", "normal");
							titleStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							titleStyle.setStringByName("fontSize", "16px");
							titleStyle
									.setStringByName("color", "rgb(88,89,91)");
							return theChartData;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsHiChartVizUtilsPolar",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHiChartVizUtilsPolar();
						},
						generate : function(theChartData, chartType) {
							var isDonut = true;
							var is3d = false;
							var chartTypeInfo = theChartData
									.getStructureByName("chart");
							var chartTypeInfostyle;
							var chartTypeInfospacing;
							var options3d;
							var legend;
							var legenditemStyle;
							var plotOptions;
							var yAxis;
							var yAxisTitle;
							var title;
							var titleStyle;
							var plotOptionChartTypeStructure;
							var plotOptionChartTypeStructureStyle;
							var plotOptionChartTypeStructureRotation;
							var dataLabels;
							var dataLabelsStyle;
							chartTypeInfo.setStringByName("type", chartType);
							chartTypeInfostyle = chartTypeInfo
									.setNewStructureByName("style");
							chartTypeInfostyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							chartTypeInfostyle.setStringByName("fontSize",
									"13px");
							chartTypeInfospacing = chartTypeInfo
									.setNewStructureByName("spacing");
							chartTypeInfospacing.setIntegerByName(
									"spacingBottom", 10);
							options3d = chartTypeInfo
									.setNewStructureByName("options3d");
							options3d.setBooleanByName("enabled", is3d);
							options3d.setBooleanByName("skew3d", is3d);
							options3d.setIntegerByName("alpha", 45);
							options3d.setIntegerByName("beta", 0);
							legend = theChartData
									.setNewStructureByName("legend");
							legend.setBooleanByName("enabled", false);
							legend.setBooleanByName("squareSymbol", true);
							legend.setIntegerByName("symbolRadius", 0);
							legend.setStringByName("layout", "vertical");
							legend.setStringByName("align", "right");
							legend.setStringByName("verticalAlign", "top");
							legenditemStyle = legend
									.setNewStructureByName("itemStyle");
							legenditemStyle.setStringByName("fontSize", "12px");
							legenditemStyle.setStringByName("fontWeight",
									"normal");
							legenditemStyle.setStringByName("fontSize", "12px");
							plotOptions = theChartData
									.setNewStructureByName("plotOptions");
							yAxis = theChartData.setNewStructureByName("yAxis");
							yAxisTitle = yAxis.setNewStructureByName("title");
							yAxisTitle.setStringByName("text", "");
							title = theChartData.setNewStructureByName("title");
							title.setStringByName("align", "left");
							titleStyle = title.setNewStructureByName("style");
							titleStyle.setStringByName("fontWeight", "normal");
							titleStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							titleStyle.setStringByName("fontSize", "16px");
							titleStyle.setStringByName("color", "#231f20");
							titleStyle.setStringByName("fontWeight", "300");
							plotOptionChartTypeStructure = plotOptions
									.setNewStructureByName(chartType);
							if (sap.firefly.XString.isEqual("wordcloud",
									chartType)) {
								plotOptionChartTypeStructureStyle = plotOptionChartTypeStructure
										.setNewStructureByName("style");
								plotOptionChartTypeStructureStyle
										.setStringByName("fontFamily",
												"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
								plotOptionChartTypeStructureRotation = plotOptionChartTypeStructure
										.setNewStructureByName("rotation");
								plotOptionChartTypeStructureRotation
										.setIntegerByName("from", -45);
								plotOptionChartTypeStructureRotation
										.setIntegerByName("to", 25);
								plotOptionChartTypeStructure.setStringByName(
										"placementStrategy", "center");
							}
							plotOptionChartTypeStructure.setBooleanByName(
									"showInLegend", true);
							if (isDonut) {
								plotOptionChartTypeStructure.setStringByName(
										"innerSize", "50%");
							}
							if (is3d) {
								plotOptionChartTypeStructure.setIntegerByName(
										"depth", 45);
							}
							dataLabels = plotOptionChartTypeStructure
									.setNewStructureByName("dataLabels");
							dataLabels.setBooleanByName("enabled", false);
							dataLabels
									.setBooleanByName("hideWhenOverlap", true);
							dataLabelsStyle = dataLabels
									.setNewStructureByName("style");
							dataLabelsStyle.setStringByName("fontWeight",
									"bold");
							dataLabelsStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							dataLabelsStyle.setStringByName("fontSize", "12px");
							dataLabelsStyle.setStringByName("color",
									"rgb(88,89,91)");
							return theChartData;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsHiChartVizUtilsSimple",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							return new sap.firefly.RsHiChartVizUtilsSimple();
						},
						generate : function(theChartData, chartType) {
							var isPlotLines = true;
							var isPolar = false;
							var isGrouping = true;
							var Interpolation = "circle";
							var StackingType = "normal";
							var chartTypeInfo = theChartData
									.getStructureByName("chart");
							var xAxis;
							var legend;
							var legenditemStyle;
							var plotOptions;
							var yAxis;
							var yAxisTitle;
							var yAxisLabels;
							var yAxisLabelsStyle;
							var xAxisLabels;
							var xAxisLabelsStyle;
							var yAxisStackLabels;
							var plotLines;
							var plotLinepProp;
							var plotLineslabels;
							var plotOptionChartTypeStructure;
							var dataLabels;
							var dataLabelsStyle;
							var yAxisStackLabelsStyle;
							chartTypeInfo.setIntegerByName("marginTop", 80);
							chartTypeInfo.setStringByName("type", chartType);
							chartTypeInfo.setBooleanByName("polar", isPolar);
							xAxis = theChartData.setNewStructureByName("xAxis");
							legend = theChartData
									.setNewStructureByName("legend");
							legend.setBooleanByName("enabled", true);
							legend.setBooleanByName("squareSymbol", true);
							legend.setIntegerByName("symbolRadius", 0);
							legend.setStringByName("layout", "horizontal");
							legend.setStringByName("align", "center");
							legend.setStringByName("verticalAlign", "top");
							legend.setIntegerByName("itemMarginTop", 25);
							legenditemStyle = legend
									.setNewStructureByName("itemStyle");
							legenditemStyle.setStringByName("fontSize", "12px");
							legenditemStyle.setStringByName("fontWeight",
									"normal");
							legenditemStyle.setStringByName("fontSize", "12px");
							plotOptions = theChartData
									.setNewStructureByName("plotOptions");
							yAxis = theChartData.setNewStructureByName("yAxis");
							yAxisTitle = yAxis.setNewStructureByName("title");
							yAxisLabels = yAxis.setNewStructureByName("labels");
							yAxisLabelsStyle = yAxisLabels
									.setNewStructureByName("style");
							xAxisLabels = xAxis.setNewStructureByName("labels");
							xAxisLabelsStyle = xAxisLabels
									.setNewStructureByName("style");
							yAxisStackLabels = yAxis
									.setNewStructureByName("stackLabels");
							if (isPlotLines) {
								plotLines = yAxis.setNewListByName("plotLines");
								plotLinepProp = plotLines.addNewStructure();
								plotLinepProp.setStringByName("color",
										"rgb(51, 145, 213)");
								plotLineslabels = plotLinepProp
										.setNewStructureByName("label");
								plotLineslabels.setStringByName("text",
										"referenceLine");
								plotLinepProp.setStringByName("dashStyle",
										"ShortDot");
								plotLineslabels.setIntegerByName("rotation", 0);
								plotLinepProp.setIntegerByName("value", 10000);
								plotLinepProp.setIntegerByName("width", 2);
							}
							yAxisTitle.setStringByName("text", "");
							if (isPolar) {
								yAxis.setStringByName("gridLineInterpolation",
										Interpolation);
								xAxis.setIntegerByName("lineWidth", 0);
							} else {
								yAxis.setIntegerByName("gridLineWidth", 0);
								yAxisLabelsStyle.setStringByName("color",
										"transparent");
								xAxisLabelsStyle.setStringByName("fontSize",
										"13px");
								xAxisLabelsStyle.setStringByName("fill",
										"rgb(166, 168, 171)");
								xAxisLabelsStyle.setStringByName("fontWeight",
										"normal");
								xAxis.setIntegerByName("lineWidth", 2);
								xAxis.setStringByName("lineColor",
										"rgb(0, 0, 0)");
								xAxis.setStringByName("tickColor",
										"rgb(166, 168, 171)");
							}
							plotOptionChartTypeStructure = plotOptions
									.setNewStructureByName(chartType);
							plotOptionChartTypeStructure.setBooleanByName(
									"showInLegend", true);
							plotOptionChartTypeStructure.setBooleanByName(
									"grouping", isGrouping);
							dataLabels = plotOptionChartTypeStructure
									.setNewStructureByName("dataLabels");
							dataLabels.setBooleanByName("enabled", true);
							dataLabels
									.setBooleanByName("hideWhenOverlap", true);
							dataLabelsStyle = dataLabels
									.setNewStructureByName("style");
							if (sap.firefly.XString.isEqual(StackingType,
									"percent")) {
								dataLabels.setStringByName("format",
										"{point.percentage:.2f} %");
							} else {
								dataLabels
										.setStringByName("format", "{y:,.2f}");
							}
							dataLabelsStyle
									.setStringByName("fontFamily",
											"LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
							dataLabelsStyle.setStringByName("fontSize", "12px");
							dataLabelsStyle.setStringByName("fontWeight",
									"normal");
							dataLabelsStyle.setStringByName("fill",
									"black !important");
							dataLabelsStyle.setStringByName("color",
									"black !important");
							dataLabelsStyle.setStringByName("textOutline",
									"0px");
							dataLabels.setStringByName("align", "left");
							if (!sap.firefly.XString.isEqual("null",
									StackingType)) {
								plotOptionChartTypeStructure.setStringByName(
										"stacking", StackingType);
								yAxisStackLabels.setBooleanByName("enabled",
										true);
								yAxisStackLabels.setStringByName("align",
										"right");
								dataLabels.setStringByName("align", "center");
								yAxisStackLabelsStyle = yAxisStackLabels
										.setNewStructureByName("style");
								yAxisStackLabelsStyle.setStringByName(
										"fontSize", "12px");
								yAxisStackLabelsStyle.setStringByName("fill",
										"rgb(88, 89, 91)");
								yAxisStackLabelsStyle.setStringByName(
										"fontWeight", "700");
								yAxisStackLabelsStyle.setStringByName("color",
										"rgb(88, 89, 91)");
								if (sap.firefly.XString.isEqual("normal",
										StackingType)) {
									dataLabels.setStringByName("overflow",
											"none");
									dataLabels.setBooleanByName("crop", true);
								}
							}
							return theChartData;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsRequestDecoratorFactory",
				sap.firefly.XObject,
				{
					$statics : {
						RESULTSET_REQUEST_DECORATOR_PROVIDER : "RESULTSET_REQUEST_DECORATOR_PROVIDER.IMPLEMENTATION",
						getResultsetRequestDecorator : function(application,
								systemDescription, requestStructure) {
							var sessionSingletons = application
									.getSessionSingletons();
							var factoryObject = sessionSingletons
									.getByKey(sap.firefly.RsRequestDecoratorFactory.RESULTSET_REQUEST_DECORATOR_PROVIDER);
							var factory;
							if (factoryObject === null) {
								factory = new sap.firefly.RsRequestDecoratorFactory();
								factory.initProviders();
								sessionSingletons
										.put(
												sap.firefly.RsRequestDecoratorFactory.RESULTSET_REQUEST_DECORATOR_PROVIDER,
												factory);
							} else {
								factory = factoryObject;
							}
							return factory
									.getResultsetRequestDecoratorInternal(
											application, systemDescription,
											requestStructure);
						}
					},
					m_providers : null,
					getResultsetRequestDecoratorInternal : function(
							application, systemDescription, requestStructure) {
						var result = null;
						var i;
						var provider;
						var decorator;
						for (i = 0; i < this.m_providers.size(); i++) {
							provider = this.m_providers.get(i);
							decorator = provider.getResultsetRequestDecorator(
									application, systemDescription,
									requestStructure);
							if (decorator === null) {
								continue;
							}
							if (result !== null) {
								throw sap.firefly.XException
										.createIllegalStateException("duplicate decorator");
							}
							result = decorator;
						}
						return result;
					},
					initProviders : function() {
						var registrationService;
						var clazzes;
						var i;
						var clazz;
						var provider;
						if (this.m_providers !== null) {
							return;
						}
						this.m_providers = sap.firefly.XList.create();
						registrationService = sap.firefly.RegistrationService
								.getInstance();
						if (registrationService !== null) {
							clazzes = registrationService
									.getReferences(sap.firefly.RsRequestDecoratorFactory.RESULTSET_REQUEST_DECORATOR_PROVIDER);
							if (clazzes !== null) {
								for (i = 0; i < clazzes.size(); i++) {
									clazz = clazzes.get(i);
									provider = clazz.newInstance(this);
									if (provider === null) {
										continue;
									}
									this.m_providers.add(provider);
								}
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsInputReadinessState",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(inputStateIndex, typeList) {
							var types;
							var parameterMap;
							var i;
							var typeStructure;
							var type;
							var parameter;
							var state;
							if (typeList === null) {
								return null;
							}
							types = sap.firefly.XList.create();
							parameterMap = sap.firefly.XHashMapByString
									.create();
							for (i = typeList.size() - 1; i >= 0; i--) {
								typeStructure = typeList.getStructureByIndex(i);
								type = sap.firefly.RsInputReadinessState
										.getTypeFromStructure(typeStructure);
								if (type === null) {
									continue;
								}
								types.add(type);
								parameter = sap.firefly.RsInputReadinessState
										.getParametersFromStructure(typeStructure);
								if (parameter !== null) {
									parameterMap.put(type.getName(), parameter);
								}
							}
							if (types.isEmpty()) {
								return null;
							}
							state = new sap.firefly.RsInputReadinessState();
							state.m_rsStateIndex = inputStateIndex;
							state.m_types = types;
							state.m_paramterMap = parameterMap;
							return state;
						},
						getTypeFromStructure : function(flagStructure) {
							var typeString;
							if (flagStructure === null) {
								return null;
							}
							typeString = flagStructure
									.getStringByNameWithDefault(
											sap.firefly.InAConstants.QY_INPUT_READINESS_FLAG,
											null);
							return sap.firefly.InputReadinessType
									.getOrCreate(typeString);
						},
						getParametersFromStructure : function(flagStructure) {
							var parameters;
							var parameterList;
							var j;
							var parameter;
							if (flagStructure === null) {
								return null;
							}
							parameters = sap.firefly.XListOfString.create();
							parameterList = flagStructure
									.getListByName(sap.firefly.InAConstants.QY_PARAMETERS);
							if (parameterList === null) {
								return null;
							}
							for (j = 0; j < parameterList.size(); j++) {
								parameter = parameterList
										.getStringByIndexWithDefault(j, null);
								if (sap.firefly.XStringUtils
										.isNullOrEmpty(parameter)) {
									continue;
								}
								parameters.add(parameter);
							}
							if (parameters.isEmpty()) {
								return null;
							}
							return parameters;
						}
					},
					m_rsStateIndex : 0,
					m_types : null,
					m_paramterMap : null,
					getIndex : function() {
						return this.m_rsStateIndex;
					},
					isInputEnabled : function() {
						return this
								.hasSingleInputReadinessType(sap.firefly.InputReadinessType.INPUT_ENABLED);
					},
					hasSingleInputReadinessType : function(type) {
						return (this.m_types.size() === 1)
								&& this.hasInputReadinessType(type);
					},
					hasInputReadinessType : function(type) {
						return this.m_types.contains(type);
					},
					getInputReadinessTypes : function() {
						return this.m_types;
					},
					getParameterByType : function(type) {
						return this.m_paramterMap.getByKey(type.getName());
					}
				});
$Firefly
		.createClass("sap.firefly.RsDefDimension", sap.firefly.XObject,
				{
					$statics : {
						create : function(dimension) {
							var object = new sap.firefly.RsDefDimension();
							object.setup(dimension);
							return object;
						}
					},
					m_dimension : null,
					m_fields : null,
					m_visibleFields : null,
					setup : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
						this.m_fields = sap.firefly.XListWeakRef.create();
						this.m_visibleFields = sap.firefly.XListWeakRef
								.create();
					},
					releaseObject : function() {
						this.m_dimension = null;
						this.m_fields = sap.firefly.XObject
								.releaseIfNotNull(this.m_fields);
						this.m_visibleFields = sap.firefly.XObject
								.releaseIfNotNull(this.m_visibleFields);
						sap.firefly.RsDefDimension.$superclass.releaseObject
								.call(this);
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					getAllFields : function() {
						return this.m_fields;
					},
					addField : function(field) {
						this.m_fields.add(field);
					},
					getVisibleFields : function() {
						return this.m_visibleFields;
					},
					addVisibleField : function(field) {
						this.m_visibleFields.add(field);
					}
				});
$Firefly.createClass("sap.firefly.RsDataCellEntry", sap.firefly.XObject, {
	$statics : {
		create : function(name) {
			var value = new sap.firefly.RsDataCellEntry();
			value.m_name = name;
			return value;
		}
	},
	m_name : null,
	m_disaggregationMode : null,
	m_disaggregationCellRefName : null,
	releaseObject : function() {
		this.m_name = null;
		this.m_disaggregationMode = null;
		this.m_disaggregationCellRefName = null;
		sap.firefly.RsDataCellEntry.$superclass.releaseObject.call(this);
	},
	getName : function() {
		return this.m_name;
	},
	setDisaggregationMode : function(disaggregationMode) {
		this.m_disaggregationMode = disaggregationMode;
	},
	getDisaggregationMode : function() {
		return this.m_disaggregationMode;
	},
	setDisaggregationRefCellName : function(disaggregationRefCellName) {
		this.m_disaggregationCellRefName = disaggregationRefCellName;
	},
	getDisaggregationRefCellName : function() {
		return this.m_disaggregationCellRefName;
	}
});
$Firefly
		.createClass(
				"sap.firefly.QRriTarget",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							var target = new sap.firefly.QRriTarget();
							target.m_parameters = sap.firefly.XHashMapOfStringByString
									.create();
							target.m_customProperties = sap.firefly.XHashMapOfStringByString
									.create();
							return target;
						}
					},
					m_parameters : null,
					m_customProperties : null,
					releaseObject : function() {
						this.m_parameters = sap.firefly.XObject
								.releaseIfNotNull(this.m_parameters);
						this.m_customProperties = sap.firefly.XObject
								.releaseIfNotNull(this.m_customProperties);
						sap.firefly.QRriTarget.$superclass.releaseObject
								.call(this);
					},
					getParameters : function() {
						return this.m_parameters;
					},
					getCustomProperties : function() {
						return this.m_customProperties;
					},
					getDataSource : function() {
						var receiverApplicationType = this.m_parameters
								.getByKey(sap.firefly.InAConstants.QY_RRI_RECEIVER_APPLICATION_TYPE);
						var query;
						var rriName;
						var rriValue;
						var dataSource;
						if (sap.firefly.XString
								.isEqual(
										receiverApplicationType,
										sap.firefly.InAConstants.QY_RRI_T_RECEIVER_APPLICATION_QURY) === false) {
							return null;
						}
						query = this.m_customProperties
								.getByKey(sap.firefly.InAConstants.QY_RRI_P_QUERY);
						if (sap.firefly.XStringUtils.isNullOrEmpty(query)) {
							return null;
						}
						rriName = this.m_customProperties
								.getByKey(sap.firefly.InAConstants.QY_RRI_P_PARAMETER_NAME);
						if (sap.firefly.XStringUtils.isNullOrEmpty(rriName)) {
							return null;
						}
						rriValue = this.m_customProperties
								.getByKey(sap.firefly.InAConstants.QY_RRI_P_PARAMETER_VALUE);
						if (sap.firefly.XStringUtils.isNullOrEmpty(rriValue)) {
							return null;
						}
						dataSource = sap.firefly.QFactory2.newDataSource();
						dataSource.setType(sap.firefly.MetaObjectType.QUERY);
						dataSource.setObjectName(query);
						dataSource.setRriName(rriName);
						dataSource.setRriValue(rriValue);
						return dataSource;
					},
					canBeExecutedLocally : function() {
						var logicalDestination;
						if (this.m_parameters
								.containsKey(sap.firefly.InAConstants.QY_RRI_LOGICAL_DESTINATION)) {
							logicalDestination = this.m_parameters
									.getByKey(sap.firefly.InAConstants.QY_RRI_LOGICAL_DESTINATION);
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(logicalDestination)) {
								return true;
							}
							if (sap.firefly.XString.isEqual(logicalDestination,
									"*")) {
								return true;
							}
							return false;
						}
						return false;
					}
				});
$Firefly.createClass("sap.firefly.QRriTargetCallbackIdentifier",
		sap.firefly.XObject, {
			manager : null,
			row : 0,
			column : 0,
			listener : null,
			customIdentifier : null
		});
$Firefly
		.createClass(
				"sap.firefly.QRriTargetManager",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(queryManager) {
							var rriTargetManager = new sap.firefly.QRriTargetManager();
							rriTargetManager.setupInstance(queryManager);
							return rriTargetManager;
						}
					},
					m_resultSetRow : 0,
					m_resultSetColumn : 0,
					m_queryManager : null,
					m_extResult : null,
					setupInstance : function(queryManager) {
						this.m_queryManager = sap.firefly.XWeakReferenceUtil
								.getWeakRef(queryManager);
					},
					releaseObject : function() {
						this.m_queryManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_queryManager);
						this.m_extResult = null;
						sap.firefly.QRriTargetManager.$superclass.releaseObject
								.call(this);
					},
					setResult : function(extResult, identifier) {
						var rriTargets;
						this.m_extResult = extResult;
						if (identifier.listener !== null) {
							rriTargets = null;
							if (extResult.hasErrors() === false) {
								rriTargets = extResult.getData();
							}
							identifier.listener.onRriTargetResolution(
									extResult, rriTargets,
									identifier.customIdentifier);
						}
					},
					setResultSetContext : function(resultSetRow,
							resultSetColumn) {
						this.m_resultSetRow = resultSetRow;
						this.m_resultSetColumn = resultSetColumn;
					},
					getResultSetRow : function() {
						return this.m_resultSetRow;
					},
					getResultSetColumn : function() {
						return this.m_resultSetColumn;
					},
					processRriTargetResolution : function(syncType, listener,
							customIdentifier) {
						var identifier = new sap.firefly.QRriTargetCallbackIdentifier();
						var queryManager;
						var result;
						identifier.row = this.m_resultSetRow;
						identifier.column = this.m_resultSetColumn;
						identifier.manager = this;
						identifier.customIdentifier = customIdentifier;
						identifier.listener = listener;
						this.m_extResult = null;
						queryManager = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryManager);
						(queryManager).processRriTargetSync(syncType,
								identifier);
						result = this.m_extResult;
						this.m_extResult = null;
						return result;
					}
				});
$Firefly.createClass("sap.firefly.QRequestSettings", sap.firefly.XObject, {
	$statics : {
		create : function(offset, windowSize, isHierarchyShot) {
			var newObj = new sap.firefly.QRequestSettings();
			newObj.m_offset = offset;
			newObj.m_windowSize = windowSize;
			newObj.m_isHierarchyShot = isHierarchyShot;
			return newObj;
		}
	},
	m_offset : 0,
	m_windowSize : 0,
	m_isHierarchyShot : false,
	m_isDeltaDrill : false
});
$Firefly.createClass("sap.firefly.QVariableProcessorResult",
		sap.firefly.XObject, {
			$statics : {
				createVariableProcessorResult : function() {
					var result = new sap.firefly.QVariableProcessorResult();
					return result;
				}
			},
			customIdentifier : null,
			m_successfullyProcessed : false,
			releaseObject : function() {
				this.customIdentifier = null;
				sap.firefly.QVariableProcessorResult.$superclass.releaseObject
						.call(this);
			},
			isSuccessfullyProcessed : function() {
				return this.m_successfullyProcessed;
			},
			setIsSuccessfullyProcessed : function(successfullProcessed) {
				this.m_successfullyProcessed = successfullProcessed;
			},
			getCustomIdentifier : function() {
				return this.customIdentifier;
			},
			setCustomIdentifier : function(customIdentifier) {
				this.customIdentifier = customIdentifier;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.XCommand",
				sap.firefly.XObject,
				{
					$statics : {
						assertParameterNameNotEmpty : function(parameterName) {
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(parameterName)) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal parameter name");
							}
						}
					},
					m_commandContext : null,
					m_commandType : null,
					m_commandName : null,
					m_final : false,
					m_parameters : null,
					m_followUpCommands : null,
					m_followUpCommandParameterMappings : null,
					getCommandContext : function() {
						return this.m_commandContext;
					},
					getCommandResultClass : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setupCommand : function(commandContext, commandType,
							commandName) {
						this.m_commandContext = commandContext;
						this.m_commandType = commandType;
						this.m_commandName = commandName;
						this.m_final = false;
						this.m_parameters = sap.firefly.XHashMapByString
								.create();
						this.m_followUpCommands = sap.firefly.XHashMapByString
								.create();
						this.m_followUpCommandParameterMappings = sap.firefly.XHashMapByString
								.create();
					},
					releaseObject : function() {
						this.m_parameters = sap.firefly.XObject
								.releaseIfNotNull(this.m_parameters);
						this.m_followUpCommands = sap.firefly.XObject
								.releaseIfNotNull(this.m_followUpCommands);
						this.m_followUpCommandParameterMappings = sap.firefly.XObject
								.releaseIfNotNull(this.m_followUpCommandParameterMappings);
						sap.firefly.XCommand.$superclass.releaseObject
								.call(this);
					},
					getCommandType : function() {
						return this.m_commandType;
					},
					getCommandName : function() {
						return this.m_commandName;
					},
					addParameter : function(parameterName, parameterValue) {
						this.assertFinal(false);
						sap.firefly.XCommand
								.assertParameterNameNotEmpty(parameterName);
						this.m_parameters.put(parameterName, parameterValue);
						return this;
					},
					getParameter : function(parameterName) {
						sap.firefly.XCommand
								.assertParameterNameNotEmpty(parameterName);
						return this.m_parameters.getByKey(parameterName);
					},
					addParameterString : function(parameterName, parameterValue) {
						return this
								.addParameter(parameterName,
										sap.firefly.XStringValue
												.create(parameterValue));
					},
					addParameterBoolean : function(parameterName,
							parameterValue) {
						return this.addParameter(parameterName,
								sap.firefly.XBooleanValue
										.create(parameterValue));
					},
					addParameterInteger : function(parameterName,
							parameterValue) {
						return this.addParameter(parameterName,
								sap.firefly.XIntegerValue
										.create(parameterValue));
					},
					assertFinal : function(shouldBeFinal) {
						if (this.m_final !== shouldBeFinal) {
							throw sap.firefly.XException
									.createIllegalStateException("final");
						}
					},
					setFollowUpCommand : function(followUpType, command) {
						this.assertFinal(false);
						if (command === null) {
							this.m_followUpCommands.remove(followUpType
									.getName());
						} else {
							this.m_followUpCommands.put(followUpType.getName(),
									command);
						}
						return this;
					},
					getFollowUpCommand : function(followUpType) {
						return this.m_followUpCommands.getByKey(followUpType
								.getName());
					},
					setFollowUpCommandParameterMapping : function(followUpType,
							followUpParameterName, resultParameterName) {
						var deleteParameter;
						var parameterMappings;
						this.assertFinal(false);
						sap.firefly.XCommand
								.assertParameterNameNotEmpty(followUpParameterName);
						deleteParameter = sap.firefly.XStringUtils
								.isNullOrEmpty(resultParameterName);
						parameterMappings = this.m_followUpCommandParameterMappings
								.getByKey(followUpType.getName());
						if (parameterMappings === null) {
							if (deleteParameter === false) {
								parameterMappings = sap.firefly.XHashMapOfStringByString
										.create();
								this.m_followUpCommandParameterMappings.put(
										followUpType.getName(),
										parameterMappings);
								parameterMappings.put(followUpParameterName,
										resultParameterName);
							}
						} else {
							if (deleteParameter) {
								parameterMappings.remove(followUpParameterName);
								if (parameterMappings.isEmpty()) {
									this.m_followUpCommandParameterMappings
											.remove(followUpType.getName());
								}
							} else {
								parameterMappings.put(followUpParameterName,
										resultParameterName);
							}
						}
						return this;
					},
					getFollowUpParameterMappings : function(followUpType) {
						this.assertFinal(true);
						return this.m_followUpCommandParameterMappings
								.getByKey(followUpType.getName());
					},
					processCommand : function(syncType, commandListener,
							customIdentifier) {
						var commandResultClass;
						var newInstance;
						var commandResult;
						this.m_final = true;
						commandResultClass = this.getCommandResultClass();
						newInstance = commandResultClass.newInstance(this);
						commandResult = newInstance;
						return commandResult.processCommand(this, syncType,
								commandListener, customIdentifier);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCommandResult",
				sap.firefly.XObject,
				{
					$statics : {
						assertParameterNameNotEmpty : function(parameterName) {
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(parameterName)) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal parameter name");
							}
						},
						assertParameterNotNull : function(parameterValue) {
							if (parameterValue === null) {
								throw sap.firefly.XException
										.createIllegalStateException("parameter null");
							}
						}
					},
					m_command : null,
					m_syncType : null,
					m_commandListener : null,
					m_customIdentifier : null,
					m_messageManager : null,
					m_extResult : null,
					m_resultParameters : null,
					m_processFinished : false,
					m_followUpFinished : false,
					m_followUpCommandsSize : 0,
					m_followUpCommandsProcessed : 0,
					m_followUpCommandResults : null,
					getCommand : function() {
						return this.m_command;
					},
					getCommandBase : function() {
						return this.m_command;
					},
					getMessageManager : function() {
						return this.m_messageManager;
					},
					getSyncType : function() {
						return this.m_syncType;
					},
					processCommand : function(command, syncType,
							commandListener, customIdentifier) {
						this.m_command = command;
						this.m_syncType = syncType;
						this.m_commandListener = commandListener;
						this.m_customIdentifier = customIdentifier;
						this.m_messageManager = sap.firefly.MessageManager
								.createMessageManager();
						if (this.getCommandBase().getCommandContext()
								.getVersion() < sap.firefly.XVersion.V79_XCMD_STRICT_ERROR_HANDLING) {
							this.m_extResult = sap.firefly.ExtResult.create(
									this, this.m_messageManager);
						} else {
							this.m_extResult = sap.firefly.ExtResult
									.createWithExternalMessages(this,
											this.m_messageManager);
						}
						this.m_resultParameters = sap.firefly.XHashMapByString
								.create();
						this.m_followUpCommandResults = sap.firefly.XHashMapByString
								.create();
						this.m_processFinished = false;
						this.m_followUpFinished = false;
						this.m_followUpCommandsSize = 0;
						this.m_followUpCommandsProcessed = 0;
						this.process();
						return this.m_extResult;
					},
					releaseObject : function() {
						this.m_command = null;
						this.m_syncType = null;
						this.m_commandListener = null;
						this.m_customIdentifier = null;
						this.m_messageManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_messageManager);
						this.m_extResult = sap.firefly.XObject
								.releaseIfNotNull(this.m_extResult);
						this.m_resultParameters = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultParameters);
						this.m_followUpCommandResults = sap.firefly.XObject
								.releaseIfNotNull(this.m_followUpCommandResults);
						sap.firefly.XCommandResult.$superclass.releaseObject
								.call(this);
					},
					process : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					onProcessFinished : function() {
						var followUpTypesToProcess;
						this.m_processFinished = true;
						followUpTypesToProcess = this
								.getFollowUpTypesToProcess();
						this.m_followUpCommandsSize = followUpTypesToProcess
								.size();
						if (this.m_followUpCommandsSize > 0) {
							this
									.processFollowUpCommands(followUpTypesToProcess);
						} else {
							this.m_followUpFinished = true;
							this.onNotifyListener();
						}
					},
					getFollowUpTypesToProcess : function() {
						var followUpTypes;
						this.assertProcessFinished(true);
						this.assertFollowUpFinished(false);
						followUpTypes = sap.firefly.XList.create();
						if (this
								.getFollowUpCommand(sap.firefly.XCommandFollowUpType.ALWAYS) !== null) {
							followUpTypes
									.add(sap.firefly.XCommandFollowUpType.ALWAYS);
						}
						if (this.getMessageManager().hasErrors()) {
							if (this
									.getFollowUpCommand(sap.firefly.XCommandFollowUpType.ERROR) !== null) {
								followUpTypes
										.add(sap.firefly.XCommandFollowUpType.ERROR);
							}
						} else {
							if (this
									.getFollowUpCommand(sap.firefly.XCommandFollowUpType.SUCCESS) !== null) {
								followUpTypes
										.add(sap.firefly.XCommandFollowUpType.SUCCESS);
							}
						}
						return followUpTypes;
					},
					processFollowUpCommands : function(followUpTypesToProcess) {
						var typesIndex;
						var followUpType;
						var followUpCommand;
						var parameterValuesEffective;
						var parameterNames;
						var namesIndex;
						var parameterName;
						var parameterValue;
						for (typesIndex = 0; typesIndex < followUpTypesToProcess
								.size(); typesIndex++) {
							followUpType = followUpTypesToProcess
									.get(typesIndex);
							followUpCommand = this
									.getFollowUpCommand(followUpType);
							parameterValuesEffective = this
									.getFollowUpParameterValuesEffective(followUpType);
							if (parameterValuesEffective !== null) {
								parameterNames = parameterValuesEffective
										.getKeysAsReadOnlyListOfString();
								for (namesIndex = 0; namesIndex < parameterNames
										.size(); namesIndex++) {
									parameterName = parameterNames
											.get(namesIndex);
									parameterValue = parameterValuesEffective
											.getByKey(parameterName);
									followUpCommand.addParameter(parameterName,
											parameterValue);
								}
							}
							followUpCommand.processCommand(this.getSyncType(),
									this, followUpType);
						}
					},
					onNotifyListener : function() {
						if (this.m_commandListener !== null) {
							this.m_commandListener.onCommandProcessed(
									this.m_extResult, this,
									this.m_customIdentifier);
						}
					},
					assertProcessFinished : function(shouldBeFinished) {
						if (this.m_processFinished !== shouldBeFinished) {
							throw sap.firefly.XException
									.createIllegalStateException("Processing state is not as expected");
						}
					},
					assertFollowUpFinished : function(shouldBeFinished) {
						if (this.m_followUpFinished !== shouldBeFinished) {
							throw sap.firefly.XException
									.createIllegalStateException("FollowUp state is not as expected");
						}
					},
					addResultParameter : function(parameterName, parameterValue) {
						this.assertProcessFinished(false);
						sap.firefly.XCommandResult
								.assertParameterNameNotEmpty(parameterName);
						this.m_resultParameters.put(parameterName,
								parameterValue);
						return this;
					},
					getResultParameter : function(parameterName) {
						this.assertProcessFinished(true);
						sap.firefly.XCommandResult
								.assertParameterNameNotEmpty(parameterName);
						return this.m_resultParameters.getByKey(parameterName);
					},
					addResultParameterString : function(parameterName,
							parameterValue) {
						return this
								.addResultParameter(parameterName,
										sap.firefly.XStringValue
												.create(parameterValue));
					},
					getResultParameterString : function(parameterName) {
						var parameterValue = this
								.getResultParameter(parameterName);
						if (parameterValue === null) {
							return null;
						}
						return parameterValue.getStringValue();
					},
					addFollowUpCommandResult : function(followUpType,
							commandResult) {
						this.assertFollowUpFinished(false);
						if (commandResult === null) {
							this.m_followUpCommandResults.remove(followUpType
									.getName());
						} else {
							this.m_followUpCommandResults.put(followUpType
									.getName(), commandResult);
						}
						return this;
					},
					getFollowUpCommandResult : function(followUpType) {
						this.assertFollowUpFinished(true);
						return this.m_followUpCommandResults
								.getByKey(followUpType.getName());
					},
					getParameter : function(parameterName) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						sap.firefly.XCommandResult
								.assertParameterNotNull(parameterValue);
						return parameterValue;
					},
					getParameterWithDefaultValue : function(parameterName,
							defaultValue) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						if (parameterValue === null) {
							return defaultValue;
						}
						return parameterValue;
					},
					getParameterString : function(parameterName) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						sap.firefly.XCommandResult
								.assertParameterNotNull(parameterValue);
						return parameterValue.getStringValue();
					},
					getParameterStringWithDefaultValue : function(
							parameterName, defaultValue) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						if (parameterValue === null) {
							return defaultValue;
						}
						return parameterValue.getStringValue();
					},
					getParameterBoolean : function(parameterName) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						sap.firefly.XCommandResult
								.assertParameterNotNull(parameterValue);
						return parameterValue.getBooleanValue();
					},
					getParameterBooleanWithDefaultValue : function(
							parameterName, defaultValue) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						if (parameterValue === null) {
							return defaultValue;
						}
						return parameterValue.getBooleanValue();
					},
					getIntegerBoolean : function(parameterName) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						sap.firefly.XCommandResult
								.assertParameterNotNull(parameterValue);
						return parameterValue.getIntegerValue();
					},
					getParameterIntegerWithDefaultValue : function(
							parameterName, defaultValue) {
						var parameterValue = this.getCommandBase()
								.getParameter(parameterName);
						if (parameterValue === null) {
							return defaultValue;
						}
						return parameterValue.getIntegerValue();
					},
					getFollowUpCommand : function(followUpType) {
						return this.getCommandBase().getFollowUpCommand(
								followUpType);
					},
					getFollowUpParameterValuesEffective : function(followUpType) {
						var resultParameterValues;
						var parameterMappings;
						var mappingKeys;
						var mappingIndex;
						var targetParameterName;
						var sourceParameterName;
						var sourceResultValue;
						this.assertProcessFinished(true);
						resultParameterValues = null;
						parameterMappings = this.getCommandBase()
								.getFollowUpParameterMappings(followUpType);
						if (parameterMappings !== null) {
							mappingKeys = parameterMappings
									.getKeysAsReadOnlyListOfString();
							for (mappingIndex = 0; mappingIndex < mappingKeys
									.size(); mappingIndex++) {
								targetParameterName = mappingKeys
										.get(mappingIndex);
								sourceParameterName = parameterMappings
										.getByKey(targetParameterName);
								sourceResultValue = this
										.getResultParameter(sourceParameterName);
								if (sourceResultValue !== null) {
									if (resultParameterValues === null) {
										resultParameterValues = sap.firefly.XHashMapByString
												.create();
									}
									resultParameterValues.put(
											targetParameterName,
											sourceResultValue);
								}
							}
						}
						return resultParameterValues;
					},
					onCommandProcessed : function(extResult, commandResult,
							customIdentifier) {
						var followUpType;
						this.assertFollowUpFinished(false);
						if (this.m_followUpCommandsProcessed >= this.m_followUpCommandsSize) {
							throw sap.firefly.XException
									.createIllegalStateException("internal error");
						}
						if (extResult.hasErrors()) {
							throw sap.firefly.XException
									.createIllegalStateException(extResult
											.getSummary());
						}
						followUpType = customIdentifier;
						this.addFollowUpCommandResult(followUpType,
								commandResult);
						this.m_followUpCommandsProcessed++;
						if (this.m_followUpCommandsProcessed === this.m_followUpCommandsSize) {
							this.m_followUpFinished = true;
							this.onNotifyListener();
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataArea",
				sap.firefly.PlanningContext,
				{
					$statics : {
						create : function() {
							var dataArea = new sap.firefly.DataArea();
							return dataArea;
						},
						isAnalyticCapabilitySupported : function(application,
								systemAlias, capabilityName) {
							var connectionPool;
							var connectionContainer;
							var serverMetadata;
							var capabilityContainer;
							if (application === null) {
								return false;
							}
							connectionPool = application.getConnectionPool();
							if (connectionPool === null) {
								return false;
							}
							connectionContainer = connectionPool
									.getConnection(systemAlias);
							if (connectionContainer === null) {
								return false;
							}
							serverMetadata = connectionContainer
									.getServerMetadata();
							if (serverMetadata === null) {
								return false;
							}
							capabilityContainer = serverMetadata
									.getMetadataForService(sap.firefly.ServerService.ANALYTIC);
							if (capabilityContainer === null) {
								return false;
							}
							return capabilityContainer
									.containsKey(capabilityName);
						}
					},
					m_dataArea : null,
					m_environment : null,
					m_model : null,
					m_cellLockingType : null,
					releaseObject : function() {
						this.m_dataArea = null;
						this.m_environment = null;
						this.m_model = null;
						this.m_cellLockingType = null;
						sap.firefly.DataArea.$superclass.releaseObject
								.call(this);
					},
					getPlanningContextType : function() {
						return sap.firefly.PlanningContextType.DATA_AREA;
					},
					getDataArea : function() {
						return this.m_dataArea;
					},
					setDataArea : function(dataArea) {
						this.m_dataArea = dataArea;
					},
					getEnvironment : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState !== null) {
							return dataAreaState.getEnvironment();
						}
						return this.m_environment;
					},
					setEnvironment : function(environment) {
						this.m_environment = environment;
					},
					getModel : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState !== null) {
							return dataAreaState.getModel();
						}
						return this.m_model;
					},
					setModel : function(model) {
						this.m_model = model;
					},
					getCellLockingType : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState !== null) {
							return dataAreaState.getCellLocking();
						}
						return this.m_cellLockingType;
					},
					setCellLockingType : function(cellLockingType) {
						this.m_cellLockingType = cellLockingType;
					},
					getQueryConsumerServices : function() {
						return sap.firefly.DataAreaUtil
								.getQueryConsumerServices(this);
					},
					supportsPlanningContextCommandType : function(
							planningContextCommandType) {
						if (planningContextCommandType === null) {
							return false;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.PUBLISH) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.REFRESH) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.RESET) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.CLOSE) {
							return this.supportsClose();
						}
						return false;
					},
					m_supportsClose : false,
					m_supportsCloseChecked : false,
					supportsClose : function() {
						if (this.m_supportsCloseChecked === false) {
							this.m_supportsClose = this._supportsClose();
							this.m_supportsCloseChecked = true;
						}
						return this.m_supportsClose;
					},
					_supportsClose : function() {
						var planningService = this.getPlanningService();
						var serviceConfig;
						var systemDescription;
						var application;
						var systemAlias;
						if (planningService === null) {
							return false;
						}
						serviceConfig = planningService.getServiceConfig();
						if (serviceConfig === null) {
							return false;
						}
						systemDescription = serviceConfig
								.getSystemDescription();
						if (systemDescription === null) {
							return false;
						}
						application = systemDescription.getApplication();
						systemAlias = systemDescription.getName();
						return sap.firefly.DataArea
								.isAnalyticCapabilitySupported(application,
										systemAlias, "ActionClose");
					},
					createPlanningContextCommand : function(
							planningContextCommandType) {
						var dataAreaCommand;
						if (!this
								.supportsPlanningContextCommandType(planningContextCommandType)) {
							return null;
						}
						dataAreaCommand = null;
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.CLOSE) {
							dataAreaCommand = new sap.firefly.DataAreaCommandClose();
						} else {
							dataAreaCommand = new sap.firefly.DataAreaCommand();
						}
						dataAreaCommand.setPlanningService(this
								.getPlanningService());
						dataAreaCommand
								.setCommandType(sap.firefly.PlanningCommandType.DATA_AREA_COMMAND);
						dataAreaCommand.setPlanningContext(this);
						dataAreaCommand
								.setPlanningContextCommandType(planningContextCommandType);
						dataAreaCommand
								.setInvalidatingResultSet(planningContextCommandType
										.isInvalidatingResultSet());
						return dataAreaCommand;
					},
					createRequestCreateCommandWithId : function(
							commandIdentifier) {
						return this
								.createRequestCreatePlanningOperation(commandIdentifier);
					},
					createPlanningFunctionIdentifier : function(
							planningFunctionName) {
						var identifier = new sap.firefly.PlanningFunctionIdentifier();
						identifier
								.setPlanningCommandType(sap.firefly.PlanningCommandType.PLANNING_FUNCTION);
						identifier
								.setPlanningOperationType(sap.firefly.PlanningOperationType.PLANNING_FUNCTION);
						identifier.setCommandId(planningFunctionName);
						return identifier;
					},
					createRequestGetPlanningFunctionMetadata : function(
							planningFunctionIdentifier) {
						var request = new sap.firefly.DataAreaRequestGetPlanningFunctionMetadata();
						request.setPlanningService(this.getPlanningService());
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request
								.setRequestType(sap.firefly.DataAreaRequestType.GET_PLANNING_FUNCTION_METADATA);
						request
								.setPlanningOperationIdentifier(planningFunctionIdentifier);
						request.setPlanningContext(this);
						return request;
					},
					createPlanningSequenceIdentifier : function(
							planningSequenceName) {
						var identifier = new sap.firefly.PlanningSequenceIdentifier();
						identifier
								.setPlanningCommandType(sap.firefly.PlanningCommandType.PLANNING_SEQUENCE);
						identifier
								.setPlanningOperationType(sap.firefly.PlanningOperationType.PLANNING_SEQUENCE);
						identifier.setCommandId(planningSequenceName);
						return identifier;
					},
					createRequestGetPlanningSequenceMetadata : function(
							planningSequenceIdentifier) {
						var request = new sap.firefly.DataAreaRequestGetPlanningSequenceMetadata();
						request.setPlanningService(this.getPlanningService());
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request
								.setRequestType(sap.firefly.DataAreaRequestType.GET_PLANNING_SEQUENCE_METADATA);
						request
								.setPlanningOperationIdentifier(planningSequenceIdentifier);
						request.setPlanningContext(this);
						return request;
					},
					createPlanningOperationIdentifierByDataSource : function(
							dataSource) {
						var planningOperationName;
						var type;
						if (dataSource === null) {
							return null;
						}
						planningOperationName = dataSource.getObjectName();
						type = dataSource.getType();
						if (type === sap.firefly.MetaObjectType.PLANNING_FUNCTION) {
							return this
									.createPlanningFunctionIdentifier(planningOperationName);
						} else {
							if (type === sap.firefly.MetaObjectType.PLANNING_SEQUENCE) {
								return this
										.createPlanningSequenceIdentifier(planningOperationName);
							}
						}
						return null;
					},
					createPlanningOperationIdentifier : function(
							planningOperationName, planningOperationType) {
						if (planningOperationType
								.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_FUNCTION)) {
							return this
									.createPlanningFunctionIdentifier(planningOperationName);
						}
						if (planningOperationType
								.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_SEQUENCE)) {
							return this
									.createPlanningSequenceIdentifier(planningOperationName);
						}
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createRequestGetPlanningOperationMetadata : function(
							planningOperationIdentifier) {
						var planningOperationType = planningOperationIdentifier
								.getPlanningOperationType();
						if (planningOperationType
								.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_FUNCTION)) {
							return this
									.createRequestGetPlanningFunctionMetadata(planningOperationIdentifier);
						}
						if (planningOperationType
								.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_SEQUENCE)) {
							return this
									.createRequestGetPlanningSequenceMetadata(planningOperationIdentifier);
						}
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createRequestCreatePlanningOperation : function(
							planningOperationIdentifier) {
						var operationType = planningOperationIdentifier
								.getPlanningOperationType();
						if (operationType
								.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_FUNCTION)) {
							return this
									.createRequestCreatePlanningFunction(planningOperationIdentifier);
						} else {
							if (operationType
									.isTypeOf(sap.firefly.PlanningOperationType.PLANNING_SEQUENCE)) {
								return this
										.createRequestCreatePlanningSequence(planningOperationIdentifier);
							}
						}
						throw sap.firefly.XException
								.createRuntimeException("illegal operation identifier");
					},
					createRequestCreatePlanningFunction : function(
							planningFunctionIdentifier) {
						var planningService = this.getPlanningService();
						var request = sap.firefly.DataAreaRequestCreatePlanningFunction
								.create(planningService);
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request
								.setRequestType(sap.firefly.DataAreaRequestType.CREATE_PLANNING_FUNCTION);
						request
								.setCommandIdentifier(planningFunctionIdentifier);
						request.setPlanningContext(this);
						return request;
					},
					createRequestCreatePlanningSequence : function(
							planningSequenceIdentifier) {
						var request = sap.firefly.DataAreaRequestCreatePlanningSequence
								.create(this.getPlanningService());
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request
								.setRequestType(sap.firefly.DataAreaRequestType.CREATE_PLANNING_SEQUENCE);
						request
								.setCommandIdentifier(planningSequenceIdentifier);
						request.setPlanningContext(this);
						return request;
					},
					supportsChangedData : function() {
						if (this.m_supportsChangedDataChecked === false) {
							this.m_supportsChangedData = this
									._supportsChangedData();
							this.m_supportsChangedDataChecked = true;
						}
						return this.m_supportsChangedData;
					},
					m_supportsChangedData : false,
					m_supportsChangedDataChecked : false,
					_supportsChangedData : function() {
						var planningService = this.getPlanningService();
						var serviceConfig;
						var systemDescription;
						var application;
						var systemAlias;
						if (planningService === null) {
							return false;
						}
						serviceConfig = planningService.getServiceConfig();
						if (serviceConfig === null) {
							return false;
						}
						systemDescription = serviceConfig
								.getSystemDescription();
						if (systemDescription === null) {
							return false;
						}
						application = systemDescription.getApplication();
						systemAlias = systemDescription.getName();
						return sap.firefly.DataArea
								.isAnalyticCapabilitySupported(application,
										systemAlias, "ChangeCounter");
					},
					hasChangedData : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState === null) {
							return false;
						}
						return dataAreaState.hasChangedData();
					},
					supportsWorkStatus : function() {
						return this.supportsChangedData();
					},
					isWorkStatusActive : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState === null) {
							return false;
						}
						return dataAreaState.isWorkStatusActive();
					},
					isInitializedAtServer : function() {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this);
						if (dataAreaState === null) {
							return false;
						}
						return dataAreaState.isSubmitted();
					},
					createCommandPublish : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.PUBLISH);
					},
					createCommandClose : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.CLOSE);
					}
				});
$Firefly.createClass("sap.firefly.PlanningFunctionMetadata",
		sap.firefly.PlanningOperationMetadata, {
			m_baseDatasource : null,
			getPlanningFunctionIdentifier : function() {
				return this.getPlanningOperationIdentifier();
			},
			getBaseDataSource : function() {
				return this.m_baseDatasource;
			},
			setBaseDataSource : function(baseDataSource) {
				this.m_baseDatasource = baseDataSource;
			}
		});
$Firefly.createClass("sap.firefly.PlanningSequenceMetadata",
		sap.firefly.PlanningOperationMetadata, {
			m_stepMetadataList : null,
			getPlanningSequenceIdentifier : function() {
				return this.getPlanningOperationIdentifier();
			},
			getStepMetadataList : function() {
				return this.m_stepMetadataList;
			},
			setStepMetadataList : function(stepMetadataList) {
				this.m_stepMetadataList = stepMetadataList;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningModel",
				sap.firefly.PlanningContext,
				{
					$statics : {
						create : function() {
							var model = new sap.firefly.PlanningModel();
							model.m_versionParametersMetadata = sap.firefly.XHashMapByString
									.create();
							model.m_planningModelBehaviour = sap.firefly.PlanningModelBehaviour.STANDARD;
							model.m_persistenceType = sap.firefly.PlanningPersistenceType.DEFAULT;
							return model;
						},
						updateStateFromResponse : function(application,
								systemName, request, response, messageCollector) {
							var systemLandscape;
							var systemDescription;
							var systemType;
							var hasErrors;
							var commands;
							var responses;
							var planningService;
							var returnCode;
							var model;
							if (application === null) {
								return;
							}
							systemLandscape = application.getSystemLandscape();
							if (systemLandscape === null) {
								return;
							}
							systemDescription = systemLandscape
									.getSystemDescription(systemName);
							if (systemDescription === null) {
								return;
							}
							systemType = systemDescription.getSystemType();
							if (systemType === null) {
								return;
							}
							if (!systemType
									.isTypeOf(sap.firefly.SystemType.HANA)) {
								return;
							}
							hasErrors = sap.firefly.InAHelper.importMessages(
									response, messageCollector);
							if (hasErrors) {
								return;
							}
							commands = sap.firefly.PrUtils.getListProperty(
									sap.firefly.PrUtils.getStructureProperty(
											request, "Planning"), "commands");
							responses = sap.firefly.PrUtils.getListProperty(
									response, "Planning");
							planningService = sap.firefly.PlanningModelCommandHelper
									.getPlanningService(
											application,
											systemName,
											commands,
											sap.firefly.InAConstants.LC_GET_VERSIONS);
							if (planningService === null) {
								return;
							}
							returnCode = sap.firefly.PlanningModelCommandHelper
									.getResponsesReturnCodeStrict(
											response,
											messageCollector,
											9999,
											sap.firefly.PlanningModel
													.useStrictErrorHandling(planningService));
							if (returnCode !== 0) {
								return;
							}
							model = planningService.getPlanningContext();
							if (!sap.firefly.PlanningModelCommandHelper
									.processResponseGetVersions(commands,
											responses, model)) {
								messageCollector
										.addErrorExt(
												sap.firefly.OriginLayer.PROTOCOL,
												0,
												sap.firefly.XStringBuffer
														.create()
														.append(
																"Planning response structure invalid")
														.toString(), null);
							}
						},
						useStrictErrorHandling : function(planningService) {
							if (!(planningService).isInitialized()) {
								return true;
							}
							return planningService.getPlanningContext()
									.supportsStrictErrorHandling();
						},
						updateState : function(application, systemName,
								responseStructure, messageCollector) {
							var systemLandscape;
							var systemDescription;
							var systemType;
							var planningStructure;
							var returnCode;
							if (application === null) {
								return;
							}
							systemLandscape = application.getSystemLandscape();
							if (systemLandscape === null) {
								return;
							}
							systemDescription = systemLandscape
									.getSystemDescription(systemName);
							if (systemDescription === null) {
								return;
							}
							systemType = systemDescription.getSystemType();
							if (systemType === null) {
								return;
							}
							if (!systemType
									.isTypeOf(sap.firefly.SystemType.HANA)) {
								return;
							}
							planningStructure = sap.firefly.PrUtils
									.getStructureProperty(
											responseStructure,
											sap.firefly.InAConstants.QY_PLANNING);
							if (planningStructure === null) {
								return;
							}
							returnCode = sap.firefly.PrUtils
									.getIntegerValueProperty(
											planningStructure,
											sap.firefly.InAConstants.LC_RETURN_CODE,
											-1);
							if (returnCode !== 0) {
								messageCollector
										.addErrorExt(
												sap.firefly.OriginLayer.SERVER,
												0,
												sap.firefly.XStringBuffer
														.create()
														.append(
																"Planning return code: ")
														.appendInt(returnCode)
														.toString(), null);
								return;
							}
							if (!sap.firefly.PlanningModel.updateVersionsState(
									application, systemName, planningStructure)) {
								messageCollector
										.addErrorExt(
												sap.firefly.OriginLayer.PROTOCOL,
												0,
												sap.firefly.XStringBuffer
														.create()
														.append(
																"Planning response structure invalid")
														.toString(), null);
							}
						},
						updateVersionsState : function(application, systemName,
								planningStructure) {
							var isOk = true;
							var versionsList = sap.firefly.PrUtils
									.getListProperty(
											planningStructure,
											sap.firefly.InAConstants.LC_VERSIONS);
							var i;
							var versionStructure;
							for (i = 0; i < sap.firefly.PrUtils.getListSize(
									versionsList, 0); i++) {
								versionStructure = sap.firefly.PrUtils
										.getStructureElement(versionsList, i);
								if (!sap.firefly.PlanningModel
										.updateVersionState(application,
												systemName, versionStructure,
												false)) {
									isOk = false;
								}
							}
							return isOk;
						},
						updateVersionState : function(application, systemName,
								versionStructure, checkPrivilege) {
							var planningSchema;
							var planningModel;
							var planningService;
							var model;
							if (versionStructure === null) {
								return false;
							}
							planningSchema = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_SCHEMA,
											null);
							if (planningSchema === null) {
								return false;
							}
							planningModel = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_MODEL,
											null);
							if (planningModel === null) {
								return false;
							}
							planningService = sap.firefly.PlanningModelUtil
									.getPlanningService(application,
											systemName, planningSchema,
											planningModel);
							if (planningService === null) {
								return false;
							}
							model = planningService.getPlanningContext();
							if (model === null) {
								return false;
							}
							if (!model.supportsUndoRedoStack()) {
								return true;
							}
							if (model.isWithIgnoreUndesiredSharedVersions()) {
								return sap.firefly.PlanningModel
										.updateVersionStateInternalIgnoreUndesired(
												versionStructure,
												checkPrivilege, model);
							}
							return sap.firefly.PlanningModel
									.updateVersionStateInternal(
											versionStructure, checkPrivilege,
											model);
						},
						updateVersionStateInternal : function(versionStructure,
								checkPrivilege, model) {
							var versionIdElement = sap.firefly.PrUtils
									.getIntegerProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_VERSION_ID);
							var activeBoolean;
							var versionState;
							var isActive;
							var totalChangesSize;
							var undoChangesSize;
							var sharedVersion;
							var versionOwner;
							var privilege;
							var versionId;
							var versionDescription;
							var planningVersionIdentifier;
							var planningVersion;
							if (versionIdElement === null) {
								return false;
							}
							activeBoolean = sap.firefly.PrUtils
									.getBooleanProperty(versionStructure,
											sap.firefly.InAConstants.LC_ACTIVE);
							if (activeBoolean === null) {
								return false;
							}
							versionState = sap.firefly.PlanningVersionState
									.lookup(sap.firefly.PrUtils
											.getStringValueProperty(
													versionStructure,
													sap.firefly.InAConstants.LC_STATE,
													null));
							if (versionState === null) {
								return false;
							}
							isActive = activeBoolean.getBooleanValue();
							if (isActive !== versionState.isActive()) {
								return false;
							}
							totalChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_CHANGES,
											0);
							undoChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_UNDO_CHANGES,
											0);
							sharedVersion = false;
							versionOwner = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_OWNER,
											null);
							privilege = sap.firefly.PlanningPrivilege
									.lookupWithDefault(
											sap.firefly.PrUtils
													.getStringValueProperty(
															versionStructure,
															sap.firefly.InAConstants.LC_PRIVILEGE,
															null), null);
							if (privilege === null) {
								if (checkPrivilege) {
									if (model.isWithSharedVersions()) {
										return false;
									}
									versionOwner = null;
									privilege = sap.firefly.PlanningPrivilege.OWNER;
								} else {
									if (model.isWithSharedVersions()) {
										if (sap.firefly.XStringUtils
												.isNullOrEmpty(versionOwner)
												|| sap.firefly.PlanningModel
														.isCurrentUser(model,
																versionOwner)) {
											privilege = sap.firefly.PlanningPrivilege.OWNER;
											versionOwner = null;
										} else {
											sharedVersion = true;
										}
									} else {
										versionOwner = null;
										privilege = sap.firefly.PlanningPrivilege.OWNER;
									}
								}
							} else {
								if (privilege === sap.firefly.PlanningPrivilege.OWNER) {
									versionOwner = null;
								} else {
									sharedVersion = true;
								}
							}
							if ((!sharedVersion)
									&& (privilege !== sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							if ((sharedVersion)
									&& (privilege === sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							versionId = versionIdElement.getIntegerValue();
							versionDescription = sap.firefly.PrUtils
									.getStringValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_DESCRIPTION,
											null);
							planningVersionIdentifier = model
									.getVersionIdentifier(versionId,
											sharedVersion, versionOwner);
							planningVersion = model.getVersionById(
									planningVersionIdentifier,
									versionDescription);
							if (planningVersion.getVersionState() === null) {
								return false;
							}
							planningVersion.setVersionState(versionState);
							planningVersion
									.setTotalChangesSize(totalChangesSize);
							planningVersion.setUndoChangesSize(undoChangesSize);
							return true;
						},
						updateVersionStateInternalIgnoreUndesired : function(
								versionStructure, checkPrivilege, model) {
							var versionIdElement = sap.firefly.PrUtils
									.getIntegerProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_VERSION_ID);
							var activeBoolean;
							var versionState;
							var isActive;
							var totalChangesSize;
							var undoChangesSize;
							var sharedVersion;
							var versionOwner;
							var privilege;
							var versionId;
							var versionDescription;
							var planningVersionIdentifier;
							var planningVersion;
							if (versionIdElement === null) {
								return false;
							}
							activeBoolean = sap.firefly.PrUtils
									.getBooleanProperty(versionStructure,
											sap.firefly.InAConstants.LC_ACTIVE);
							if (activeBoolean === null) {
								return false;
							}
							versionState = sap.firefly.PlanningVersionState
									.lookup(sap.firefly.PrUtils
											.getStringValueProperty(
													versionStructure,
													sap.firefly.InAConstants.LC_STATE,
													null));
							if (versionState === null) {
								return false;
							}
							isActive = activeBoolean.getBooleanValue();
							if (isActive !== versionState.isActive()) {
								return false;
							}
							totalChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_CHANGES,
											0);
							undoChangesSize = sap.firefly.PrUtils
									.getIntegerValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_UNDO_CHANGES,
											0);
							sharedVersion = false;
							versionOwner = sap.firefly.PrUtils
									.getStringValueProperty(versionStructure,
											sap.firefly.InAConstants.LC_OWNER,
											null);
							if (sap.firefly.PlanningModel.isCurrentUser(model,
									versionOwner)) {
								versionOwner = null;
							}
							privilege = sap.firefly.PlanningPrivilege
									.lookupWithDefault(
											sap.firefly.PrUtils
													.getStringValueProperty(
															versionStructure,
															sap.firefly.InAConstants.LC_PRIVILEGE,
															null), null);
							if (privilege === null) {
								if (checkPrivilege) {
									if (model.isWithSharedVersions()) {
										return false;
									}
									versionOwner = null;
									privilege = sap.firefly.PlanningPrivilege.OWNER;
								} else {
									if (sap.firefly.XStringUtils
											.isNullOrEmpty(versionOwner)) {
										privilege = sap.firefly.PlanningPrivilege.OWNER;
										versionOwner = null;
									} else {
										sharedVersion = true;
									}
								}
							} else {
								if (privilege === sap.firefly.PlanningPrivilege.OWNER) {
									versionOwner = null;
								} else {
									sharedVersion = true;
								}
							}
							if ((sharedVersion)
									&& (!model.isWithSharedVersions())
									&& (sap.firefly.PlanningModel
											.hasCurrentUser(model))) {
								return true;
							}
							if ((!sharedVersion)
									&& (privilege !== sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							if ((sharedVersion)
									&& (privilege === sap.firefly.PlanningPrivilege.OWNER)) {
								return false;
							}
							versionId = versionIdElement.getIntegerValue();
							versionDescription = sap.firefly.PrUtils
									.getStringValueProperty(
											versionStructure,
											sap.firefly.InAConstants.LC_DESCRIPTION,
											null);
							planningVersionIdentifier = model
									.getVersionIdentifier(versionId,
											sharedVersion, versionOwner);
							planningVersion = model.getVersionById(
									planningVersionIdentifier,
									versionDescription);
							if (planningVersion.getVersionState() === null) {
								return false;
							}
							planningVersion.setVersionState(versionState);
							planningVersion
									.setTotalChangesSize(totalChangesSize);
							planningVersion.setUndoChangesSize(undoChangesSize);
							return true;
						},
						hasCurrentUser : function(model) {
							var backendUserName;
							if (model === null) {
								return false;
							}
							backendUserName = (model).getBackendUserName();
							return !sap.firefly.XStringUtils
									.isNullOrEmpty(backendUserName);
						},
						isCurrentUser : function(model, userName) {
							var backendUserName;
							if (model === null) {
								return false;
							}
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(userName)) {
								return false;
							}
							backendUserName = (model).getBackendUserName();
							return !sap.firefly.XStringUtils
									.isNullOrEmpty(backendUserName)
									&& sap.firefly.XString.isEqual(userName,
											backendUserName);
						}
					},
					m_planningModelSchema : null,
					m_planningModelName : null,
					m_planningModelBehaviour : null,
					m_versionsList : null,
					m_versionsMap : null,
					m_dataSources : null,
					m_actionMetadataList : null,
					m_actionMetadataMap : null,
					m_actionMetadataDefaultMap : null,
					m_privileges : null,
					m_privilegesMap : null,
					m_modelInitialized : false,
					m_versionPrivilegesInitialized : false,
					m_versionParametersMetadata : null,
					m_withSharedVersions : false,
					m_withBackupTimestamp : false,
					m_withFastActionParameters : false,
					m_withFastPrivilegeInitialization : false,
					m_withUndoRedoStack : false,
					m_withActionState : false,
					m_backendUserName : null,
					m_persistenceType : null,
					m_withUniqueVersionDescriptions : false,
					m_withIgnoreUndesiredSharedVersions : false,
					m_withPublicVersionEdit : false,
					m_isPublicVersionEditInProgress : false,
					getPlanningContextType : function() {
						return sap.firefly.PlanningContextType.PLANNING_MODEL;
					},
					isModelInitialized : function() {
						return this.m_modelInitialized;
					},
					checkModelInitialized : function() {
						if (!this.isModelInitialized()) {
							throw sap.firefly.XException
									.createIllegalStateException("planning model is not initialized");
						}
					},
					setModelInitialized : function() {
						this.m_modelInitialized = true;
						this.invalidate();
					},
					invalidate : function() {
						if (this.isModelInitialized()) {
							sap.firefly.PlanningModel.$superclass.invalidate
									.call(this);
						}
					},
					resetPlanningModel : function() {
						this.m_modelInitialized = false;
						this.getActionMetadataListInternal().clear();
						this.resetAllVersionStates();
						this.updateAllInvalidPrivileges();
					},
					isVersionPrivilegesInitialized : function() {
						return this.m_versionPrivilegesInitialized;
					},
					setVersionPrivilegesInitialized : function() {
						this.m_versionPrivilegesInitialized = true;
					},
					hasChangedVersionPrivileges : function() {
						var versionPrivileges;
						var i;
						var versionPrivilege;
						var privilegeState;
						if (!this.isVersionPrivilegesInitialized()) {
							return false;
						}
						versionPrivileges = this.getVersionPrivileges();
						if ((versionPrivileges === null)
								|| (versionPrivileges.isEmpty())) {
							return false;
						}
						for (i = 0; i < versionPrivileges.size(); i++) {
							versionPrivilege = versionPrivileges.get(i);
							privilegeState = versionPrivilege
									.getPrivilegeState();
							if ((privilegeState === sap.firefly.PlanningPrivilegeState.TO_BE_GRANTED)
									|| (privilegeState === sap.firefly.PlanningPrivilegeState.TO_BE_REVOKED)) {
								return true;
							}
						}
						return false;
					},
					resetAllVersionStates : function() {
						var i;
						var version;
						if (this.m_versionsList === null) {
							return;
						}
						for (i = 0; i < this.m_versionsList.size(); i++) {
							version = this.m_versionsList.get(i);
							version.resetVersionState();
						}
					},
					updateAllInvalidPrivileges : function() {
						var i;
						var version;
						if (this.m_versionsList === null) {
							return;
						}
						for (i = 0; i < this.m_versionsList.size(); i++) {
							version = this.m_versionsList.get(i);
							version.updateInvalidPrivileges();
						}
					},
					getVersionIdentifier : function(versionId, sharedVersion,
							versionOwner) {
						return sap.firefly.PlanningVersionIdentifier.create(
								versionId, sharedVersion, versionOwner);
					},
					copyVersionIdentifier : function(versionIdentifier) {
						return sap.firefly.PlanningVersionIdentifier.create(
								versionIdentifier.getVersionId(),
								versionIdentifier.isSharedVersion(),
								versionIdentifier.getVersionOwner());
					},
					getVersionByIdInternal : function(versionIdentifier) {
						return this.m_versionsMap.getByKey(versionIdentifier
								.getVersionUniqueName());
					},
					getVersionById : function(versionIdentifier,
							versionDescription) {
						var planningVersion;
						this.checkModelInitialized();
						planningVersion = this
								.getVersionByIdInternal(versionIdentifier);
						if (planningVersion === null) {
							planningVersion = sap.firefly.PlanningVersion
									.create();
							planningVersion.setPlanningModel(this);
							planningVersion
									.setVersionIdentifier(versionIdentifier);
							planningVersion
									.setVersionDescription(versionDescription);
							planningVersion.updateInvalidPrivileges();
							this.m_versionsMap.put(versionIdentifier
									.getVersionUniqueName(), planningVersion);
							this.m_versionsList.add(planningVersion);
						} else {
							if (planningVersion.getVersionState() === null) {
								planningVersion
										.setVersionDescription(versionDescription);
							}
						}
						return planningVersion;
					},
					getDataSourcesInternal : function() {
						return this.m_dataSources;
					},
					getActionMetadataListInternal : function() {
						if (this.m_actionMetadataMap !== null) {
							this.m_actionMetadataMap.releaseObject();
							this.m_actionMetadataMap = null;
						}
						if (this.m_actionMetadataDefaultMap !== null) {
							this.m_actionMetadataDefaultMap.releaseObject();
							this.m_actionMetadataDefaultMap = null;
						}
						return this.m_actionMetadataList;
					},
					getActionMetadataMap : function() {
						var i;
						var actionMetadata;
						var actionId;
						this.checkModelInitialized();
						if (this.m_actionMetadataMap === null) {
							this.m_actionMetadataMap = sap.firefly.XHashMapByString
									.create();
							for (i = 0; i < this.m_actionMetadataList.size(); i++) {
								actionMetadata = this.m_actionMetadataList
										.get(i);
								actionId = actionMetadata.getActionId();
								this.m_actionMetadataMap.put(actionId,
										actionMetadata);
							}
						}
						return this.m_actionMetadataMap;
					},
					getActionMetadataDefaultMap : function() {
						var i;
						var actionMetadata;
						var actionTypeString;
						if (this.m_actionMetadataDefaultMap === null) {
							this.m_actionMetadataDefaultMap = sap.firefly.XHashMapByString
									.create();
							for (i = 0; i < this.m_actionMetadataList.size(); i++) {
								actionMetadata = this.m_actionMetadataList
										.get(i);
								if (!actionMetadata.isDefault()) {
									continue;
								}
								actionTypeString = actionMetadata
										.getActionType().toString();
								if (this.m_actionMetadataDefaultMap
										.containsKey(actionTypeString)) {
									this.m_actionMetadataDefaultMap.put(
											actionTypeString, null);
								} else {
									this.m_actionMetadataDefaultMap.put(
											actionTypeString, actionMetadata);
								}
							}
						}
						return this.m_actionMetadataDefaultMap;
					},
					getPlanningModelSchema : function() {
						return this.m_planningModelSchema;
					},
					setPlanningModelSchema : function(planningModelSchema) {
						this.m_planningModelSchema = planningModelSchema;
					},
					getPlanningModelName : function() {
						return this.m_planningModelName;
					},
					setPlanningModelName : function(planningModelName) {
						this.m_planningModelName = planningModelName;
					},
					getPlanningModelBehaviour : function() {
						return this.m_planningModelBehaviour;
					},
					setPlanningModelBehaviour : function(planningModelBehaviour) {
						this.m_planningModelBehaviour = planningModelBehaviour;
					},
					initializePlanningModel : function(syncType) {
						var commandFactory;
						var cmdStep1;
						var cmdStep2;
						this.m_dataSources = sap.firefly.XList.create();
						this.m_versionsList = sap.firefly.XList.create();
						this.m_versionsMap = sap.firefly.XHashMapByString
								.create();
						this.m_actionMetadataList = sap.firefly.XList.create();
						this.m_privileges = sap.firefly.XList.create();
						this.m_privilegesMap = sap.firefly.XHashMapByString
								.create();
						commandFactory = sap.firefly.XCommandFactory
								.create(this.getPlanningService()
										.getApplication());
						cmdStep1 = commandFactory
								.createCommand(sap.firefly.XCmdInitPlanningStep.CMD_NAME);
						cmdStep1
								.addParameter(
										sap.firefly.XCmdInitPlanningStep.PARAM_I_PLANNING_MODEL,
										this);
						cmdStep1
								.addParameter(
										sap.firefly.XCmdInitPlanningStep.PARAM_I_STEP,
										sap.firefly.XCmdInitPlanningStep.STEP_1_REFRESH_VERSIONS);
						cmdStep2 = commandFactory
								.createCommand(sap.firefly.XCmdInitPlanningStep.CMD_NAME);
						cmdStep2
								.addParameter(
										sap.firefly.XCmdInitPlanningStep.PARAM_I_PLANNING_MODEL,
										this);
						cmdStep2
								.addParameter(
										sap.firefly.XCmdInitPlanningStep.PARAM_I_STEP,
										sap.firefly.XCmdInitPlanningStep.STEP_2_INIT_VERSIONS);
						cmdStep1.setFollowUpCommand(
								sap.firefly.XCommandFollowUpType.SUCCESS,
								cmdStep2);
						cmdStep1.processCommand(syncType, this, null);
					},
					onCommandProcessed : function(extResult, commandResult,
							customIdentifier) {
						var planningService = this.getPlanningService();
						planningService.addAllMessages(extResult);
						(this.getPlanningService())._setInitialized(this);
					},
					supportsPlanningContextCommandType : function(
							planningContextCommandType) {
						if (planningContextCommandType === null) {
							return false;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.SAVE) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.BACKUP) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.REFRESH) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.RESET) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.CLOSE) {
							return true;
						}
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.HARD_DELETE) {
							return true;
						}
						return false;
					},
					createPlanningContextCommand : function(
							planningContextCommandType) {
						var planningModelCommand;
						if (!this
								.supportsPlanningContextCommandType(planningContextCommandType)) {
							return null;
						}
						planningModelCommand = null;
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.CLOSE) {
							planningModelCommand = new sap.firefly.PlanningModelCloseCommand();
						} else {
							planningModelCommand = new sap.firefly.PlanningModelCommand();
						}
						planningModelCommand.setPlanningService(this
								.getPlanningService());
						planningModelCommand
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_COMMAND);
						planningModelCommand.setPlanningContext(this);
						planningModelCommand
								.setPlanningContextCommandType(planningContextCommandType);
						planningModelCommand
								.setInvalidatingResultSet(planningContextCommandType
										.isInvalidatingResultSet());
						return planningModelCommand;
					},
					createRequestGetActionParameters : function(actionMetadata) {
						var request;
						this.checkModelInitialized();
						request = new sap.firefly.PlanningModelRequestGetActionParameters();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.GET_ACTION_PARAMETERS);
						request.setActionMetadata(actionMetadata);
						return request;
					},
					getActionParameters : function(actionMetadata) {
						var command;
						var commandResult;
						this.checkModelInitialized();
						command = this
								.createRequestGetActionParameters(actionMetadata);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					createRequestUpdateVersionPrivileges : function() {
						var request;
						this.checkModelInitialized();
						request = new sap.firefly.PlanningModelRequestUpdateVersionPrivileges();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.UPDATE_PRIVILEGES);
						return request;
					},
					updateVersionPrivileges : function() {
						var command;
						var commandResult;
						this.checkModelInitialized();
						command = this.createRequestUpdateVersionPrivileges();
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					createRequestCleanup : function() {
						var request;
						this.checkModelInitialized();
						request = new sap.firefly.PlanningModelRequestCleanup();
						this.initializePlanningModelRequest(request,
								sap.firefly.PlanningModelRequestType.CLEANUP);
						return request;
					},
					cleanup : function() {
						var command;
						var commandResult;
						this.checkModelInitialized();
						command = this.createRequestCleanup();
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					createRequestCreateCommandWithId : function(
							commandIdentifier) {
						var actionIdentifier;
						var extCommandResult;
						var request;
						this.checkModelInitialized();
						actionIdentifier = commandIdentifier;
						if (actionIdentifier === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Action  is not yet known by client");
						}
						extCommandResult = this
								.getActionParameters(actionIdentifier);
						request = new sap.firefly.PlanningModelRequestCreateAction();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.CREATE_PLANNING_ACTION);
						request.setCommandIdentifier(actionIdentifier);
						request.setActionParameters(extCommandResult);
						return request;
					},
					createActionById : function(actionIdentifier) {
						var extResult = this.createRequestCreateCommandWithId(
								actionIdentifier).processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(
								extResult.getData(), extResult);
					},
					createActionByMetadata : function(actionMetadata,
							planningVersionId) {
						return this.createActionByActionId(actionMetadata
								.getActionId(), planningVersionId);
					},
					getActionMetadataDefault : function(actionType) {
						var defaultMap;
						this.checkModelInitialized();
						defaultMap = this.getActionMetadataDefaultMap();
						return defaultMap.getByKey(actionType.toString());
					},
					getActionIdentifier : function(actionId, planningVersionId) {
						return this.getActionIdentifierById(actionId, this
								.getVersionIdentifier(planningVersionId, false,
										null));
					},
					getActionIdentifierById : function(actionId,
							planningVersionIdentifier) {
						var actionMetadata;
						var actionType;
						var actionIdentifier;
						this.checkModelInitialized();
						actionMetadata = this.getActionMetadata(actionId);
						if (actionMetadata === null) {
							return null;
						}
						actionType = actionMetadata.getActionType();
						if (actionType === null) {
							return null;
						}
						if (!actionType
								.isTypeOf(sap.firefly.PlanningActionType.VERSION_ACTION)) {
							return null;
						}
						actionIdentifier = new sap.firefly.PlanningActionIdentifier();
						actionIdentifier.setActionMetadata(actionMetadata);
						actionIdentifier.setCommandId(actionMetadata
								.getActionId());
						actionIdentifier
								.setPlanningCommandType(sap.firefly.PlanningCommandType.PLANNING_ACTION);
						actionIdentifier
								.setVersionIdentifier(planningVersionIdentifier);
						return actionIdentifier;
					},
					createActionByActionId : function(actionId,
							planningVersionId) {
						return this.createActionById(this.getActionIdentifier(
								actionId, planningVersionId));
					},
					getQueryDataSources : function() {
						var result;
						var i;
						var dataSource;
						this.checkModelInitialized();
						result = sap.firefly.XList.create();
						for (i = 0; i < this.m_dataSources.size(); i++) {
							dataSource = this.m_dataSources.get(i);
							result.add(dataSource);
						}
						return result;
					},
					getVersions : function() {
						return this._getVersions(false, true, false, true);
					},
					getActiveVersions : function() {
						return this._getVersions(false, true, false, false);
					},
					getAllVersions : function() {
						return this._getVersions(false, true, true, true);
					},
					getSharedVersions : function() {
						return this._getVersions(false, false, true, true);
					},
					_getVersions : function(withDroppedVersions,
							withOwnVersions, withSharedVersions,
							withInactiveVersions) {
						var result;
						var i;
						var version;
						this.checkModelInitialized();
						result = sap.firefly.XList.create();
						for (i = 0; i < this.m_versionsList.size(); i++) {
							version = this.m_versionsList.get(i);
							if (!withDroppedVersions) {
								if (version.getVersionState() === null) {
									continue;
								}
							}
							if (!withOwnVersions) {
								if (!version.isSharedVersion()) {
									continue;
								}
							}
							if (!withSharedVersions) {
								if (version.isSharedVersion()) {
									continue;
								}
							}
							if (!withInactiveVersions) {
								if (!version.isActive()) {
									continue;
								}
							}
							result.add(version);
						}
						return result;
					},
					getActionIdentifiers : function() {
						var versions;
						var result;
						var i;
						var actionMetadata;
						var j;
						var version;
						var actionIdentifier;
						this.checkModelInitialized();
						versions = this.getAllVersions();
						result = sap.firefly.XList.create();
						for (i = 0; i < this.m_actionMetadataList.size(); i++) {
							actionMetadata = this.m_actionMetadataList.get(i);
							for (j = 0; j < versions.size(); j++) {
								version = versions.get(j);
								if (!version.isActive()) {
									continue;
								}
								actionIdentifier = this
										.getActionIdentifierById(actionMetadata
												.getActionId(), version);
								if (actionIdentifier === null) {
									continue;
								}
								result.add(actionIdentifier);
							}
						}
						return result;
					},
					getActionMetadataList : function() {
						var result;
						var i;
						var actionMetadata;
						this.checkModelInitialized();
						result = sap.firefly.XList.create();
						for (i = 0; i < this.m_actionMetadataList.size(); i++) {
							actionMetadata = this.m_actionMetadataList.get(i);
							result.add(actionMetadata);
						}
						return result;
					},
					getActionMetadata : function(actionId) {
						var actionMetadataMap;
						this.checkModelInitialized();
						actionMetadataMap = this.getActionMetadataMap();
						return actionMetadataMap.getByKey(actionId);
					},
					getQueryConsumerServices : function() {
						this.checkModelInitialized();
						return sap.firefly.PlanningModelUtil
								.getQueryConsumerServices(this);
					},
					releaseVersions : function() {
						var j;
						var version;
						var planningModelBehaviour;
						if (this.m_versionsList !== null) {
							for (j = 0; j < this.m_versionsList.size(); j++) {
								version = this.m_versionsList.get(j);
								if (this.isModelInitialized()) {
									planningModelBehaviour = this
											.getPlanningModelBehaviour();
									if (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.CREATE_DEFAULT_VERSION) {
										if (version.isActive()) {
											version
													.createRequestCloseVersion()
													.setCloseMode(
															sap.firefly.CloseModeType.KILL_ACTION_SEQUENCE_AND_DISCARD)
													.processCommand(
															sap.firefly.SyncType.BLOCKING,
															null, null);
										}
									} else {
										if ((planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_NO_VERSION)
												|| (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_SINGLE_VERSION)
												|| (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_NO_VERSION_HARD_DELETE)) {
											if (version.isActive()) {
												version
														.createRequestCloseVersion()
														.setCloseMode(
																sap.firefly.CloseModeType.KILL_ACTION_SEQUENCE_AND_DISCARD)
														.processCommand(
																sap.firefly.SyncType.BLOCKING,
																null, null);
											}
											version
													.createRequestDropVersion()
													.processCommand(
															sap.firefly.SyncType.BLOCKING,
															null, null);
										}
									}
								}
								version.releaseObject();
							}
							this.m_versionsList.releaseObject();
							this.m_versionsList = null;
						}
						this.m_versionsMap = sap.firefly.XObject
								.releaseIfNotNull(this.m_versionsMap);
					},
					releaseDataSources : function() {
						var k;
						var modelQueryDataSource;
						if (this.m_dataSources !== null) {
							for (k = 0; k < this.m_dataSources.size(); k++) {
								modelQueryDataSource = this.m_dataSources
										.get(k);
								modelQueryDataSource.releaseObject();
							}
							this.m_dataSources.releaseObject();
							this.m_dataSources = null;
						}
					},
					releaseActionIdentifiers : function() {
						var l;
						var actionMetadata;
						if (this.m_actionMetadataMap !== null) {
							this.m_actionMetadataMap.releaseObject();
							this.m_actionMetadataMap = null;
						}
						if (this.m_actionMetadataDefaultMap !== null) {
							this.m_actionMetadataDefaultMap.releaseObject();
							this.m_actionMetadataDefaultMap = null;
						}
						if (this.m_actionMetadataList !== null) {
							for (l = 0; l < this.m_actionMetadataList.size(); l++) {
								actionMetadata = this.m_actionMetadataList
										.get(l);
								actionMetadata.releaseObject();
							}
							this.m_actionMetadataList.releaseObject();
							this.m_actionMetadataList = null;
						}
					},
					supportsChangedData : function() {
						return true;
					},
					hasChangedData : function() {
						var i;
						var version;
						for (i = 0; i < this.m_versionsList.size(); i++) {
							version = this.m_versionsList.get(i);
							if (version.getVersionState() === sap.firefly.PlanningVersionState.CHANGED) {
								return true;
							}
						}
						return false;
					},
					supportsWorkStatus : function() {
						return false;
					},
					isWorkStatusActive : function() {
						return false;
					},
					releaseObject : function() {
						this.m_privileges = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_privileges);
						this.m_privilegesMap = sap.firefly.XObject
								.releaseIfNotNull(this.m_privilegesMap);
						this.m_planningModelSchema = null;
						this.m_backendUserName = null;
						this.m_persistenceType = null;
						this.m_planningModelBehaviour = null;
						this.m_planningModelName = null;
						this.m_versionParametersMetadata = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_versionParametersMetadata);
						this.releaseVersions();
						this.releaseDataSources();
						this.releaseActionIdentifiers();
						sap.firefly.PlanningModel.$superclass.releaseObject
								.call(this);
					},
					getVersionPrivilege : function(queryDataSource,
							planningVersionId, planningPrivilege, grantee) {
						return this.getVersionPrivilegeById(queryDataSource,
								this.getVersionIdentifier(planningVersionId,
										false, null), planningPrivilege,
								grantee);
					},
					getVersionPrivilegeById : function(queryDataSource,
							planningVersionIdentifier, planningPrivilege,
							grantee) {
						var qualifiedName;
						var result;
						var newPlanningVersionPrivilege;
						if (!this.isVersionPrivilegesInitialized()) {
							throw sap.firefly.XException
									.createIllegalStateException("version privileges are not yet initialized");
						}
						if (planningVersionIdentifier.isSharedVersion()) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						qualifiedName = sap.firefly.PlanningVersionPrivilege
								.createQualifiedName(this, queryDataSource,
										planningVersionIdentifier,
										planningPrivilege, grantee);
						result = this.m_privilegesMap.getByKey(qualifiedName);
						if (result === null) {
							newPlanningVersionPrivilege = sap.firefly.PlanningVersionPrivilege
									.create(this, queryDataSource,
											planningVersionIdentifier,
											planningPrivilege, grantee);
							if (!sap.firefly.XString.isEqual(
									newPlanningVersionPrivilege
											.getQualifiedName(), qualifiedName)) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal qualified name");
							}
							this.m_privileges.add(newPlanningVersionPrivilege);
							this.m_privilegesMap.put(qualifiedName,
									newPlanningVersionPrivilege);
							result = newPlanningVersionPrivilege;
						}
						return result;
					},
					getVersionPrivileges : function() {
						if (!this.isVersionPrivilegesInitialized()) {
							throw sap.firefly.XException
									.createIllegalStateException("version privileges are not yet initialized");
						}
						return this.m_privileges;
					},
					supportsVersionPrivileges : function() {
						return this
								.getPlanningService()
								.supportsPlanningCapability("VersionPrivileges");
					},
					supportsFastPrivilegeInitialization : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V71_FAST_PRIVILEGE_INIT) {
							return this.m_withFastPrivilegeInitialization;
						}
						return true;
					},
					supportsBackupTimestamp : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V73_BACKUP_TIMESTAMP) {
							return this.m_withBackupTimestamp;
						}
						return true;
					},
					supportsActionState : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V76_ACTION_STATE) {
							return this.m_withActionState;
						}
						return true;
					},
					getActionForQueryIdentifiers : function() {
						var result;
						var actionMetadataList;
						var i;
						var actionMetadata;
						var actionIdentifier;
						this.checkModelInitialized();
						result = sap.firefly.XList.create();
						actionMetadataList = this.getActionMetadataList();
						for (i = 0; i < actionMetadataList.size(); i++) {
							actionMetadata = actionMetadataList.get(i);
							actionIdentifier = this
									.getActionForQueryIdentifier(actionMetadata
											.getActionId());
							if (actionIdentifier === null) {
								continue;
							}
							result.add(actionIdentifier);
						}
						return result;
					},
					getActionForQueryIdentifier : function(actionId) {
						var actionMetadata;
						var actionType;
						var actionIdentifier;
						this.checkModelInitialized();
						actionMetadata = this.getActionMetadata(actionId);
						if (actionMetadata === null) {
							return null;
						}
						actionType = actionMetadata.getActionType();
						if (actionType === null) {
							return null;
						}
						if (!actionType
								.isTypeOf(sap.firefly.PlanningActionType.QUERY_ACTION)) {
							return null;
						}
						actionIdentifier = new sap.firefly.PlanningActionForQueryIdentifier();
						actionIdentifier.setActionMetadata(actionMetadata);
						actionIdentifier.setCommandId(actionMetadata
								.getActionId());
						actionIdentifier
								.setPlanningCommandType(sap.firefly.PlanningCommandType.PLANNING_ACTION);
						return actionIdentifier;
					},
					createActionForQueryById : function(actionIdentifier) {
						var extCommandResult;
						var action;
						var request;
						var response;
						var result;
						this.checkModelInitialized();
						if (actionIdentifier === null) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						extCommandResult = this
								.getActionParameters(actionIdentifier);
						action = null;
						if (extCommandResult.isValid()) {
							action = new sap.firefly.PlanningAction();
							action
									.setCommandType(sap.firefly.PlanningCommandType.PLANNING_ACTION);
							action
									.setPlanningService(this
											.getPlanningService());
							action.setPlanningContext(this);
							action.setCommandIdentifier(actionIdentifier);
							action.setActionParameterMetadata(extCommandResult
									.getData().getActionParameterMetadata());
						}
						request = new sap.firefly.PlanningModelRequestCreateActionForQuery();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.CREATE_PLANNING_ACTION_BASE);
						request.setCommandIdentifier(actionIdentifier);
						response = request.createCommandResult(null, null);
						response.setCreatedPlanningActionForQuery(action);
						result = sap.firefly.ExtResult.create(response,
								extCommandResult);
						return result;
					},
					initializePlanningModelRequest : function(request,
							requestType) {
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request.setRequestType(requestType);
						request.setPlanningContext(this);
						request.setPlanningService(this.getPlanningService());
						request.setInvalidatingResultSet(requestType
								.isInvalidatingResultSet());
					},
					createActionForQueryByActionId : function(actionId) {
						var actionIdentifier;
						this.checkModelInitialized();
						actionIdentifier = this
								.getActionForQueryIdentifier(actionId);
						return this.createActionForQueryById(actionIdentifier);
					},
					createActionForQueryByMetadata : function(actionMetadata) {
						this.checkModelInitialized();
						return this
								.createActionForQueryByActionId(actionMetadata
										.getActionId());
					},
					toString : function() {
						return sap.firefly.ReferencePlanningContext.create(
								this, false).toString();
					},
					getVersionParametersMetadata : function() {
						return this.m_versionParametersMetadata;
					},
					getVersionParametersMetadataInternal : function() {
						return this.m_versionParametersMetadata;
					},
					supportsVersionParameters : function() {
						return this.getPlanningService()
								.supportsPlanningCapability("GetParameters");
					},
					createRequestRefreshVersions : function() {
						var request;
						this.checkModelInitialized();
						request = new sap.firefly.PlanningModelRequestRefreshVersions();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.REFRESH_VERSIONS);
						return request;
					},
					createRequestRefreshActions : function() {
						var request;
						this.checkModelInitialized();
						request = new sap.firefly.PlanningModelRequestRefreshActions();
						this
								.initializePlanningModelRequest(
										request,
										sap.firefly.PlanningModelRequestType.REFRESH_ACTIONS);
						return request;
					},
					refreshVersions : function() {
						var command;
						var commandResult;
						this.checkModelInitialized();
						command = this.createRequestRefreshVersions();
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						return sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
					},
					setBackendUserName : function(backendUserName) {
						this.m_backendUserName = backendUserName;
					},
					getBackendUserName : function() {
						return this.m_backendUserName;
					},
					setWithSharedVersions : function(withSharedVersions) {
						this.m_withSharedVersions = withSharedVersions;
					},
					setWithActionState : function(withActionState) {
						this.m_withActionState = withActionState;
					},
					setWithBackupTimestamp : function(withBackupTimestamp) {
						this.m_withBackupTimestamp = withBackupTimestamp;
					},
					setWithFastActionParameters : function(
							withFastActionParameters) {
						this.m_withFastActionParameters = withFastActionParameters;
					},
					setWithFastPrivilegeInitialization : function(
							withFastPrivilegeInitialization) {
						this.m_withFastPrivilegeInitialization = withFastPrivilegeInitialization;
					},
					setWithUndoRedoStack : function(withUndoRedoStack) {
						this.m_withUndoRedoStack = withUndoRedoStack;
					},
					isWithSharedVersions : function() {
						return this.m_withSharedVersions;
					},
					supportsUndoRedoStack : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V75_UNDO_REDO_STACK) {
							return this.m_withUndoRedoStack;
						}
						return true;
					},
					getPersistenceType : function() {
						return this.m_persistenceType;
					},
					setPersistenceType : function(persistenceType) {
						if (persistenceType === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("persistence type must not be null");
						}
						this.m_persistenceType = persistenceType;
					},
					supportsFastActionParameters : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V70_FAST_ACTION_PARAMS) {
							return this.m_withFastActionParameters;
						}
						return true;
					},
					getActionParameterMetadata : function(actionId) {
						var actionMetadata = this.getActionMetadata(actionId);
						var extResult;
						if (actionMetadata === null) {
							return null;
						}
						extResult = this.getActionParameters(actionMetadata);
						if (extResult.hasErrors()) {
							return null;
						}
						return extResult.getData().getActionParameterMetadata();
					},
					getAction : function(actionIdentifier) {
						var extResult;
						if (actionIdentifier === null) {
							return null;
						}
						extResult = this.createActionById(actionIdentifier);
						if (extResult.hasErrors()) {
							return null;
						}
						return extResult.getData().getCreatedPlanningAction();
					},
					getActionForQuery : function(actionIdentifier) {
						var extResult;
						if (actionIdentifier === null) {
							return null;
						}
						extResult = this
								.createActionForQueryById(actionIdentifier);
						if (extResult.hasErrors()) {
							return null;
						}
						return extResult.getData()
								.getCreatedPlanningActionForQuery();
					},
					isWithUniqueVersionDescriptions : function() {
						return this.m_withUniqueVersionDescriptions;
					},
					setWithUniqueVersionDescriptions : function(
							uniqueVersionDecriptions) {
						this.m_withUniqueVersionDescriptions = uniqueVersionDecriptions;
					},
					isVersionDescriptionUnique : function(versionDescription) {
						var versionIterator = this.getVersions().getIterator();
						var newDescription = sap.firefly.XString
								.convertToLowerCase(versionDescription);
						var oldDescription;
						while (versionIterator.hasNext()) {
							oldDescription = sap.firefly.XString
									.convertToLowerCase(versionIterator.next()
											.getVersionDescription());
							if (sap.firefly.XString.isEqual(oldDescription,
									newDescription)) {
								return false;
							}
						}
						return true;
					},
					createCommandSave : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.SAVE);
					},
					createCommandClose : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.CLOSE);
					},
					createCommandBackup : function() {
						return this
								.createPlanningContextCommand(sap.firefly.PlanningContextCommandType.BACKUP);
					},
					isWithIgnoreUndesiredSharedVersions : function() {
						if (this.getPlanningService().getApplication()
								.getVersion() < sap.firefly.XVersion.V82_NEW_VALUES_AS_BATCH) {
							return this.m_withIgnoreUndesiredSharedVersions;
						}
						return true;
					},
					setWithIgnoreUndesiredSharedVersions : function(
							withIgnoreUndesiredSharedVersions) {
						this.m_withIgnoreUndesiredSharedVersions = withIgnoreUndesiredSharedVersions;
					},
					hasActiveActions : function() {
						var versions;
						var i;
						var version;
						if (!this.isModelInitialized()) {
							return false;
						}
						versions = this.getAllVersions();
						if (versions === null) {
							return false;
						}
						for (i = 0; i < versions.size(); i++) {
							version = versions.get(i);
							if (version === null) {
								continue;
							}
							if (version.isActionActive()) {
								return true;
							}
						}
						return false;
					},
					hasActiveActionSequences : function() {
						var versions;
						var i;
						var version;
						if (!this.isModelInitialized()) {
							return false;
						}
						versions = this.getAllVersions();
						if (versions === null) {
							return false;
						}
						for (i = 0; i < versions.size(); i++) {
							version = versions.get(i);
							if (version === null) {
								continue;
							}
							if (version.isActionSequenceActive()) {
								return true;
							}
						}
						return false;
					},
					supportsPublicVersionEdit : function() {
						return this.m_withPublicVersionEdit;
					},
					setWithPublicVersionEdit : function(publicVersionEdit) {
						this.m_withPublicVersionEdit = publicVersionEdit;
					},
					setPublicVersionEditInProgress : function(inProgress) {
						var iterator = this.getQueryConsumerServices()
								.getIterator();
						var queryManager;
						while (iterator.hasNext()) {
							queryManager = iterator.next();
							queryManager
									.setPublicVersionEditPossible(inProgress);
						}
						this.m_isPublicVersionEditInProgress = inProgress;
					},
					isPublicVersionEditInProgress : function() {
						return this.m_isPublicVersionEditInProgress;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersionPrivilege",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(planningModel, queryDataSource,
								versionIdentifier, privilege, grantee) {
							var result = new sap.firefly.PlanningVersionPrivilege();
							result.setup(planningModel, queryDataSource,
									versionIdentifier, privilege, grantee);
							return result;
						},
						createQualifiedName : function(planningModel,
								queryDataSource, versionIdentifier, privilege,
								grantee) {
							var sb;
							var modelSchema;
							var modelName;
							var querySchemaName;
							var queryPackageName;
							var queryObjectName;
							if (planningModel === null) {
								throw sap.firefly.XException
										.createIllegalArgumentException("planning model null");
							}
							sb = sap.firefly.XStringBuffer.create();
							sb.append("model:[");
							modelSchema = planningModel
									.getPlanningModelSchema();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(modelSchema)) {
								sb.append(modelSchema);
							}
							sb.append("]");
							sb.append("[");
							modelName = planningModel.getPlanningModelName();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(modelName)) {
								sb.append(modelName);
							}
							sb.append("]");
							if (queryDataSource === null) {
								throw sap.firefly.XException
										.createIllegalArgumentException("query data source null");
							}
							if (queryDataSource.getType() !== sap.firefly.MetaObjectType.PLANNING) {
								throw sap.firefly.XException
										.createIllegalArgumentException("illegal query data source object type");
							}
							querySchemaName = queryDataSource.getSchemaName();
							sb.append("datasource:[");
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(querySchemaName) === false) {
								sb.append(querySchemaName);
							}
							sb.append("]");
							queryPackageName = queryDataSource.getPackageName();
							sb.append("[");
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(queryPackageName) === false) {
								sb.append(queryPackageName);
							}
							sb.append("]");
							queryObjectName = queryDataSource.getObjectName();
							sb.append("[");
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(queryObjectName) === false) {
								sb.append(queryObjectName);
							}
							sb.append("]");
							sb.append("version:[");
							sb.append(versionIdentifier.getVersionUniqueName());
							sb.append("]");
							if (privilege === null) {
								throw sap.firefly.XException
										.createIllegalArgumentException("planning privilege null");
							}
							sb.append("privilege:[");
							sb.append(privilege.getName());
							sb.append("]");
							if (sap.firefly.XStringUtils.isNullOrEmpty(grantee)) {
								throw sap.firefly.XException
										.createIllegalArgumentException("grantee null");
							}
							sb.append("grantee:[");
							sb.append(grantee);
							sb.append("]");
							return sb.toString();
						}
					},
					m_planningModel : null,
					m_queryDataSource : null,
					m_versionIdentifier : null,
					m_privilege : null,
					m_grantee : null,
					m_serverState : null,
					m_clientState : null,
					m_qualifiedName : null,
					releaseObject : function() {
						this.m_qualifiedName = null;
						this.m_clientState = null;
						this.m_serverState = null;
						this.m_grantee = null;
						this.m_privilege = null;
						this.m_versionIdentifier = sap.firefly.XObject
								.releaseIfNotNull(this.m_versionIdentifier);
						this.m_queryDataSource = null;
						this.m_planningModel = null;
						sap.firefly.PlanningVersionPrivilege.$superclass.releaseObject
								.call(this);
					},
					getQualifiedName : function() {
						return this.m_qualifiedName;
					},
					setup : function(planningModel, queryDataSource,
							versionIdentifier, privilege, grantee) {
						this.m_planningModel = planningModel;
						if (this.m_planningModel === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("planning model null");
						}
						this.m_queryDataSource = queryDataSource;
						if (this.m_queryDataSource === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("query data source null");
						}
						if (this.m_queryDataSource.getType() !== sap.firefly.MetaObjectType.PLANNING) {
							throw sap.firefly.XException
									.createIllegalArgumentException("illegal query data source object type");
						}
						this.m_versionIdentifier = this.getPlanningModel()
								.copyVersionIdentifier(versionIdentifier);
						this.m_privilege = privilege;
						if (this.m_privilege === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("planning privilege null");
						}
						this.m_grantee = grantee;
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(this.m_grantee)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("grantee null");
						}
						this.m_serverState = sap.firefly.PlanningPrivilegeState.NEW;
						this.m_clientState = sap.firefly.PlanningPrivilegeState.NEW;
						this.m_qualifiedName = sap.firefly.PlanningVersionPrivilege
								.createQualifiedName(this.m_planningModel,
										this.m_queryDataSource,
										this.m_versionIdentifier,
										this.m_privilege, this.m_grantee);
					},
					getPlanningModel : function() {
						return this.m_planningModel;
					},
					getQueryDataSource : function() {
						return this.m_queryDataSource;
					},
					getVersionId : function() {
						return this.m_versionIdentifier.getVersionId();
					},
					isSharedVersion : function() {
						return this.m_versionIdentifier.isSharedVersion();
					},
					getVersionOwner : function() {
						return this.m_versionIdentifier.getVersionOwner();
					},
					getVersionUniqueName : function() {
						return this.m_versionIdentifier.getVersionUniqueName();
					},
					getPrivilege : function() {
						return this.m_privilege;
					},
					getGrantee : function() {
						return this.m_grantee;
					},
					getPrivilegeState : function() {
						return this.m_clientState;
					},
					getPrivilegeStateServer : function() {
						return this.m_serverState;
					},
					setPrivilegeState : function(privilegeState) {
						this.m_clientState = privilegeState;
					},
					setPrivilegeStateServer : function(privilegeState) {
						this.m_serverState = privilegeState;
					},
					doGrant : function() {
						if (this.m_serverState === sap.firefly.PlanningPrivilegeState.GRANTED) {
							this.m_clientState = sap.firefly.PlanningPrivilegeState.GRANTED;
						} else {
							this.m_clientState = sap.firefly.PlanningPrivilegeState.TO_BE_GRANTED;
						}
					},
					doRevoke : function() {
						if (this.m_serverState === sap.firefly.PlanningPrivilegeState.NEW) {
							this.m_clientState = sap.firefly.PlanningPrivilegeState.NEW;
						} else {
							this.m_clientState = sap.firefly.PlanningPrivilegeState.TO_BE_REVOKED;
						}
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var clientState;
						sb.append(this.getQualifiedName());
						clientState = this.getPrivilegeState();
						if (clientState !== null) {
							sb.append(" - ");
							sb.append(clientState.getName());
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersionSettings",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(versionIdentifier, sequenceId,
								useExternalView) {
							var settings = new sap.firefly.PlanningVersionSettings();
							settings.m_versionIdentifier = sap.firefly.PlanningVersionIdentifier
									.create(
											versionIdentifier.getVersionId(),
											versionIdentifier.isSharedVersion(),
											versionIdentifier.getVersionOwner());
							settings.m_sequenceId = sequenceId;
							settings.m_useExternalView = useExternalView;
							return settings;
						}
					},
					m_versionIdentifier : null,
					m_sequenceId : null,
					m_useExternalView : false,
					releaseObject : function() {
						this.m_versionIdentifier = null;
						this.m_sequenceId = null;
						sap.firefly.PlanningVersionSettings.$superclass.releaseObject
								.call(this);
					},
					getVersionId : function() {
						return this.m_versionIdentifier.getVersionId();
					},
					isSharedVersion : function() {
						return this.m_versionIdentifier.isSharedVersion();
					},
					getVersionOwner : function() {
						return this.m_versionIdentifier.getVersionOwner();
					},
					getVersionUniqueName : function() {
						return this.m_versionIdentifier.getVersionUniqueName();
					},
					getActionSequenceId : function() {
						return this.m_sequenceId;
					},
					getUseExternalView : function() {
						return this.m_useExternalView;
					},
					toString : function() {
						return this.getVersionUniqueName();
					},
					getIsRestrictionEnabled : function() {
						return true;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningActionMetadata",
				sap.firefly.XObject,
				{
					m_actionId : null,
					m_actionName : null,
					m_actionDescription : null,
					m_defaultAction : false,
					m_actionType : null,
					m_planningModel : null,
					m_actionParameterMetadataSet : false,
					m_actionParameterMetadata : null,
					m_actionParameterNames : null,
					setPlanningModel : function(planningModel) {
						this.m_planningModel = planningModel;
					},
					getActionId : function() {
						return this.m_actionId;
					},
					setActionId : function(actionId) {
						this.m_actionId = actionId;
					},
					getActionName : function() {
						return this.m_actionName;
					},
					setActionName : function(actionName) {
						this.m_actionName = actionName;
					},
					getActionDescription : function() {
						return this.m_actionDescription;
					},
					setActionDescription : function(actionDescription) {
						this.m_actionDescription = actionDescription;
					},
					getActionType : function() {
						if (this.m_actionType === null) {
							return sap.firefly.PlanningActionType.UNKNOWN;
						}
						return this.m_actionType;
					},
					setActionType : function(actionType) {
						this.m_actionType = actionType;
					},
					isDefault : function() {
						return this.m_defaultAction;
					},
					setDefault : function(defaultAction) {
						this.m_defaultAction = defaultAction;
					},
					isActionParameterMetadataSet : function() {
						return this.m_actionParameterMetadataSet;
					},
					getActionParameterMetadata : function() {
						if (this.m_actionParameterMetadataSet === false) {
							throw sap.firefly.XException
									.createIllegalStateException("action parameter metadata not yet set");
						}
						return this.m_actionParameterMetadata;
					},
					setActionParameterMetadata : function(
							actionParameterMetadata) {
						if (this.m_actionParameterMetadataSet) {
							throw sap.firefly.XException
									.createIllegalStateException("action parameter metadata already set");
						}
						this.m_actionParameterMetadataSet = true;
						this.m_actionParameterMetadata = actionParameterMetadata;
					},
					createRequestGetActionParameters : function() {
						return this.m_planningModel
								.createRequestGetActionParameters(this);
					},
					getActionParameters : function() {
						return this.m_planningModel.getActionParameters(this);
					},
					setActionParameterNames : function(parameterNames) {
						var i;
						if (this.m_actionParameterNames !== null) {
							throw sap.firefly.XException
									.createIllegalStateException("already set");
						}
						this.m_actionParameterNames = sap.firefly.XListOfString
								.create();
						if (parameterNames !== null) {
							for (i = 0; i < parameterNames.size(); i++) {
								this.m_actionParameterNames.add(parameterNames
										.get(i));
							}
						}
					},
					getActionParameterNames : function() {
						if (this.m_actionParameterNames === null) {
							throw sap.firefly.XException
									.createIllegalStateException("not set");
						}
						return this.m_actionParameterNames;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var actionParameterMetadata;
						sb.append("action: ");
						sb.append("id: ");
						if (this.m_actionId !== null) {
							sb.append(this.m_actionId);
						}
						sb.appendNewLine();
						sb.append("name: ");
						if (this.m_actionName !== null) {
							sb.append(this.m_actionName);
						}
						sb.appendNewLine();
						sb.append("description: ");
						if (this.m_actionDescription !== null) {
							sb.append(this.m_actionDescription);
						}
						sb.appendNewLine();
						sb.append("type: ");
						if (this.m_actionType !== null) {
							sb.append(this.m_actionType.toString());
							sb.append(" ");
						}
						if (this.m_defaultAction) {
							sb.append("default=true");
						}
						sb.appendNewLine();
						if (this.isActionParameterMetadataSet()) {
							actionParameterMetadata = this
									.getActionParameterMetadata();
							if (actionParameterMetadata === null) {
								sb.append("action does not have parameters");
							} else {
								sb.append("parameters:");
								sb.appendNewLine();
								sb.append(actionParameterMetadata.toString());
							}
						} else {
							sb.append("parameter metadata not yet requested");
						}
						sb.appendNewLine();
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QCmdContextOlapFactory",
				sap.firefly.QCmdContextFactory,
				{
					$statics : {
						staticSetupOlapFactory : function() {
							var factory = new sap.firefly.QCmdContextOlapFactory();
							sap.firefly.QCmdContextFactory.register(factory);
						}
					},
					newCmdContext : function(olapApplication, component) {
						var olapComponentType = component.getComponentType();
						if ((olapComponentType === sap.firefly.OlapComponentType.QUERY_MODEL)
								|| (olapComponentType === sap.firefly.OlapComponentType.QUERY_MANAGER)
								|| (olapComponentType === sap.firefly.OlapComponentType.OLAP_DATA_PROVIDER)) {
							return sap.firefly.QConvenienceCommands.create(
									olapApplication, component);
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapEnvironmentFactoryImpl",
				sap.firefly.OlapEnvironmentFactory,
				{
					$statics : {
						staticSetupImpl : function() {
							var theFactory = new sap.firefly.OlapEnvironmentFactoryImpl();
							sap.firefly.OlapEnvironmentFactory
									.setOlapEnvironmentFactory(theFactory);
						}
					},
					newOlapEnvironmentInstance : function(application) {
						return sap.firefly.OlapEnvironment.create(application);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADataSource",
				sap.firefly.QInAComponent,
				{
					$statics : {
						importQd : function(importer, inaParent, name, context) {
							var inaStructure = inaParent;
							var type;
							var legacyDataSource;
							var dataSource;
							var systemName;
							var typeValue;
							var metaObjectType;
							var sources;
							var multiSources;
							var i;
							var sourceStructure;
							var multiSource;
							var mappings;
							if (name !== null) {
								if ((inaStructure !== null)
										&& (inaStructure.hasValueByName(name) === false)) {
									inaStructure = inaStructure
											.getStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
									if ((inaStructure !== null)
											&& (inaStructure
													.hasValueByName(name) === false)) {
										inaStructure = inaStructure
												.getStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
									}
								}
								if ((inaStructure !== null)
										&& inaStructure.hasValueByName(name)) {
									type = inaStructure
											.getElementTypeByName(name);
									if (type === sap.firefly.PrElementType.STRING) {
										legacyDataSource = sap.firefly.QFactory2
												.newDataSource();
										legacyDataSource
												.setType(sap.firefly.MetaObjectType.INFOPROVIDER);
										legacyDataSource
												.setObjectName(inaStructure
														.getStringByName(name));
										return legacyDataSource;
									} else {
										if (type === sap.firefly.PrElementType.STRUCTURE) {
											inaStructure = inaStructure
													.getStructureByName(name);
										}
									}
								}
							}
							if (inaStructure === null) {
								return null;
							}
							dataSource = sap.firefly.QFactory2.newDataSource();
							systemName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_SYSTEM);
							if (systemName !== null) {
								dataSource.setSystemName(systemName);
							}
							typeValue = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_TYPE);
							metaObjectType = null;
							if (typeValue !== null) {
								typeValue = sap.firefly.XString
										.convertToLowerCase(typeValue);
								metaObjectType = sap.firefly.MetaObjectType
										.lookup(typeValue);
							}
							if (metaObjectType === null) {
								metaObjectType = sap.firefly.MetaObjectType.DBVIEW;
							}
							dataSource.setType(metaObjectType);
							sap.firefly.QInADataSourceProperties.importQd(
									dataSource, inaStructure);
							if ((metaObjectType === sap.firefly.MetaObjectType.MULTI_SOURCE)
									|| (metaObjectType === sap.firefly.MetaObjectType.BLENDING)) {
								sources = sap.firefly.PrUtils.getListProperty(
										inaStructure,
										sap.firefly.InAConstants.QY_SOURCES);
								if (sources !== null) {
									multiSources = dataSource
											.getMultiSourcesBase();
									for (i = 0; i < sources.size(); i++) {
										sourceStructure = sap.firefly.PrUtils
												.getStructureElement(sources, i);
										multiSource = sap.firefly.QInADataSource
												.importQd(importer,
														sourceStructure, null,
														context);
										multiSources.add(multiSource);
									}
								}
								mappings = sap.firefly.PrUtils.getListProperty(
										inaStructure,
										sap.firefly.InAConstants.QY_MAPPINGS);
								dataSource.setMappings(mappings);
							}
							sap.firefly.QInADataSourceExtDims.importQd(
									importer, dataSource, inaStructure);
							return dataSource;
						},
						exportDataSource : function(exporter, dataSource,
								withRunAsUser, inaQueryModel) {
							var inaDataSource = sap.firefly.PrStructure
									.create();
							var type = dataSource.getType();
							var systemName;
							var sources;
							var multiSources;
							var size;
							var i;
							var multiSource;
							var source;
							if (type !== null) {
								if ((exporter.getMode() === sap.firefly.QModelFormat.INA_VALUE_HELP)
										&& (type === sap.firefly.MetaObjectType.QUERY)) {
									inaDataSource
											.setStringByName(
													sap.firefly.InAConstants.QY_TYPE,
													sap.firefly.MetaObjectType.QUERY_VALUEHELP
															.getCamelCaseName());
								} else {
									if ((exporter.getMode() === sap.firefly.QModelFormat.INA_VALUE_HELP)
											&& (type === sap.firefly.MetaObjectType.MODEL)) {
										inaDataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														sap.firefly.MetaObjectType.MODEL_VALUEHELP
																.getCamelCaseName());
									} else {
										inaDataSource
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														type.getCamelCaseName());
									}
								}
								systemName = dataSource.getSystemName();
								if ((systemName !== null)
										&& (exporter.m_mode
												.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY))) {
									inaDataSource.setStringByName(
											sap.firefly.InAConstants.QY_SYSTEM,
											systemName);
								}
								if ((type === sap.firefly.MetaObjectType.MULTI_SOURCE)
										|| (type === sap.firefly.MetaObjectType.BLENDING)) {
									if (type === sap.firefly.MetaObjectType.MULTI_SOURCE) {
										sources = inaDataSource
												.setNewListByName(sap.firefly.InAConstants.QY_SOURCES);
										multiSources = dataSource
												.getMultiSources();
										size = multiSources.size();
										for (i = 0; i < size; i++) {
											multiSource = multiSources.get(i);
											source = sap.firefly.QInADataSource
													.exportDataSource(exporter,
															multiSource,
															withRunAsUser, null);
											sources.add(source);
										}
									} else {
										sources = sap.firefly.QInADataSourceBlending
												.exportBlendingSources(exporter
														.getMode(), dataSource
														.getBlendingSources());
										inaDataSource
												.setElementByName(
														sap.firefly.InAConstants.QY_SOURCES,
														sources);
									}
									inaDataSource
											.setElementByName(
													sap.firefly.InAConstants.QY_MAPPINGS,
													dataSource.getMappings());
								}
							}
							sap.firefly.QInADataSourceProperties.exportQd(
									exporter, dataSource, inaDataSource,
									withRunAsUser);
							sap.firefly.QInADataSourceExtDims.exportQd(
									exporter, dataSource, inaDataSource);
							if (inaQueryModel !== null) {
								inaQueryModel
										.setElementByName(
												sap.firefly.InAConstants.QY_DATA_SOURCE,
												inaDataSource);
							}
							return inaDataSource;
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_SOURCE;
					},
					importComponent : function(importer, inaElement,
							modelComponent, parentComponent, context) {
						return sap.firefly.QInADataSource.importQd(importer,
								inaElement,
								sap.firefly.InAConstants.QY_DATA_SOURCE,
								context);
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var withRunAsUser = sap.firefly.XMath.binaryAnd(flags,
								sap.firefly.QImExFlag.RUN_AS_USER) > 0;
						return sap.firefly.QInADataSource.exportDataSource(
								exporter, modelComponent, withRunAsUser, null);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAComponentWithList",
				sap.firefly.QInAComponent,
				{
					importComponent : function(importer, inaElement,
							modelComponent, parentComponent, context) {
						var tagName = this.getTagName();
						var inaList = null;
						var inaStructure;
						if (tagName === null) {
							inaList = inaElement;
						} else {
							if (inaElement !== null) {
								inaStructure = inaElement;
								inaList = inaStructure.getListByName(tagName);
							}
						}
						return this.importComponentWithList(importer, inaList,
								modelComponent, parentComponent, context);
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var inaList = null;
						var tagName;
						var inaInsertStructure;
						if (modelComponent !== null) {
							inaList = this.exportComponentWithList(exporter,
									modelComponent, flags);
							tagName = this.getTagName();
							if ((tagName !== null) && (inaList !== null)) {
								inaInsertStructure = inaParentStructure;
								if (inaInsertStructure === null) {
									inaInsertStructure = sap.firefly.PrStructure
											.create();
								}
								inaInsertStructure.setElementByName(tagName,
										inaList);
								return inaInsertStructure;
							}
						}
						return inaList;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAComponentWithStructure",
				sap.firefly.QInAComponent,
				{
					importComponent : function(importer, inaElement,
							modelComponent, parentComponent, context) {
						var inaStructure = inaElement;
						var tagName = this.getTagName();
						var myModelComponent;
						var application;
						var returnModelComponent;
						if ((tagName !== null) && (inaStructure !== null)) {
							inaStructure = inaStructure
									.getStructureByName(tagName);
						}
						myModelComponent = modelComponent;
						if (modelComponent === null) {
							application = null;
							if (context !== null) {
								application = context.getOlapEnv();
							}
							myModelComponent = this.newModelComponent(
									application, parentComponent, context);
							if (myModelComponent !== null) {
								(myModelComponent).stopEventing();
							}
						}
						returnModelComponent = this
								.importComponentWithStructure(importer,
										inaStructure, myModelComponent,
										parentComponent, context);
						sap.firefly.QInAImportUtil.importComponentTagging(
								importer, inaStructure, returnModelComponent);
						if ((modelComponent === null)
								&& (myModelComponent !== null)) {
							myModelComponent.resumeEventing();
						}
						return returnModelComponent;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						return null;
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var inaStructure = null;
						var tagName;
						var inaInsertStructure;
						if (modelComponent !== null) {
							tagName = this.getTagName();
							if (tagName === null) {
								inaStructure = inaParentStructure;
							}
							if (inaStructure === null) {
								inaStructure = sap.firefly.PrStructure.create();
							}
							inaStructure = this.exportComponentWithStructure(
									exporter, modelComponent, inaStructure,
									flags);
							if (inaStructure !== null) {
								inaStructure = sap.firefly.QInAExportUtil
										.extendStructure(exporter,
												modelComponent, inaStructure);
								inaStructure = sap.firefly.QInAExportUtil
										.extendStructureWithTagging(exporter,
												modelComponent, inaStructure);
								inaStructure = this.extendCustom(exporter,
										modelComponent, inaStructure);
							}
							if (tagName !== null) {
								if (inaStructure !== null) {
									inaInsertStructure = inaParentStructure;
									if (inaInsertStructure === null) {
										inaInsertStructure = sap.firefly.PrStructure
												.create();
									}
									inaInsertStructure.setElementByName(
											tagName, inaStructure);
									return inaInsertStructure;
								}
							}
						}
						return inaStructure;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					extendCustom : function(exporter, modelComponent,
							inaStructure) {
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterCartesianList",
				sap.firefly.QInAComponent,
				{
					$statics : {
						setStringValueIfFilterBagNotNull : function(filterBag,
								exporter, inaSetOperand, name) {
							if ((filterBag !== null)
									&& (filterBag.getValue() !== null)) {
								sap.firefly.QInAValueUtils.exportFilterValue(
										exporter, name, inaSetOperand,
										filterBag,
										sap.firefly.XValueType.STRING);
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_LIST;
					},
					importComponent : function(importer, inaElement,
							modelComponent, parentComponent, context) {
						var inaCartesianList = inaElement;
						var cartesianListExt = modelComponent;
						var filterExpression = parentComponent;
						var fieldAccessor = context.getFieldAccessorSingle();
						var fieldName = inaCartesianList
								.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
						var cartesianList = cartesianListExt;
						var field;
						var queryModel;
						var dimensionByName;
						var inaHierarchy2;
						var inaHierarchy;
						var inaHierarchyName;
						var convertToFlatSelection;
						var supplementsFieldsNamesList;
						var len;
						var y;
						var name;
						var supplField;
						var elements;
						var size;
						var i;
						var setOperandElement;
						var element;
						if (fieldName !== null) {
							field = fieldAccessor.getFieldByName(fieldName);
							if (field === null) {
								queryModel = filterExpression.getQueryModel();
								if (queryModel !== null) {
									dimensionByName = queryModel
											.getDimensionByName(fieldName);
									if (dimensionByName !== null) {
										inaHierarchy2 = inaCartesianList
												.getStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
										if (inaHierarchy2 === null) {
											field = dimensionByName
													.getFlatKeyField();
										} else {
											field = dimensionByName
													.getHierarchyKeyField();
										}
									}
								}
							}
							if (field !== null) {
								inaHierarchy = inaCartesianList
										.getStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
								inaHierarchyName = null;
								if (inaHierarchy !== null) {
									inaHierarchyName = inaHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_NAME);
								}
								if (cartesianList === null) {
									cartesianList = sap.firefly.QFilterCartesianList
											._create(context, filterExpression,
													field, inaHierarchyName);
								} else {
									cartesianList.clear();
								}
								convertToFlatSelection = inaCartesianList
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
												false);
								cartesianList
										.setConvertToFlatSelection(convertToFlatSelection);
								supplementsFieldsNamesList = inaCartesianList
										.getListByName(sap.firefly.InAConstants.QY_SUPPLEMENTS_FIELD_NAMES);
								if (supplementsFieldsNamesList !== null) {
									len = supplementsFieldsNamesList.size();
									for (y = 0; y < len; y++) {
										name = supplementsFieldsNamesList
												.getStringByIndex(y);
										supplField = fieldAccessor
												.getFieldByName(name);
										cartesianList
												.addSupplementField(supplField);
									}
								}
								elements = inaCartesianList
										.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
								if (elements !== null) {
									size = elements.size();
									for (i = 0; i < size; i++) {
										setOperandElement = elements
												.getStructureByIndex(i);
										element = importer
												.importFilterOperation(
														setOperandElement,
														cartesianList, context);
										cartesianList.add(element);
									}
								}
							}
						}
						return cartesianList;
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var cartesianList = modelComponent;
						var element;
						var comparisonOperator;
						if (cartesianList.hasElements()) {
							element = cartesianList.getOp(0);
							comparisonOperator = element
									.getComparisonOperator();
							if (comparisonOperator !== null) {
								if (comparisonOperator
										.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL)) {
									return this.exportSpatialList(exporter,
											cartesianList, inaParentStructure);
								} else {
									if (comparisonOperator === sap.firefly.ComparisonOperator.SEARCH) {
										return this.exportSearchList(exporter,
												cartesianList,
												inaParentStructure);
									}
								}
							}
							return this.exportStandardList(exporter,
									cartesianList, inaParentStructure);
						}
						return null;
					},
					exportStandardList : function(exporter, modelComponent,
							inaParentStructure) {
						var cartesianList = modelComponent;
						var inaCartesianList;
						var hierarchyName;
						var inaHierarchy;
						var supplementFields;
						var len;
						var inaSupplements;
						var s;
						var inaElements;
						var size;
						var j;
						if (cartesianList.isEmpty()) {
							return null;
						}
						inaCartesianList = sap.firefly.PrStructure.create();
						inaCartesianList.setStringByName(
								sap.firefly.InAConstants.QY_FIELD_NAME,
								cartesianList.getField().getName());
						hierarchyName = cartesianList.getHierarchyName();
						if (hierarchyName !== null) {
							inaHierarchy = inaCartesianList
									.setNewStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
							inaHierarchy.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									hierarchyName);
						}
						if (exporter.m_supportsConvertToFlatFilter
								&& cartesianList.isConvertToFlatSelection()) {
							inaCartesianList
									.setBooleanByName(
											sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
											true);
						}
						if (!exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_DATA)) {
							if (exporter.m_supportsSupplements) {
								supplementFields = cartesianList
										.getSupplementFields();
								if (supplementFields !== null) {
									len = supplementFields.size();
									if (len > 0) {
										inaSupplements = inaCartesianList
												.setNewListByName(sap.firefly.InAConstants.QY_SUPPLEMENTS_FIELD_NAMES);
										for (s = 0; s < len; s++) {
											inaSupplements
													.addString(supplementFields
															.get(s).getName());
										}
									}
								}
							}
						}
						inaElements = inaCartesianList
								.setNewListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						size = cartesianList.size();
						for (j = 0; j < size; j++) {
							exporter.exportFilterOperation(inaElements
									.addNewStructure(), cartesianList.getOp(j));
						}
						if (inaParentStructure !== null) {
							inaParentStructure.setElementByName(
									sap.firefly.InAConstants.QY_SET_OPERAND,
									inaCartesianList);
						}
						return inaCartesianList;
					},
					exportSpatialList : function(exporter, cartesianList,
							inaParentStructure) {
						var field;
						var inaOperator;
						var inaSubSelections;
						var size;
						var j;
						var qFilterSelection;
						var comparisonOperator;
						var inaOrElement;
						var inaGeoOperation;
						var geoValueA1;
						var srid;
						var geoValueA2;
						var geoValueA3;
						if (!exporter.m_supportsSpatialFilter) {
							exporter
									.addWarning(
											sap.firefly.ErrorCodes.INVALID_OPERATOR,
											"System does not support spatial filtering.");
							return null;
						}
						field = cartesianList.getField();
						inaOperator = inaParentStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_OPERATOR);
						inaOperator.setStringByName(
								sap.firefly.InAConstants.QY_CODE,
								sap.firefly.InAConstants.VA_CODE_OR);
						inaSubSelections = inaOperator
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						size = cartesianList.size();
						for (j = 0; j < size; j++) {
							qFilterSelection = cartesianList.getOp(j);
							comparisonOperator = qFilterSelection
									.getComparisonOperator();
							if (comparisonOperator === null) {
								exporter
										.addError(
												sap.firefly.ErrorCodes.INVALID_OPERATOR,
												"Comparison operator is not set");
								return null;
							}
							if (!comparisonOperator
									.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL)) {
								exporter
										.addError(
												sap.firefly.ErrorCodes.INVALID_OPERATOR,
												"Comparison operator not spatial");
								return null;
							}
							inaOrElement = inaSubSelections.addNewStructure();
							inaGeoOperation = inaOrElement
									.setNewStructureByName(sap.firefly.InAConstants.QY_GEOMETRY_OPERAND);
							inaGeoOperation.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									field.getName());
							inaGeoOperation
									.setStringByName(
											sap.firefly.InAConstants.QY_COMPARISON,
											sap.firefly.QInAConverter
													.lookupComparisonInA(comparisonOperator));
							if (qFilterSelection.getSetSign() === sap.firefly.SetSign.EXCLUDING) {
								inaGeoOperation
										.setBooleanByName(
												sap.firefly.InAConstants.QY_IS_EXCLUDING,
												true);
							}
							geoValueA1 = qFilterSelection.getLow();
							sap.firefly.QInAFilterCartesianList
									.setStringValueIfFilterBagNotNull(
											geoValueA1, exporter,
											inaGeoOperation,
											sap.firefly.InAConstants.QY_VALUE1);
							srid = geoValueA1.getGeometry().getSrid();
							if (exporter.m_supportsSpatialFilterSrid
									&& (srid !== null)) {
								inaGeoOperation.setIntegerByName(
										sap.firefly.InAConstants.QY_SRID, srid
												.getIntegerValue());
							}
							geoValueA2 = qFilterSelection.getHigh();
							sap.firefly.QInAFilterCartesianList
									.setStringValueIfFilterBagNotNull(
											geoValueA2, exporter,
											inaGeoOperation,
											sap.firefly.InAConstants.QY_VALUE2);
							geoValueA3 = qFilterSelection.getThird();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(geoValueA3
											.getStringValue())) {
								sap.firefly.QInAFilterCartesianList
										.setStringValueIfFilterBagNotNull(
												geoValueA3,
												exporter,
												inaGeoOperation,
												sap.firefly.InAConstants.QY_VALUE3);
							}
						}
						return inaParentStructure;
					},
					exportSearchList : function(exporter, cartesianList,
							inaParentStructure) {
						var field = cartesianList.getField();
						var fieldValueType = field.getValueType();
						var inaOperator = inaParentStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_OPERATOR);
						var inaSubSelections;
						var size;
						var j;
						var qFilterSelection;
						var inaOrElement;
						var inaSearchOperation;
						inaOperator.setStringByName(
								sap.firefly.InAConstants.QY_CODE,
								sap.firefly.InAConstants.VA_CODE_OR);
						inaSubSelections = inaOperator
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						size = cartesianList.size();
						for (j = 0; j < size; j++) {
							qFilterSelection = cartesianList.getOp(j);
							if (qFilterSelection.getComparisonOperator() !== sap.firefly.ComparisonOperator.SEARCH) {
								exporter
										.addError(
												sap.firefly.ErrorCodes.INVALID_OPERATOR,
												"Comparison operator is not search");
								return null;
							}
							inaOrElement = inaSubSelections.addNewStructure();
							inaSearchOperation = inaOrElement
									.setNewStructureByName(sap.firefly.InAConstants.QY_SEARCH_OPERAND);
							if (exporter.isAbap(cartesianList.getQueryModel())) {
								inaSearchOperation.setStringByName(
										sap.firefly.InAConstants.QY_FIELD_NAME,
										field.getName());
							}
							inaSearchOperation.setStringByName(
									sap.firefly.InAConstants.QY_ATTRIBUTE_NAME,
									field.getName());
							sap.firefly.QInAValueUtils.exportFilterValue(
									exporter,
									sap.firefly.InAConstants.QY_VALUE,
									inaSearchOperation, qFilterSelection
											.getLow(), fieldValueType);
							inaSearchOperation.setDoubleByName(
									sap.firefly.InAConstants.QY_EXACTNESS,
									qFilterSelection.getExactness());
						}
						return inaParentStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterCartesianProduct",
				sap.firefly.QInAComponent,
				{
					$statics : {
						iterateCartesianDimensionsNew : function(exporter,
								cartesianProduct, parentList) {
							var size = cartesianProduct.size();
							var i;
							var msl;
							var parentElement;
							for (i = 0; i < size; i++) {
								msl = cartesianProduct.getCartesianChild(i);
								parentElement = sap.firefly.PrStructure
										.create();
								if (msl.hasElements()) {
									exporter.exportCartesianList(parentElement,
											msl);
									parentList.add(parentElement);
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_PRODUCT;
					},
					importComponent : function(importer, inaElement,
							modelComponent, parentComponent, context) {
						var inaStructure = inaElement;
						var filterExpression = parentComponent;
						var cartesianProduct = null;
						var inaElements = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						var size;
						var i;
						var inaCartesianChild;
						var cartesianList;
						if (inaElements === null) {
							inaElements = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						}
						if (inaElements !== null) {
							cartesianProduct = sap.firefly.QFilterCartesianProduct
									._create(context, filterExpression);
							size = inaElements.size();
							for (i = 0; i < size; i++) {
								inaCartesianChild = inaElements
										.getStructureByIndex(i);
								if (inaCartesianChild !== null) {
									cartesianList = importer
											.importCartesianList(
													inaCartesianChild, null,
													filterExpression, context);
									cartesianProduct.add(cartesianList);
								}
							}
						}
						return cartesianProduct;
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var cartesianProduct = modelComponent;
						var filterDimCount;
						var singleMemberSelection;
						var size;
						var i;
						var msl;
						var inaLogicalOperator;
						var inaSubSelections;
						if (cartesianProduct !== null) {
							filterDimCount = 0;
							singleMemberSelection = null;
							size = cartesianProduct.size();
							for (i = 0; i < size; i++) {
								msl = cartesianProduct.getCartesianChild(i);
								if (msl.hasElements()) {
									filterDimCount++;
									singleMemberSelection = msl;
									if (filterDimCount > 1) {
										break;
									}
								}
							}
							if ((filterDimCount > 0)
									&& (singleMemberSelection !== null)) {
								if ((filterDimCount === 1)
										&& (exporter.m_mode
												.isTypeOf(sap.firefly.QModelFormat.INA_DATA))) {
									return exporter.exportCartesianList(
											inaParentStructure,
											singleMemberSelection);
								}
								inaLogicalOperator = inaParentStructure
										.setNewStructureByName(sap.firefly.InAConstants.QY_LOGICAL_OPERATOR);
								inaLogicalOperator.setStringByName(
										sap.firefly.InAConstants.QY_CODE,
										sap.firefly.InAConstants.VA_CODE_AND);
								inaSubSelections = inaLogicalOperator
										.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
								sap.firefly.QInAFilterCartesianProduct
										.iterateCartesianDimensionsNew(
												exporter, cartesianProduct,
												inaSubSelections);
								return inaLogicalOperator;
							}
						}
						return null;
					}
				});
$Firefly.createClass("sap.firefly.QInATxt", sap.firefly.QInAComponent, {
	exportComponent : function(exporter, modelComponent, inaParentStructure,
			flags) {
		var buffer = sap.firefly.XStringBuffer.create();
		this.exportText(exporter, modelComponent, buffer);
		return sap.firefly.PrString.createWithValue(buffer.toString());
	},
	exportText : function(exporter, modelComponent, buffer) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getModelFormat : function() {
		return sap.firefly.QModelFormat.TEXT;
	},
	importComponent : function(importer, inaElement, modelComponent,
			parentComponent, context) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	}
});
$Firefly
		.createClass(
				"sap.firefly.RsAxisTuple",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(axis, axisIndex) {
							var object = new sap.firefly.RsAxisTuple();
							object.setup(axis, axisIndex);
							return object;
						}
					},
					m_axis : null,
					m_elements : null,
					m_attributeMembers : null,
					m_valueCount : 0,
					m_axisIndex : 0,
					setup : function(axis, axisIndex) {
						this.m_axis = sap.firefly.XWeakReferenceUtil
								.getWeakRef(axis);
						this.m_axisIndex = axisIndex;
						this.m_valueCount = -1;
					},
					releaseObject : function() {
						var size;
						var i;
						var tupleElement;
						this.m_axis = null;
						if (this.m_elements !== null) {
							size = this.m_elements.size();
							for (i = 0; i < size; i++) {
								tupleElement = this.m_elements.get(i);
								if (tupleElement !== null) {
									tupleElement.releaseObject();
								}
							}
							this.m_elements = sap.firefly.XObject
									.releaseIfNotNull(this.m_elements);
						}
						this.m_attributeMembers = sap.firefly.XObject
								.releaseIfNotNull(this.m_attributeMembers);
						sap.firefly.RsAxisTuple.$superclass.releaseObject
								.call(this);
					},
					setTupleElements : function(elements) {
						this.m_elements = elements;
					},
					getMaxAlertLevel : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getAlertThresholds : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getAxis : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_axis);
					},
					size : function() {
						return this.m_elements.size();
					},
					getAxisIndex : function() {
						return this.m_axisIndex;
					},
					getScalingFactor : function() {
						var resultSet = this.getAxis().getResultSet();
						var size;
						var i;
						var scalingFactor;
						var currentScalingFactor;
						var dataCell;
						if (this.getAxis().getType() === sap.firefly.AxisType.COLUMNS) {
							size = resultSet.getDataRows();
							if (size > 0) {
								scalingFactor = resultSet.getDataCell(
										this.m_axisIndex, 0).getScalingFactor();
								for (i = 1; i < size; i++) {
									dataCell = resultSet.getDataCell(
											this.m_axisIndex, i);
									currentScalingFactor = dataCell
											.getScalingFactor();
									if (scalingFactor !== currentScalingFactor) {
										return null;
									}
									scalingFactor = currentScalingFactor;
								}
								return sap.firefly.XIntegerValue
										.create(scalingFactor);
							}
						} else {
							size = resultSet.getDataColumns();
							if (size > 0) {
								scalingFactor = resultSet.getDataCell(0,
										this.m_axisIndex).getScalingFactor();
								for (i = 1; i < size; i++) {
									dataCell = resultSet.getDataCell(i,
											this.m_axisIndex);
									currentScalingFactor = dataCell
											.getScalingFactor();
									if (scalingFactor !== currentScalingFactor) {
										return null;
									}
									scalingFactor = currentScalingFactor;
								}
								return sap.firefly.XIntegerValue
										.create(scalingFactor);
							}
						}
						return null;
					},
					getAxisHierarchyInfo : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isOverallResult : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isDetail : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getElementByIndex : function(index) {
						return this.m_elements.get(index);
					},
					getElementByDimension : function(dimension) {
						var indexOnAxis = dimension.getIndexOnAxis();
						return this.m_elements.get(indexOnAxis);
					},
					getElements : function() {
						return this.m_elements;
					},
					getValueCount : function() {
						var size;
						var i;
						var element;
						if (this.m_valueCount === -1) {
							this.m_valueCount = 0;
							size = this.m_elements.size();
							for (i = 0; i < size; i++) {
								element = this.m_elements.get(i);
								this.m_valueCount = this.m_valueCount
										+ element.getDimension()
												.getResultSetFields().size();
							}
						}
						return this.m_valueCount;
					},
					getAttributeMember : function(index) {
						var size;
						var idxTupleElement;
						var element;
						var dimensionMember;
						var resultSetAttributeMembers;
						var resultSetAttributeMemberSize;
						var idxAttribute;
						if (this.m_attributeMembers === null) {
							this.m_attributeMembers = sap.firefly.XList
									.create();
							size = this.m_elements.size();
							for (idxTupleElement = 0; idxTupleElement < size; idxTupleElement++) {
								element = this.m_elements.get(idxTupleElement);
								dimensionMember = element.getDimensionMember();
								resultSetAttributeMembers = dimensionMember
										.getResultSetFieldValues();
								resultSetAttributeMemberSize = resultSetAttributeMembers
										.size();
								for (idxAttribute = 0; idxAttribute < resultSetAttributeMemberSize; idxAttribute++) {
									this.m_attributeMembers
											.add(resultSetAttributeMembers
													.get(idxAttribute));
								}
							}
						}
						return this.m_attributeMembers.get(index);
					},
					getValueType : function(index) {
						return this.getAttributeMember(index).getValueType();
					},
					getIntValue : function(index) {
						return this.getAttributeMember(index).getIntegerValue();
					},
					getDoubleValue : function(index) {
						return this.getAttributeMember(index).getDoubleValue();
					},
					getStringValue : function(index) {
						return this.getAttributeMember(index).getStringValue();
					},
					getBooleanValue : function(index) {
						return this.getAttributeMember(index).getBooleanValue();
					},
					getValueByField : function(field) {
						var size = this.size();
						var i;
						var element;
						for (i = 0; i < size; i++) {
							element = this.m_elements.get(i);
							if (element.getDimension() === field.getDimension()) {
								return element.getDimensionMember()
										.getFieldValue(field);
							}
						}
						return null;
					},
					getIntValueByField : function(field) {
						var valueByField = this.getValueByField(field);
						if (valueByField === null) {
							return 0;
						}
						return valueByField.getIntegerValue();
					},
					getDoubleValueByField : function(field) {
						var valueByField = this.getValueByField(field);
						if (valueByField === null) {
							return 0;
						}
						return valueByField.getDoubleValue();
					},
					getStringValueByField : function(field) {
						var valueByField = this.getValueByField(field);
						if (valueByField === null) {
							return null;
						}
						return valueByField.getStringValue();
					},
					getBooleanValueByField : function(field) {
						var valueByField = this.getValueByField(field);
						if (valueByField === null) {
							return false;
						}
						return valueByField.getBooleanValue();
					},
					getTristateValueByField : function(field) {
						var valueByField = this.getValueByField(field);
						if (valueByField === null) {
							return sap.firefly.TriStateBool._DEFAULT;
						}
						return sap.firefly.TriStateBool.lookup(valueByField
								.getBooleanValue());
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var size = this.m_elements.size();
						var i;
						var element;
						for (i = 0; i < size; i++) {
							if (i > 0) {
								buffer.append("\r\n");
							}
							element = this.getElementByIndex(i);
							buffer.append(element.toString());
						}
						return buffer.toString();
					},
					getMaxAlertLevelName : function() {
						return null;
					}
				});
$Firefly.createClass("sap.firefly.RsCursorCurrencyUnit", sap.firefly.XObject, {
	$statics : {
		createCurrencyUnit : function() {
			return new sap.firefly.RsCursorCurrencyUnit();
		},
		createCopy : function(origin) {
			var newObject = new sap.firefly.RsCursorCurrencyUnit();
			if (origin !== null) {
				if (origin.hasFormatted()) {
					newObject.setFormatted(origin.getFormatted());
				}
				if (origin.hasPrefix()) {
					newObject.setPrefix(origin.getPrefix());
				}
				if (origin.hasSuffix()) {
					newObject.setSuffix(origin.getSuffix());
				}
				newObject.m_isEmpty = origin.isEmpty();
				newObject.m_hasCurrency = origin.hasCurrency();
				newObject.m_hasUnit = origin.hasUnit();
				newObject.m_isMixed = origin.isMixed();
			}
			return newObject;
		}
	},
	m_formattedCurrencyUnit : null,
	m_prefix : null,
	m_suffix : null,
	m_isEmpty : false,
	m_hasCurrency : false,
	m_hasUnit : false,
	m_isMixed : false,
	releaseObject : function() {
		this.m_formattedCurrencyUnit = sap.firefly.XObject
				.releaseIfNotNull(this.m_formattedCurrencyUnit);
		this.m_prefix = sap.firefly.XObject.releaseIfNotNull(this.m_prefix);
		this.m_suffix = sap.firefly.XObject.releaseIfNotNull(this.m_suffix);
		sap.firefly.RsCursorCurrencyUnit.$superclass.releaseObject.call(this);
	},
	reset : function() {
		this.m_hasCurrency = false;
		this.m_hasUnit = false;
		this.m_isMixed = false;
		this.m_isEmpty = false;
		this.m_formattedCurrencyUnit = null;
		this.m_prefix = null;
		this.m_suffix = null;
	},
	hasFormatted : function() {
		return (this.m_formattedCurrencyUnit !== null);
	},
	getFormatted : function() {
		if (this.m_formattedCurrencyUnit === null) {
			return null;
		}
		return this.m_formattedCurrencyUnit.getStringValue();
	},
	setFormatted : function(formattedCurrencyUnit) {
		if (this.m_formattedCurrencyUnit === null) {
			this.m_formattedCurrencyUnit = sap.firefly.XStringValue
					.create(formattedCurrencyUnit);
		} else {
			this.m_formattedCurrencyUnit.setStringValue(formattedCurrencyUnit);
		}
	},
	hasPrefix : function() {
		return (this.m_prefix !== null);
	},
	setPrefix : function(prefix) {
		if (this.m_prefix === null) {
			this.m_prefix = sap.firefly.XStringValue.create(prefix);
		} else {
			this.m_prefix.setStringValue(prefix);
		}
	},
	getPrefix : function() {
		if (this.m_prefix === null) {
			return null;
		}
		return this.m_prefix.getStringValue();
	},
	hasSuffix : function() {
		return (this.m_suffix !== null);
	},
	setSuffix : function(suffix) {
		if (this.m_suffix === null) {
			this.m_suffix = sap.firefly.XStringValue.create(suffix);
		} else {
			this.m_suffix.setStringValue(suffix);
		}
	},
	getSuffix : function() {
		if (this.m_suffix === null) {
			return null;
		}
		return this.m_suffix.getStringValue();
	},
	isEmpty : function() {
		return this.m_isEmpty;
	},
	setIsEmpty : function(isEmpty) {
		this.m_isEmpty = isEmpty;
	},
	hasCurrency : function() {
		return this.m_hasCurrency;
	},
	setHasCurrency : function(hasCurrency) {
		this.m_hasCurrency = hasCurrency;
	},
	hasUnit : function() {
		return this.m_hasUnit;
	},
	setHasUnit : function(hasUnit) {
		this.m_hasUnit = hasUnit;
	},
	setIsMixed : function(isMixed) {
		this.m_isMixed = isMixed;
	},
	isMixed : function() {
		return this.m_isMixed;
	}
});
$Firefly.createClass("sap.firefly.RsDefAxis", sap.firefly.XObject, {
	$statics : {
		create : function(axisType, axis, doCopy) {
			var object = new sap.firefly.RsDefAxis();
			object.setup(axisType, axis, doCopy);
			return object;
		}
	},
	m_axisType : null,
	m_axis : null,
	m_rsDimensions : null,
	m_dimensions : null,
	setup : function(axisType, axis, doCopy) {
		var size;
		var i;
		this.m_axisType = axisType;
		this.m_axis = sap.firefly.XWeakReferenceUtil.getWeakRef(axis);
		this.m_rsDimensions = sap.firefly.XList.create();
		this.m_dimensions = sap.firefly.XList.create();
		if (doCopy) {
			if (axis !== null) {
				size = axis.getDimensionCount();
				for (i = 0; i < size; i++) {
					this.addDimension(axis.get(i));
				}
			}
		}
	},
	releaseObject : function() {
		this.m_axisType = null;
		this.m_axis = null;
		this.m_rsDimensions = sap.firefly.XObject
				.releaseIfNotNull(this.m_rsDimensions);
		this.m_dimensions = sap.firefly.XObject
				.releaseIfNotNull(this.m_dimensions);
		sap.firefly.RsDefAxis.$superclass.releaseObject.call(this);
	},
	addDimension : function(dimension) {
		this.m_dimensions.add(dimension);
		this.m_rsDimensions.add(sap.firefly.RsDefDimension.create(dimension));
	},
	getDimensions : function() {
		return this.m_dimensions;
	},
	getQueryAxis : function() {
		return sap.firefly.XWeakReferenceUtil.getHardRef(this.m_axis);
	},
	getType : function() {
		return this.m_axisType;
	},
	getRsDimensions : function() {
		return this.m_rsDimensions;
	},
	getEffectiveFields : function() {
		return null;
	}
});
$Firefly
		.createClass(
				"sap.firefly.XCmdCreatePlanningOperation",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						CMD_NAME : "CREATE_PLANNING_OPERATION",
						PARAM_I_DATA_AREA : "DATA_AREA",
						PARAM_I_PLANNING_OPERATION_IDENTIFIER : "PLANNING_OPERATION_IDENTIFIER",
						PARAM_E_PLANNING_OPERATION : "PLANNING_OPERATION",
						staticSetup : function() {
							sap.firefly.XCmdCreatePlanningOperation.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdCreatePlanningOperation);
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdCreatePlanningOperationResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdCreatePlanningOperationResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdCreatePlanningOperationResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdCreatePlanningOperationResult);
						}
					},
					process : function() {
						var dataArea = this
								.getParameterWithDefaultValue(
										sap.firefly.XCmdCreatePlanningOperation.PARAM_I_DATA_AREA,
										null);
						var planningOperationIdentifier = this
								.getParameterWithDefaultValue(
										sap.firefly.XCmdCreatePlanningOperation.PARAM_I_PLANNING_OPERATION_IDENTIFIER,
										null);
						var planningOperationType = planningOperationIdentifier
								.getPlanningOperationType();
						var requestGetPlanningOperationMetadata;
						if ((planningOperationType !== sap.firefly.PlanningOperationType.PLANNING_FUNCTION)
								&& (planningOperationType !== sap.firefly.PlanningOperationType.PLANNING_SEQUENCE)) {
							this.getMessageManager().addError(0,
									"illegal planning operation type");
							this.onProcessFinished();
							return;
						}
						requestGetPlanningOperationMetadata = dataArea
								.createRequestGetPlanningOperationMetadata(planningOperationIdentifier);
						requestGetPlanningOperationMetadata.processCommand(this
								.getSyncType(),
								sap.firefly.XPlanningCommandCallback
										.create(this), null);
					},
					onXPlanningCommandProcessed : function(
							extPlanningCommandResult) {
						var dataArea;
						var planningOperationIdentifier;
						var planningOperationType;
						var planningOperation;
						var planningFunction;
						var planningSequence;
						this.getMessageManager().addAllMessages(
								extPlanningCommandResult);
						if (extPlanningCommandResult.hasErrors() === false) {
							dataArea = this
									.getParameterWithDefaultValue(
											sap.firefly.XCmdCreatePlanningOperation.PARAM_I_DATA_AREA,
											null);
							planningOperationIdentifier = this
									.getParameterWithDefaultValue(
											sap.firefly.XCmdCreatePlanningOperation.PARAM_I_PLANNING_OPERATION_IDENTIFIER,
											null);
							planningOperationType = planningOperationIdentifier
									.getPlanningOperationType();
							planningOperation = null;
							if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_FUNCTION) {
								planningFunction = new sap.firefly.PlanningFunction();
								planningFunction
										.setCommandType(sap.firefly.PlanningCommandType.PLANNING_FUNCTION);
								planningFunction.setPlanningService(dataArea
										.getPlanningService());
								planningFunction.setPlanningContext(dataArea);
								planningFunction
										.setCommandIdentifier(planningOperationIdentifier);
								planningFunction
										.setPlanningOperationMetadata((extPlanningCommandResult
												.getData())
												.getPlanningFunctionMetadata());
								planningFunction.initializePlanningOperation();
								planningOperation = planningFunction;
							} else {
								if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_SEQUENCE) {
									planningSequence = new sap.firefly.PlanningSequence();
									planningSequence
											.setCommandType(sap.firefly.PlanningCommandType.PLANNING_SEQUENCE);
									planningSequence
											.setPlanningService(dataArea
													.getPlanningService());
									planningSequence
											.setPlanningContext(dataArea);
									planningSequence
											.setCommandIdentifier(planningOperationIdentifier);
									planningSequence
											.setPlanningOperationMetadata((extPlanningCommandResult
													.getData())
													.getPlanningSequenceMetadata());
									planningSequence
											.initializePlanningOperation();
									planningOperation = planningSequence;
								}
							}
							if (planningOperation === null) {
								this.getMessageManager().addError(0,
										"illegal planning operation type");
								this.onProcessFinished();
								return;
							}
							this
									.addResultParameter(
											sap.firefly.XCmdCreatePlanningOperation.PARAM_E_PLANNING_OPERATION,
											planningOperation);
						}
						this.onProcessFinished();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdCreateQueryManager",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdCreateQueryManager.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdCreateQueryManager);
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdCreateQueryManagerResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdCreateQueryManagerResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdCreateQueryManagerResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdCreateQueryManagerResult);
						}
					},
					process : function() {
						var application = this
								.getParameterWithDefaultValue(
										sap.firefly.CmdCreateQueryManager.PARAM_I_APPLICATION,
										null);
						var system = this
								.getParameterStringWithDefaultValue(
										sap.firefly.CmdCreateQueryManager.PARAM_I_SYSTEM,
										null);
						var dataSource = this
								.getParameterStringWithDefaultValue(
										sap.firefly.CmdCreateQueryManager.PARAM_I_DATA_SOURCE,
										null);
						var queryConsumerServiceConfig = sap.firefly.QueryServiceConfig
								.createWithDataSourceName(application, system,
										dataSource);
						var queryModelInaRepository = this
								.getParameterWithDefaultValue(
										sap.firefly.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY,
										null);
						var experimentalFeatures;
						if (queryModelInaRepository !== null) {
							queryConsumerServiceConfig
									.setDefinitionByStructure(
											sap.firefly.QModelFormat.INA_REPOSITORY,
											queryModelInaRepository);
							experimentalFeatures = queryModelInaRepository
									.getStringByNameWithDefault(
											sap.firefly.InAConstants.QY_EXPERIMENTAL_FEATURES,
											null);
							queryConsumerServiceConfig
									.activateExperimentalFeatures(experimentalFeatures);
						}
						queryConsumerServiceConfig.processQueryManagerCreation(
								this.getSyncType(), this, null);
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						this.getMessageManager().addAllMessages(extResult);
						if (extResult.hasErrors() === false) {
							this
									.addResultParameter(
											sap.firefly.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER,
											queryManager);
						}
						this.onProcessFinished();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeBlending",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeBlending.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeBlending);
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdDeserializeBlendingResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeBlendingResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeBlendingResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeBlendingResult);
						},
						createBlendingDefinition : function(queryManagers,
								aliases, inaMappings) {
							var blendingDefinition = sap.firefly.BlendingDefinition
									.create();
							var sourceCount = queryManagers.size();
							var i;
							var idx;
							var inaMapping;
							var linkType;
							var dimensionName;
							var dimensionMapping;
							var inaDimensionMappings;
							var dimMapIdx;
							var inaDimensionMapping;
							var queryAliasName;
							var name;
							var value;
							var inaAttributeMappings;
							var attMapIdx;
							var inaAttributeMapping;
							var attributeName;
							var isLinkKey;
							var attributeMapping;
							var inaAttributeDefinitions;
							var attDefIdx;
							var inaAttributeDefinition;
							var nameAtt;
							var queryAliasNameAtt;
							for (i = 0; i < sourceCount; i++) {
								blendingDefinition
										.addNewSource(queryManagers.get(i)
												.getQueryModel(), aliases
												.get(i));
							}
							for (idx = 0; idx < inaMappings.size(); idx++) {
								inaMapping = inaMappings
										.getStructureByIndex(idx);
								linkType = inaMapping
										.getStringByName(sap.firefly.InAConstants.QY_LINK_TYPE);
								dimensionName = inaMapping
										.getStringByName(sap.firefly.InAConstants.QY_DIMENSION_NAME);
								dimensionMapping = blendingDefinition
										.addNewDimensionMapping(
												sap.firefly.BlendingLinkType
														.lookup(linkType),
												dimensionName);
								inaDimensionMappings = inaMapping
										.getListByName(sap.firefly.InAConstants.QY_MAPPING);
								if (inaMapping
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_PRESERVE_MEMBERS,
												false)) {
									dimensionMapping
											.setIsPreservingMembers(true);
								}
								if (inaMapping
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_RETURN_ORIGIN_KEYS,
												true) === false) {
									dimensionMapping
											.setIsReturningOriginKeys(false);
								}
								for (dimMapIdx = 0; dimMapIdx < inaDimensionMappings
										.size(); dimMapIdx++) {
									inaDimensionMapping = inaDimensionMappings
											.getStructureByIndex(dimMapIdx);
									queryAliasName = inaDimensionMapping
											.getStringByName(sap.firefly.InAConstants.QY_ALIAS_NAME);
									name = sap.firefly.XCmdDeserializeBlendingResult
											.getNameFromMappingDefinition(inaDimensionMapping);
									if (name === null) {
										value = sap.firefly.XCmdDeserializeBlendingResult
												.getNameFromConstantMappingDefinition(inaDimensionMapping);
										dimensionMapping.addNewConstantMapping(
												value, queryAliasName);
									} else {
										dimensionMapping
												.addNewDimensionMappingDefinitionByName(
														name, queryAliasName);
									}
								}
								inaAttributeMappings = inaMapping
										.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTE_MAPPINGS);
								if (inaAttributeMappings !== null) {
									for (attMapIdx = 0; attMapIdx < inaAttributeMappings
											.size(); attMapIdx++) {
										inaAttributeMapping = inaAttributeMappings
												.getStructureByIndex(attMapIdx);
										attributeName = inaAttributeMapping
												.getStringByName(sap.firefly.InAConstants.QY_ATTRIBUTE_NAME);
										isLinkKey = inaAttributeMapping
												.getBooleanByName(sap.firefly.InAConstants.QY_IS_LINK_KEY);
										attributeMapping = dimensionMapping
												.addNewAttributeMappingByName(
														attributeName,
														isLinkKey);
										inaAttributeDefinitions = inaAttributeMapping
												.getListByName(sap.firefly.InAConstants.QY_MAPPING);
										for (attDefIdx = 0; attDefIdx < inaAttributeDefinitions
												.size(); attDefIdx++) {
											inaAttributeDefinition = inaAttributeDefinitions
													.getStructureByIndex(attDefIdx);
											nameAtt = sap.firefly.XCmdDeserializeBlendingResult
													.getNameFromMappingDefinition(inaAttributeDefinition);
											queryAliasNameAtt = inaAttributeDefinition
													.getStringByName(sap.firefly.InAConstants.QY_ALIAS_NAME);
											attributeMapping
													.addAttributeMappingDefinition(sap.firefly.BlendingMappingDefinition
															.createAttributeMapping(
																	nameAtt,
																	queryAliasNameAtt));
										}
									}
								}
							}
							return blendingDefinition;
						},
						getNameFromMappingDefinition : function(inaMapping) {
							var inaMappingDefinition = inaMapping
									.getStructureByName(sap.firefly.InAConstants.QY_MAPPING_DEFINITION);
							var inaMember;
							if (inaMappingDefinition
									.hasValueByName(sap.firefly.InAConstants.QY_MEMBER)) {
								inaMember = inaMappingDefinition
										.getStructureByName(sap.firefly.InAConstants.QY_MEMBER);
								return inaMember
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
							}
							return null;
						},
						getNameFromConstantMappingDefinition : function(
								inaMapping) {
							var inaMappingDefinition = inaMapping
									.getStructureByName(sap.firefly.InAConstants.QY_MAPPING_DEFINITION);
							var inaMember;
							if (inaMappingDefinition
									.hasValueByName(sap.firefly.InAConstants.QY_CONSTANT)) {
								inaMember = inaMappingDefinition
										.getStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
								return inaMember
										.getStringByName(sap.firefly.InAConstants.QY_VALUE);
							}
							return null;
						},
						getDataSourceName : function(inaDataSource) {
							var dataSourceName = sap.firefly.XStringBuffer
									.create();
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_TYPE));
							dataSourceName.append(":[");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_SCHEMA_NAME));
							dataSourceName.append("][");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_PACKAGE_NAME));
							dataSourceName.append("][");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME));
							dataSourceName.append("]");
							return dataSourceName.toString();
						}
					},
					process : function() {
						var strQueryModel = this
								.getParameterString(sap.firefly.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
						var application = this
								.getParameter(sap.firefly.CmdDeserializeBlending.PARAM_I_APPLICATION);
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var rootElement = jsonParser.parse(strQueryModel);
						var inaDataSource = rootElement
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						var inaSources = inaDataSource
								.getListByName(sap.firefly.InAConstants.QY_SOURCES);
						var aliases = sap.firefly.XListOfString.create();
						var queryManagers = sap.firefly.XList.create();
						var sourceCount = inaSources.size();
						var i;
						var inaSource;
						var alias;
						var inaMappings;
						var blendingDefinition;
						var serviceConfig;
						var experimentalFeatures;
						for (i = 0; i < sourceCount; i++) {
							inaSource = inaSources.getStructureByIndex(i);
							alias = inaSource
									.getStringByName(sap.firefly.InAConstants.QY_ALIAS_NAME);
							aliases.add(alias);
							queryManagers.add(this.importSourceQueryModel(
									application, inaSource, alias));
						}
						inaMappings = inaDataSource
								.getListByName(sap.firefly.InAConstants.QY_MAPPINGS);
						blendingDefinition = sap.firefly.XCmdDeserializeBlendingResult
								.createBlendingDefinition(queryManagers,
										aliases, inaMappings);
						serviceConfig = sap.firefly.QueryServiceConfig
								.createWithBlendingDefinition(application,
										blendingDefinition);
						experimentalFeatures = rootElement
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_EXPERIMENTAL_FEATURES,
										null);
						serviceConfig
								.activateExperimentalFeatures(experimentalFeatures);
						serviceConfig.processQueryManagerCreation(this
								.getSyncType(), this, null);
					},
					importSourceQueryModel : function(application,
							sourceQueryModel, queryAlias) {
						var inaDefiningContext = sourceQueryModel
								.getStructureByName(sap.firefly.InAConstants.QY_DEFINING_CONTEXT);
						var inaDefinition = inaDefiningContext
								.getStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
						var inaDataSource = inaDefinition
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						var commandFactory = sap.firefly.XCommandFactory
								.create(application);
						var xCmdDeserialize;
						var processDeserialize;
						var dataDeserialize;
						var resultParameterDeserialize;
						var createQm;
						var dataSourceName;
						var processCreateQm;
						var dataCreateQm;
						var queryManager;
						if (inaDataSource
								.hasValueByName(sap.firefly.InAConstants.QY_MAPPINGS)) {
							xCmdDeserialize = commandFactory
									.createCommand(sap.firefly.CmdDeserializeBlending.CMD_NAME);
							xCmdDeserialize
									.addParameter(
											sap.firefly.CmdDeserializeBlending.PARAM_I_APPLICATION,
											this
													.getParameter(sap.firefly.CmdDeserializeBlending.PARAM_I_APPLICATION));
							xCmdDeserialize
									.addParameter(
											sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEMS,
											this
													.getParameterWithDefaultValue(
															sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEMS,
															null));
							xCmdDeserialize
									.addParameterString(
											sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEM,
											this
													.getParameterStringWithDefaultValue(
															sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEM,
															null));
							xCmdDeserialize
									.addParameterString(
											sap.firefly.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY,
											inaDefinition.toString());
							processDeserialize = xCmdDeserialize
									.processCommand(
											sap.firefly.SyncType.BLOCKING,
											null, null);
							xCmdDeserialize.releaseObject();
							this.getMessageManager().addAllMessages(
									processDeserialize);
							dataDeserialize = processDeserialize.getData();
							resultParameterDeserialize = dataDeserialize
									.getResultParameter(sap.firefly.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER);
							dataDeserialize.releaseObject();
							return resultParameterDeserialize;
						}
						createQm = commandFactory
								.createCommand(sap.firefly.CmdCreateQueryManager.CMD_NAME);
						createQm
								.addParameter(
										sap.firefly.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY,
										inaDefinition);
						createQm
								.addParameter(
										sap.firefly.CmdCreateQueryManager.PARAM_I_APPLICATION,
										this
												.getParameter(sap.firefly.CmdDeserializeBlending.PARAM_I_APPLICATION));
						createQm
								.addParameterString(
										sap.firefly.CmdCreateQueryManager.PARAM_I_SYSTEM,
										this.getSystemName(queryAlias));
						dataSourceName = sap.firefly.XCmdDeserializeBlendingResult
								.getDataSourceName(inaDataSource);
						createQm
								.addParameterString(
										sap.firefly.CmdCreateQueryManager.PARAM_I_DATA_SOURCE,
										dataSourceName);
						processCreateQm = createQm.processCommand(this
								.getSyncType(), null, null);
						dataCreateQm = processCreateQm.getData();
						queryManager = dataCreateQm
								.getResultParameter(sap.firefly.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER);
						dataCreateQm.releaseObject();
						return queryManager;
					},
					getSystemName : function(queryAlias) {
						var systems = this
								.getParameterWithDefaultValue(
										sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEMS,
										null);
						var system;
						if ((systems !== null)
								&& systems.containsKey(queryAlias)) {
							return systems.getByKey(queryAlias);
						}
						system = this
								.getParameterStringWithDefaultValue(
										sap.firefly.CmdDeserializeBlending.PARAM_I_SYSTEM,
										null);
						if (system !== null) {
							return system;
						}
						throw sap.firefly.XException
								.createIllegalStateException(sap.firefly.XStringUtils
										.concatenate3(
												"No system found for query ",
												queryAlias,
												". Either parameter PARAM_I_SYSTEMS or PARAM_I_SYSTEM must be set."));
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						var strQueryModel;
						var deserializeExt;
						this.getMessageManager().addAllMessages(extResult);
						if (extResult.hasErrors() === false) {
							strQueryModel = this
									.getParameterString(sap.firefly.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
							deserializeExt = queryManager
									.getQueryModel()
									.deserializeExt(
											sap.firefly.QModelFormat.INA_REPOSITORY,
											strQueryModel);
							this.getMessageManager().addAllMessages(
									deserializeExt);
							this
									.addResultParameter(
											sap.firefly.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER,
											queryManager);
						}
						this.onProcessFinished();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeCalculatedDimension",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeCalculatedDimension.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeCalculatedDimension);
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdDeserializeCalculatedDimensionResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeCalculatedDimensionResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeCalculatedDimensionResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeCalculatedDimensionResult);
						},
						getDataSourceName : function(inaDataSource) {
							var dataSourceName = sap.firefly.XStringBuffer
									.create();
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_TYPE));
							dataSourceName.append(":[");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_SCHEMA_NAME));
							dataSourceName.append("][");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_PACKAGE_NAME));
							dataSourceName.append("][");
							dataSourceName
									.append(inaDataSource
											.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME));
							dataSourceName.append("]");
							return dataSourceName.toString();
						}
					},
					m_inaQueryModels : null,
					m_systemName : null,
					m_application : null,
					releaseObject : function() {
						this.m_inaQueryModels = null;
						this.m_systemName = null;
						this.m_application = null;
						sap.firefly.XCmdDeserializeCalculatedDimensionResult.$superclass.releaseObject
								.call(this);
					},
					process : function() {
						var strQueryModels = this
								.getParameterString(sap.firefly.CmdDeserializeCalculatedDimension.PARAM_I_QUERY_MODELS_STRING_INA_REPOSITORY);
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var rootElement = jsonParser.parse(strQueryModels);
						var inaMainQuery;
						this.m_inaQueryModels = rootElement
								.getListByName(sap.firefly.InAConstants.QY_QUERIES);
						this.m_application = this
								.getParameter(sap.firefly.CmdDeserializeCalculatedDimension.PARAM_I_APPLICATION);
						this.m_systemName = this
								.getParameterString(sap.firefly.CmdDeserializeCalculatedDimension.PARAM_I_SYSTEM);
						inaMainQuery = this.m_inaQueryModels
								.getStructureByIndex(this.m_inaQueryModels
										.size() - 1);
						this.importQueryModel(inaMainQuery, null);
						this.onProcessFinished();
					},
					importQueryModel : function(inaQueryModel, consumingQuery) {
						var queryConsumerServiceConfig = sap.firefly.QueryServiceConfig
								.createWithDataSourceName(
										this.m_application,
										this.m_systemName,
										sap.firefly.XCmdDeserializeCalculatedDimensionResult
												.getDataSourceName(inaQueryModel
														.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE)));
						queryConsumerServiceConfig.setDefinitionByStructure(
								sap.firefly.QModelFormat.INA_REPOSITORY,
								inaQueryModel);
						queryConsumerServiceConfig.processQueryManagerCreation(
								this.getSyncType(), this, consumingQuery);
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						var queryPair;
						var preQueryNames;
						var sizeNames;
						var sizePreQueries;
						var idxPreQueryName;
						var preQueryName;
						var idxPreQuery;
						var inaPreQuery;
						this.getMessageManager().addAllMessages(extResult);
						if (extResult.hasErrors() === false) {
							if (customIdentifier !== null) {
								queryPair = customIdentifier;
								queryPair.getObject().getQueryModel()
										.addPreQueryWithName(
												queryManager.getQueryModel(),
												queryPair.getName());
							}
							preQueryNames = queryManager
									.getDefinitionAsStructure()
									.getListByName(
											sap.firefly.InAConstants.QY_PRE_QUERY_NAMES);
							if (preQueryNames !== null) {
								sizeNames = preQueryNames.size();
								sizePreQueries = this.m_inaQueryModels.size() - 1;
								for (idxPreQueryName = 0; idxPreQueryName < sizeNames; idxPreQueryName++) {
									preQueryName = preQueryNames
											.getStringByIndex(idxPreQueryName);
									for (idxPreQuery = 0; idxPreQuery < sizePreQueries; idxPreQuery++) {
										inaPreQuery = this.m_inaQueryModels
												.getStructureByIndex(idxPreQuery);
										if (sap.firefly.XString
												.isEqual(
														preQueryName,
														inaPreQuery
																.getStringByName(sap.firefly.InAConstants.QY_NAME))) {
											this
													.importQueryModel(
															inaPreQuery,
															sap.firefly.XNameWeakGenericPair
																	.create(
																			preQueryName,
																			queryManager));
										}
									}
								}
							}
						}
						if (customIdentifier === null) {
							this
									.addResultParameter(
											sap.firefly.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER,
											queryManager);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeExtendedDimension",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeExtendedDimension.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeExtendedDimension);
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdDeserializeExtendedDimensionResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdDeserializeExtendedDimensionResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdDeserializeExtendedDimensionResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdDeserializeExtendedDimensionResult);
						}
					},
					process : function() {
						var strQueryModel = this
								.getParameterString(sap.firefly.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var rootElement = jsonParser.parse(strQueryModel);
						var inaDataSource = rootElement
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						var queryModel = this
								.getParameter(sap.firefly.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL);
						var dataSource = queryModel.getDataSource()
								.cloneOlapComponent(null, null);
						var importer = sap.firefly.QInAImportFactory
								.createForRepository(queryModel
										.getApplication(), null);
						var queryConsumerServiceConfig;
						sap.firefly.QInADataSourceExtDims.importQd(importer,
								dataSource, inaDataSource);
						queryConsumerServiceConfig = sap.firefly.QueryServiceConfig
								.createWithDataSource(queryModel
										.getApplication(), dataSource
										.getSystemName(), dataSource);
						queryConsumerServiceConfig.processQueryManagerCreation(
								this.getSyncType(), this, null);
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						var strQueryModel;
						var deserializeExt;
						this.getMessageManager().addAllMessages(extResult);
						if (extResult.hasErrors() === false) {
							strQueryModel = this
									.getParameterString(sap.firefly.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
							deserializeExt = queryManager
									.getQueryModel()
									.deserializeExt(
											sap.firefly.QModelFormat.INA_REPOSITORY,
											strQueryModel);
							this.getMessageManager().addAllMessages(
									deserializeExt);
							this
									.addResultParameter(
											sap.firefly.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER,
											queryManager);
						}
						this.onProcessFinished();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdInitPlanningStep",
				sap.firefly.XCommand,
				{
					$statics : {
						CLAZZ : null,
						CMD_NAME : "INIT_PLANNING_STEP",
						PARAM_I_PLANNING_MODEL : "PLANNING_MODEL",
						PARAM_I_STEP : "STEP",
						STEP_1_REFRESH_VERSIONS : null,
						STEP_2_INIT_VERSIONS : null,
						staticSetup : function() {
							sap.firefly.XCmdInitPlanningStep.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdInitPlanningStep);
							sap.firefly.XCmdInitPlanningStep.STEP_1_REFRESH_VERSIONS = sap.firefly.XStringValue
									.create("STEP_1_REFRESH_VERSIONS");
							sap.firefly.XCmdInitPlanningStep.STEP_2_INIT_VERSIONS = sap.firefly.XStringValue
									.create("STEP_2_INIT_VERSIONS");
						}
					},
					getCommandResultClass : function() {
						return sap.firefly.XCmdInitPlanningStepResult.CLAZZ;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.XCmdInitPlanningStepResult",
				sap.firefly.XCommandResult,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.XCmdInitPlanningStepResult.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.XCmdInitPlanningStepResult);
						}
					},
					process : function() {
						var planningModel = this
								.getParameterWithDefaultValue(
										sap.firefly.XCmdInitPlanningStep.PARAM_I_PLANNING_MODEL,
										null);
						var step;
						if (planningModel === null) {
							this.onProcessFinished();
						}
						step = this.getParameterWithDefaultValue(
								sap.firefly.XCmdInitPlanningStep.PARAM_I_STEP,
								null);
						if (step === sap.firefly.XCmdInitPlanningStep.STEP_1_REFRESH_VERSIONS) {
							this.processStep1RefreshVersions(planningModel);
						} else {
							if (step === sap.firefly.XCmdInitPlanningStep.STEP_2_INIT_VERSIONS) {
								this.processStep2InitVersions(planningModel);
							} else {
								this.onProcessFinished();
							}
						}
					},
					processStep1RefreshVersions : function(planningModel) {
						var userName;
						var planningModelBehaviour;
						var commandType;
						var command;
						if (planningModel.supportsUndoRedoStack()
								&& planningModel.isWithSharedVersions()) {
							userName = planningModel.getBackendUserName();
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(userName)) {
								if (planningModel.supportsStrictErrorHandling()) {
									this
											.getMessageManager()
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													"undo/redo stack with shared versions requires backend user",
													null);
								}
							}
						}
						planningModelBehaviour = planningModel
								.getPlanningModelBehaviour();
						if (planningModelBehaviour === null) {
							if (planningModel.supportsStrictErrorHandling()) {
								this
										.getMessageManager()
										.addErrorExt(
												sap.firefly.OriginLayer.DRIVER,
												sap.firefly.ErrorCodes.INVALID_STATE,
												"planning model behavior is null",
												null);
							}
						}
						commandType = sap.firefly.PlanningContextCommandType.REFRESH;
						if (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_NO_VERSION_HARD_DELETE) {
							commandType = sap.firefly.PlanningContextCommandType.HARD_DELETE;
						}
						command = planningModel
								.createPlanningContextCommand(commandType);
						command
								.processCommand(
										this.getSyncType(),
										sap.firefly.XPlanningCommandCallback
												.create(this),
										sap.firefly.XCmdInitPlanningStep.STEP_1_REFRESH_VERSIONS);
					},
					processStep2InitVersions : function(planningModel) {
						var planningModelBehaviour = planningModel
								.getPlanningModelBehaviour();
						if (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.CREATE_DEFAULT_VERSION) {
							if (this.checkBlocking(planningModel,
									planningModelBehaviour)) {
								sap.firefly.PlanningModelUtil
										.initCreateDefaultVersion(planningModel);
							}
						} else {
							if ((planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_NO_VERSION)
									|| (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_NO_VERSION_HARD_DELETE)) {
								if (this.checkBlocking(planningModel,
										planningModelBehaviour)) {
									sap.firefly.PlanningModelUtil
											.initEnforceNoVersion(planningModel);
								}
							} else {
								if (planningModelBehaviour === sap.firefly.PlanningModelBehaviour.ENFORCE_SINGLE_VERSION) {
									if (this.checkBlocking(planningModel,
											planningModelBehaviour)) {
										sap.firefly.PlanningModelUtil
												.initEnforceSingleVersion(planningModel);
									}
								}
							}
						}
						this.onProcessFinished();
					},
					checkBlocking : function(planningModel,
							planningModelBehaviour) {
						if (this.getSyncType() !== sap.firefly.SyncType.BLOCKING) {
							if (planningModel.supportsStrictErrorHandling()) {
								this
										.getMessageManager()
										.addErrorExt(
												sap.firefly.OriginLayer.DRIVER,
												sap.firefly.ErrorCodes.INVALID_STATE,
												sap.firefly.XStringBuffer
														.create()
														.append(
																"Planning model behaviour ")
														.append(
																planningModelBehaviour
																		.getName())
														.append(
																" is only supported in blocking mode")
														.toString(), null);
							}
							return false;
						}
						return true;
					},
					onXPlanningCommandProcessed : function(
							extPlanningCommandResult) {
						this.getMessageManager().addAllMessages(
								extPlanningCommandResult);
						this.onProcessFinished();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningVersion",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							var version = new sap.firefly.PlanningVersion();
							version.m_useExternalView = true;
							version.m_isRestrictionEnabled = true;
							return version;
						},
						parametersStructure2ParametersStringMap : function(
								parametersStructure) {
							var parameters;
							var names;
							var i;
							var name;
							var valueElement;
							var stringElement;
							if (parametersStructure === null) {
								return null;
							}
							parameters = sap.firefly.XHashMapOfStringByString
									.create();
							names = sap.firefly.PrUtils
									.getStructureElementNames(
											parametersStructure, null);
							if (names !== null) {
								for (i = 0; i < names.size(); i++) {
									name = names.get(i);
									valueElement = sap.firefly.PrUtils
											.getProperty(parametersStructure,
													name);
									if (valueElement === null) {
										continue;
									}
									if (valueElement.getType() !== sap.firefly.PrElementType.STRING) {
										continue;
									}
									stringElement = valueElement;
									parameters.put(name, stringElement
											.getStringValue());
								}
							}
							return parameters;
						},
						parametersStringMap2ParametersStructure : function(
								parameters) {
							var parametersStructure;
							var keys;
							var key;
							var value;
							if (parameters === null) {
								return null;
							}
							parametersStructure = sap.firefly.PrStructure
									.create();
							keys = parameters.getKeysAsIteratorOfString();
							while (keys.hasNext()) {
								key = keys.next();
								value = parameters.getByKey(key);
								parametersStructure.setStringByName(key, value);
							}
							return parametersStructure;
						}
					},
					m_planningModel : null,
					m_versionIdentifier : null,
					m_versionDescription : null,
					m_versionState : null,
					m_privilege : null,
					m_parametersStructure : null,
					m_creationTime : null,
					m_backupTime : null,
					m_actionSequenceId : null,
					m_useExternalView : false,
					m_totalChangesSize : 0,
					m_undoChangesSize : 0,
					m_sequenceActive : false,
					m_sequenceDescription : null,
					m_sequenceCreateTime : null,
					m_actionActive : false,
					m_actionStartTime : null,
					m_actionEndTime : null,
					m_isRestrictionEnabled : false,
					m_userName : null,
					m_isShowingAsPublicVersion : false,
					m_sourceVersionName : null,
					releaseObject : function() {
						this.m_planningModel = null;
						this.m_versionIdentifier = sap.firefly.XObject
								.releaseIfNotNull(this.m_versionIdentifier);
						this.m_versionDescription = null;
						this.m_versionState = null;
						this.m_privilege = null;
						this.m_parametersStructure = sap.firefly.XObject
								.releaseIfNotNull(this.m_parametersStructure);
						sap.firefly.PlanningVersion.$superclass.releaseObject
								.call(this);
					},
					isEqualTo : function(other) {
						var otherVersion;
						if (other === null) {
							return false;
						}
						otherVersion = other;
						return (otherVersion.getPlanningModel() === this
								.getPlanningModel())
								&& (sap.firefly.XString.isEqual(otherVersion
										.getVersionUniqueName(), this
										.getVersionUniqueName()))
								&& (otherVersion.getVersionState() === this
										.getVersionState())
								&& (otherVersion.isActive() === this.isActive());
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						sb.append("Id  : ");
						sb.append(this.m_versionIdentifier
								.getVersionUniqueName());
						sb.append(", Active : ");
						sb.append(sap.firefly.XBoolean
								.convertBooleanToString(this.isActive()));
						sb.append(", State : ");
						if (this.m_versionState === null) {
							sb.append("null");
						} else {
							sb.append(this.m_versionState.getName());
						}
						return sb.toString();
					},
					getPlanningModel : function() {
						return this.m_planningModel;
					},
					setPlanningModel : function(planningModel) {
						this.m_planningModel = planningModel;
					},
					checkModelInitialized : function() {
						(this.getPlanningModel()).checkModelInitialized();
					},
					invalidateVersion : function() {
						this.m_creationTime = null;
						this.m_backupTime = null;
						if (this.m_parametersStructure !== null) {
							this.m_parametersStructure.releaseObject();
							this.m_parametersStructure = null;
						}
						this.m_privilege = null;
						this.m_versionDescription = null;
						this.m_versionState = null;
					},
					resetVersionState : function() {
						this.m_versionState = null;
					},
					updateInvalidPrivileges : function() {
						var planningModel;
						var privileges;
						var i;
						var privilege;
						if (this.m_versionState !== null) {
							return;
						}
						planningModel = this.getPlanningModel();
						if ((planningModel !== null)
								&& (planningModel
										.isVersionPrivilegesInitialized())) {
							privileges = planningModel.getVersionPrivileges();
							if (privileges !== null) {
								for (i = 0; i < privileges.size(); i++) {
									privilege = privileges.get(i);
									if ((sap.firefly.XString.isEqual(privilege
											.getVersionUniqueName(), this
											.getVersionUniqueName()))) {
										(privilege)
												.setPrivilegeState(sap.firefly.PlanningPrivilegeState.NEW);
										(privilege)
												.setPrivilegeStateServer(sap.firefly.PlanningPrivilegeState.NEW);
									}
								}
							}
						}
					},
					setVersionIdentifier : function(versionIdentifier) {
						this.m_versionIdentifier = this.getPlanningModel()
								.copyVersionIdentifier(versionIdentifier);
					},
					getVersionId : function() {
						return this.m_versionIdentifier.getVersionId();
					},
					isSharedVersion : function() {
						return this.m_versionIdentifier.isSharedVersion();
					},
					getVersionOwner : function() {
						return this.m_versionIdentifier.getVersionOwner();
					},
					getVersionUniqueName : function() {
						return this.m_versionIdentifier.getVersionUniqueName();
					},
					getVersionDescription : function() {
						return this.m_versionDescription;
					},
					setVersionDescription : function(versionDescription) {
						if (this.getPlanningModel()
								.isWithUniqueVersionDescriptions()) {
							this
									.assertVersionDescriptionUniqueAndNotNullOrEmpty(versionDescription);
						}
						this.m_versionDescription = versionDescription;
					},
					assertVersionDescriptionUniqueAndNotNullOrEmpty : function(
							versionDescription) {
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(versionDescription)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("version description is null or empty.");
						}
						if (sap.firefly.XString.isEqual(
								this.m_versionDescription, versionDescription)) {
							return;
						}
						if (this.getPlanningModel().isVersionDescriptionUnique(
								versionDescription) === false) {
							throw sap.firefly.XException
									.createIllegalArgumentException("version description is not unique.");
						}
					},
					isActive : function() {
						var planningVersionState = this.getVersionState();
						if (planningVersionState === null) {
							return false;
						}
						return planningVersionState.isActive();
					},
					getVersionState : function() {
						return this.m_versionState;
					},
					getTotalChangesSize : function() {
						return this.m_totalChangesSize;
					},
					setTotalChangesSize : function(undoSize) {
						this.m_totalChangesSize = undoSize;
					},
					getUndoChangesSize : function() {
						return this.m_undoChangesSize;
					},
					setUndoChangesSize : function(redoSize) {
						this.m_undoChangesSize = redoSize;
					},
					setVersionState : function(versionState) {
						if (versionState === null) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal version state");
						}
						this.m_versionState = versionState;
						if (this.m_privilege === null) {
							if (this.isSharedVersion()) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal privilege");
							}
							this.m_privilege = sap.firefly.PlanningPrivilege.OWNER;
						}
					},
					getPrivilege : function() {
						return this.m_privilege;
					},
					setPrivilege : function(privilege) {
						if (privilege === null) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal privilege");
						}
						this.m_privilege = privilege;
					},
					getActionIdentifiers : function() {
						var result;
						var actionMetadataList;
						var i;
						var actionMetadata;
						var actionIdentifier;
						this.checkModelInitialized();
						result = sap.firefly.XList.create();
						actionMetadataList = this.getPlanningModel()
								.getActionMetadataList();
						for (i = 0; i < actionMetadataList.size(); i++) {
							actionMetadata = actionMetadataList.get(i);
							actionIdentifier = this
									.getActionIdentifier(actionMetadata
											.getActionId());
							if (actionIdentifier === null) {
								continue;
							}
							result.add(actionIdentifier);
						}
						return result;
					},
					getActionIdentifier : function(actionId) {
						this.checkModelInitialized();
						return this.getPlanningModel().getActionIdentifierById(
								actionId, this);
					},
					createActionByActionId : function(actionId) {
						this.checkModelInitialized();
						return this.getPlanningModel().createActionById(
								this.getActionIdentifier(actionId));
					},
					createActionByMetadata : function(actionMetadata) {
						this.checkModelInitialized();
						return this.createActionByActionId(actionMetadata
								.getActionId());
					},
					createRequestVersion : function(requestType) {
						var request;
						this.checkModelInitialized();
						if (requestType
								.isTypeOf(sap.firefly.PlanningModelRequestType.VERSION_REQUEST) === false) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal request type");
						}
						request = null;
						if (requestType === sap.firefly.PlanningModelRequestType.INIT_VERSION) {
							request = new sap.firefly.PlanningModelRequestVersionInit();
						} else {
							if (requestType === sap.firefly.PlanningModelRequestType.SET_TIMEOUT) {
								request = new sap.firefly.PlanningModelRequestVersionSetTimeout();
							} else {
								if (requestType === sap.firefly.PlanningModelRequestType.CLOSE_VERSION) {
									request = new sap.firefly.PlanningModelRequestVersionClose();
									(request)
											.setCloseMode(sap.firefly.CloseModeType.DISCARD);
								} else {
									if (requestType === sap.firefly.PlanningModelRequestType.START_ACTION_SEQUENCE) {
										request = new sap.firefly.PlanningModelRequestVersionStartActionSequence();
									} else {
										if (requestType === sap.firefly.PlanningModelRequestType.END_ACTION_SEQUENCE) {
											request = new sap.firefly.PlanningModelRequestVersionEndActionSequence();
										} else {
											if ((requestType === sap.firefly.PlanningModelRequestType.UNDO_VERSION)
													|| (requestType === sap.firefly.PlanningModelRequestType.REDO_VERSION)) {
												request = new sap.firefly.PlanningModelRequestVersionUndoRedo();
											} else {
												if (requestType === sap.firefly.PlanningModelRequestType.GET_VERSION_STATE_DESCRIPTIONS) {
													request = new sap.firefly.PlanningModelRequestVersionStateDescriptions();
												} else {
													request = new sap.firefly.PlanningModelRequestVersion();
												}
											}
										}
									}
								}
							}
						}
						request.setPlanningService(this.getPlanningModel()
								.getPlanningService());
						request
								.setCommandType(sap.firefly.PlanningCommandType.PLANNING_MODEL_REQUEST);
						request.setRequestType(requestType);
						request.setPlanningContext(this.getPlanningModel());
						request.setPlanningVersion(this);
						request.setInvalidatingResultSet(requestType
								.isInvalidatingResultSet());
						return request;
					},
					createRequestInitVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.INIT_VERSION);
					},
					createRequestSaveVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.SAVE_VERSION);
					},
					createRequestBackupVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.BACKUP_VERSION);
					},
					createRequestCloseVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.CLOSE_VERSION);
					},
					createRequestDropVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.DROP_VERSION);
					},
					createRequestResetVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.RESET_VERSION);
					},
					createRequestUndoVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.UNDO_VERSION);
					},
					createRequestRedoVersion : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.REDO_VERSION);
					},
					createRequestSetTimeout : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.SET_TIMEOUT);
					},
					createRequestUpdateParameters : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.UPDATE_PARAMETERS);
					},
					createRequestStateDescriptions : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.GET_VERSION_STATE_DESCRIPTIONS);
					},
					createRequestStartActionSequence : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.START_ACTION_SEQUENCE);
					},
					createRequestEndActionSequence : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.END_ACTION_SEQUENCE);
					},
					createRequestKillActionSequence : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.KILL_ACTION_SEQUENCE);
					},
					createRequestSynchronizeActionSequence : function() {
						return this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.SYNCHRONIZE_ACTION_SEQUENCE);
					},
					initializeVersion : function(restoreBackupType) {
						this.checkModelInitialized();
						return this.initializeVersionWithParameters(
								restoreBackupType, null);
					},
					initializeVersionWithParameters : function(
							restoreBackupType, parameters) {
						var parametersStructure = sap.firefly.PlanningVersion
								.parametersStringMap2ParametersStructure(parameters);
						var keys;
						var key;
						var value;
						if (parameters !== null) {
							parametersStructure = sap.firefly.PrStructure
									.create();
							keys = parameters.getKeysAsIteratorOfString();
							while (keys.hasNext()) {
								key = keys.next();
								value = parameters.getByKey(key);
								parametersStructure.setStringByName(key, value);
							}
						}
						return this.initializeVersionWithParametersJson(
								restoreBackupType, parametersStructure);
					},
					initializeVersionWithParametersJson : function(
							restoreBackupType, parametersJson) {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.INIT_VERSION);
						command.setRestoreBackupType(restoreBackupType);
						if (this.getPlanningModel().supportsVersionParameters()) {
							command.setVersionParametersAsJson(parametersJson);
						}
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					updateParameters : function() {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.UPDATE_PARAMETERS);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					setTimeout : function(seconds) {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.SET_TIMEOUT);
						command.setTimeout(seconds);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					save : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.SAVE_VERSION);
					},
					backup : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.BACKUP_VERSION);
					},
					close : function() {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.CLOSE_VERSION);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					drop : function() {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.DROP_VERSION);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					startActionSequence : function() {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.START_ACTION_SEQUENCE);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					endActionSequence : function() {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(sap.firefly.PlanningModelRequestType.END_ACTION_SEQUENCE);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					killActionSequence : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.KILL_ACTION_SEQUENCE);
					},
					synchronizeActionSequence : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.SYNCHRONIZE_ACTION_SEQUENCE);
					},
					reset : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.RESET_VERSION);
					},
					undo : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.UNDO_VERSION);
					},
					redo : function() {
						this.checkModelInitialized();
						return this
								.processVersionRequest(sap.firefly.PlanningModelRequestType.REDO_VERSION);
					},
					processVersionRequest : function(planningModelRequestType) {
						var command;
						var commandResult;
						var result;
						this.checkModelInitialized();
						command = this
								.createRequestVersion(planningModelRequestType);
						commandResult = command.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
						result = sap.firefly.ExtResult.create(commandResult
								.getData(), commandResult);
						return result;
					},
					getParameters : function() {
						if (this.m_parametersStructure === null) {
							return sap.firefly.XHashMapOfStringByString
									.create();
						}
						return sap.firefly.PlanningVersion
								.parametersStructure2ParametersStringMap(this.m_parametersStructure);
					},
					getParametersStructure : function() {
						if (this.m_parametersStructure === null) {
							return sap.firefly.PrStructure.create();
						}
						return sap.firefly.PrStructure
								.createDeepCopy(this.m_parametersStructure);
					},
					setParametersStructureInternal : function(
							parametersStructure) {
						if (parametersStructure === null) {
							this.m_parametersStructure = null;
						} else {
							this.m_parametersStructure = sap.firefly.PrStructure
									.createDeepCopy(parametersStructure);
						}
					},
					getCreationTime : function() {
						return this.m_creationTime;
					},
					setCreationTime : function(creationTime) {
						this.m_creationTime = creationTime;
					},
					getBackupTime : function() {
						return this.m_backupTime;
					},
					setBackupTime : function(backupTime) {
						this.m_backupTime = backupTime;
					},
					getAction : function(actionIdentifier) {
						var extResult;
						if (actionIdentifier === null) {
							return null;
						}
						extResult = this
								.createActionByMetadata(actionIdentifier);
						if (extResult.hasErrors()) {
							return null;
						}
						return extResult.getData()
								.getCreatedPlanningCommandWithId();
					},
					getActionSequenceId : function() {
						return this.m_actionSequenceId;
					},
					setActionSequenceId : function(sequenceId) {
						this.m_actionSequenceId = sequenceId;
					},
					getUseExternalView : function() {
						return this.m_useExternalView;
					},
					setUseExternalView : function(useExternalView) {
						if (this.m_useExternalView === useExternalView) {
							return;
						}
						this.m_useExternalView = useExternalView;
						this.getPlanningModel().invalidate();
					},
					isActionSequenceActive : function() {
						return this.m_sequenceActive;
					},
					setActionSequenceActive : function(sequenceActive) {
						this.m_sequenceActive = sequenceActive;
						if (this.m_sequenceActive === false) {
							this.m_sequenceCreateTime = null;
							this.m_sequenceDescription = null;
							this.m_actionSequenceId = null;
						}
					},
					getActionSequenceDescription : function() {
						return this.m_sequenceDescription;
					},
					setActionSequenceDescription : function(sequenceDescription) {
						this.m_sequenceDescription = sequenceDescription;
					},
					getActionSequenceCreateTime : function() {
						return this.m_sequenceCreateTime;
					},
					setActionSequenceCreateTime : function(sequenceCreateTime) {
						this.m_sequenceCreateTime = sequenceCreateTime;
					},
					isActionActive : function() {
						return this.m_actionActive;
					},
					setActionActive : function(actionActive) {
						this.m_actionActive = actionActive;
					},
					getActionEndTime : function() {
						return this.m_actionEndTime;
					},
					setActionEndTime : function(actionEndTime) {
						this.m_actionEndTime = actionEndTime;
					},
					getActionStartTime : function() {
						return this.m_actionStartTime;
					},
					setActionStartTime : function(actionStartTime) {
						this.m_actionStartTime = actionStartTime;
					},
					getIsRestrictionEnabled : function() {
						return this.m_isRestrictionEnabled;
					},
					setIsRestrictionEnabled : function(restrictionEnabled) {
						this.m_isRestrictionEnabled = restrictionEnabled;
					},
					getUserName : function() {
						return this.m_userName;
					},
					setUserName : function(userName) {
						this.m_userName = userName;
					},
					isShowingAsPublicVersion : function() {
						return this.m_isShowingAsPublicVersion;
					},
					setShowingAsPublicVersion : function(
							isShowingAsPublicVersion) {
						this.m_isShowingAsPublicVersion = isShowingAsPublicVersion;
					},
					getSourceVersionName : function() {
						return this.m_sourceVersionName;
					},
					setSourceVersionName : function(sourceVersionName) {
						this.m_sourceVersionName = sourceVersionName;
					},
					isPublicVersionEditPossible : function() {
						return this.m_isShowingAsPublicVersion
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(this.m_sourceVersionName);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QCmdBindResultset",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(cmds, type) {
							var newObj = new sap.firefly.QCmdBindResultset();
							newObj.setupBind(cmds, type);
							return newObj;
						}
					},
					m_cmds : null,
					m_type : null,
					m_queryManager : null,
					m_listener : null,
					m_customIdentifier : null,
					setupBind : function(cmds, type) {
						this.m_cmds = cmds;
						this.m_type = type;
						this.registerResultset();
					},
					registerResultset : function() {
						var activeResultSetContainer;
						this.m_queryManager = this.m_cmds.getQueryManager();
						if (this.m_queryManager !== null) {
							this.m_queryManager.processQueryExecution(
									sap.firefly.SyncType.REGISTER, this, null);
							activeResultSetContainer = this.m_queryManager
									.getActiveResultSetContainer();
							if (activeResultSetContainer.getSyncState() === sap.firefly.SyncState.IN_SYNC) {
								this.onQueryExecuted(null,
										activeResultSetContainer, null);
							}
						}
					},
					unregisterResultset : function() {
						if (this.m_queryManager !== null) {
							this.m_queryManager
									.processQueryExecution(
											sap.firefly.SyncType.UNREGISTER,
											this, null);
							this.m_queryManager = null;
						}
					},
					releaseObject : function() {
						this.m_cmds = null;
						this.m_listener = null;
						this.m_customIdentifier = null;
						sap.firefly.QCmdBindResultset.$superclass.releaseObject
								.call(this);
					},
					getComponentType : function() {
						return sap.firefly.RuntimeComponentType.BINDING_SENDER;
					},
					isSenderValueReady : function() {
						return true;
					},
					registerValueChangedListener : function(listener,
							customIdentifier) {
						this.m_listener = listener;
						this.m_customIdentifier = customIdentifier;
					},
					unregisterValueChangedListener : function(listener) {
						this.m_listener = null;
						this.m_customIdentifier = null;
					},
					getStringValue : function() {
						var grid;
						var gridValue;
						if (this.m_cmds !== null) {
							grid = this.m_cmds.getReferenceGrid(false);
							if (grid !== null) {
								gridValue = grid.exportToAscii(50);
								sap.firefly.XLogger.println(gridValue);
								return gridValue;
							}
						}
						return null;
					},
					getElement : function() {
						if (this.m_cmds !== null) {
							return this.m_cmds
									.getAbstractRendering(this.m_type);
						}
						return null;
					},
					onCmdContextChanged : function() {
						this.unregisterResultset();
						this.registerResultset();
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						if (this.m_listener !== null) {
							this.m_listener.onBindingValueChanged(this,
									this.m_customIdentifier);
						}
					}
				});
$Firefly.createClass("sap.firefly.DfCmd", sap.firefly.DfNameObject, {
	m_space : null,
	m_params : null,
	m_cmds : null,
	m_types : null,
	setupCmd : function(name, space, parameter) {
		this.setName(name);
		this.m_space = space;
		if ((parameter !== null) && parameter.hasElements()) {
			this.m_params = parameter;
		}
		return this;
	},
	cloneCmdTemplate : function() {
		var cmd = this.newObj();
		cmd.doSetupMetadata();
		return cmd;
	},
	newObj : function() {
		return null;
	},
	doSetupMetadata : function() {
	},
	getTypes : function() {
		return this.m_types;
	},
	m_ret : null,
	executeOnSpace : function() {
		var size = this.m_space.sizeElements();
		var i;
		this.m_ret = null;
		for (i = 0; i < size; i++) {
			this.m_cmds = this.m_space.setActive(i);
			this.execute();
		}
		this.m_cmds = null;
		return this.m_ret;
	},
	executeOnContext : function(context, parameters) {
		var size;
		this.m_ret = null;
		size = parameters.size();
		if (size > 0) {
			this.m_params = sap.firefly.QParameter.create();
			this.m_params.addString(parameters.getElementByIndex(0)
					.getStringRepresentation());
		}
		if (size > 1) {
			this.m_params.addString(parameters.getElementByIndex(1)
					.getStringRepresentation());
		}
		this.m_cmds = context;
		this.execute();
		this.m_cmds = null;
		return this.m_ret;
	},
	execute : function() {
	},
	getSignature : function() {
	}
});
$Firefly.createClass("sap.firefly.DfOlapEnvContext", sap.firefly.XObject,
		{
			m_olapEnv : null,
			setupOlapApplicationContext : function(application) {
				this.m_olapEnv = sap.firefly.XWeakReferenceUtil
						.getWeakRef(application);
			},
			releaseObject : function() {
				this.m_olapEnv = sap.firefly.XObject
						.releaseIfNotNull(this.m_olapEnv);
				sap.firefly.DfOlapEnvContext.$superclass.releaseObject
						.call(this);
			},
			getSession : function() {
				return this.getOlapEnv().getSession();
			},
			getApplication : function() {
				return this.getOlapEnv().getApplication();
			},
			getOlapEnv : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_olapEnv);
			}
		});
$Firefly.createClass("sap.firefly.OlapEnvVariable", sap.firefly.DfNameObject, {
	$statics : {
		create : function(key, master) {
			var newObj = new sap.firefly.OlapEnvVariable();
			newObj.setName(key);
			newObj.m_master = master;
			newObj.m_slaves = sap.firefly.XList.create();
			return newObj;
		}
	},
	m_master : null,
	m_slaves : null,
	releaseObject : function() {
		this.m_master = null;
		this.m_slaves = sap.firefly.XObject.releaseIfNotNull(this.m_slaves);
		sap.firefly.OlapEnvVariable.$superclass.releaseObject.call(this);
	},
	addSlave : function(variable) {
		this.m_slaves.add(variable);
	},
	getMasterVariable : function() {
		return this.m_master;
	},
	syncMasterSlaves : function() {
		var serialization = this.m_master.serializeToElement(
				sap.firefly.QModelFormat.INA_REPOSITORY, null);
		var i;
		var slave;
		for (i = 0; i < this.m_slaves.size(); i++) {
			slave = this.m_slaves.get(i);
			slave.deserializeFromElementExt(
					sap.firefly.QModelFormat.INA_REPOSITORY, serialization);
		}
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInAComponentContainer",
				sap.firefly.DfNameObject,
				{
					$statics : {
						create : function(type) {
							var newObj = new sap.firefly.QInAComponentContainer();
							newObj.setName(type.getName());
							newObj.m_type = type;
							newObj.m_components = sap.firefly.XList.create();
							return newObj;
						}
					},
					m_components : null,
					m_type : null,
					isEmpty : function() {
						return this.m_components.isEmpty();
					},
					hasElements : function() {
						return this.m_components.hasElements();
					},
					get : function(version, inaImportElement) {
						var size = this.m_components.size();
						var i;
						var currentComponent;
						for (i = 0; i < size; i++) {
							currentComponent = this.m_components.get(i);
							if (currentComponent.isMatching(version,
									inaImportElement)) {
								return currentComponent;
							}
						}
						return null;
					},
					add : function(component) {
						if (this.m_components.contains(component)) {
							throw sap.firefly.XException
									.createRuntimeException("Container already exists");
						}
						this.m_components.add(component);
					},
					getComponentType : function() {
						return this.m_type;
					}
				});
$Firefly.createClass("sap.firefly.QInAComponentMetadata",
		sap.firefly.QInAComponentWithStructure, {
			getModelFormat : function() {
				return sap.firefly.QModelFormat.INA_METADATA_CORE;
			},
			extendCustom : function(exporter, modelComponent, inaStructure) {
				var olapComponentType = this.getComponentType();
				var ctypeValue = sap.firefly.QInAConverter
						.lookupComponentTypeInA(olapComponentType);
				if (ctypeValue !== null) {
					inaStructure.setStringByName(
							sap.firefly.InAConstants.QY_CTYPE, ctypeValue);
				}
				return inaStructure;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAAttribute",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.ATTRIBUTE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = parentComponent;
						var name = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var attribute = dimension.getAttributeByName(name);
						var inaResultSetFields;
						var resultSetFields;
						var len;
						var i;
						var qField;
						if (attribute !== null) {
							inaResultSetFields = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
							if (inaResultSetFields !== null) {
								resultSetFields = attribute
										.getResultSetFields();
								resultSetFields.clear();
								len = inaResultSetFields.size();
								for (i = 0; i < len; i++) {
									qField = attribute
											.getFieldByName(inaResultSetFields
													.getStringByIndex(i));
									if (qField !== null) {
										resultSetFields.add(qField);
									}
								}
							}
						}
						return attribute;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var attribute = modelComponent;
						var inaResultSetFields;
						var resultSetFields;
						var len;
						var i;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, attribute
										.getName());
						inaResultSetFields = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
						resultSetFields = attribute.getResultSetFields();
						len = resultSetFields.size();
						for (i = 0; i < len; i++) {
							inaResultSetFields.addString(resultSetFields.get(i)
									.getName());
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAAxesSettings",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.AXES_SETTINGS;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_AXES;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var queryModel;
						var all;
						var allSize;
						var k;
						var len;
						var i;
						if (inaList !== null) {
							queryModel = context.getQueryModel();
							if (importer
									.hasCapability(sap.firefly.InACapabilities.AV_CAPABILITY_ZERO_SUPPRESSION)) {
								all = sap.firefly.AxisType.getAll();
								allSize = all.size();
								for (k = 0; k < allSize; k++) {
									queryModel.getAxisBase(all.get(k))
											.setSupportsZeroSuppression(true);
								}
							}
							len = inaList.size();
							for (i = 0; i < len; i++) {
								importer.importAxis(inaList
										.getStructureByIndex(i), null, context);
							}
						}
						return null;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var queryModel = modelComponent;
						var inaAxisStructureList = sap.firefly.PrList.create();
						var inaColumns = exporter.exportAxis(null, queryModel
								.getColumnsAxis());
						var inaRows;
						inaAxisStructureList.add(inaColumns);
						inaRows = exporter.exportAxis(null, queryModel
								.getRowsAxis());
						inaAxisStructureList.add(inaRows);
						return inaAxisStructureList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAAxis",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.AXIS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var supportsZeroSuppression = importer
								.hasCapability(sap.firefly.InACapabilities.AV_CAPABILITY_ZERO_SUPPRESSION);
						var axisType;
						var axisTypeValue = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_AXIS);
						var queryModel;
						var axis;
						var valueType;
						var zeroSuppressionType;
						if (axisTypeValue === null) {
							axisType = sap.firefly.QInAConverter
									.lookupAxisTypeInt(inaStructure
											.getIntegerByName(sap.firefly.InAConstants.QY_TYPE));
						} else {
							axisType = sap.firefly.QInAConverter
									.lookupAxisType(axisTypeValue);
						}
						queryModel = context.getQueryModel();
						axis = queryModel.getAxisBase(axisType);
						if (axis !== null) {
							if (supportsZeroSuppression) {
								valueType = inaStructure
										.getIntegerByName(sap.firefly.InAConstants.QY_ZERO_SUPPRESSION_TYPE);
								zeroSuppressionType = sap.firefly.QInAConverter
										.lookupSuppressionType(valueType);
								axis
										.setZeroSuppressionType(zeroSuppressionType);
								axis
										.setDefaultZeroSuppression(zeroSuppressionType);
							}
							importer.importTotals(inaStructure, axis
									.getResultStructureControllerBase(),
									context);
						}
						return axis;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var axis = modelComponent;
						var axisType = axis.getType();
						var typeZeroSuppression;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS,
								sap.firefly.QInAConverter
										.lookupAxisTypeInA(axisType));
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_TYPE,
								sap.firefly.QInAConverter
										.lookupAxisTypeInAInt(axisType));
						typeZeroSuppression = axis.getZeroSuppressionType();
						inaStructure
								.setIntegerByName(
										sap.firefly.InAConstants.QY_ZERO_SUPPRESSION_TYPE,
										sap.firefly.QInAConverter
												.lookupSuppressionTypeInA(typeZeroSuppression));
						exporter.exportTotals(inaStructure, axis
								.getResultStructureController());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAConditionManager",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITIONS_MANAGER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_CONDITIONS;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var conditionManager = modelComponent;
						var queryModelBase;
						var len;
						var i;
						var inaCurrentCondition;
						var currentCondition;
						if (conditionManager !== null) {
							conditionManager.clear();
							if (inaList !== null) {
								queryModelBase = context.getQueryModel();
								len = inaList.size();
								for (i = 0; i < len; i++) {
									inaCurrentCondition = inaList
											.getStructureByIndex(i);
									currentCondition = importer
											.importCondition(queryModelBase,
													inaCurrentCondition, null);
									conditionManager.add(currentCondition);
								}
							}
						}
						return conditionManager;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var conditionManager = modelComponent;
						var conditions;
						var len;
						var inaConditionsList;
						var i;
						if (conditionManager !== null) {
							if (exporter.m_mode === sap.firefly.QModelFormat.INA_DATA) {
								conditions = conditionManager
										.getEffectiveConditions();
							} else {
								conditions = conditionManager;
							}
							len = conditions.size();
							if (len > 0) {
								inaConditionsList = sap.firefly.PrList.create();
								for (i = 0; i < len; i++) {
									inaConditionsList
											.add(exporter
													.exportCondition(conditions
															.get(i)));
								}
								return inaConditionsList;
							}
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAConditionsCondition",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						exportBreakGroupDimensionList : function(condition) {
							var inaBreakGroupDimensionList;
							var breakGroupDimensions;
							var len;
							var i;
							if (condition === null) {
								return null;
							}
							inaBreakGroupDimensionList = sap.firefly.PrList
									.create();
							breakGroupDimensions = condition
									.getBreakGroupDimensions();
							len = breakGroupDimensions.size();
							for (i = 0; i < len; i++) {
								inaBreakGroupDimensionList
										.addString(breakGroupDimensions.get(i)
												.getName());
							}
							return inaBreakGroupDimensionList;
						},
						exportEvaluateOnDimensionsList : function(condition) {
							var inaEvaluationDimensionList;
							var evaluationDimensions;
							var len;
							var i;
							if (condition === null) {
								return null;
							}
							inaEvaluationDimensionList = sap.firefly.PrList
									.create();
							evaluationDimensions = condition
									.getEvaluationDimensions();
							len = evaluationDimensions.size();
							for (i = 0; i < len; i++) {
								inaEvaluationDimensionList
										.addString(evaluationDimensions.get(i)
												.getName());
							}
							return inaEvaluationDimensionList;
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var newCondition;
						var inACondName;
						var isBackendCondition;
						var onDisabled;
						var inAEvaluateOnDimensionTypeString;
						var conditionDimensionEvaluationType;
						var queryModel;
						var inADimensionList;
						var dimSize;
						var idxDim;
						var inACurrentDimensionName;
						var currentDimension;
						var inAThresholds;
						var thresholdSize;
						var idxThreshold;
						var inACurrentThreshold;
						var inABreakDimensionList;
						var inACurrentBreakDimensionName;
						var currentBreakDimension;
						if (inaStructure === null) {
							return modelComponent;
						}
						inACondName = inaStructure
								.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_NAME);
						if (modelComponent === null) {
							if (importer.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY) {
								isBackendCondition = inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.VA_CONDITIONS_REPO_IS_BACKEND_CONDITION,
												true);
								newCondition = sap.firefly.QCondition.create(
										context, parentComponent, inACondName,
										isBackendCondition);
							} else {
								newCondition = sap.firefly.QCondition.create(
										context, parentComponent, inACondName,
										true);
							}
						} else {
							newCondition = modelComponent;
							newCondition.setConditionName(inACondName);
						}
						newCondition
								.setActive(inaStructure
										.getBooleanByName(sap.firefly.InAConstants.VA_CONDITIONS_ACTIVE));
						newCondition
								.setDescription(inaStructure
										.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_DESCRIPTION));
						onDisabled = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_CONDITIONS_ON_DISABLED);
						if (onDisabled !== null) {
							if (sap.firefly.XString
									.isEqual(
											onDisabled,
											sap.firefly.InAConstants.VA_CONDITIONS_ON_DISABLED_ERROR)) {
								newCondition.setOnDisabledToError();
							} else {
								newCondition.setOnDisabledToWarning();
							}
						}
						inAEvaluateOnDimensionTypeString = inaStructure
								.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_EVALUATE_ON_DIMENSIONS);
						conditionDimensionEvaluationType = sap.firefly.ConditionDimensionEvaluationType
								.lookupName(inAEvaluateOnDimensionTypeString);
						if (conditionDimensionEvaluationType !== null) {
							newCondition
									.setDimensionEvaluationType(conditionDimensionEvaluationType);
						}
						queryModel = context.getQueryModel();
						inADimensionList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_CONDITIONS_EVALUATE_ON_DIMENSIONS_LIST);
						if (!sap.firefly.PrUtils.isListEmpty(inADimensionList)
								&& (queryModel !== null)) {
							dimSize = inADimensionList.size();
							for (idxDim = 0; idxDim < dimSize; idxDim++) {
								inACurrentDimensionName = inADimensionList
										.getStringByIndex(idxDim);
								if (inACurrentDimensionName !== null) {
									currentDimension = queryModel
											.getDimensionByName(inACurrentDimensionName);
									if (currentDimension !== null) {
										newCondition
												.addEvaluationDimension(currentDimension);
									}
								}
							}
						}
						inAThresholds = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_CONDITIONS_THRESHOLD);
						if (!sap.firefly.PrUtils.isListEmpty(inAThresholds)) {
							thresholdSize = inAThresholds.size();
							for (idxThreshold = 0; idxThreshold < thresholdSize; idxThreshold++) {
								inACurrentThreshold = inAThresholds
										.getStructureByIndex(idxThreshold);
								if (inACurrentThreshold !== null) {
									newCondition.addThreshold(importer
											.importConditionThreshold(
													queryModel,
													inACurrentThreshold, null));
								}
							}
						}
						newCondition.setAutoGroup(inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_AUTO_GROUP,
										false));
						newCondition
								.setBreakGroup(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_BREAK_GROUP,
												false));
						inABreakDimensionList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_BREAK_GROUP_LIST);
						if (!sap.firefly.PrUtils
								.isListEmpty(inABreakDimensionList)
								&& (queryModel !== null)) {
							dimSize = inABreakDimensionList.size();
							for (idxDim = 0; idxDim < dimSize; idxDim++) {
								inACurrentBreakDimensionName = inABreakDimensionList
										.getStringByIndex(idxDim);
								if (inACurrentBreakDimensionName !== null) {
									currentBreakDimension = queryModel
											.getDimensionByName(inACurrentBreakDimensionName);
									if (currentBreakDimension !== null) {
										newCondition
												.addBreakGroupDimension(currentBreakDimension);
									}
								}
							}
						}
						return newCondition;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var condition = modelComponent;
						var dimensionEvaluationType;
						var queryModel;
						var isMds;
						var exportEvaluateOnDimensionsList;
						var thresholds;
						var thresholdSize;
						var inAThresholdList;
						var i;
						var currentInAThreshold;
						var isGroupBreaking;
						var exportBreakGroupDimensionList;
						if (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY) {
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.VA_CONDITIONS_REPO_IS_BACKEND_CONDITION,
											condition.isBackendCondition());
						}
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.VA_CONDITIONS_ACTIVE,
								condition.isActive());
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.VA_CONDITIONS_DESCRIPTION,
										condition.getDescription());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.VA_CONDITIONS_NAME,
								condition.getConditionName());
						dimensionEvaluationType = condition
								.getDimensionEvaluationType();
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.VA_CONDITIONS_EVALUATE_ON_DIMENSIONS,
										dimensionEvaluationType.getName());
						queryModel = modelComponent.getQueryModel();
						isMds = queryModel.getSystemType().isTypeOf(
								sap.firefly.SystemType.HANA);
						if (dimensionEvaluationType === sap.firefly.ConditionDimensionEvaluationType.GIVEN_LIST) {
							exportEvaluateOnDimensionsList = sap.firefly.QInAConditionsCondition
									.exportEvaluateOnDimensionsList(condition);
							inaStructure
									.setElementByName(
											sap.firefly.InAConstants.QY_CONDITIONS_EVALUATE_ON_DIMENSIONS_LIST,
											exportEvaluateOnDimensionsList);
							if (isMds
									&& (exportEvaluateOnDimensionsList.size() === 1)) {
								inaStructure.setBooleanByName(
										sap.firefly.InAConstants.QY_AUTO_GROUP,
										condition.isAutoGroup());
							}
						}
						thresholds = condition.getThresholds();
						thresholdSize = thresholds.size();
						if (thresholdSize > 0) {
							inAThresholdList = sap.firefly.PrList.create();
							for (i = 0; i < thresholdSize; i++) {
								currentInAThreshold = exporter
										.exportConditionThreshold(thresholds
												.get(i));
								if (currentInAThreshold !== null) {
									inAThresholdList.add(currentInAThreshold);
								}
							}
							if (!inAThresholdList.isEmpty()) {
								inaStructure
										.setElementByName(
												sap.firefly.InAConstants.QY_CONDITIONS_THRESHOLD,
												inAThresholdList);
							}
						}
						if (isMds) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_CONDITIONS_ON_DISABLED,
											condition.getOnDisabled());
							isGroupBreaking = condition.isBreakGroup();
							inaStructure.setBooleanByName(
									sap.firefly.InAConstants.QY_BREAK_GROUP,
									isGroupBreaking);
							if (isGroupBreaking) {
								exportBreakGroupDimensionList = sap.firefly.QInAConditionsCondition
										.exportBreakGroupDimensionList(condition);
								inaStructure
										.setElementByName(
												sap.firefly.InAConstants.QY_BREAK_GROUP_LIST,
												exportBreakGroupDimensionList);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAConditionsThreshold",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						importSingleMeasureCoordinate : function(
								queryModelBase, threshold, measureCoordinate) {
							var inADimensionName;
							var inAMemberName;
							var queryModel;
							var dimension;
							var dimensionMember;
							if ((threshold === null)
									|| (measureCoordinate === null)) {
								return;
							}
							inADimensionName = measureCoordinate
									.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_DIMENSION_NAME);
							inAMemberName = measureCoordinate
									.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_MEMBER_NAME);
							if ((sap.firefly.XStringUtils
									.isNullOrEmpty(inADimensionName))
									|| (sap.firefly.XStringUtils
											.isNullOrEmpty(inAMemberName))) {
								return;
							}
							queryModel = queryModelBase;
							if (queryModel === null) {
								queryModel = threshold.getContext()
										.getQueryModel();
							}
							if (queryModel !== null) {
								dimension = queryModel
										.getDimensionByName(inADimensionName);
								if (dimension !== null) {
									dimensionMember = dimension
											.getDimensionMember(inAMemberName,
													false);
									if (dimensionMember !== null) {
										threshold
												.addMeasureCoordinate(dimensionMember);
									}
								}
							}
						},
						importThresholdValue : function(filterBag, inAValue) {
							if ((filterBag === null) || (inAValue === null)) {
								return;
							}
							if (inAValue.isBoolean()) {
								filterBag.setBooleanValue((inAValue)
										.getBooleanValue());
							} else {
								if (inAValue.isString()) {
									filterBag.setStringValue((inAValue)
											.getStringValue());
								} else {
									if (inAValue.isDouble()) {
										filterBag.setDoubleValue((inAValue)
												.getDoubleValue());
									} else {
										if (inAValue.isInteger()) {
											filterBag
													.setIntegerValue((inAValue)
															.getIntegerValue());
										} else {
											if (inAValue.isLong()) {
												filterBag
														.setLongValue((inAValue)
																.getLongValue());
											}
										}
									}
								}
							}
						},
						setValue : function(exporter, parameterName,
								inaElement, value, valueType) {
							var variableValue;
							if (valueType === sap.firefly.XValueType.VARIABLE) {
								variableValue = value.getVariableValue();
								if (variableValue !== null) {
									inaElement.setStringByName(parameterName,
											variableValue.getName());
									if (sap.firefly.XString
											.isEqual(
													parameterName,
													sap.firefly.InAConstants.VA_CONDITIONS_LOW)) {
										inaElement
												.setStringByName(
														sap.firefly.InAConstants.VA_CONDITIONS_LOW_IS,
														sap.firefly.InAConstants.VA_IS_VARIABLE);
									} else {
										if (sap.firefly.XString
												.isEqual(
														parameterName,
														sap.firefly.InAConstants.VA_CONDITIONS_HIGH)) {
											inaElement
													.setStringByName(
															sap.firefly.InAConstants.VA_CONDITIONS_HIGH_IS,
															sap.firefly.InAConstants.VA_IS_VARIABLE);
										}
									}
								}
							} else {
								sap.firefly.QInAValueUtils.exportValue(
										exporter, parameterName, inaElement,
										value, valueType);
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITIONS_THRESHOLD;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var newThreshold;
						var inAComparisonOperator;
						var conditionComparisonOperator;
						var inALow;
						var inALowIs;
						var inAHigh;
						var inAHighIs;
						var inAMeasureCoordinates;
						var queryModel;
						var len;
						var i;
						var inaLevel;
						if (inaStructure === null) {
							return modelComponent;
						}
						if (modelComponent === null) {
							newThreshold = sap.firefly.QConditionThreshold
									.create(context, parentComponent);
						} else {
							newThreshold = modelComponent;
						}
						inAComparisonOperator = inaStructure
								.getStringByName(sap.firefly.InAConstants.VA_CONDITIONS_COMPARISON);
						conditionComparisonOperator = sap.firefly.ConditionComparisonOperator
								.lookupName(inAComparisonOperator);
						if (conditionComparisonOperator !== null) {
							newThreshold
									.setComparisonOperator(conditionComparisonOperator);
						}
						inALow = inaStructure
								.getElementByName(sap.firefly.InAConstants.VA_CONDITIONS_LOW);
						sap.firefly.QInAConditionsThreshold
								.importThresholdValue(newThreshold.getLow(),
										inALow);
						inALowIs = inaStructure
								.getElementByName(sap.firefly.InAConstants.VA_CONDITIONS_LOW_IS);
						sap.firefly.QInAConditionsThreshold
								.importThresholdValue(newThreshold.getLowIs(),
										inALowIs);
						inAHigh = inaStructure
								.getElementByName(sap.firefly.InAConstants.VA_CONDITIONS_HIGH);
						sap.firefly.QInAConditionsThreshold
								.importThresholdValue(newThreshold.getHigh(),
										inAHigh);
						inAHighIs = inaStructure
								.getElementByName(sap.firefly.InAConstants.VA_CONDITIONS_HIGH_IS);
						sap.firefly.QInAConditionsThreshold
								.importThresholdValue(newThreshold.getHighIs(),
										inAHighIs);
						inAMeasureCoordinates = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_CONDITIONS_MEASURE_COORDINATE);
						if (inAMeasureCoordinates !== null) {
							queryModel = context.getQueryModel();
							len = inAMeasureCoordinates.size();
							for (i = 0; i < len; i++) {
								sap.firefly.QInAConditionsThreshold
										.importSingleMeasureCoordinate(
												queryModel, newThreshold,
												inAMeasureCoordinates
														.getStructureByIndex(i));
							}
						}
						newThreshold
								.setLeavesOnly(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_LEAVES_ONLY,
												false));
						inaLevel = inaStructure
								.getElementByName(sap.firefly.InAConstants.QY_LEVEL);
						if (inaLevel !== null) {
							newThreshold.setLevel(sap.firefly.XIntegerValue
									.create((inaLevel).getIntegerValue()));
						}
						return newThreshold;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var conditionThreshold = modelComponent;
						var measureCoordinates = conditionThreshold
								.getMeasureCoordinates();
						var inAMeasureCoordinates = sap.firefly.PrList.create();
						var len = measureCoordinates.size();
						var i;
						var currentDimensionMember;
						var singleInACoordinate;
						var queryModel;
						var isMds;
						var lowValue;
						var highValue;
						var level;
						var lowValueIs;
						var highValueIs;
						var comparisonOperator;
						for (i = 0; i < len; i++) {
							currentDimensionMember = measureCoordinates.get(i);
							singleInACoordinate = sap.firefly.PrStructure
									.create();
							singleInACoordinate
									.setStringByName(
											sap.firefly.InAConstants.VA_CONDITIONS_DIMENSION_NAME,
											currentDimensionMember
													.getDimension().getName());
							singleInACoordinate
									.setStringByName(
											sap.firefly.InAConstants.VA_CONDITIONS_MEMBER_NAME,
											currentDimensionMember.getName());
							inAMeasureCoordinates.add(singleInACoordinate);
						}
						if (!inAMeasureCoordinates.isEmpty()) {
							inaStructure
									.setElementByName(
											sap.firefly.InAConstants.QY_CONDITIONS_MEASURE_COORDINATE,
											inAMeasureCoordinates);
						}
						queryModel = modelComponent.getQueryModel();
						isMds = queryModel.getSystemType().isTypeOf(
								sap.firefly.SystemType.HANA);
						lowValue = conditionThreshold.getLow();
						highValue = conditionThreshold.getHigh();
						if (isMds) {
							if (lowValue.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_LOW,
												inaStructure, lowValue,
												sap.firefly.XValueType.STRING);
							}
							if (highValue.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_HIGH,
												inaStructure, highValue,
												sap.firefly.XValueType.STRING);
							}
							level = conditionThreshold.getLevel();
							if (level !== null) {
								inaStructure.setIntegerByName(
										sap.firefly.InAConstants.QY_LEVEL,
										level.getIntegerValue());
							}
							inaStructure.setBooleanByName(
									sap.firefly.InAConstants.QY_LEAVES_ONLY,
									conditionThreshold.isLeavesOnly());
						} else {
							if (lowValue.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_LOW,
												inaStructure, lowValue,
												lowValue.getValueType());
							}
							if (highValue.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_HIGH,
												inaStructure, highValue,
												highValue.getValueType());
							}
							lowValueIs = conditionThreshold.getLowIs();
							if (lowValueIs.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_LOW_IS,
												inaStructure, lowValueIs,
												lowValueIs.getValueType());
							}
							highValueIs = conditionThreshold.getHighIs();
							if (highValueIs.getValue() !== null) {
								sap.firefly.QInAConditionsThreshold
										.setValue(
												exporter,
												sap.firefly.InAConstants.VA_CONDITIONS_HIGH_IS,
												inaStructure, highValueIs,
												highValueIs.getValueType());
							}
						}
						comparisonOperator = conditionThreshold
								.getComparisonOperator();
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.VA_CONDITIONS_COMPARISON,
										comparisonOperator.getName());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADataCell",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_CELL;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = context.getQueryModel();
						var queryDataCellList = queryModel
								.getQueryDataCellsBase();
						var dataCell = queryDataCellList
								.newQueryDataCell(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_NAME));
						var inaBaseValueType;
						var cellValueType;
						var dimensionReferenceName;
						var inaMemberReferences;
						var k;
						dataCell
								.setSignReversal(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_SIGN_REVERSAL,
												false));
						dataCell.setEmphasized(inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_EMPHASIZED,
										false));
						dataCell.setCumulation(inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_CUMULATION,
										false));
						dataCell
								.setInputEnabled(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_INPUT_ENABLED,
												false));
						dataCell
								.setDisaggregationMode(sap.firefly.DisaggregationMode
										.lookupWithDefault(
												inaStructure
														.getStringByNameWithDefault(
																sap.firefly.InAConstants.QY_DISAGGREGATION_MODE,
																null),
												sap.firefly.DisaggregationMode.NONE));
						dataCell
								.setDisaggregationRefCellName(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_DISAGGREGATION_REF_CELL_NAME,
												null));
						dataCell
								.setScalingFactor(inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_SCALING_FACTOR,
												1));
						dataCell
								.setDecimalPlaces(inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_DECIMALS,
												0));
						inaBaseValueType = inaStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.QY_CELL_VALUE_TYPE,
										sap.firefly.InAConstants.QA_CELL_VALUE_TYPE_DOUBLE);
						cellValueType = sap.firefly.QInAConverter
								.lookupValueTypeByInt(inaBaseValueType);
						dataCell.setBaseCellValueType(cellValueType);
						if (cellValueType === sap.firefly.XValueType.DIMENSION_MEMBER) {
							dimensionReferenceName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_CELL_DIMENSION_REFERENCE);
							dataCell.setDimensionReference(queryModel
									.getDimensions().getByKey(
											dimensionReferenceName));
						}
						inaMemberReferences = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_DIMENSION_MEMBERS_REFERENCES);
						if (inaMemberReferences !== null) {
							for (k = 0; k < inaMemberReferences.size(); k++) {
								dataCell
										.addDimensionMemberReference(inaMemberReferences
												.getStringByIndex(k));
							}
						}
						return dataCell;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dataCell = modelComponent;
						var disaggregationMode;
						var referenceDataCell;
						var baseValueType;
						var inaBaseValueType;
						var inaMemberReferences;
						var referenceStructureElement;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, dataCell
										.getName());
						disaggregationMode = dataCell.getDisaggregationMode();
						if (disaggregationMode !== null) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DISAGGREGATION_MODE,
											disaggregationMode.getName());
						} else {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DISAGGREGATION_MODE,
											sap.firefly.DisaggregationMode.NONE
													.getName());
						}
						referenceDataCell = dataCell.getDisaggregationRefCell();
						if (referenceDataCell !== null) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DISAGGREGATION_REF_CELL_NAME,
											referenceDataCell.getName());
						} else {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DISAGGREGATION_REF_CELL_NAME,
											"0");
						}
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_SCALING_FACTOR,
								dataCell.getScalingFactor());
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_DECIMALS, dataCell
										.getDecimalPlaces());
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_SIGN_REVERSAL,
								dataCell.hasSignReversal());
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_EMPHASIZED,
								dataCell.isEmphasized());
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_CUMULATION,
								dataCell.isCumulated());
						baseValueType = dataCell.getBaseValueType();
						inaBaseValueType = sap.firefly.QInAConverter
								.lookupIntByValueType(baseValueType);
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_CELL_VALUE_TYPE,
								inaBaseValueType);
						inaMemberReferences = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_DIMENSION_MEMBERS_REFERENCES);
						referenceStructureElement = dataCell
								.getReferenceStructureElement1();
						if (referenceStructureElement !== null) {
							inaMemberReferences
									.addString(referenceStructureElement
											.getName());
							referenceStructureElement = dataCell
									.getReferenceStructureElement2();
							if (referenceStructureElement !== null) {
								inaMemberReferences
										.addString(referenceStructureElement
												.getName());
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADataCellsAll",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_CELLS;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_QUERY_DATA_CELLS;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var queryModel = context.getQueryModel();
						var queryDataCellList;
						var k;
						var inaQDataCell;
						if ((queryModel.supportsDataCells())
								&& (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT)) {
							queryDataCellList = queryModel
									.getQueryDataCellsBase();
							queryDataCellList.clear();
							if (inaList !== null) {
								for (k = 0; k < inaList.size(); k++) {
									inaQDataCell = inaList
											.getStructureByIndex(k);
									importer.importDataCell(inaQDataCell,
											queryModel);
								}
							}
						}
						return null;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var queryModel = modelComponent;
						var inaQueryDataCellList = null;
						var queryDataCells;
						var size;
						var i;
						var queryDataCell;
						var cellStructure;
						if (queryModel.supportsDataCells()) {
							queryDataCells = queryModel.getQueryDataCells();
							inaQueryDataCellList = sap.firefly.PrList.create();
							size = queryDataCells.size();
							for (i = 0; i < size; i++) {
								queryDataCell = queryDataCells.get(i);
								cellStructure = exporter.exportDataCell(null,
										queryDataCell);
								inaQueryDataCellList.add(cellStructure);
							}
						}
						return inaQueryDataCellList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADimension",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						importQdFieldTransformations : function(importer,
								inaDimension, dimension) {
							var fieldList = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_FIELDS);
							var fieldSize;
							var i;
							var currentElement;
							var fieldName;
							var textTransType;
							var field;
							var transformationType;
							if (fieldList !== null) {
								fieldSize = fieldList.size();
								for (i = 0; i < fieldSize; i++) {
									currentElement = fieldList
											.getElementByIndex(i);
									if (currentElement.isStructure()) {
										fieldName = (currentElement)
												.getStringByName(sap.firefly.InAConstants.QY_NAME);
										textTransType = (currentElement)
												.getStringByName(sap.firefly.InAConstants.QY_TEXT_TRANSFORMATION);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(fieldName)
												&& sap.firefly.XStringUtils
														.isNotNullAndNotEmpty(textTransType)) {
											field = dimension
													.getFieldByName(fieldName);
											transformationType = sap.firefly.TextTransformationType
													.lookupName(textTransType);
											if ((field !== null)
													&& (transformationType !== null)) {
												if (transformationType
														.isTypeOf(sap.firefly.TextTransformationType.SPATIAL_TRANSFORMATION)
														&& (importer.m_supportsSpatialTransformations === false)) {
													continue;
												}
												field
														.setTextTransformation(transformationType);
											}
										}
									}
								}
							}
						},
						exportQdReadMode : function(exporter, dimension,
								inaStructure) {
							var readModeContext;
							var inaReadModeName;
							var resultSetAccessMode;
							var inaReadMode;
							if (exporter.getMode() === sap.firefly.QModelFormat.INA_VALUE_HELP) {
								readModeContext = sap.firefly.QContextType.SELECTOR;
								inaReadModeName = sap.firefly.InAConstants.QY_SELECTOR_READ_MODE;
								if (exporter.isAbap(dimension.getQueryModel())) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_VARIABLE_READ_MODE,
													sap.firefly.QInAConverter
															.lookupReadModeInA(dimension
																	.getReadMode(sap.firefly.QContextType.VARIABLE)));
								}
							} else {
								readModeContext = sap.firefly.QContextType.RESULT_SET;
								inaReadModeName = sap.firefly.InAConstants.QY_RS_READ_MODE;
							}
							resultSetAccessMode = dimension
									.getReadMode(readModeContext);
							if (resultSetAccessMode === null) {
								exporter
										.addError(
												sap.firefly.ErrorCodes.INVALID_DIMENSION,
												sap.firefly.XStringUtils
														.concatenate3(
																"No read mode given for dimension '",
																dimension
																		.getName(),
																"'!"));
								return;
							}
							inaReadMode = sap.firefly.QInAConverter
									.lookupReadModeInA(resultSetAccessMode);
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_READ_MODE,
									inaReadMode);
							if (exporter.isAbap(dimension.getQueryModel())) {
								inaStructure.setStringByName(inaReadModeName,
										inaReadMode);
							}
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_NON_EMPTY,
											resultSetAccessMode === sap.firefly.QMemberReadMode.BOOKED);
						},
						importDimReadModes : function(importer, queryModel,
								dimension, inaDimension) {
							var isOldMerge = (importer.m_version < sap.firefly.XVersion.V72_VAR_SUBMIT_MODEL_COPY)
									&& (importer.m_mode !== sap.firefly.QModelFormat.INA_REPOSITORY);
							if (queryModel !== null) {
								if (importer.isAbap(queryModel)) {
									if (isOldMerge) {
										dimension
												.clearReadModes(sap.firefly.QContextType.RESULT_SET);
										sap.firefly.QInAMdDimension
												.importMdReadModeSettings(
														inaDimension,
														dimension,
														sap.firefly.QContextType.RESULT_SET,
														sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_READ_MODES,
														sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_MEMBER_READ_MODES,
														sap.firefly.InAConstants.QY_RS_DEFAULT_READ_MODE,
														sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_READ_MODE,
														sap.firefly.InAConstants.QY_RESULT_SET_MEMBER_DEFAULT_READ_MODE);
										dimension
												.clearReadModes(sap.firefly.QContextType.VARIABLE);
										sap.firefly.QInAMdDimension
												.importMdReadModeSettings(
														inaDimension,
														dimension,
														sap.firefly.QContextType.VARIABLE,
														sap.firefly.InAConstants.QY_SUPPORTED_VARIABLE_READ_MODES,
														null,
														sap.firefly.InAConstants.QY_DEFAULT_VARIABLE_READ_MODE,
														null, null);
									}
									sap.firefly.QInADimension
											.importReadModeSettings(
													inaDimension,
													dimension,
													sap.firefly.QContextType.RESULT_SET,
													sap.firefly.InAConstants.QY_RS_READ_MODE);
									sap.firefly.QInADimension
											.importReadModeSettings(
													inaDimension,
													dimension,
													sap.firefly.QContextType.VARIABLE,
													sap.firefly.InAConstants.QY_VARIABLE_READ_MODE);
								} else {
									sap.firefly.QInADimension
											.importReadModeSettings(
													inaDimension,
													dimension,
													sap.firefly.QContextType.RESULT_SET,
													sap.firefly.InAConstants.QY_RESULT_SET_MEMBER_READ_MODE);
								}
							}
							if (isOldMerge) {
								dimension
										.clearReadModes(sap.firefly.QContextType.SELECTOR);
								sap.firefly.QInAMdDimension
										.importMdReadModeSettings(
												inaDimension,
												dimension,
												sap.firefly.QContextType.SELECTOR,
												sap.firefly.InAConstants.QY_SUPPORTED_SELECTOR_READ_MODES,
												null,
												sap.firefly.InAConstants.QY_SELECTOR_DEFAULT_READ_MODE,
												sap.firefly.InAConstants.QY_DEFAULT_SELECTOR_READ_MODE,
												null);
							}
							sap.firefly.QInADimension
									.importReadModeSettings(
											inaDimension,
											dimension,
											sap.firefly.QContextType.SELECTOR,
											sap.firefly.InAConstants.QY_SELECTOR_READ_MODE);
						},
						importReadModeSettings : function(inaDimension,
								dimension, context, activeReadMode) {
							var inaReadMode = inaDimension
									.getStringByName(activeReadMode);
							var readMode;
							var givenReadMode;
							var defaultReadMode;
							var supportedReadModes;
							if (inaReadMode !== null) {
								readMode = sap.firefly.QInAConverter
										.lookupReadMode(inaReadMode);
								if ((readMode !== null)
										&& (readMode !== sap.firefly.QMemberReadMode.UNDEFINED)) {
									dimension.setReadMode(context, readMode);
								}
							}
							givenReadMode = dimension.getReadMode(context);
							if (givenReadMode === null) {
								defaultReadMode = dimension
										.getReadModeDefault(context);
								if ((defaultReadMode !== null)
										&& (defaultReadMode !== sap.firefly.QMemberReadMode.UNDEFINED)) {
									dimension.setReadMode(context,
											defaultReadMode);
								} else {
									if (sap.firefly.QContextType.VARIABLE === context) {
										supportedReadModes = dimension
												.getSupportedReadModes(context);
										dimension
												.setReadMode(
														context,
														supportedReadModes
																.getValuesAsReadOnlyList()
																.get(0));
									}
								}
							}
						},
						importRsAttributeNodes : function(inaDimension,
								dimension) {
							var inaResultSetAttributes = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_ATTRIBUTE_NODES);
							var resultSetAttributes;
							var attributeSize;
							var idxAttribute;
							var attributeName;
							var attribute;
							if (inaResultSetAttributes === null) {
								inaResultSetAttributes = inaDimension
										.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTE_NODES);
							}
							if (inaResultSetAttributes !== null) {
								resultSetAttributes = dimension
										.getResultSetAttributes();
								resultSetAttributes.clear();
								attributeSize = inaResultSetAttributes.size();
								for (idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++) {
									attributeName = inaResultSetAttributes
											.getStringByIndex(idxAttribute);
									attribute = dimension
											.getAttributeByName(attributeName);
									if (attribute !== null) {
										resultSetAttributes.add(attribute);
									}
								}
							}
						},
						importRsFields : function(inaDimension, dimension) {
							var inaResultSetFields = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
							var resultSetFields;
							var fieldSize;
							var idxField;
							var fieldName;
							var field;
							if (inaResultSetFields === null) {
								inaResultSetFields = inaDimension
										.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES);
							}
							if (inaResultSetFields !== null) {
								resultSetFields = dimension
										.getResultSetFields();
								resultSetFields.clear();
								fieldSize = inaResultSetFields.size();
								for (idxField = 0; idxField < fieldSize; idxField++) {
									fieldName = inaResultSetFields
											.getStringByIndex(idxField);
									field = dimension.getFieldByName(fieldName);
									if (field !== null) {
										resultSetFields.add(field);
									}
								}
							}
						},
						importFieldsLayout : function(importer, inaDimension,
								dimension, context) {
							var fieldLayoutType;
							var inaFieldLayoutType = inaDimension
									.getStringByName(sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE);
							var inaAllFields;
							var inaAllFieldSize;
							var p1;
							var inaAllAttributes;
							var inaAllAttributesSize;
							var p2;
							var inaAttribute;
							var inaResultSetFields2;
							var resultSetFields2;
							var mainAttribute;
							var fieldName2;
							var iRsField;
							var resultsetSize;
							var duplicateNames;
							var rsField;
							var inaStructure;
							var qField2;
							if (inaFieldLayoutType !== null) {
								fieldLayoutType = sap.firefly.QInAConverter
										.lookupFieldLayoutType(inaFieldLayoutType);
								inaAllFields = inaDimension
										.getListByName(sap.firefly.InAConstants.QY_FIELD_SETTINGS);
								if (inaAllFields !== null) {
									inaAllFieldSize = inaAllFields.size();
									for (p1 = 0; p1 < inaAllFieldSize; p1++) {
										importer
												.importComponent(
														sap.firefly.OlapComponentType.FIELD,
														inaAllFields
																.getStructureByIndex(p1),
														null, dimension,
														context);
									}
								}
								inaAllAttributes = inaDimension
										.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTE_SETTINGS);
								if (inaAllAttributes !== null) {
									inaAllAttributesSize = inaAllAttributes
											.size();
									for (p2 = 0; p2 < inaAllAttributesSize; p2++) {
										inaAttribute = inaAllAttributes
												.getStructureByIndex(p2);
										importer.importAttribute(inaAttribute,
												dimension, context);
									}
								}
								sap.firefly.QInADimension.importRsFields(
										inaDimension, dimension);
								sap.firefly.QInADimension
										.importRsAttributeNodes(inaDimension,
												dimension);
								dimension.setFieldLayoutType(fieldLayoutType);
							} else {
								inaResultSetFields2 = inaDimension
										.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
								if (inaResultSetFields2 === null) {
									inaResultSetFields2 = inaDimension
											.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES);
								}
								if (inaResultSetFields2 !== null) {
									fieldLayoutType = sap.firefly.FieldLayoutType.ATTRIBUTE_BASED;
									if (dimension
											.supportsFieldLayoutType(fieldLayoutType)) {
										dimension
												.setFieldLayoutType(fieldLayoutType);
									}
									fieldLayoutType = dimension
											.getFieldLayoutType();
									if (fieldLayoutType === sap.firefly.FieldLayoutType.FIELD_BASED) {
										resultSetFields2 = dimension
												.getResultSetFields();
										resultSetFields2.clear();
										mainAttribute = dimension
												.getMainAttribute();
										if (mainAttribute !== null) {
											mainAttribute.getResultSetFields()
													.clear();
										}
										resultsetSize = inaResultSetFields2
												.size();
										duplicateNames = sap.firefly.XHashSetOfString
												.create();
										for (iRsField = 0; iRsField < resultsetSize; iRsField++) {
											fieldName2 = inaResultSetFields2
													.getStringByIndex(iRsField);
											if (duplicateNames
													.contains(fieldName2) === false) {
												duplicateNames.put(fieldName2);
												rsField = dimension
														.getFieldByName(fieldName2);
												if (rsField === null) {
													importer
															.addError(
																	sap.firefly.ErrorCodes.INVALID_TOKEN,
																	sap.firefly.XString
																			.concatenate2(
																					"Field not found: ",
																					fieldName2));
													return;
												}
												resultSetFields2.add(rsField);
											}
										}
										inaResultSetFields2 = inaDimension
												.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTES);
										if (inaResultSetFields2 !== null) {
											resultsetSize = inaResultSetFields2
													.size();
											for (iRsField = 0; iRsField < resultsetSize; iRsField++) {
												inaStructure = inaResultSetFields2
														.getStructureByIndex(iRsField);
												fieldName2 = inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_NAME);
												if (duplicateNames
														.contains(fieldName2) === false) {
													duplicateNames
															.put(fieldName2);
													qField2 = dimension
															.getFieldByNameOrAlias(fieldName2);
													if (qField2 === null) {
														importer
																.addError(
																		sap.firefly.ErrorCodes.INVALID_TOKEN,
																		sap.firefly.XString
																				.concatenate2(
																						"Field not found: ",
																						fieldName2));
														return;
													}
													resultSetFields2
															.add(qField2);
												}
											}
										}
									}
								} else {
									if (dimension.isStructure()) {
										sap.firefly.QInADimension
												.resetFieldsToDefault(dimension);
									}
								}
							}
						},
						resetFieldsToDefault : function(dimension) {
							var fieldLayoutType = dimension
									.getFieldLayoutType();
							var defaultFieldLayoutType = dimension
									.getDefaultFieldLayoutType();
							var dimDefaultResultSetFields;
							var dimResultSetFields;
							var i;
							var defaultResultSetAttributes;
							var dimResultSetAttributes;
							var j;
							var currentAttribute;
							var attributeDefaultResultSetFields;
							var attributeResultSetFields;
							var k;
							if (fieldLayoutType !== defaultFieldLayoutType) {
								dimension
										.setFieldLayoutType(defaultFieldLayoutType);
							}
							if (defaultFieldLayoutType === sap.firefly.FieldLayoutType.FIELD_BASED) {
								dimDefaultResultSetFields = dimension
										.getDefaultResultSetFields();
								dimResultSetFields = dimension
										.getResultSetFields();
								dimResultSetFields.clear();
								for (i = 0; i < dimDefaultResultSetFields
										.size(); i++) {
									dimResultSetFields
											.add(dimDefaultResultSetFields
													.get(i));
								}
							} else {
								defaultResultSetAttributes = dimension
										.getDefaultResultSetAttributes();
								dimResultSetAttributes = dimension
										.getResultSetAttributes();
								dimResultSetAttributes.clear();
								for (j = 0; j < defaultResultSetAttributes
										.size(); j++) {
									currentAttribute = defaultResultSetAttributes
											.get(j);
									attributeDefaultResultSetFields = currentAttribute
											.getDefaultResultSetFields();
									attributeResultSetFields = currentAttribute
											.getResultSetFields();
									attributeResultSetFields.clear();
									for (k = 0; k < attributeDefaultResultSetFields
											.size(); k++) {
										attributeResultSetFields
												.add(attributeDefaultResultSetFields
														.get(k));
									}
									dimResultSetAttributes
											.add(currentAttribute);
								}
							}
						},
						exportFieldLayout : function(exporter, inaDimension,
								dimension) {
							var exportingFields = null;
							var context = exporter.m_modelContext;
							var fields;
							var addedFields;
							var attributes;
							var attributeSize;
							var idxAttribute;
							var fieldList;
							var fieldSize;
							var p;
							var field;
							var fieldName;
							var inaFieldList2;
							var hiddenFields;
							if (dimension.getFieldLayoutTypeExt(context) === sap.firefly.FieldLayoutType.FIELD_BASED) {
								exportingFields = dimension
										.getFieldsExt(context);
							} else {
								fields = sap.firefly.XList.create();
								addedFields = sap.firefly.XHashSetOfString
										.create();
								attributes = dimension
										.getAttributesExt(context);
								attributeSize = attributes.size();
								for (idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++) {
									fieldList = attributes.get(idxAttribute)
											.getFieldsExt(context);
									fieldSize = fieldList.size();
									for (p = 0; p < fieldSize; p++) {
										field = fieldList.get(p);
										fieldName = field.getName();
										if (addedFields.contains(fieldName) === false) {
											fields.add(field);
											addedFields.put(fieldName);
										}
									}
								}
								exportingFields = fields;
							}
							inaFieldList2 = inaDimension
									.setNewListByName(sap.firefly.InAConstants.QY_ATTRIBUTES);
							sap.firefly.QInADimension.exportListOfFields(
									exportingFields, inaFieldList2, exporter,
									false);
							hiddenFields = sap.firefly.QInADimension
									.getHiddenFields(exporter, dimension,
											exportingFields);
							sap.firefly.QInADimension
									.exportListOfFields(hiddenFields,
											inaFieldList2, exporter, true);
						},
						exportListOfFields : function(fields, inaFields,
								exporter, hide) {
							var flagVisible = sap.firefly.QImExFlag.DEFAULT_ALL;
							var flagHidden = sap.firefly.XMath.binaryOr(
									flagVisible, sap.firefly.QImExFlag.HIDE);
							var fieldsSize = fields.size();
							var i;
							for (i = 0; i < fieldsSize; i++) {
								if (hide) {
									inaFields
											.add(exporter
													.exportComponent(
															sap.firefly.OlapComponentType.FIELD,
															fields.get(i),
															null, flagHidden));
								} else {
									inaFields
											.add(exporter
													.exportComponent(
															sap.firefly.OlapComponentType.FIELD,
															fields.get(i),
															null, flagVisible));
								}
							}
						},
						getHiddenFields : function(exporter, dimension,
								exportingFields) {
							var allFields;
							var hiddenFields;
							var exportSize;
							var i;
							var keyField;
							var textField;
							var idxHidden;
							var hiddenField;
							if (exporter.m_modelContext === sap.firefly.QContextType.SELECTOR) {
								allFields = sap.firefly.XList.create();
								allFields
										.add(dimension
												.getKeyFieldExt(sap.firefly.QContextType.SELECTOR));
							} else {
								allFields = dimension
										.getFieldsListByActiveUsageType();
							}
							hiddenFields = allFields.createListCopy();
							exportSize = exportingFields.size();
							for (i = 0; i < exportSize; i++) {
								hiddenFields.removeElement(exportingFields
										.get(i));
							}
							keyField = dimension
									.getKeyFieldExt(exporter.m_modelContext);
							textField = dimension.getTextField();
							if (textField === keyField) {
								textField = null;
							}
							for (idxHidden = 0; idxHidden < hiddenFields.size();) {
								hiddenField = hiddenFields.get(idxHidden);
								if (hiddenField !== keyField) {
									if (hiddenField !== textField) {
										if (hiddenField.isAlwaysRequested() === false) {
											if (hiddenField.hasSorting()) {
												if (hiddenField
														.getResultSetSorting()
														.getDirection() === sap.firefly.XSortDirection.DEFAULT_VALUE) {
													hiddenFields
															.removeAt(idxHidden);
													continue;
												}
											} else {
												hiddenFields
														.removeAt(idxHidden);
												continue;
											}
										}
									}
								}
								idxHidden++;
							}
							sap.firefly.QInADimension.moveFieldToStart(
									hiddenFields, textField);
							sap.firefly.QInADimension.moveFieldToStart(
									hiddenFields, keyField);
							return hiddenFields;
						},
						moveFieldToStart : function(hiddenFields, field) {
							var hiddenSize = hiddenFields.size();
							var idxField;
							var hiddenField;
							for (idxField = 0; idxField < hiddenSize; idxField++) {
								hiddenField = hiddenFields.get(idxField);
								if (hiddenField === field) {
									if (idxField !== 0) {
										hiddenFields.removeAt(idxField);
										hiddenFields.insert(0, hiddenField);
									}
									break;
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.ABSTRACT_DIMENSION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = context.getQueryModel();
						var dimension = modelComponent;
						var dimName;
						var sortingManager;
						var inaSortOrder;
						var sortOrder;
						var skipEntries;
						var topEntries;
						var inaReadMode;
						var readMode;
						var variableContainer;
						var variables;
						var size;
						var i;
						var variable;
						if (dimension === null) {
							dimName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_NAME);
							if (queryModel !== null) {
								dimension = queryModel
										.getDimensionByName(dimName);
							}
							if (dimension === null) {
								importer
										.addWarning(
												sap.firefly.ErrorCodes.INVALID_DIMENSION,
												sap.firefly.XStringUtils
														.concatenate3(
																"Dimension '",
																dimName,
																"' not found in QueryModel! Can't deserialize dimension."));
								return null;
							}
						}
						if (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT) {
							dimension.setSelectorGettingInterval(false);
							sap.firefly.QInADimension.importDimReadModes(
									importer, queryModel, dimension,
									inaStructure);
							importer.importMembers(inaStructure, dimension,
									context);
							sap.firefly.QInADimension.importFieldsLayout(
									importer, inaStructure, dimension, context);
							sap.firefly.QInADimension
									.importQdFieldTransformations(importer,
											inaStructure, dimension);
							importer.importHierarchy(dimension, inaStructure);
							if ((queryModel !== null)
									&& (queryModel.supportsExtendedSort() === false)) {
								sortingManager = queryModel.getSortingManager();
								if (sortingManager.supportsDimensionSorting(
										dimension,
										sap.firefly.SortType.MEMBER_KEY)) {
									inaSortOrder = inaStructure
											.getIntegerByNameWithDefault(
													sap.firefly.InAConstants.QY_SORT_ORDER,
													sap.firefly.QInAConverter
															.lookupSortDirectionInA(sap.firefly.XSortDirection.DEFAULT_VALUE));
									sortOrder = sap.firefly.QInAConverter
											.lookupSortDirection(inaSortOrder);
									dimension.getResultSetSorting()
											.setDirection(sortOrder);
								}
							}
							if (importer.m_supportsCummulative
									&& dimension.supportsCumulative()) {
								dimension
										.setIsCumulative(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_IS_CUMMULATIVE,
														false));
							}
							skipEntries = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_SKIP, 0);
							dimension.setSkipEntries(skipEntries);
							topEntries = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_TOP, 0);
							dimension.setTopEntries(topEntries);
							inaReadMode = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_READ_MODE);
							if (inaReadMode !== null) {
								readMode = sap.firefly.QInAConverter
										.lookupReadMode(inaReadMode);
								dimension.setReadModeGraceful(
										sap.firefly.QContextType.RESULT_SET,
										readMode);
							}
							importer.importTotals(inaStructure, dimension
									.getResultStructureControllerBase(),
									context);
							this.importAlternativeFieldValues(inaStructure,
									dimension);
						} else {
							variableContainer = dimension
									.getVariableContainer();
							if (variableContainer !== null) {
								variables = variableContainer.getVariables();
								size = variables.size();
								for (i = 0; i < size; i++) {
									variable = variables.get(i);
									if ((variable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE)
											&& sap.firefly.XString
													.isEqual(
															((variable)
																	.getHierarchyNameDimension()
																	.getName()),
															dimension.getName())) {
										importer.importHierarchy(dimension,
												inaStructure);
										break;
									}
								}
							}
						}
						return dimension;
					},
					importAlternativeFieldValues : function(inaStructure,
							dimension) {
						var alternativeFieldValuesList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ALTERNATIVE_FIELD_VALUES);
						var size;
						var i;
						var currentElement;
						var currentStructure;
						var strValueType;
						var valueType;
						var valueAsString;
						var value;
						var hierarchyKey;
						var memberKey;
						var fieldName;
						var language;
						if (alternativeFieldValuesList !== null) {
							size = alternativeFieldValuesList.size();
							for (i = 0; i < size; i++) {
								currentElement = alternativeFieldValuesList
										.getElementByIndex(i);
								if (currentElement.isStructure()) {
									currentStructure = currentElement;
									strValueType = currentStructure
											.getStringByName(sap.firefly.InAConstants.QY_VALUE_TYPE);
									valueType = sap.firefly.QInAConverter
											.lookupValueType(strValueType);
									valueAsString = currentStructure
											.getStringByName(sap.firefly.InAConstants.QY_VALUE);
									value = null;
									if (valueType === sap.firefly.XValueType.INTEGER) {
										value = sap.firefly.XIntegerValue
												.create(sap.firefly.XInteger
														.convertStringToIntegerWithRadix(
																valueAsString,
																10));
									} else {
										if (valueType === sap.firefly.XValueType.LONG) {
											value = sap.firefly.XLongValue
													.create(sap.firefly.XLong
															.convertStringToLong(valueAsString));
										} else {
											if (valueType === sap.firefly.XValueType.DOUBLE) {
												value = sap.firefly.XDoubleValue
														.create(sap.firefly.XDouble
																.convertStringToDouble(valueAsString));
											} else {
												if (valueType === sap.firefly.XValueType.STRING) {
													value = sap.firefly.XStringValue
															.create(valueAsString);
												} else {
													if (valueType === sap.firefly.XValueType.DATE) {
														value = sap.firefly.XDate
																.createDateFromIsoFormat(valueAsString);
													} else {
														if (valueType === sap.firefly.XValueType.DATE_TIME) {
															value = sap.firefly.XDateTime
																	.createDateTimeFromIsoFormat(valueAsString);
														}
													}
												}
											}
										}
									}
									if (value !== null) {
										hierarchyKey = currentStructure
												.getBooleanByName(sap.firefly.InAConstants.QY_HIERARCHY_KEY);
										memberKey = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_MEMBER_KEY);
										fieldName = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
										language = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_LANGUAGE);
										dimension.setAlternativeFieldValue(
												hierarchyKey, memberKey,
												fieldName, value, language);
									}
								}
							}
						}
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var type;
						var skipEntries;
						var topEntries;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, dimension
										.getName());
						sap.firefly.QInADimension.exportQdReadMode(exporter,
								dimension, inaStructure);
						if (exporter.getMode() === sap.firefly.QModelFormat.INA_VALUE_HELP) {
							type = sap.firefly.AxisType.ROWS;
						} else {
							type = dimension.getAxis().getType();
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS,
								sap.firefly.QInAConverter
										.lookupAxisTypeInA(type));
						skipEntries = dimension.getSkipEntries();
						if (skipEntries > 0) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_SKIP,
									skipEntries);
						}
						topEntries = dimension.getTopEntries();
						if (topEntries > 0) {
							inaStructure
									.setIntegerByName(
											sap.firefly.InAConstants.QY_TOP,
											topEntries);
						}
						if (dimension.supportsCumulative()) {
							inaStructure.setBooleanByName(
									sap.firefly.InAConstants.QY_IS_CUMMULATIVE,
									dimension.isCumulative());
						}
						exporter.exportHierarchy(dimension, inaStructure);
						if (exporter.getMode() !== sap.firefly.QModelFormat.INA_VALUE_HELP) {
							exporter.exportTotals(inaStructure, dimension);
							exporter.exportMembers(dimension, inaStructure);
						}
						sap.firefly.QInADimension.exportFieldLayout(exporter,
								inaStructure, dimension);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADimensionsAll",
				sap.firefly.QInAComponentWithList,
				{
					$statics : {
						exportAxisDimensionsWithHeuristic : function(exporter,
								axis, parameterDimensionList, usedDimensions) {
							var queryModel = axis.getQueryModel();
							var repositoryData = exporter.m_mode === sap.firefly.QModelFormat.INA_REPOSITORY_DATA;
							var optimizedExportModeActive = queryModel
									.isOptimizedExportModeActive();
							var dimCount = axis.getDimensionCount();
							var i;
							var dimension;
							for (i = 0; i < dimCount; i++) {
								dimension = axis.get(i);
								if (optimizedExportModeActive
										&& dimension
												.isIgnoredOnOptimizedExport()) {
									continue;
								}
								if (repositoryData
										&& (!sap.firefly.QInADimensionsAll
												.isDimensionUsedHeuristic(
														dimension,
														usedDimensions))) {
									continue;
								}
								if (dimension.getDimensionType() === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
									parameterDimensionList
											.add(exporter
													.exportCalculatedDimension(dimension));
								} else {
									parameterDimensionList.add(exporter
											.exportDimension(dimension));
								}
							}
						},
						exportAxisDimensions : function(exporter, axis,
								parameterDimensionList) {
							var dimCount = axis.getDimensionCount();
							var i;
							var dimension;
							for (i = 0; i < dimCount; i++) {
								dimension = axis.get(i);
								if (dimension.getDimensionType() === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
									parameterDimensionList
											.add(exporter
													.exportCalculatedDimension(dimension));
								} else {
									parameterDimensionList.add(exporter
											.exportDimension(dimension));
								}
							}
						},
						filterContainsDimension : function(queryModel,
								dimension) {
							var selectionStateContainer = queryModel
									.getSelector().getSelectionStateContainer();
							return sap.firefly.QInADimensionsAll
									.containerContainsDimension(
											selectionStateContainer, dimension);
						},
						containerContainsDimension : function(container,
								dimension) {
							var cartesianProduct = container
									.getCartesianProduct();
							var cartesianList;
							var complexSelectionRoot;
							if (cartesianProduct !== null) {
								cartesianList = cartesianProduct
										.getCartesianList(dimension);
								return sap.firefly.XCollectionUtils
										.hasElements(cartesianList);
							}
							complexSelectionRoot = container
									.getComplexSelectionRoot();
							if (complexSelectionRoot !== null) {
								return sap.firefly.QInADimensionsAll
										.complexSelectionContainsDimension(
												complexSelectionRoot, dimension);
							}
							return false;
						},
						complexSelectionContainsDimension : function(
								complexSelectionRoot, dimension) {
							var componentType = complexSelectionRoot
									.getComponentType();
							var filterOp;
							var filterAlgebra;
							var filterSize;
							var idxAnd;
							var complexSelectionContainsMeasure;
							var complexCartesianList;
							if (componentType === sap.firefly.FilterComponentType.OPERATION) {
								filterOp = complexSelectionRoot;
								if (filterOp.getDimension() === dimension) {
									return true;
								}
							} else {
								if ((componentType === sap.firefly.FilterComponentType.AND)
										|| (componentType === sap.firefly.FilterComponentType.OR)) {
									filterAlgebra = complexSelectionRoot;
									filterSize = filterAlgebra.size();
									for (idxAnd = 0; idxAnd < filterSize; idxAnd++) {
										complexSelectionContainsMeasure = sap.firefly.QInADimensionsAll
												.complexSelectionContainsDimension(
														filterAlgebra
																.get(idxAnd),
														dimension);
										if (complexSelectionContainsMeasure) {
											return true;
										}
									}
								} else {
									if (componentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										complexCartesianList = complexSelectionRoot;
										if (complexCartesianList.getDimension() === dimension) {
											return true;
										}
									}
								}
							}
							return false;
						},
						addDimensionsUsedInContainer : function(container,
								usedDimensions) {
							var cartesianProduct;
							var complexSelectionRoot;
							var sizeCp;
							var i;
							if (container === null) {
								return;
							}
							cartesianProduct = container.getCartesianProduct();
							complexSelectionRoot = container
									.getComplexSelectionRoot();
							if (cartesianProduct !== null) {
								sizeCp = cartesianProduct.size();
								for (i = 0; i < sizeCp; i++) {
									usedDimensions.put(cartesianProduct
											.getCartesianChild(i)
											.getDimension().getName());
								}
							} else {
								if (complexSelectionRoot !== null) {
									sap.firefly.QInADimensionsAll
											.addDimensionsUsedInComplexContainer(
													complexSelectionRoot,
													usedDimensions);
								}
							}
						},
						addDimensionsUsedInComplexContainer : function(
								complexSelectionRoot, usedDimensions) {
							var componentType = complexSelectionRoot
									.getComponentType();
							var filterOp;
							var filterAlgebra;
							var filterSize;
							var idxAnd;
							var complexCartesianList;
							if (componentType === sap.firefly.FilterComponentType.OPERATION) {
								filterOp = complexSelectionRoot;
								usedDimensions.put(filterOp.getDimension()
										.getName());
							} else {
								if ((componentType === sap.firefly.FilterComponentType.AND)
										|| (componentType === sap.firefly.FilterComponentType.OR)) {
									filterAlgebra = complexSelectionRoot;
									filterSize = filterAlgebra.size();
									for (idxAnd = 0; idxAnd < filterSize; idxAnd++) {
										sap.firefly.QInADimensionsAll
												.addDimensionsUsedInComplexContainer(
														filterAlgebra
																.get(idxAnd),
														usedDimensions);
									}
								} else {
									if (componentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										complexCartesianList = complexSelectionRoot;
										usedDimensions.put(complexCartesianList
												.getDimension().getName());
									}
								}
							}
						},
						addDimensionsUsedInExceptions : function(queryModel,
								usedDimensions) {
							var exceptionManager = queryModel
									.getExceptionManager();
							var sizeEx = exceptionManager.size();
							var idxEx;
							var exception;
							var evaluates;
							var sizeEva;
							var idxEva;
							for (idxEx = 0; idxEx < sizeEx; idxEx++) {
								exception = exceptionManager.get(idxEx);
								usedDimensions.put(exception.getMeasure()
										.getDimension().getName());
								evaluates = exception.getEvaluates();
								sizeEva = evaluates.size();
								for (idxEva = 0; (idxEva < sizeEva); idxEva++) {
									usedDimensions.put(evaluates.get(idxEva)
											.getDimension().getName());
								}
							}
						},
						addDimensionsUsedByVariables : function(queryModel,
								usedDimensions) {
							var variables = queryModel.getVariables();
							var sizeVar = variables.size();
							var idxVar;
							var curVar;
							for (idxVar = 0; idxVar < sizeVar; idxVar++) {
								curVar = variables.get(idxVar);
								if (curVar
										.getVariableType()
										.isTypeOf(
												sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)) {
									usedDimensions.put((curVar).getDimension()
											.getName());
								}
							}
						},
						addDimensionsUsedBySorting : function(queryModel,
								usedDimensions) {
							var sortingManager = queryModel.getSortingManager();
							var sortingOperations = sortingManager
									.getSortingOperations();
							var size = sortingOperations.size();
							var i;
							var genericSorting;
							var sortingType;
							var dimension;
							for (i = 0; i < size; i++) {
								genericSorting = sortingOperations.get(i);
								sortingType = genericSorting.getSortingType();
								if ((sortingType === sap.firefly.SortType.MEASURE)
										|| (sortingType === sap.firefly.SortType.DATA_CELL_VALUE)
										|| (genericSorting
												.getOlapComponentType()
												.isTypeOf(sap.firefly.OlapComponentType.DIMENSION_SORTING))) {
									dimension = sortingOperations.get(i)
											.getDimension();
									if (dimension !== null) {
										usedDimensions.put(dimension.getName());
									}
								}
							}
						},
						addDimensionsUsedByMembers : function(usedDimensions,
								dimension) {
							var allStructureMembers;
							var size;
							var i;
							var member;
							var filter;
							if (dimension !== null) {
								allStructureMembers = dimension
										.getAllStructureMembers();
								if (allStructureMembers !== null) {
									size = allStructureMembers.size();
									for (i = 0; i < size; i++) {
										member = allStructureMembers.get(i);
										if (member.getMemberType() === sap.firefly.MemberType.RESTRICTED_MEASURE) {
											filter = (member).getFilter();
											if (filter === null) {
												continue;
											}
											if (filter.isComplexSelection()) {
												sap.firefly.QInADimensionsAll
														.addDimensionsUsedByRestrictedMember(
																filter
																		.getComplexSelectionRoot(),
																usedDimensions);
											} else {
												if (filter.isCartesianProduct()) {
													sap.firefly.QInADimensionsAll
															.addDimensionsUsedByRestrictedMember(
																	filter
																			.getCartesianProduct(),
																	usedDimensions);
												}
											}
										} else {
											if (member.getMemberType() === sap.firefly.MemberType.FORMULA) {
												sap.firefly.QInADimensionsAll
														.addDimensionsUsedByFormulaMember(
																(member)
																		.getFormula(),
																usedDimensions,
																dimension
																		.getQueryModel());
											}
										}
									}
								}
							}
						},
						addDimensionsUsedByFormulaMember : function(formula,
								usedDimensions, queryModel) {
							var formulaType = formula.getOlapComponentType();
							var fieldName;
							var dimensionName;
							var formulaFunction;
							var size;
							var i;
							var formulaOp;
							if (formulaType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
								fieldName = (formula).getFieldName();
								usedDimensions.put(queryModel.getFieldByName(
										fieldName).getDimension().getName());
							} else {
								if (formulaType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
									dimensionName = (formula)
											.getDimensionName();
									if (dimensionName !== null) {
										usedDimensions.put(dimensionName);
									}
								} else {
									if (formulaType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
										formulaFunction = formula;
										size = formulaFunction.size();
										for (i = 0; i < size; i++) {
											sap.firefly.QInADimensionsAll
													.addDimensionsUsedByFormulaMember(
															formulaFunction
																	.get(i),
															usedDimensions,
															queryModel);
										}
									} else {
										if (formulaType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
											formulaOp = formula;
											if (formulaOp.getRightSide() !== null) {
												sap.firefly.QInADimensionsAll
														.addDimensionsUsedByFormulaMember(
																formulaOp
																		.getRightSide(),
																usedDimensions,
																queryModel);
											}
											if (formulaOp.getLeftSide() !== null) {
												sap.firefly.QInADimensionsAll
														.addDimensionsUsedByFormulaMember(
																formulaOp
																		.getLeftSide(),
																usedDimensions,
																queryModel);
											}
										}
									}
								}
							}
						},
						addDimensionsUsedByRestrictedMember : function(
								complexSelectionRoot, usedDimensions) {
							var componentType = complexSelectionRoot
									.getComponentType();
							var filterOp;
							var filterAlgebra;
							var filterSize;
							var idxAnd;
							var complexCartesianList;
							var cartesianProduct;
							var productSize;
							var idxProduct;
							if (componentType === sap.firefly.FilterComponentType.OPERATION) {
								filterOp = complexSelectionRoot;
								usedDimensions.put(filterOp.getDimension()
										.getName());
							} else {
								if ((componentType === sap.firefly.FilterComponentType.OR)
										|| (componentType === sap.firefly.FilterComponentType.AND)) {
									filterAlgebra = complexSelectionRoot;
									filterSize = filterAlgebra.size();
									for (idxAnd = 0; idxAnd < filterSize; idxAnd++) {
										sap.firefly.QInADimensionsAll
												.addDimensionsUsedByRestrictedMember(
														filterAlgebra
																.get(idxAnd),
														usedDimensions);
									}
								} else {
									if (componentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										complexCartesianList = complexSelectionRoot;
										usedDimensions.put(complexCartesianList
												.getDimension().getName());
									} else {
										if (componentType === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT) {
											cartesianProduct = complexSelectionRoot;
											productSize = cartesianProduct
													.size();
											for (idxProduct = 0; idxProduct < productSize; idxProduct++) {
												sap.firefly.QInADimensionsAll
														.addDimensionsUsedByRestrictedMember(
																cartesianProduct
																		.get(idxProduct),
																usedDimensions);
											}
										}
									}
								}
							}
						},
						addDimensionsUsedInDrillNavigations : function(
								queryModel, usedDimensions) {
							var drillOperations = queryModel.getDrillManager()
									.getDrillOperations();
							var size = drillOperations.size();
							var i;
							for (i = 0; i < size; i++) {
								usedDimensions.put(drillOperations.get(i)
										.getTargetDimension().getName());
							}
						},
						setupHeuristic : function(queryModel, usedDimensions) {
							var selector;
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedInExceptions(queryModel,
											usedDimensions);
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedByVariables(queryModel,
											usedDimensions);
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedBySorting(queryModel,
											usedDimensions);
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedByMembers(usedDimensions,
											queryModel.getMeasureDimension());
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedByMembers(usedDimensions,
											queryModel.getNonMeasureDimension());
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedByMembers(usedDimensions,
											queryModel
													.getNonMeasureDimension2());
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedByMembers(
											usedDimensions,
											queryModel
													.getDimensionByType(sap.firefly.DimensionType.ACCOUNT));
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedInDrillNavigations(
											queryModel, usedDimensions);
							selector = queryModel.getSelector();
							if (selector.isSelectionSpaceContainerInitialized()) {
								sap.firefly.QInADimensionsAll
										.addDimensionsUsedInContainer(selector
												.getSelectionSpaceContainer(),
												usedDimensions);
							}
							if (selector.isSelectionStateContainerInitialized()) {
								sap.firefly.QInADimensionsAll
										.addDimensionsUsedInContainer(selector
												.getSelectionStateContainer(),
												usedDimensions);
							}
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedInContainer(selector
											.getExternSelectionContainer(),
											usedDimensions);
							if (selector
									.isSelectionVisibilityContainerInitialized()) {
								sap.firefly.QInADimensionsAll
										.addDimensionsUsedInContainer(
												selector
														.getSelectionVisibilityContainer(),
												usedDimensions);
							}
							sap.firefly.QInADimensionsAll
									.addDimensionsUsedInContainer(
											selector
													.getExternSelectionVisibilityContainer(),
											usedDimensions);
						},
						isDimensionUsedHeuristic : function(dimension,
								usedDimensions) {
							return usedDimensions.contains(dimension.getName())
									|| dimension.isGroupingDimension();
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DIMENSIONS;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_DIMENSIONS;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var queryModel;
						var freeAxis;
						var dimensions;
						var dimensionSize;
						var i;
						var dimensionManager;
						var size;
						var k;
						var inaDimension;
						var importCalculatedDimension;
						var dimName;
						var dimension;
						var inaDimAxis;
						if (inaList === null) {
							return modelComponent;
						}
						queryModel = modelComponent;
						if (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT) {
							freeAxis = queryModel.getFreeAxis();
							dimensions = queryModel.getDimensions();
							dimensionSize = dimensions.size();
							for (i = 0; i < dimensionSize; i++) {
								freeAxis.add(dimensions.get(i));
							}
						}
						dimensionManager = queryModel.getDimensionManagerBase();
						size = inaList.size();
						for (k = 0; k < size; k++) {
							inaDimension = inaList.getStructureByIndex(k);
							if (inaDimension
									.hasValueByName(sap.firefly.InAConstants.QY_FIELD_MAPPINGS)) {
								importCalculatedDimension = importer
										.importCalculatedDimension(
												inaDimension, queryModel);
								queryModel
										.addDimension(importCalculatedDimension);
								dimensionManager
										.finalizeDimensionMetadataSetup(importCalculatedDimension);
							} else {
								importer.importDimension(inaDimension,
										queryModel);
							}
							if (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT) {
								dimName = inaDimension
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								dimension = queryModel
										.getDimensionByName(dimName);
								if (dimension === null) {
									importer
											.addWarning(
													sap.firefly.ErrorCodes.INVALID_DIMENSION,
													sap.firefly.XStringUtils
															.concatenate3(
																	"Dimension '",
																	dimName,
																	"' not found! Can't move dimension to target axis."));
									continue;
								}
								inaDimAxis = inaDimension
										.getStringByName(sap.firefly.InAConstants.QY_AXIS);
								if (inaDimAxis === null) {
									inaDimAxis = inaDimension
											.getStringByNameWithDefault(
													sap.firefly.InAConstants.QY_AXIS_DEFAULT,
													sap.firefly.InAConstants.VA_AXIS_FREE);
								}
								queryModel.getAxis(
										sap.firefly.QInAConverter
												.lookupAxisType(inaDimAxis))
										.add(dimension);
							}
						}
						return queryModel;
					},
					exportDimensionIfOnFreeAxis : function(dimension) {
						var queryModel;
						var isDimensionOnFreeAxis;
						var isDimensionFiltered;
						var exceptionManager;
						var hasExceptions;
						if (dimension === null) {
							return false;
						}
						queryModel = dimension.getQueryModel();
						isDimensionOnFreeAxis = dimension.getAxis().getType() === sap.firefly.AxisType.FREE;
						isDimensionFiltered = false;
						if (isDimensionOnFreeAxis) {
							isDimensionFiltered = sap.firefly.QInADimensionsAll
									.filterContainsDimension(queryModel,
											dimension);
						}
						if (dimension.isMeasureStructure()) {
							exceptionManager = queryModel.getExceptionManager();
							hasExceptions = sap.firefly.XCollectionUtils
									.hasElements(exceptionManager);
							return isDimensionOnFreeAxis
									&& (isDimensionFiltered || hasExceptions);
						}
						return isDimensionOnFreeAxis && isDimensionFiltered;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var inaDimensionList = sap.firefly.PrList.create();
						var query;
						var usedDimensions;
						var isOutOfContextBlending;
						var freeAxis;
						var sizeFreeAxis;
						var idxFree;
						var freeDimension;
						var freeDimensionType;
						var exportStructure;
						var exportAccountOnFreeAxis;
						if (exporter.m_mode !== sap.firefly.QModelFormat.INA_VALUE_HELP) {
							query = modelComponent;
							sap.firefly.QInADimensionsAll.exportAxisDimensions(
									exporter,
									query.getAxis(sap.firefly.AxisType.ROWS),
									inaDimensionList);
							sap.firefly.QInADimensionsAll
									.exportAxisDimensions(
											exporter,
											query
													.getAxis(sap.firefly.AxisType.COLUMNS),
											inaDimensionList);
							if (exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
								usedDimensions = sap.firefly.XHashSetOfString
										.create();
								if (exporter.m_mode === sap.firefly.QModelFormat.INA_REPOSITORY_DATA) {
									sap.firefly.QInADimensionsAll
											.setupHeuristic(query,
													usedDimensions);
								}
								sap.firefly.QInADimensionsAll
										.exportAxisDimensionsWithHeuristic(
												exporter,
												query
														.getAxis(sap.firefly.AxisType.FREE),
												inaDimensionList,
												usedDimensions);
							} else {
								if (exporter.m_mode
										.isTypeOf(sap.firefly.QModelFormat.INA_DATA)) {
									isOutOfContextBlending = query
											.supportsCubeBlendingOutOfContext()
											&& (query.getQueryManager()
													.getMode() === sap.firefly.QueryManagerMode.BLENDING);
									freeAxis = query
											.getAxis(sap.firefly.AxisType.FREE);
									sizeFreeAxis = freeAxis.size();
									for (idxFree = 0; idxFree < sizeFreeAxis; idxFree++) {
										freeDimension = freeAxis.get(idxFree);
										freeDimensionType = freeDimension
												.getDimensionType();
										if ((freeDimensionType === sap.firefly.DimensionType.MEASURE_STRUCTURE)
												|| (freeDimensionType === sap.firefly.DimensionType.SECONDARY_STRUCTURE)) {
											exportStructure = this
													.exportDimensionIfOnFreeAxis(freeDimension);
											if (exportStructure) {
												inaDimensionList
														.add(exporter
																.exportDimension(freeDimension));
											}
										} else {
											if (freeDimensionType === sap.firefly.DimensionType.ACCOUNT) {
												exportAccountOnFreeAxis = this
														.exportDimensionIfOnFreeAxis(freeDimension);
												if (exportAccountOnFreeAxis) {
													inaDimensionList
															.add(exporter
																	.exportDimension(freeDimension));
												}
											} else {
												if (freeDimensionType === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
													inaDimensionList
															.add(exporter
																	.exportCalculatedDimension(freeDimension));
												} else {
													if (isOutOfContextBlending) {
														inaDimensionList
																.add(exporter
																		.exportDimension(freeDimension));
													}
												}
											}
										}
									}
								}
							}
						}
						return inaDimensionList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADrillManager",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DRILL_MANAGER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_HIERARCHY_NAVIGATIONS;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var drillManager = modelComponent;
						var size;
						var idxHierNav;
						if (inaList !== null) {
							size = inaList.size();
							for (idxHierNav = 0; idxHierNav < size; idxHierNav++) {
								importer.importDrillOperation(inaList
										.getStructureByIndex(idxHierNav),
										drillManager, context);
							}
						}
						return modelComponent;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var drillManager = modelComponent;
						var inaOperationsList = null;
						var drillOperations = drillManager.getDrillOperations();
						var drillOpCount = drillOperations.size();
						var inaDeltaOperation;
						var deltaDimension;
						var deltaOperation;
						var i;
						var operation;
						if (drillOpCount > 0) {
							inaDeltaOperation = null;
							deltaDimension = null;
							inaOperationsList = sap.firefly.PrList.create();
							if (drillManager.getContext().getQueryModel()
									.supportsHierarchyNavigationDeltaMode()) {
								deltaOperation = drillOperations
										.get(drillOpCount - 1);
								if (deltaOperation.getTargetDimension()
										.isHierarchyNavigationDeltaMode()) {
									deltaDimension = deltaOperation
											.getTargetDimension();
									inaDeltaOperation = exporter
											.exportDrillOperation(deltaOperation);
								}
							}
							for (i = 0; i < drillOpCount; i++) {
								operation = drillOperations.get(i);
								if (operation.getType() === sap.firefly.DrillOperationType.CONTEXT) {
									if ((deltaDimension === null)
											|| (deltaDimension !== operation
													.getTargetDimension())) {
										inaOperationsList
												.add(exporter
														.exportDrillOperation(operation));
									}
								}
							}
							if (inaDeltaOperation !== null) {
								inaOperationsList.add(inaDeltaOperation);
							}
							if (inaOperationsList.isEmpty()) {
								inaOperationsList = null;
							}
						}
						return inaOperationsList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADrillPathElement",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.MemberType.DRILL_PATH_ELEMENT;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var drillManager = parentComponent;
						var queryModel = drillManager.getContext()
								.getQueryModel();
						var fieldName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
						var dimensionName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DIMENSION_NAME);
						var dimension = null;
						var field;
						var element;
						var member;
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(dimensionName)) {
							dimension = queryModel
									.getDimensionByName(dimensionName);
						} else {
							field = queryModel.getFieldByNameOrAlias(fieldName);
							if (field !== null) {
								dimension = field.getDimension();
							} else {
								dimension = queryModel
										.getDimensionByName(fieldName);
								if (dimension !== null) {
									field = dimension.getKeyField();
									fieldName = field.getName();
								}
							}
						}
						element = sap.firefly.QDrillPathElement
								._create(context);
						element.setDimension(dimension);
						member = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_MEMBER);
						element.setName(member);
						element.setFieldName(fieldName);
						return element;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var element = modelComponent;
						var name = element.getName();
						var isNameNull = false;
						var dimension;
						var dimName;
						if (sap.firefly.QImExFlag.DRILL_CONTEXT === sap.firefly.XMath
								.binaryAnd(flags,
										sap.firefly.QImExFlag.DRILL_CONTEXT)) {
							isNameNull = name === null;
						} else {
							isNameNull = sap.firefly.XStringUtils
									.isNullOrEmpty(name);
						}
						if (isNameNull) {
							inaStructure
									.setNullByName(sap.firefly.InAConstants.QY_MEMBER);
						} else {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_MEMBER, name);
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_FIELD_NAME, element
										.getFieldName());
						dimension = element.getDimension();
						dimName = null;
						if (dimension !== null) {
							dimName = dimension.getName();
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DIMENSION_NAME,
								dimName);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInADrillPathOperation",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DRILL_OPERATION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var drillManager = parentComponent;
						var drillState = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DRILL_STATE);
						var drillMember = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_DRILL_MEMBER);
						var drillPath;
						var drillContext;
						var size;
						var idxHierCtx;
						var drillCtx;
						var drillPathElement;
						var drillPathElementMember;
						var drillOperation;
						var level;
						if ((drillMember === null) || (drillState === null)) {
							return null;
						}
						drillPath = sap.firefly.XList.create();
						drillContext = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_DRILL_CONTEXT_MEMBERS);
						if (drillContext !== null) {
							size = drillContext.size();
							for (idxHierCtx = 0; idxHierCtx < size; idxHierCtx++) {
								drillCtx = drillContext
										.getStructureByIndex(idxHierCtx);
								drillPathElement = importer
										.importDrillPathElement(drillCtx,
												drillManager, context);
								drillPath.add(drillPathElement);
							}
						}
						drillPathElementMember = importer
								.importDrillPathElement(drillMember,
										drillManager, context);
						drillPath.add(drillPathElementMember);
						drillOperation = drillManager.setDrillState(drillPath,
								sap.firefly.QInAConverter
										.lookupDrillStateOp(drillState));
						level = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_DRILL_LEVEL, 1);
						drillOperation.setRelativeLevelCount(level);
						return drillOperation;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var operation = modelComponent;
						var inADrillState;
						var relativeLevelCount;
						var drillPath;
						var drillPathCount;
						var element;
						var inaPathElement;
						var inaDrillContextMembers;
						var k;
						if (operation.getType() === sap.firefly.DrillOperationType.CONTEXT) {
							inADrillState = sap.firefly.QInAConverter
									.lookupDrillStateInA(operation
											.getDrillState());
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DRILL_STATE,
									inADrillState);
							relativeLevelCount = operation
									.getRelativeLevelCount();
							if (relativeLevelCount !== 1) {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_DRILL_LEVEL,
												relativeLevelCount);
							}
							if (exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_DATA)) {
								if (operation.getDrillManager()
										.supportsDrillCounter()) {
									inaStructure
											.setIntegerByName(
													sap.firefly.InAConstants.QY_HIERARCHY_NAV_COUNTER,
													operation.getDrillCounter());
								}
							}
							drillPath = operation.getDrillPath();
							drillPathCount = drillPath.size();
							if (drillPathCount > 0) {
								element = drillPath.get(drillPathCount - 1);
								inaPathElement = exporter
										.exportDrillPathElement(element, true);
								inaStructure
										.setElementByName(
												sap.firefly.InAConstants.QY_DRILL_MEMBER,
												inaPathElement);
								if (drillPathCount > 1) {
									inaDrillContextMembers = sap.firefly.PrList
											.create();
									inaStructure
											.setElementByName(
													sap.firefly.InAConstants.QY_DRILL_CONTEXT_MEMBERS,
													inaDrillContextMembers);
									for (k = 0; k < (drillPathCount - 1); k++) {
										element = drillPath.get(k);
										inaPathElement = exporter
												.exportDrillPathElement(
														element, false);
										inaDrillContextMembers
												.add(inaPathElement);
									}
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAExceptions",
				sap.firefly.QInAComponentWithList,
				{
					$statics : {
						getField : function(member, fieldName) {
							var someField = member.getQueryModel()
									.getFieldByName(fieldName);
							var dimensionByName;
							if (someField === null) {
								dimensionByName = member.getQueryModel()
										.getDimensionByName(fieldName);
								if (dimensionByName !== null) {
									someField = dimensionByName.getKeyField();
								}
							}
							if (someField === null) {
								someField = member.getKeyFieldValue()
										.getField();
							}
							return someField;
						},
						importEvaluates : function(inaException, member,
								newException, importer) {
							var inaEvaluates = inaException
									.getListByName(sap.firefly.InAConstants.QY_EVALUATE_ON);
							var size;
							var evalIdx;
							var inaEvaluate;
							var fieldName;
							var someField;
							var valueType;
							var lowValue;
							var newEvaluate;
							var highValue;
							var operatorName;
							var operator;
							if (inaEvaluates === null) {
								return;
							}
							size = inaEvaluates.size();
							for (evalIdx = 0; evalIdx < size; evalIdx++) {
								inaEvaluate = inaEvaluates
										.getStructureByIndex(evalIdx);
								fieldName = inaEvaluate
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								someField = sap.firefly.QInAExceptions
										.getField(member, fieldName);
								if (someField === null) {
									importer
											.addError(
													sap.firefly.ErrorCodes.INVALID_TOKEN,
													sap.firefly.XStringUtils
															.concatenate3(
																	"Could not find field '",
																	fieldName,
																	"'!"));
									return;
								}
								if (inaEvaluate
										.hasValueByName(sap.firefly.InAConstants.QY_LOW) === false) {
									importer
											.addError(
													sap.firefly.ErrorCodes.INVALID_PARAMETER,
													sap.firefly.XString
															.concatenate2(
																	"No low value for field: ",
																	fieldName));
									return;
								}
								valueType = someField.getValueType();
								lowValue = sap.firefly.QInAValueUtils
										.importValueByType(
												importer,
												inaEvaluate,
												sap.firefly.InAConstants.QY_LOW,
												valueType);
								if (importer.hasErrors()) {
									importer
											.addError(
													sap.firefly.ErrorCodes.INVALID_DATATYPE,
													sap.firefly.XString
															.concatenate2(
																	"Unexpected low valuetype for field: ",
																	valueType
																			.getName()));
									return;
								}
								newEvaluate = newException
										.addNewEvaluateWithField(someField,
												lowValue);
								if (inaEvaluate
										.hasValueByName(sap.firefly.InAConstants.QY_HIGH)) {
									highValue = sap.firefly.QInAValueUtils
											.importValueByType(
													importer,
													inaEvaluate,
													sap.firefly.InAConstants.QY_HIGH,
													valueType);
									if (importer.hasErrors()) {
										importer
												.addError(
														sap.firefly.ErrorCodes.INVALID_DATATYPE,
														sap.firefly.XString
																.concatenate2(
																		"Unexpected high valuetype for field: ",
																		valueType
																				.getName()));
										return;
									}
									newEvaluate.setHighValue(highValue);
								}
								newEvaluate
										.setEvaluate(sap.firefly.QExceptionEvalType
												.lookupExceptionEvalType(inaEvaluate
														.getStringByName(sap.firefly.InAConstants.QY_EVALUATE)));
								operatorName = inaEvaluate
										.getStringByName(sap.firefly.InAConstants.QY_COMPARISON);
								operator = sap.firefly.QInAConverter
										.lookupComparison(operatorName);
								if (operator === null) {
									importer
											.addError(
													sap.firefly.ErrorCodes.INVALID_OPERATOR,
													sap.firefly.XStringUtils
															.concatenate3(
																	"Unexpected comparison operator for evaluate: Operator: '",
																	operatorName,
																	"'"));
									return;
								}
								newEvaluate.setOperator(operator);
							}
						},
						importThresholds : function(inaException, newException) {
							var inaThresholds = inaException
									.getListByName(sap.firefly.InAConstants.QY_THRESHOLD);
							var size;
							var thresholdIdx;
							var inaThreshold;
							var alertLevel;
							var newThreshold;
							var isDouble;
							var operator;
							var highDouble;
							var highString;
							if (inaThresholds !== null) {
								size = inaThresholds.size();
								for (thresholdIdx = 0; thresholdIdx < size; thresholdIdx++) {
									inaThreshold = inaThresholds
											.getStructureByIndex(thresholdIdx);
									alertLevel = inaThreshold
											.getIntegerByNameWithDefault(
													sap.firefly.InAConstants.QY_ALERTLEVEL,
													-9999);
									isDouble = inaThreshold
											.hasStringByName(sap.firefly.InAConstants.QY_LOW) === false;
									if (isDouble) {
										newThreshold = newException
												.addNewThreshold(
														inaThreshold
																.getDoubleByName(sap.firefly.InAConstants.QY_LOW),
														sap.firefly.QInAConverter
																.lookupAlertLevel(alertLevel));
									} else {
										newThreshold = newException
												.addNewThresholdWithString(
														inaThreshold
																.getStringByName(sap.firefly.InAConstants.QY_LOW),
														sap.firefly.QInAConverter
																.lookupAlertLevel(alertLevel));
									}
									operator = sap.firefly.QInAConverter
											.lookupComparison(inaThreshold
													.getStringByName(sap.firefly.InAConstants.QY_COMPARISON));
									newThreshold.setOperator(operator);
									if (operator.getNumberOfParameters() === 2) {
										if (isDouble) {
											highDouble = inaThreshold
													.getDoubleByName(sap.firefly.InAConstants.QY_HIGH);
											newThreshold
													.setHighValue(highDouble);
										} else {
											highString = inaThreshold
													.getStringByName(sap.firefly.InAConstants.QY_HIGH);
											newThreshold.setHigh(highString);
										}
									}
									sap.firefly.QInAExceptions.importSettings(
											inaThreshold, newThreshold);
								}
							}
						},
						importSettings : function(inaThreshold, newThreshold) {
							var inaSettings = inaThreshold
									.getListByName(sap.firefly.InAConstants.QY_SETTINGS);
							var size;
							var iSetting;
							var inaSetting;
							var name;
							var priority;
							var value;
							var newSetting;
							if (inaSettings === null) {
								return;
							}
							size = inaSettings.size();
							for (iSetting = 0; iSetting < size; iSetting++) {
								inaSetting = inaSettings
										.getStructureByIndex(iSetting);
								name = inaSetting
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								priority = inaSetting
										.getIntegerByName(sap.firefly.InAConstants.QY_PRIORITY);
								value = inaSetting
										.getStringByName(sap.firefly.InAConstants.QY_VALUE);
								if ((value !== null)
										&& (sap.firefly.XString.isEqual(value,
												"") === false)) {
									newSetting = newThreshold.addNewSetting(
											name, priority);
									newSetting.setValue(value);
								}
							}
						},
						exportEvaluates : function(exception, exporter,
								inaStructure, isBw) {
							var inaEvaluatesList;
							var sizeEvaluates;
							var iEvaluate;
							var inaEvaluateStruct;
							var evaluate;
							var comparisonOperator;
							var comparison;
							if (exception.getEvaluates().isEmpty()) {
								return true;
							}
							inaEvaluatesList = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_EVALUATE_ON);
							sizeEvaluates = exception.getEvaluates().size();
							for (iEvaluate = 0; iEvaluate < sizeEvaluates; iEvaluate++) {
								inaEvaluateStruct = inaEvaluatesList
										.addNewStructure();
								evaluate = exception.getEvaluates().get(
										iEvaluate);
								inaEvaluateStruct.setStringByName(
										sap.firefly.InAConstants.QY_NAME,
										evaluate.getField().getName());
								inaEvaluateStruct.setStringByName(
										sap.firefly.InAConstants.QY_EVALUATE,
										evaluate.getEvaluate().toString());
								comparisonOperator = evaluate.getOperator();
								if ((comparisonOperator === sap.firefly.ComparisonOperator.NOT_BETWEEN)
										&& isBw) {
									comparison = sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN;
								} else {
									comparison = sap.firefly.QInAConverter
											.lookupComparisonInA(comparisonOperator);
								}
								inaEvaluateStruct.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										comparison);
								sap.firefly.QInAValueUtils.exportValue(
										exporter,
										sap.firefly.InAConstants.QY_LOW,
										inaEvaluateStruct, evaluate
												.getLowValue(), evaluate
												.getValueType());
								if (comparisonOperator.getNumberOfParameters() > 1) {
									sap.firefly.QInAValueUtils.exportValue(
											exporter,
											sap.firefly.InAConstants.QY_HIGH,
											inaEvaluateStruct, evaluate
													.getHighValue(), evaluate
													.getValueType());
								}
							}
							return true;
						},
						exportThresholds : function(thresholds, exporter,
								inaStructure, isBw) {
							var inaThresholdsList = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_THRESHOLD);
							var sizeThresholds = thresholds.size();
							var iThreshold;
							var threshold;
							var inaThresholdStruct;
							var comparisonOperator;
							var comparison;
							var isDouble;
							for (iThreshold = 0; iThreshold < sizeThresholds; iThreshold++) {
								threshold = thresholds.get(iThreshold);
								inaThresholdStruct = inaThresholdsList
										.addNewStructure();
								comparisonOperator = threshold.getOperator();
								if ((comparisonOperator === sap.firefly.ComparisonOperator.NOT_BETWEEN)
										&& isBw) {
									comparison = sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN;
								} else {
									comparison = sap.firefly.QInAConverter
											.lookupComparisonInA(comparisonOperator);
								}
								inaThresholdStruct.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										comparison);
								isDouble = threshold.getValueType() === sap.firefly.XValueType.DOUBLE;
								if (threshold.getLowXValue() !== null) {
									if (isDouble) {
										inaThresholdStruct
												.setDoubleByName(
														sap.firefly.InAConstants.QY_LOW,
														threshold.getLowValue());
									} else {
										inaThresholdStruct
												.setStringByName(
														sap.firefly.InAConstants.QY_LOW,
														threshold.getLow());
									}
								}
								if ((threshold.getHighXValue() !== null)
										&& (comparisonOperator
												.getNumberOfParameters() > 1)) {
									if (isDouble) {
										inaThresholdStruct
												.setDoubleByName(
														sap.firefly.InAConstants.QY_HIGH,
														threshold
																.getHighValue());
									} else {
										inaThresholdStruct
												.setStringByName(
														sap.firefly.InAConstants.QY_HIGH,
														threshold.getHigh());
									}
								}
								sap.firefly.QInAExceptions
										.exportSettings(threshold, exporter,
												inaThresholdStruct);
								if ((exporter.m_supportsExceptionSettings === false)
										|| threshold.isEmpty()) {
									inaThresholdStruct
											.setIntegerByName(
													sap.firefly.InAConstants.QY_ALERTLEVEL,
													threshold.getAlertLevel()
															.getLevel());
								}
							}
						},
						exportSettings : function(threshold, exporter,
								inaThresholdStruct) {
							var inaSettings;
							var size;
							var iSetting;
							var setting;
							var inaSetting;
							var settingName;
							var value;
							if ((exporter.m_supportsExceptionSettings === false)
									|| threshold.isEmpty()) {
								return;
							}
							inaSettings = inaThresholdStruct
									.setNewListByName(sap.firefly.InAConstants.QY_SETTINGS);
							size = threshold.size();
							for (iSetting = 0; iSetting < size; iSetting++) {
								setting = threshold.get(iSetting);
								inaSetting = inaSettings.addNewStructure();
								settingName = setting.getName();
								inaSetting.setStringByName(
										sap.firefly.InAConstants.QY_NAME,
										settingName);
								inaSetting.setIntegerByName(
										sap.firefly.InAConstants.QY_PRIORITY,
										setting.getPriority());
								value = setting.getValue();
								if ((value === null)
										|| (sap.firefly.XString.isEqual(value,
												""))) {
									exporter
											.addError(
													sap.firefly.ErrorCodes.INVALID_PARAMETER,
													"Exception Threshold Setting is missing it's value");
								} else {
									inaSetting.setStringByName(
											sap.firefly.InAConstants.QY_VALUE,
											value);
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.EXCEPTION_MANAGER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_EXCEPTIONS;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var member = modelComponent;
						var exceptionManager = member.getQueryModel()
								.getExceptionManager();
						var size;
						var exceptionIdx;
						var inaException;
						var newException;
						var exceptionIsActive;
						var isBeforePostAggregation;
						var isChangeable;
						exceptionManager.removeAllExceptionsOfMeasure(member);
						if (inaList !== null) {
							size = inaList.size();
							for (exceptionIdx = 0; exceptionIdx < size; exceptionIdx++) {
								inaException = inaList
										.getStructureByIndex(exceptionIdx);
								newException = exceptionManager
										.newException(
												inaException
														.getStringByName(sap.firefly.InAConstants.QY_NAME),
												inaException
														.getStringByName(sap.firefly.InAConstants.QY_TEXT));
								newException
										.setEvaluateDefault(sap.firefly.QExceptionEvalType
												.lookupExceptionEvalType(inaException
														.getStringByName(sap.firefly.InAConstants.QY_EVALUATE_DEFAULT)));
								newException
										.setHeaderSettingBase(sap.firefly.QExceptionHeaderSettings
												.lookupExceptionHeaderSetting(inaException
														.getStringByName(sap.firefly.InAConstants.QY_EXCEPTION_HEADER_SETTING)));
								newException.setMeasure(member);
								exceptionIsActive = inaException
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_ACTIVE,
												true);
								newException.setActive(exceptionIsActive);
								isBeforePostAggregation = inaException
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_EVALUATE_BEFORE_POST_AGGREGATION,
												true);
								newException
										.setEvaluationAfterCalculations(!isBeforePostAggregation);
								sap.firefly.QInAExceptions.importEvaluates(
										inaException, member, newException,
										importer);
								sap.firefly.QInAExceptions.importThresholds(
										inaException, newException);
								isChangeable = inaException
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_CHANGEABLE,
												true);
								newException.setIsChangeable(isChangeable);
								exceptionManager.add(newException);
							}
						}
						return exceptionManager;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var structureMember = modelComponent;
						var inaExceptionsList = null;
						var exceptions;
						var sizeExceptions;
						var isBw;
						var iException;
						var exception;
						var inaExceptionStruct;
						var thresholds;
						var headerSetting;
						if (exporter.m_supportsExceptions) {
							exceptions = structureMember.getExceptions();
							sizeExceptions = exceptions.size();
							if (sizeExceptions > 0) {
								inaExceptionsList = sap.firefly.PrList.create();
								isBw = exporter.isAbap(structureMember
										.getQueryModel());
								for (iException = 0; iException < sizeExceptions; iException++) {
									exception = exceptions.get(iException);
									inaExceptionStruct = sap.firefly.PrStructure
											.create();
									if (exporter.m_mode
											.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
										inaExceptionStruct
												.setBooleanByName(
														sap.firefly.InAConstants.QY_ACTIVE,
														exception.isActive());
										inaExceptionStruct
												.setBooleanByName(
														sap.firefly.InAConstants.QY_EVALUATE_BEFORE_POST_AGGREGATION,
														!exception
																.isEvaluatedAfterCalculations());
										inaExceptionStruct
												.setBooleanByName(
														sap.firefly.InAConstants.QY_CHANGEABLE,
														exception
																.isChangeable());
									} else {
										if (isBw) {
											inaExceptionStruct
													.setBooleanByName(
															sap.firefly.InAConstants.QY_ACTIVE,
															exception
																	.isActive());
										} else {
											if (exception.isActive() === false) {
												exporter
														.addWarning(
																sap.firefly.ErrorCodes.IMPORT_EXCEPTION_INACTIVE,
																sap.firefly.XStringUtils
																		.concatenate3(
																				"Exception '",
																				exception
																						.getName(),
																				"' is inactive."));
												break;
											}
										}
									}
									thresholds = exception.getThresholds();
									if (thresholds.isEmpty()
											&& (exporter.m_mode
													.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY) === false)) {
										exporter
												.addWarning(
														sap.firefly.ErrorCodes.IMPORT_EXCEPTION_NO_THRESHOLDS,
														sap.firefly.XStringUtils
																.concatenate3(
																		"Exception '",
																		exception
																				.getName(),
																		"' has no threshold."));
										break;
									}
									sap.firefly.QInAExceptions
											.exportThresholds(thresholds,
													exporter,
													inaExceptionStruct, isBw);
									if (sap.firefly.QInAExceptions
											.exportEvaluates(exception,
													exporter,
													inaExceptionStruct, isBw) === false) {
										break;
									}
									inaExceptionStruct.setStringByName(
											sap.firefly.InAConstants.QY_NAME,
											exception.getName());
									if ((exporter.m_mode
											.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY))
											|| (isBw)) {
										inaExceptionStruct
												.setStringByName(
														sap.firefly.InAConstants.QY_TEXT,
														exception.getText());
									}
									headerSetting = exception
											.getHeaderSetting();
									if (headerSetting !== sap.firefly.QExceptionHeaderSettings.NONE) {
										inaExceptionStruct
												.setStringByName(
														sap.firefly.InAConstants.QY_EXCEPTION_HEADER_SETTING,
														headerSetting.getName());
									}
									inaExceptionStruct
											.setStringByName(
													sap.firefly.InAConstants.QY_EVALUATE_DEFAULT,
													exception
															.getEvaluateDefault()
															.toString());
									inaExceptionsList.add(inaExceptionStruct);
								}
							}
						}
						return inaExceptionsList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAField",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var name = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var fieldAccessor = context.getFieldAccessorSingle();
						var qField = fieldAccessor.getFieldByName(name);
						var inaTextTransformation = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_TEXT_TRANSFORMATION);
						var textTransformation;
						if (inaTextTransformation !== null) {
							textTransformation = sap.firefly.QInAConverter
									.lookupTextTransformation(inaTextTransformation);
							qField.setTextTransformation(textTransformation);
						}
						return qField;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qField = modelComponent;
						var hide = sap.firefly.XMath.binaryAnd(flags,
								sap.firefly.QImExFlag.HIDE) > 0;
						var textTransformationType;
						var inaTextTransformationInA;
						var direction;
						var sorting;
						var dimension;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, qField
										.getName());
						textTransformationType = qField.getTextTransformation();
						if (textTransformationType !== null) {
							inaTextTransformationInA = sap.firefly.QInAConverter
									.lookupTextTransformationInA(textTransformationType);
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_TEXT_TRANSFORMATION,
											inaTextTransformationInA);
						}
						if ((exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_DATA))
								|| (exporter.m_mode === sap.firefly.QModelFormat.INA_VALUE_HELP)) {
							if (exporter.m_supportsExtendedSort === false) {
								if (exporter.m_modelContext === sap.firefly.QContextType.SELECTOR) {
									if (qField.isEqualTo(qField.getDimension()
											.getSelectorKeyField())) {
										direction = qField.getDimension()
												.getSelectorOrder();
										sorting = sap.firefly.QInAConverter
												.lookupSortDirectionInA(direction);
										inaStructure
												.setIntegerByName(
														sap.firefly.InAConstants.QY_SORT_ORDER,
														sorting);
									} else {
										inaStructure
												.setIntegerByName(
														sap.firefly.InAConstants.QY_SORT_ORDER,
														sap.firefly.InAConstants.VA_SORTING_DEFAULT);
									}
								} else {
									if (qField.hasSorting()) {
										direction = qField
												.getResultSetSorting()
												.getDirection();
										sorting = sap.firefly.QInAConverter
												.lookupSortDirectionInA(direction);
										inaStructure
												.setIntegerByName(
														sap.firefly.InAConstants.QY_SORT_ORDER,
														sorting);
									} else {
										if (qField.getDimension().hasSorting()) {
											dimension = qField.getDimension();
											direction = dimension
													.getResultSetSorting()
													.getDirection();
											sorting = sap.firefly.QInAConverter
													.lookupSortDirectionInA(direction);
											inaStructure
													.setIntegerByName(
															sap.firefly.InAConstants.QY_SORT_ORDER,
															sorting);
										} else {
											inaStructure
													.setIntegerByName(
															sap.firefly.InAConstants.QY_SORT_ORDER,
															sap.firefly.InAConstants.VA_SORTING_DEFAULT);
										}
									}
								}
							}
							if (hide) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_OBTAINABILITY,
												sap.firefly.InAConstants.VA_OBTAINABILITY_USER_INTERFACE);
							} else {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_OBTAINABILITY,
												sap.firefly.InAConstants.VA_OBTAINABILITY_ALWAYS);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterAlgebra",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_OPERATOR;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = parentComponent;
						var inaSubSelections = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						var code;
						var setWithChildren;
						var size;
						var i;
						var subSelection;
						var child;
						if (inaSubSelections !== null) {
							code = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_CODE);
							if (sap.firefly.XString.isEqual(code,
									sap.firefly.InAConstants.VA_CODE_AND)) {
								setWithChildren = sap.firefly.QFilterAnd
										._create(context, filterExpression);
							} else {
								if (sap.firefly.XString.isEqual(code,
										sap.firefly.InAConstants.VA_CODE_NOT)) {
									setWithChildren = sap.firefly.QFilterNot
											._create(context, filterExpression);
								} else {
									setWithChildren = sap.firefly.QFilterOr
											._create(context, filterExpression);
								}
							}
							size = inaSubSelections.size();
							for (i = 0; i < size; i++) {
								subSelection = inaSubSelections
										.getStructureByIndex(i);
								child = importer.importFilterElement(
										subSelection, null, filterExpression,
										context);
								if (child !== null) {
									setWithChildren.add(child);
								}
							}
							if (setWithChildren.hasElements()) {
								return setWithChildren;
							}
						}
						return null;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var logicalContainer = modelComponent;
						var type = logicalContainer.getComponentType();
						var inaSubSelections;
						var size;
						var i;
						var qCurrentComponent;
						var inaChildElement;
						if (type.isTypeOf(sap.firefly.FilterComponentType.AND)) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_CODE,
									sap.firefly.InAConstants.VA_CODE_AND);
						} else {
							if (type
									.isTypeOf(sap.firefly.FilterComponentType.OR)) {
								inaStructure.setStringByName(
										sap.firefly.InAConstants.QY_CODE,
										sap.firefly.InAConstants.VA_CODE_OR);
							} else {
								if (type
										.isTypeOf(sap.firefly.FilterComponentType.NOT)) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_CODE,
													sap.firefly.InAConstants.VA_CODE_NOT);
								}
							}
						}
						inaSubSelections = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						size = logicalContainer.size();
						for (i = 0; i < size; i++) {
							qCurrentComponent = logicalContainer.get(i);
							inaChildElement = null;
							if (qCurrentComponent.getOlapComponentType() === sap.firefly.FilterComponentType.TUPLE) {
								inaChildElement = exporter
										.exportFilterTuple(qCurrentComponent);
							} else {
								inaChildElement = exporter
										.exportFilterElement(qCurrentComponent);
							}
							if (inaChildElement !== null) {
								inaSubSelections.add(inaChildElement);
							}
						}
						return inaStructure;
					}
				});
$Firefly.createClass("sap.firefly.QInAFilterAll",
		sap.firefly.QInAComponentWithStructure, {
			getComponentType : function() {
				return sap.firefly.OlapComponentType.SELECTOR;
			},
			importComponentWithStructure : function(importer, inaStructure,
					modelComponent, parentComponent, context) {
				var filterComponent = modelComponent;
				importer.importFixedFilter(inaStructure, filterComponent,
						context);
				importer.importDynamicFilter(inaStructure, filterComponent,
						context);
				importer.importVisibilityFilter(inaStructure, filterComponent,
						context);
				return filterComponent;
			},
			exportComponentWithStructure : function(exporter, modelComponent,
					inaStructure, flags) {
				var filter = modelComponent;
				exporter.exportFixedFilter(filter, inaStructure);
				exporter.exportDynamicFilter(filter, inaStructure);
				exporter.exportVisibilityFilter(filter, inaStructure);
				return inaStructure;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterCellValueOperand",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var low = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_LOW);
						var high;
						var operator;
						var operand;
						if (sap.firefly.XString.isEqual(low, "")) {
							low = null;
						}
						high = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_HIGH);
						if (sap.firefly.XString.isEqual(high, "")) {
							high = null;
						}
						operator = sap.firefly.QInAConverter
								.lookupComparison(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_COMPARISON));
						operand = sap.firefly.QFilterCellValueOperand._create(
								context, null, low, high, operator);
						operand
								.setIsExcluding(inaStructure
										.getBooleanByName(sap.firefly.InAConstants.QY_IS_EXCLUDING));
						return operand;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var cellValueOperand = modelComponent;
						var comparisonOperator;
						var lowValue;
						var highValue;
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_IS_EXCLUDING,
								cellValueOperand.isExcluding());
						comparisonOperator = cellValueOperand
								.getComparisonOperator();
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.QInAConverter
												.lookupComparisonInA(comparisonOperator));
						lowValue = cellValueOperand.getLow();
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_LOW, lowValue);
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(lowValue)
								&& cellValueOperand.isLowVariable()) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_LOW_IS,
									sap.firefly.InAConstants.VA_IS_VARIABLE);
						}
						if (comparisonOperator.getNumberOfParameters() === 2) {
							highValue = cellValueOperand.getHigh();
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_HIGH,
											highValue);
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(highValue)
									&& cellValueOperand.isHighVariable()) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_HIGH_IS,
												sap.firefly.InAConstants.VA_IS_VARIABLE);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterDynamic",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						mergeAndExportSelectionStateList : function(exporter,
								semanticQueryStructure, selectionStateList,
								inaName, mergeCode) {
							var selectionSize = selectionStateList.size();
							var mergedStructure;
							var exportedFilters;
							var i;
							var currentFilterStructureElement;
							var exportedSize;
							var mergedSelectionStructure;
							var inaLogicalOperator;
							var mergedSubSelections;
							var j;
							var exportedFilterSelection;
							if (selectionSize > 0) {
								mergedStructure = null;
								if (selectionSize > 1) {
									exportedFilters = sap.firefly.XList
											.create();
									for (i = 0; i < selectionSize; i++) {
										currentFilterStructureElement = exporter
												.exportFilterExpression(selectionStateList
														.get(i));
										if (currentFilterStructureElement !== null) {
											exportedFilters
													.add(currentFilterStructureElement);
										}
									}
									exportedSize = exportedFilters.size();
									if (exportedSize > 0) {
										if (exportedSize > 1) {
											mergedStructure = sap.firefly.PrStructure
													.create();
											mergedSelectionStructure = mergedStructure
													.setNewStructureByName(sap.firefly.InAConstants.QY_SELECTION);
											inaLogicalOperator = mergedSelectionStructure
													.setNewStructureByName(sap.firefly.InAConstants.QY_LOGICAL_OPERATOR);
											inaLogicalOperator
													.setStringByName(
															sap.firefly.InAConstants.QY_CODE,
															mergeCode);
											mergedSubSelections = inaLogicalOperator
													.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
											for (j = 0; j < exportedSize; j++) {
												exportedFilterSelection = exportedFilters
														.get(j)
														.getStructureByName(
																sap.firefly.InAConstants.QY_SELECTION);
												if (exportedFilterSelection !== null) {
													mergedSubSelections
															.add(exportedFilterSelection);
												}
											}
										} else {
											mergedStructure = exportedFilters
													.get(0);
										}
									}
								} else {
									mergedStructure = exporter
											.exportFilterExpression(selectionStateList
													.get(0));
								}
								if (mergedStructure !== null) {
									semanticQueryStructure.setElementByName(
											inaName, mergedStructure);
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_DYNAMIC;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var inaFilter = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_DYNAMIC_FILTER);
						var filter;
						var filterExpression;
						if (inaFilter === null) {
							inaFilter = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_FILTER);
						}
						filter = parentComponent;
						filterExpression = null;
						if (filter !== null) {
							filterExpression = filter
									.getSelectionStateContainer();
							filterExpression.setComplexSelection(null);
							if (filterExpression.supportsCellValueOperands()) {
								filterExpression.setIsSuppressingNulls(false);
							}
							filter.resetEffectiveFilter();
						}
						if (inaFilter === null) {
							return null;
						}
						filterExpression = importer.importFilterExpression(
								filterExpression, inaFilter, filter, context);
						if ((filter !== null) && (filterExpression !== null)) {
							filter.setSelectionStateContainer(filterExpression);
						}
						return filterExpression;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filter = modelComponent;
						var filterExpressionState = filter
								.getSelectionStateContainer();
						var queryModel = modelComponent.getQueryModel();
						var isAbap = exporter.isAbap(queryModel);
						var inaName;
						var useOnlyInternalFilter;
						var inaSelectionState;
						var selectionList;
						var filterExpressionExternal;
						var filterExpressionTmp;
						var effectiveSelectionContainer;
						var effSelectContainerStructure;
						if (isAbap) {
							inaName = sap.firefly.InAConstants.QY_FILTER;
						} else {
							inaName = sap.firefly.InAConstants.QY_DYNAMIC_FILTER;
						}
						useOnlyInternalFilter = isAbap
								&& exporter.m_isSubmit
								&& queryModel
										.getQueryManager()
										.supportsAnalyticCapabilityActive(
												sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_DYNAMIC_FILTER_IN_SUBMIT);
						if (useOnlyInternalFilter
								|| !exporter.m_mode
										.isTypeOf(sap.firefly.QModelFormat.INA_DATA)) {
							inaSelectionState = exporter
									.exportFilterExpression(filterExpressionState);
							if (inaSelectionState !== null) {
								inaStructure.setElementByName(inaName,
										inaSelectionState);
							}
						} else {
							selectionList = sap.firefly.XList.create();
							if ((filterExpressionState !== null)
									&& filterExpressionState.isAll()) {
								selectionList.add(filterExpressionState);
							}
							filterExpressionExternal = filter
									.getExternSelectionContainer();
							if ((filterExpressionExternal !== null)
									&& filterExpressionExternal.isAll()) {
								selectionList.add(filterExpressionExternal);
							}
							filterExpressionTmp = filter
									.getSelectionTmpContainer();
							if ((filterExpressionTmp !== null)
									&& filterExpressionTmp.isAll()) {
								selectionList.add(filterExpressionTmp);
							}
							if ((filterExpressionExternal !== null)
									&& filterExpressionExternal
											.supportsOnlyCartesianProduct()) {
								effectiveSelectionContainer = filter
										.getEffectiveSelectionContainer();
								effSelectContainerStructure = exporter
										.exportFilterExpression(effectiveSelectionContainer);
								if (effSelectContainerStructure !== null) {
									inaStructure.setElementByName(inaName,
											effSelectContainerStructure);
								} else {
									sap.firefly.QInAFilterDynamic
											.mergeAndExportSelectionStateList(
													exporter,
													inaStructure,
													selectionList,
													inaName,
													sap.firefly.InAConstants.VA_CODE_AND);
								}
							} else {
								sap.firefly.QInAFilterDynamic
										.mergeAndExportSelectionStateList(
												exporter,
												inaStructure,
												selectionList,
												inaName,
												sap.firefly.InAConstants.VA_CODE_AND);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterElement",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_ELEMENT;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = parentComponent;
						var filterElement = modelComponent;
						var inaSetOperand;
						if (inaStructure
								.hasValueByName(sap.firefly.InAConstants.QY_OPERATOR)) {
							filterElement = importer.importFilterAlgebra(
									filterExpression, inaStructure, context);
						} else {
							inaSetOperand = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_SET_OPERAND);
							if (inaSetOperand === null) {
								if (inaStructure
										.hasValueByName(sap.firefly.InAConstants.QY_MEMBER_OPERAND)) {
									filterElement = importer
											.importFilterMemberOperand(
													filterExpression,
													inaStructure, context);
								} else {
									if (inaStructure
											.hasValueByName(sap.firefly.InAConstants.QY_GEOMETRY_OPERAND)) {
										filterElement = importer
												.importFilterGeo(
														filterExpression,
														inaStructure, context);
									}
								}
							} else {
								filterElement = importer.importCartesianList(
										inaSetOperand, filterElement,
										filterExpression, context);
							}
						}
						return filterElement;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filterElement = modelComponent;
						var type = filterElement.getComponentType();
						var inaInnerElement = null;
						var algebraOperation;
						var cartesianList;
						var cartesianProduct;
						var filterOperation;
						var comparisonOperator;
						var field;
						var hierarchyName;
						var inaHierarchy;
						var inaElementList;
						var inaOperation;
						if (type
								.isTypeOf(sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA)) {
							algebraOperation = filterElement;
							if (type === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
								cartesianList = filterElement;
								exporter.exportCartesianList(inaStructure,
										cartesianList);
							} else {
								if (type === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT) {
									cartesianProduct = filterElement;
									exporter.exportFilterCartesianProduct(
											inaStructure, cartesianProduct);
								} else {
									exporter.exportFilterAlgebra(
											algebraOperation, inaStructure);
								}
							}
						} else {
							if (type
									.isTypeOf(sap.firefly.FilterComponentType.OPERATION)) {
								filterOperation = filterElement;
								comparisonOperator = filterOperation
										.getComparisonOperator();
								if (comparisonOperator !== null) {
									if (comparisonOperator
											.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL)) {
										exporter.exportFilterGeo(
												filterOperation, inaStructure);
									} else {
										if (exporter.m_supportsSetOperand) {
											inaInnerElement = sap.firefly.PrStructure
													.create();
											field = filterOperation.getField();
											if (field !== null) {
												inaInnerElement
														.setStringByName(
																sap.firefly.InAConstants.QY_FIELD_NAME,
																field.getName());
												hierarchyName = filterOperation
														.getHierarchyName();
												if (hierarchyName !== null) {
													inaHierarchy = inaInnerElement
															.setNewStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
													inaHierarchy
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	hierarchyName);
												}
												if (filterOperation
														.isConvertToFlatSelection()) {
													inaInnerElement
															.setBooleanByName(
																	sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
																	true);
												}
												inaElementList = inaInnerElement
														.setNewListByName(sap.firefly.InAConstants.QY_ELEMENTS);
												inaOperation = inaElementList
														.addNewStructure();
												exporter.exportFilterOperation(
														inaOperation,
														filterOperation);
												if (inaStructure !== null) {
													inaStructure
															.setElementByName(
																	sap.firefly.InAConstants.QY_SET_OPERAND,
																	inaInnerElement);
												}
											}
										} else {
											exporter.exportFilterMemberOperand(
													filterOperation,
													inaStructure);
										}
									}
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterExpression",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						exportGlobalCellValueOperands : function(exporter,
								filterExpression) {
							var inaGlobalCellValueOperands = null;
							var inaElements;
							var nullSuppression;
							var cellValueOperands;
							var size;
							var i;
							var inaCellValueOperands;
							if (filterExpression.supportsCellValueOperands()) {
								inaElements = sap.firefly.PrList.create();
								if (filterExpression.isSuppressingNulls()) {
									nullSuppression = sap.firefly.QFilterCellValueOperand
											.createForNullSuppression(
													filterExpression
															.getContext(), null);
									inaElements
											.add(exporter
													.exportCellValueOperand(nullSuppression));
								}
								cellValueOperands = filterExpression
										.getCellValueOperands();
								size = cellValueOperands.size();
								for (i = 0; i < size; i++) {
									inaElements
											.add(exporter
													.exportCellValueOperand(cellValueOperands
															.get(i)));
								}
								if (!inaElements.isEmpty()) {
									inaCellValueOperands = sap.firefly.PrStructure
											.create();
									inaCellValueOperands
											.setElementByName(
													sap.firefly.InAConstants.QY_ELEMENTS,
													inaElements);
									inaGlobalCellValueOperands = sap.firefly.PrStructure
											.create();
									inaGlobalCellValueOperands
											.setElementByName(
													sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND,
													inaCellValueOperands);
								}
							}
							return inaGlobalCellValueOperands;
						},
						combineSetOperandWithCellValueOperand : function(
								inaExpression, inaGlobalCellValueOperands) {
							var newInaSelection;
							var inaVisibilityFilter;
							var inaSelection;
							var inaOperator;
							var inaSubSelections;
							var inaSet;
							var newSetOperand;
							if (sap.firefly.QInAFilterExpression
									.isCellOperandEmpty(inaGlobalCellValueOperands)
									&& (!sap.firefly.QInAFilterExpression
											.isSetOperandEmpty(inaExpression))) {
								return inaExpression;
							}
							if ((!sap.firefly.QInAFilterExpression
									.isCellOperandEmpty(inaGlobalCellValueOperands))
									&& sap.firefly.QInAFilterExpression
											.isSetOperandEmpty(inaExpression)) {
								newInaSelection = sap.firefly.PrStructure
										.create();
								newInaSelection.setElementByName(
										sap.firefly.InAConstants.QY_SELECTION,
										inaGlobalCellValueOperands);
								return newInaSelection;
							}
							if ((sap.firefly.QInAFilterExpression
									.isCellOperandEmpty(inaGlobalCellValueOperands))
									&& sap.firefly.QInAFilterExpression
											.isSetOperandEmpty(inaExpression)) {
								return null;
							}
							inaVisibilityFilter = sap.firefly.PrStructure
									.create();
							inaSelection = inaVisibilityFilter
									.setNewStructureByName(sap.firefly.InAConstants.QY_SELECTION);
							inaOperator = inaSelection
									.setNewStructureByName(sap.firefly.InAConstants.QY_OPERATOR);
							inaOperator.setStringByName(
									sap.firefly.InAConstants.QY_CODE,
									sap.firefly.InAConstants.VA_CODE_AND);
							inaSubSelections = inaOperator
									.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
							inaSet = inaExpression
									.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
							if (inaSet === null) {
								newSetOperand = sap.firefly.PrStructure
										.create();
								newSetOperand
										.setElementByName(
												sap.firefly.InAConstants.QY_SET_OPERAND,
												inaExpression);
								inaSubSelections.add(newSetOperand);
							} else {
								inaSubSelections.add(inaSet);
							}
							inaSubSelections.add(inaGlobalCellValueOperands);
							return inaVisibilityFilter;
						},
						isCellOperandEmpty : function(inaFilter) {
							var inaSelection;
							var inaCellOperand;
							if (inaFilter !== null) {
								inaSelection = inaFilter
										.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
								if (inaSelection === null) {
									inaCellOperand = inaFilter
											.getStructureByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
								} else {
									inaCellOperand = inaSelection
											.getStructureByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
								}
								if (inaCellOperand !== null) {
									return inaCellOperand
											.getListByName(
													sap.firefly.InAConstants.QY_ELEMENTS)
											.isEmpty();
								}
							}
							return true;
						},
						isSetOperandEmpty : function(inaFilter) {
							var inaSelection;
							var inaElements;
							if (inaFilter === null) {
								return true;
							}
							inaSelection = inaFilter
									.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
							if (inaSelection === null) {
								inaSelection = inaFilter
										.getStructureByName(sap.firefly.InAConstants.QY_SET_OPERAND);
								if (inaSelection === null) {
									inaElements = inaFilter
											.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
								} else {
									inaElements = inaSelection
											.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
								}
								return sap.firefly.PrUtils
										.isListEmpty(inaElements);
							}
							return inaSelection.getStructureElementNames()
									.isEmpty();
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_EXPRESSION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = modelComponent;
						var version;
						var inaSelection;
						var filterElement;
						var cartesianProduct;
						var inaCellValueOperand;
						var inaFilterAnd;
						var inaSubSelections;
						var inaSubSelectionStructure;
						var inaElements;
						var nullSuppressionReference;
						var size;
						var inaNullSuppression;
						var nullSuppression;
						var startIdx;
						var idx;
						var inaCellElement;
						var operand;
						if (filterExpression === null) {
							filterExpression = sap.firefly.QFilterExpression
									._createByApplication(context,
											parentComponent);
						}
						version = 0;
						inaSelection = null;
						if (inaStructure !== null) {
							inaSelection = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
							if (inaSelection === null) {
								inaSelection = inaStructure
										.getStructureByName(sap.firefly.InAConstants.QY_SELECTION_REPO);
								version = 1;
							}
						}
						filterExpression.setCartesianProduct(null);
						filterExpression.setComplexSelection(null);
						if (inaSelection !== null) {
							filterElement = importer.importFilterElement(
									inaSelection, null, filterExpression,
									context);
							if (filterElement !== null) {
								if (version >= 1) {
									filterExpression
											.setComplexSelection(filterElement);
								} else {
									cartesianProduct = sap.firefly.QFilterUtil
											.convertComplexFilterToCartesian(filterElement);
									if (cartesianProduct !== null) {
										filterExpression
												.setCartesianProduct(cartesianProduct);
									} else {
										filterExpression
												.setComplexSelection(filterElement);
									}
								}
							}
						}
						if (filterExpression.supportsCellValueOperands()) {
							filterExpression.setIsSuppressingNulls(false);
							filterExpression.clearCellValueSelections();
							if (inaStructure !== null) {
								if (importer.m_mode
										.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
									filterExpression
											.setIsSuppressingNulls(inaStructure
													.getBooleanByNameWithDefault(
															sap.firefly.InAConstants.QY_IS_SUPPRESSING_NULLS,
															false));
								}
								if (inaSelection !== null) {
									inaCellValueOperand = inaSelection
											.getStructureByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
									if (inaCellValueOperand === null) {
										inaFilterAnd = inaSelection
												.getStructureByName(sap.firefly.InAConstants.QY_OPERATOR);
										if (inaFilterAnd !== null) {
											inaSubSelections = inaFilterAnd
													.getListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
											if (inaSubSelections.size() === 2) {
												inaSubSelectionStructure = inaSubSelections
														.getStructureByIndex(1);
												inaCellValueOperand = inaSubSelectionStructure
														.getStructureByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
											}
										}
									}
									if (inaCellValueOperand !== null) {
										inaElements = inaCellValueOperand
												.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
										if (inaElements !== null) {
											nullSuppressionReference = sap.firefly.QFilterCellValueOperand
													.createForNullSuppression(
															context, null);
											size = inaElements.size();
											if (size > 0) {
												inaNullSuppression = inaElements
														.getStructureByIndex(0);
												nullSuppression = importer
														.importFilterCellValueOperand(
																inaNullSuppression,
																context);
												startIdx = 0;
												if (nullSuppression
														.isEqualTo(nullSuppressionReference)) {
													filterExpression
															.setIsSuppressingNulls(true);
													startIdx = 1;
												}
												filterExpression
														.clearCellValueSelections();
												for (idx = startIdx; idx < size; idx++) {
													inaCellElement = inaElements
															.getStructureByIndex(idx);
													operand = importer
															.importFilterCellValueOperand(
																	inaCellElement,
																	context);
													filterExpression
															.addCellValueSelection(operand);
												}
											}
										}
									}
								}
							}
						}
						return filterExpression;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						return inaStructure;
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var filterExpression = modelComponent;
						var inaGlobalCellValueOperands = null;
						var filterRootElement;
						var inaSelection;
						var inaStructure;
						if (filterExpression.supportsCellValueOperands()) {
							inaGlobalCellValueOperands = sap.firefly.QInAFilterExpression
									.exportGlobalCellValueOperands(exporter,
											filterExpression);
						}
						filterRootElement = filterExpression
								.getFilterRootElement();
						inaSelection = null;
						if (filterRootElement !== null) {
							if (filterRootElement.getOlapComponentType() === sap.firefly.FilterComponentType.TUPLE) {
								inaSelection = exporter
										.exportFilterTuple(filterRootElement);
							} else {
								inaSelection = exporter
										.exportFilterElement(filterRootElement);
							}
							if ((inaSelection !== null)
									&& !inaSelection.hasElements()) {
								inaSelection = null;
							}
						}
						inaStructure = null;
						if (inaSelection !== null) {
							inaStructure = sap.firefly.PrStructure.create();
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_SELECTION,
									inaSelection);
						}
						if (inaGlobalCellValueOperands !== null) {
							inaStructure = sap.firefly.QInAFilterExpression
									.combineSetOperandWithCellValueOperand(
											inaStructure,
											inaGlobalCellValueOperands);
						}
						if (exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							if (inaStructure === null) {
								inaStructure = sap.firefly.PrStructure.create();
							}
							if (filterExpression.supportsCellValueOperands()) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_IS_SUPPRESSING_NULLS,
												filterExpression
														.isSuppressingNulls());
							}
						}
						return inaStructure;
					}
				});
$Firefly.createClass("sap.firefly.QInAFilterFixed",
		sap.firefly.QInAComponentWithStructure, {
			getComponentType : function() {
				return sap.firefly.OlapComponentType.FILTER_FIXED;
			},
			getTagName : function() {
				return sap.firefly.InAConstants.QY_FIXED_FILTER;
			},
			importComponentWithStructure : function(importer, inaStructure,
					modelComponent, parentComponent, context) {
				var filter;
				var filterExpression;
				if (inaStructure === null) {
					return null;
				}
				filter = parentComponent;
				filterExpression = importer.importFilterExpression(null,
						inaStructure, filter, context);
				if ((filter !== null) && (filterExpression !== null)) {
					filter.setSelectionSpaceContainer(filterExpression);
				}
				return filterExpression;
			},
			exportComponentWithStructure : function(exporter, modelComponent,
					inaStructure, flags) {
				var filter = modelComponent;
				var filterExpression = filter.getSelectionSpaceContainer();
				return exporter.exportFilterExpression(filterExpression);
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterGeo",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						tryCreateGeometry : function(strValue) {
							var value = sap.firefly.XGeometryValue
									.createGeometryValueWithWkt(strValue);
							if (value === null) {
								value = sap.firefly.XStringValue
										.create(strValue);
							}
							return value;
						}
					},
					getComponentType : function() {
						return sap.firefly.FilterComponentType.SPATIAL_FILTER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_GEOMETRY_OPERAND;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = parentComponent;
						var fieldAccessor = context.getFieldAccessorSingle();
						var inaComparison = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_COMPARISON);
						var inaFieldName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
						var inaValue1 = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_VALUE1);
						var comparison;
						var field;
						var geoFilter;
						var firstValue;
						var inaValue2;
						var secondValue;
						var inaValue3;
						var thirdValue;
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(inaComparison)
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(inaFieldName)
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(inaValue1)) {
							comparison = sap.firefly.QInAConverter
									.lookupComparison(inaComparison);
							if (comparison === null) {
								return null;
							}
							if (comparison
									.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL) === false) {
								return null;
							}
							field = fieldAccessor.getFieldByName(inaFieldName);
							if (field === null) {
								return null;
							}
							geoFilter = sap.firefly.QFilterOperation._create(
									null, filterExpression, null);
							geoFilter.setComparisonOperator(comparison);
							geoFilter.setField(field);
							firstValue = sap.firefly.QInAFilterGeo
									.tryCreateGeometry(inaValue1);
							geoFilter.getLow().setValue(firstValue);
							inaValue2 = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_VALUE2);
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(inaValue2)) {
								secondValue = sap.firefly.QInAFilterGeo
										.tryCreateGeometry(inaValue2);
								geoFilter.getHigh().setValue(secondValue);
							}
							inaValue3 = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_VALUE3);
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(inaValue3)) {
								thirdValue = sap.firefly.QInAFilterGeo
										.tryCreateGeometry(inaValue3);
								geoFilter.getThird().setValue(thirdValue);
							}
							return geoFilter;
						}
						return null;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qCoreOperation = modelComponent;
						var comparisonOperator = qCoreOperation
								.getComparisonOperator();
						var field;
						var geoValue1;
						var blendingDataSource;
						var srid;
						var inaBlendingDataSource;
						var geoValue2;
						var geoValue3;
						if (comparisonOperator
								.isTypeOf(sap.firefly.SpatialComparisonOperator.SPATIAL) === false) {
							throw sap.firefly.XException
									.createIllegalStateException("Not a spatial operator");
						}
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.QInAConverter
												.lookupComparisonInA(comparisonOperator));
						field = qCoreOperation.getField();
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_FIELD_NAME, field
										.getName());
						geoValue1 = qCoreOperation.getLow();
						blendingDataSource = qCoreOperation.getDataSource();
						if (blendingDataSource === null) {
							if ((geoValue1 !== null)
									&& (geoValue1.getValue() !== null)) {
								sap.firefly.QInAValueUtils.exportFilterValue(
										exporter,
										sap.firefly.InAConstants.QY_VALUE1,
										inaStructure, geoValue1, geoValue1
												.getValueType());
								srid = geoValue1.getGeometry().getSrid();
								if (exporter.m_supportsSpatialFilterSrid
										&& (srid !== null)) {
									inaStructure.setIntegerByName(
											sap.firefly.InAConstants.QY_SRID,
											srid.getIntegerValue());
								}
							}
						} else {
							if ((geoValue1 !== null)
									&& (geoValue1.getValue() !== null)) {
								sap.firefly.QInAValueUtils.exportFilterValue(
										exporter,
										sap.firefly.InAConstants.QY_VALUE1,
										inaStructure, geoValue1,
										sap.firefly.XValueType.STRING);
							}
							inaBlendingDataSource = sap.firefly.QInADataSource
									.exportDataSource(exporter,
											blendingDataSource, false, null);
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_DATA_SOURCE,
									inaBlendingDataSource);
						}
						geoValue2 = qCoreOperation.getHigh();
						if ((geoValue2 !== null)
								&& (geoValue2.getValue() !== null)) {
							sap.firefly.QInAValueUtils.exportFilterValue(
									exporter,
									sap.firefly.InAConstants.QY_VALUE2,
									inaStructure, geoValue2,
									sap.firefly.XValueType.STRING);
						}
						geoValue3 = qCoreOperation.getThird();
						if ((geoValue3 !== null)
								&& (geoValue3.getValue() !== null)) {
							sap.firefly.QInAValueUtils.exportFilterValue(
									exporter,
									sap.firefly.InAConstants.QY_VALUE3,
									inaStructure, geoValue3,
									sap.firefly.XValueType.STRING);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterMemberOp",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.MEMBER_OPERAND;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_MEMBER_OPERAND;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var inaComparison = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_COMPARISON);
						var comparison;
						var attributeName;
						var field;
						var container;
						var qSetOperation;
						var operand;
						var valueType;
						if (inaComparison === null) {
							return null;
						}
						comparison = sap.firefly.QInAConverter
								.lookupComparison(inaComparison);
						if (comparison === null) {
							importer.addError(
									sap.firefly.ErrorCodes.INVALID_OPERATOR,
									"Unknown comparison operator");
							return null;
						}
						attributeName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_ATTRIBUTE_NAME);
						field = context.getFieldAccessorSingle()
								.getFieldByNameOrAlias(attributeName);
						if (field === null) {
							importer.addError(
									sap.firefly.ErrorCodes.INVALID_TOKEN,
									"Unknown attribute name");
							return null;
						}
						container = parentComponent;
						qSetOperation = sap.firefly.QFilterOperation._create(
								context, container, null);
						qSetOperation.setComparisonOperator(comparison);
						qSetOperation.setField(field);
						operand = qSetOperation.getLow();
						valueType = field.getValueType();
						sap.firefly.QInAValueUtils.importValue(importer,
								operand, inaStructure,
								sap.firefly.InAConstants.QY_VALUE, valueType,
								field);
						return qSetOperation;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qCoreOperation = modelComponent;
						var field = qCoreOperation.getField();
						var valueType = field.getValueType();
						var isMeasureStructure = field.getDimension()
								.isMeasureStructure();
						var comparisonOperator = qCoreOperation
								.getComparisonOperator();
						var comparison;
						if ((comparisonOperator === sap.firefly.ComparisonOperator.NOT_BETWEEN)
								&& exporter.isAbap(field.getQueryModel())) {
							comparison = sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN;
						} else {
							comparison = sap.firefly.QInAConverter
									.lookupComparisonInA(comparisonOperator);
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_COMPARISON,
								comparison);
						if (isMeasureStructure) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_ATTRIBUTE_NAME,
									sap.firefly.InAConstants.QY_MEASURES);
						} else {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									field.getName());
						}
						sap.firefly.QInAValueUtils.exportFilterValue(exporter,
								sap.firefly.InAConstants.QY_VALUE,
								inaStructure, qCoreOperation.getLow(),
								valueType);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterOperation",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						importValue : function(importer, variableContainer,
								field, value, valueType, inaElement,
								parameterName, parameterIsName,
								parameterNavigations) {
							var inaValueIs = inaElement
									.getStringByName(parameterIsName);
							var variableName;
							var variable;
							var filterType;
							var lowNavigations;
							var memberNavigations;
							var lowSize;
							var lowNaviIdx;
							var lowNavi;
							if (sap.firefly.XString.isEqual(
									sap.firefly.InAConstants.VA_IS_VARIABLE,
									inaValueIs)) {
								value
										.setFilterValueType(sap.firefly.XValueType.VARIABLE);
								variableName = inaElement
										.getStringByName(parameterName);
								variable = variableContainer.getVariables()
										.getByKey(variableName);
								if (variable !== null) {
									value.setVariableValue(variable);
								}
							} else {
								filterType = sap.firefly.QInAConverter
										.lookupValueType(inaElement
												.getStringByNameWithDefault(
														sap.firefly.InAConstants.QY_LOW_IS,
														null));
								if ((filterType === sap.firefly.XValueType.CURRENT_MEMBER)
										|| (filterType === sap.firefly.XValueType.VARIABLE)) {
									value.setFilterValueType(filterType);
								}
								if (parameterNavigations !== null) {
									lowNavigations = inaElement
											.getListByName(parameterNavigations);
									if (lowNavigations !== null) {
										memberNavigations = value
												.getMemberNavigations();
										lowSize = lowNavigations.size();
										for (lowNaviIdx = 0; lowNaviIdx < lowSize; lowNaviIdx++) {
											lowNavi = lowNavigations
													.getStructureByIndex(
															lowNaviIdx)
													.getStringByName(
															sap.firefly.InAConstants.QY_FUNCTION);
											memberNavigations
													.add(sap.firefly.QFactory2
															.createMemberNavigation(sap.firefly.CurrentMemberFunction
																	.lookup(lowNavi)));
										}
									}
								}
								sap.firefly.QInAValueUtils.importValue(
										importer, value, inaElement,
										parameterName, valueType, field);
							}
						},
						exportMemberNavigation : function(memberNavigation,
								inaLowNavigation) {
							var parameters;
							var size;
							var inaParameters;
							var idxPara;
							var inaParameter;
							var parameter;
							var value;
							var navigations;
							var inaParameters2;
							var inaParameter2;
							var inaNavigations;
							var naviSize;
							var idxNavi;
							inaLowNavigation.setStringByName(
									sap.firefly.InAConstants.QY_FUNCTION,
									memberNavigation.getMemberFunction()
											.getName());
							parameters = memberNavigation.getParameters();
							if (parameters !== null) {
								size = parameters.size();
								inaParameters = inaLowNavigation
										.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								for (idxPara = 0; idxPara < size; idxPara++) {
									inaParameter = inaParameters
											.addNewStructure();
									parameter = parameters.get(idxPara);
									value = parameter.getValue();
									if (value.getValueType().isNumber()) {
										inaParameter.setDoubleByName(parameter
												.getParameterType(), value
												.getDoubleValue());
									} else {
										inaParameter.setStringByName(parameter
												.getParameterType(), value
												.toString());
									}
								}
							}
							navigations = memberNavigation.getNavigations();
							if (navigations !== null) {
								if (inaLowNavigation
										.hasValueByName(sap.firefly.InAConstants.QY_PARAMETERS)) {
									inaParameters2 = inaLowNavigation
											.getListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								} else {
									inaParameters2 = inaLowNavigation
											.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								}
								inaParameter2 = inaParameters2
										.addNewStructure();
								inaNavigations = inaParameter2
										.setNewListByName(sap.firefly.InAConstants.QY_NAVIGATIONS);
								naviSize = navigations.size();
								for (idxNavi = 0; idxNavi < naviSize; idxNavi++) {
									sap.firefly.QInAFilterOperation
											.exportMemberNavigation(navigations
													.get(idxNavi),
													inaNavigations
															.addNewStructure());
								}
							}
						},
						exportValue : function(exporter, value, valueType,
								inaElement, parameterName, parameterIsName,
								parameterNavigations) {
							var filterType = value.getFilterValueType();
							var variableValue;
							var memberNavigations;
							var memberNavigationSize;
							var inaLowNavigations;
							var mnIdx;
							if (filterType === sap.firefly.XValueType.VARIABLE) {
								variableValue = value.getVariableValue();
								if (variableValue !== null) {
									inaElement
											.setStringByName(
													parameterIsName,
													sap.firefly.InAConstants.VA_IS_VARIABLE);
									inaElement.setStringByName(parameterName,
											variableValue.getName());
								}
							} else {
								if (value.isManualInput()) {
									inaElement
											.setStringByName(
													parameterIsName,
													sap.firefly.InAConstants.VA_IS_MANUAL_INPUT);
								}
								if (filterType === sap.firefly.XValueType.CURRENT_MEMBER) {
									inaElement
											.setStringByName(
													parameterIsName,
													sap.firefly.InAConstants.VA_CURRENT_MEMBER);
								}
								sap.firefly.QInAValueUtils.exportValue(
										exporter, parameterName, inaElement,
										value, valueType);
								if (parameterNavigations !== null) {
									memberNavigations = value
											.getMemberNavigations();
									memberNavigationSize = memberNavigations
											.size();
									if (memberNavigationSize > 0) {
										inaLowNavigations = inaElement
												.setNewListByName(parameterNavigations);
										for (mnIdx = 0; mnIdx < memberNavigationSize; mnIdx++) {
											sap.firefly.QInAFilterOperation
													.exportMemberNavigation(
															memberNavigations
																	.get(mnIdx),
															inaLowNavigations
																	.addNewStructure());
										}
									}
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.FilterComponentType.OPERATION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var inaComparison = inaStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.InAConstants.VA_COMPARISON_EQUAL);
						var comparisonOperator = sap.firefly.QInAConverter
								.lookupComparison(inaComparison);
						var cartesianList;
						var filterExpression;
						var filterOperation;
						var field;
						var fieldValueType;
						var isFuzzyOperator;
						var depth;
						var levelOffset;
						var hierarchyStructure;
						var supplementFields;
						var variableContainer;
						var numberOfParameters;
						var low;
						var high;
						var third;
						if (comparisonOperator === null) {
							importer
									.addError(
											sap.firefly.ErrorCodes.INVALID_OPERATOR,
											sap.firefly.XString
													.concatenate2(
															"Unsupported comparison operator: ",
															inaComparison));
							return null;
						}
						cartesianList = parentComponent;
						filterExpression = cartesianList.getFilterExpression();
						filterOperation = sap.firefly.QFilterOperation._create(
								context, filterExpression, null);
						field = cartesianList.getField();
						filterOperation.setField(field);
						filterOperation
								.setComparisonOperator(comparisonOperator);
						fieldValueType = field.getValueType();
						isFuzzyOperator = comparisonOperator
								.isTypeOf(sap.firefly.ComparisonOperator.LIKE)
								|| comparisonOperator
										.isTypeOf(sap.firefly.ComparisonOperator.MATCH)
								|| comparisonOperator
										.isTypeOf(sap.firefly.ComparisonOperator.NOT_MATCH);
						if (isFuzzyOperator) {
							fieldValueType = sap.firefly.XValueType.STRING;
						}
						if (inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_IS_EXCLUDING,
										false)) {
							filterOperation
									.setSetSign(sap.firefly.SetSign.EXCLUDING);
						} else {
							filterOperation
									.setSetSign(sap.firefly.SetSign.INCLUDING);
						}
						filterOperation.resetDepth();
						depth = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_DEPTH, -1);
						if (depth !== -1) {
							filterOperation.setDepth(depth);
						}
						filterOperation.resetLevelOffset();
						levelOffset = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_LEVEL_OFFSET, -1);
						if (levelOffset !== -1) {
							filterOperation.setLevelOffset(levelOffset);
						}
						hierarchyStructure = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
						if (hierarchyStructure !== null) {
							filterOperation
									.setHierarchyName(hierarchyStructure
											.getStringByName(sap.firefly.InAConstants.QY_NAME));
						}
						if (importer.m_supportsConvertToFlatFilter) {
							filterOperation
									.setConvertToFlatSelection(inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
													false));
						}
						supplementFields = cartesianList.getSupplementFields();
						variableContainer = context.getVariableContainer();
						numberOfParameters = comparisonOperator
								.getNumberOfParameters();
						if (numberOfParameters >= 1) {
							low = filterOperation.getLow();
							sap.firefly.QInAFilterOperation
									.importValue(
											importer,
											variableContainer,
											field,
											low,
											fieldValueType,
											inaStructure,
											sap.firefly.InAConstants.QY_LOW,
											sap.firefly.InAConstants.QY_LOW_IS,
											sap.firefly.InAConstants.QY_LOW_NAVIGATIONS);
							sap.firefly.QInAValueUtils
									.importSupplements(
											importer,
											low,
											inaStructure,
											sap.firefly.InAConstants.QY_LOW_SUPPLEMENTS,
											supplementFields);
						}
						if (numberOfParameters >= 2) {
							high = filterOperation.getHigh();
							sap.firefly.QInAFilterOperation.importValue(
									importer, variableContainer, field, high,
									fieldValueType, inaStructure,
									sap.firefly.InAConstants.QY_HIGH,
									sap.firefly.InAConstants.QY_HIGH_IS, null);
							sap.firefly.QInAValueUtils
									.importSupplements(
											importer,
											high,
											inaStructure,
											sap.firefly.InAConstants.QY_HIGH_SUPPLEMENTS,
											supplementFields);
						}
						if (numberOfParameters >= 3) {
							third = filterOperation.getThird();
							sap.firefly.QInAFilterOperation
									.importValue(
											importer,
											variableContainer,
											field,
											third,
											fieldValueType,
											inaStructure,
											sap.firefly.InAConstants.QY_VALUE3,
											sap.firefly.InAConstants.QY_VALUE3_IS,
											null);
							sap.firefly.QInAValueUtils.importSupplements(
									importer, third, inaStructure, null,
									supplementFields);
						}
						return filterOperation;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filterOperation = modelComponent;
						var field = filterOperation.getField();
						var comparisonOperator;
						var fieldValueType;
						var comparison;
						var hierarchyName;
						var inaHierarchy;
						var numberOfParameters;
						if (field !== null) {
							comparisonOperator = filterOperation
									.getComparisonOperator();
							if (comparisonOperator === null) {
								comparisonOperator = sap.firefly.ComparisonOperator.EQUAL;
							}
							fieldValueType = field.getValueType();
							if (comparisonOperator
									.isTypeOf(sap.firefly.ComparisonOperator.LIKE)
									|| comparisonOperator
											.isTypeOf(sap.firefly.ComparisonOperator.MATCH)
									|| comparisonOperator
											.isTypeOf(sap.firefly.ComparisonOperator.NOT_MATCH)) {
								fieldValueType = sap.firefly.XValueType.STRING;
							}
							if ((comparisonOperator === sap.firefly.ComparisonOperator.NOT_BETWEEN)
									&& exporter.isAbap(field.getQueryModel())) {
								comparison = sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN;
							} else {
								comparison = sap.firefly.QInAConverter
										.lookupComparisonInA(comparisonOperator);
							}
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_COMPARISON,
									comparison);
							if (filterOperation.hasLevelOffset()) {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_LEVEL_OFFSET,
												filterOperation
														.getLevelOffset());
							}
							if (filterOperation.hasDepth()) {
								inaStructure.setIntegerByName(
										sap.firefly.InAConstants.QY_DEPTH,
										filterOperation.getDepth());
							}
							if (filterOperation.getSetSign() === sap.firefly.SetSign.EXCLUDING) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_IS_EXCLUDING,
												true);
							}
							hierarchyName = filterOperation.getHierarchyName();
							if (hierarchyName !== null) {
								inaHierarchy = inaStructure
										.setNewStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
								inaHierarchy.setStringByName(
										sap.firefly.InAConstants.QY_NAME,
										hierarchyName);
							}
							if (exporter.m_supportsConvertToFlatFilter
									&& filterOperation
											.isConvertToFlatSelection()) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
												true);
							}
							numberOfParameters = comparisonOperator
									.getNumberOfParameters();
							if (numberOfParameters >= 1) {
								sap.firefly.QInAFilterOperation
										.exportValue(
												exporter,
												filterOperation.getLow(),
												fieldValueType,
												inaStructure,
												sap.firefly.InAConstants.QY_LOW,
												sap.firefly.InAConstants.QY_LOW_IS,
												sap.firefly.InAConstants.QY_LOW_NAVIGATIONS);
								if (numberOfParameters >= 2) {
									sap.firefly.QInAFilterOperation
											.exportValue(
													exporter,
													filterOperation.getHigh(),
													fieldValueType,
													inaStructure,
													sap.firefly.InAConstants.QY_HIGH,
													sap.firefly.InAConstants.QY_HIGH_IS,
													null);
								}
								if (numberOfParameters >= 3) {
									sap.firefly.QInAFilterOperation
											.exportValue(
													exporter,
													filterOperation.getThird(),
													fieldValueType,
													inaStructure,
													sap.firefly.InAConstants.QY_VALUE3,
													sap.firefly.InAConstants.QY_VALUE3_IS,
													null);
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterTuple",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.TUPLE;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var tupleDetailContainer = modelComponent;
						var inaInnerElement = sap.firefly.PrStructure.create();
						var inaSubSelectionsTuples;
						var tupleStructureInSubSelections;
						var tuplesOperandStructure;
						var fieldNamesInInA;
						var fieldNames;
						var k;
						var tuplesInInA;
						var tuples;
						var l;
						var singleTupleCondition;
						var tuplesData;
						var j;
						inaInnerElement.setStringByName(
								sap.firefly.InAConstants.QY_CODE,
								sap.firefly.InAConstants.VA_CODE_AND);
						inaSubSelectionsTuples = inaInnerElement
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						tupleStructureInSubSelections = inaSubSelectionsTuples
								.addNewStructure();
						tuplesOperandStructure = tupleStructureInSubSelections
								.setNewStructureByName(sap.firefly.InAConstants.QY_TUPLES_OPERAND);
						fieldNamesInInA = tuplesOperandStructure
								.setNewListByName(sap.firefly.InAConstants.QY_TUPLES_FIELDNAMES);
						fieldNames = tupleDetailContainer.getFieldNames();
						for (k = 0; k < fieldNames.size(); k++) {
							fieldNamesInInA.addString(fieldNames.get(k));
						}
						tuplesInInA = tuplesOperandStructure
								.setNewListByName(sap.firefly.InAConstants.QY_TUPLES_TUPLES);
						tuples = tupleDetailContainer.getTuples();
						for (l = 0; l < tuples.size(); l++) {
							singleTupleCondition = tuples.get(l);
							tuplesData = tuplesInInA.addNewList();
							for (j = 0; j < fieldNames.size(); j++) {
								tuplesData.addString(singleTupleCondition
										.get(j));
							}
						}
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_OPERATOR,
								inaInnerElement);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAFilterVisibility",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_VISIBILITY;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_VISIBILITY_FILTER;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filter = parentComponent;
						var filterExpression;
						var selectionContainerVisibility;
						if (filter !== null) {
							filterExpression = filter
									.getSelectionVisibilityContainer();
							filterExpression.setComplexSelection(null);
							if (filterExpression.supportsCellValueOperands()) {
								filterExpression.setIsSuppressingNulls(false);
							}
						}
						if (inaStructure === null) {
							return null;
						}
						selectionContainerVisibility = importer
								.importFilterExpression(null, inaStructure,
										filter, context);
						if ((filter !== null)
								&& (selectionContainerVisibility !== null)) {
							filter
									.setSelectionVisibilityContainer(selectionContainerVisibility);
						}
						return selectionContainerVisibility;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filter = modelComponent;
						var qFilterExpression;
						if (filter.supportsSelectionVisibilityContainer() === false) {
							return null;
						}
						qFilterExpression = null;
						if (exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_DATA)) {
							qFilterExpression = filter
									.getSelectionVisibilityContainer();
						} else {
							qFilterExpression = filter
									.getSelectionVisibilityContainer();
						}
						return exporter
								.exportFilterExpression(qFilterExpression);
					}
				});
$Firefly.createClass("sap.firefly.QInAGenericComponent",
		sap.firefly.QInAComponentWithStructure, {
			getComponentType : function() {
				return sap.firefly.OlapComponentType.OLAP;
			},
			importComponentWithStructure : function(importer, inaStructure,
					modelComponent, parentComponent, context) {
				return null;
			},
			exportComponentWithStructure : function(exporter, modelComponent,
					inaStructure, flags) {
				inaStructure.setStringByName(sap.firefly.InAConstants.QY_NAME,
						modelComponent.getName());
				inaStructure.setStringByName(sap.firefly.InAConstants.QY_TYPE,
						modelComponent.getComponentType().getName());
				return inaStructure;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAHierarchy",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.HIERARCHY;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_HIERARCHY;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						var hierarchyName;
						var hierarchy;
						var dueDate;
						var dueDateIs;
						var isDueDateVariable;
						var dateTo;
						var dateFrom;
						var inaMetadata;
						var isActive;
						var initialDrillLevel;
						var alignment;
						var nodeAlignment;
						var isExpandingBottomUp;
						var nodeCondensation;
						var memberOfPostedNodeVisibility;
						var visibility;
						if (dimension.supportsHierarchy()) {
							if (inaStructure === null) {
								dimension.setHierarchy(null);
							} else {
								if (inaStructure
										.hasStringByName(sap.firefly.InAConstants.QY_NAME)) {
									hierarchyName = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_NAME);
								} else {
									hierarchyName = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_NAME);
								}
								hierarchy = null;
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(hierarchyName)) {
									hierarchy = sap.firefly.QHierarchy.create(
											dimension.getContext(), dimension,
											hierarchyName);
									hierarchy
											.setHierarchyVersion(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_VERSION));
									dueDate = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE);
									dueDateIs = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE_IS);
									isDueDateVariable = ((dueDateIs !== null) && sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_DUE_TO_IS_VARIABLE,
													dueDateIs));
									dimension
											.setUseHierarchyDueDateVariable(isDueDateVariable);
									if (isDueDateVariable) {
										if (sap.firefly.XStringUtils
												.isNullOrEmpty(dueDate)) {
											dimension
													.setHierarchyDueDateVariableName(null);
										} else {
											dimension
													.setHierarchyDueDateVariableName(dueDate);
										}
									} else {
										hierarchy
												.setHierarchyDueDate(sap.firefly.XDate
														.createDateFromStringWithFlag(
																dueDate,
																importer.m_supportsSAPDateFormat));
									}
									dateTo = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DATE_TO);
									hierarchy
											.setDateTo(sap.firefly.XDate
													.createDateFromStringWithFlag(
															dateTo,
															importer.m_supportsSAPDateFormat));
									dateFrom = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_0DATE_FROM);
									hierarchy
											.setDateFrom(sap.firefly.XDate
													.createDateFromStringWithFlag(
															dateFrom,
															importer.m_supportsSAPDateFormat));
									inaMetadata = inaStructure
											.getStructureByName(sap.firefly.InAConstants.QY_METADATA);
									if (inaMetadata !== null) {
										dateTo = inaMetadata
												.getStringByName(sap.firefly.InAConstants.QY_DATE_TO);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(dateTo)) {
											hierarchy
													.setDateTo(sap.firefly.XDate
															.createDateFromStringWithFlag(
																	dateTo,
																	importer.m_supportsSAPDateFormat));
										}
										dateFrom = inaMetadata
												.getStringByName(sap.firefly.InAConstants.QY_0DATE_FROM);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(dateFrom)) {
											hierarchy
													.setDateFrom(sap.firefly.XDate
															.createDateFromStringWithFlag(
																	dateFrom,
																	importer.m_supportsSAPDateFormat));
										}
									}
									dimension.setHierarchy(hierarchy);
									isActive = inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_HIERARCHY_ACTIVE,
													true);
									dimension.setHierarchyActive(isActive);
									dimension
											.setSelectorHierarchyActive(isActive);
								}
								initialDrillLevel = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_INITIAL_DRILL_LEVEL,
												0);
								dimension
										.setInitialDrillLevel(initialDrillLevel);
								dimension
										.setSelectorRootExpandingLevels(initialDrillLevel);
								alignment = sap.firefly.Alignment.DEFAULT_VALUE;
								if (context.getModelCapabilities()
										.supportsExpandBottomUp()) {
									nodeAlignment = inaStructure
											.getStringByNameWithDefault(
													sap.firefly.InAConstants.QY_LOWER_LEVEL_NODE_ALIGNMENT,
													sap.firefly.InAConstants.VA_ALIGNMENT_DEFAULT);
									alignment = sap.firefly.QInAConverter
											.lookupLowerLevelNodeAlignment(nodeAlignment);
									if (inaStructure
											.hasStringByName(sap.firefly.InAConstants.QY_EXPAND_BOTTOM_UP)) {
										isExpandingBottomUp = inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_EXPAND_BOTTOM_UP,
														false);
										if (isExpandingBottomUp) {
											alignment = sap.firefly.Alignment.CHILDREN_ABOVE_PARENT;
										}
									}
								}
								dimension.setLowerLevelNodeAlignment(alignment);
								nodeCondensation = inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_NODE_CONDENSATION,
												false);
								dimension
										.setHasNodeCondensation(nodeCondensation);
								memberOfPostedNodeVisibility = inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_MEMBER_OF_POSTED_NODE_VISIBILITY,
												sap.firefly.InAConstants.VA_RS_VISIBILITY_VISIBLE);
								visibility = sap.firefly.QInAConverter
										.lookupResultSetVisibility(memberOfPostedNodeVisibility);
								dimension
										.setMemberOfPostedNodeVisibility(visibility);
								return hierarchy;
							}
						}
						return null;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var isHierarchyActive;
						var isInactiveDataHierarchy;
						var hierarchyName;
						var initialDrillLevel;
						var alignment;
						var nodeAlignment;
						var nodeCondensation;
						var visibility;
						var memberOfPostedNodeVisibility;
						if (dimension.supportsHierarchy()) {
							isHierarchyActive = dimension.isHierarchyActive();
							isInactiveDataHierarchy = ((isHierarchyActive === false) && exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_DATA));
							hierarchyName = dimension.getHierarchyName();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(hierarchyName)
									&& (isInactiveDataHierarchy === false)) {
								sap.firefly.QInAExportUtil.setNonEmptyString(
										inaStructure,
										sap.firefly.InAConstants.QY_NAME,
										hierarchyName);
								sap.firefly.QInAExportUtil
										.setNonEmptyString(
												inaStructure,
												sap.firefly.InAConstants.QY_HIERARCHY_NAME,
												hierarchyName);
								sap.firefly.QInAExportUtil.setNonEmptyString(
										inaStructure,
										sap.firefly.InAConstants.QY_VERSION,
										dimension.getHierarchyVersion());
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_HIERARCHY_ACTIVE,
												isHierarchyActive);
								if (dimension.useHierarchyDueDateVariable()) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_DUE_DATE_IS,
													sap.firefly.InAConstants.VA_DUE_TO_IS_VARIABLE);
									sap.firefly.QInAExportUtil
											.setNonEmptyString(
													inaStructure,
													sap.firefly.InAConstants.QY_DUE_DATE,
													dimension
															.getHierarchyDueDateVariableName());
								} else {
									sap.firefly.QInAExportUtil
											.setDate(
													exporter,
													inaStructure,
													sap.firefly.InAConstants.QY_DUE_DATE,
													dimension
															.getHierarchyDueDate());
								}
								initialDrillLevel = dimension
										.getInitialDrillLevel();
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_INITIAL_DRILL_LEVEL,
												initialDrillLevel);
								alignment = dimension
										.getLowerLevelNodeAlignment();
								if (dimension.supportsExpandBottomUp()) {
									inaStructure
											.setBooleanByName(
													sap.firefly.InAConstants.QY_EXPAND_BOTTOM_UP,
													alignment === sap.firefly.Alignment.CHILDREN_ABOVE_PARENT);
								}
								if ((dimension.getQueryModel() !== null)
										&& dimension.getQueryModel()
												.supportsExpandBottomUp()) {
									nodeAlignment = sap.firefly.QInAConverter
											.lookupLowerLevelNodeAlignmentInA(alignment);
								} else {
									nodeAlignment = sap.firefly.QInAConverter
											.lookupLowerLevelNodeAlignmentInA2(alignment);
								}
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_LOWER_LEVEL_NODE_ALIGNMENT,
												nodeAlignment);
								nodeCondensation = dimension
										.hasNodeCondensation();
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_NODE_CONDENSATION,
												nodeCondensation);
								visibility = dimension
										.getMemberOfPostedNodeVisibility();
								memberOfPostedNodeVisibility = sap.firefly.QInAConverter
										.lookupResultSetVisibilityInA(visibility);
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_MEMBER_OF_POSTED_NODE_VISIBILITY,
												memberOfPostedNodeVisibility);
								if (dimension.isHierarchyNavigationDeltaMode()) {
									inaStructure
											.setBooleanByName(
													sap.firefly.InAConstants.QY_HIERARCHY_NAVIGATION_DELTA_MODE,
													true);
								}
								return inaStructure;
							}
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMember",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						importQdMemberProperties : function(importer, member,
								inaMember) {
							var inaAggregation;
							var aggregationType;
							var visibility;
							var inaPostAggregation;
							var postAggregationType;
							var inaPostAggregationDimensions;
							var postAggregationSize;
							var postDimIdx;
							var ignoreExternalDimensions;
							var inaIgnoreExternalDimensions;
							var externalSize;
							var idxIgnore;
							member.setAggregationType(null);
							inaAggregation = inaMember
									.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION);
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(inaAggregation)) {
								aggregationType = sap.firefly.QInAConverter
										.lookupAggregationType(inaAggregation);
								member.setAggregationType(aggregationType);
							}
							if (inaMember
									.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_SHIFT)) {
								member
										.setNumericShift(inaMember
												.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_SHIFT));
							}
							if (inaMember
									.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_SCALE)) {
								member
										.setNumericScale(inaMember
												.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_SCALE));
							}
							if (inaMember
									.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_PRECISION)) {
								member
										.setNumericPrecision(inaMember
												.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_PRECISION));
							}
							if (member.getQueryModel()
									.supportsMemberVisibility()) {
								visibility = sap.firefly.QInAConverter
										.lookupResultSetVisibility(inaMember
												.getStringByNameWithDefault(
														sap.firefly.InAConstants.QY_VISIBILITY,
														sap.firefly.InAConstants.VA_VISIBILITY_VISIBLE));
								member.setResultVisibility(visibility);
							}
							inaPostAggregation = inaMember
									.getStringByName(sap.firefly.InAConstants.QY_POST_AGGREGATION);
							postAggregationType = sap.firefly.QInAConverter
									.lookupAggregationType(inaPostAggregation);
							member.setPostAggregationType(postAggregationType);
							if (inaMember
									.hasValueByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_IGNORE_HIERARCHY)) {
								member.setPostAggregationIgnoreHierarchy(true);
							}
							member.clearPostAggregationDimensions();
							inaPostAggregationDimensions = inaMember
									.getListByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_DIMENSIONS);
							if (inaPostAggregationDimensions !== null) {
								postAggregationSize = inaPostAggregationDimensions
										.size();
								for (postDimIdx = 0; postDimIdx < postAggregationSize; postDimIdx++) {
									member
											.addPostAggregationDimensionName(inaPostAggregationDimensions
													.getStringByIndex(postDimIdx));
								}
							}
							if (importer.m_supportsIgnoreExternalDimensions) {
								if (inaMember
										.hasStringByName(sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS)) {
									ignoreExternalDimensions = inaMember
											.getStringByName(sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS);
									if (sap.firefly.XString.isEqual(
											ignoreExternalDimensions, "All")) {
										member
												.setIgnoreAllExternalDimensions(true);
									}
								} else {
									if (inaMember
											.hasValueByName(sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS)) {
										inaIgnoreExternalDimensions = inaMember
												.getListByName(sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS);
										externalSize = inaIgnoreExternalDimensions
												.size();
										for (idxIgnore = 0; idxIgnore < externalSize; idxIgnore++) {
											member
													.addExternalDimensionToIgnore(inaIgnoreExternalDimensions
															.getStringByIndex(idxIgnore));
										}
									}
								}
							}
						},
						exportQd : function(exporter, member, inaMember) {
							var basicAggregationType = member
									.getAggregationType();
							var resultVisibility;
							var presentationSignReversal;
							if (basicAggregationType !== null) {
								inaMember
										.setStringByName(
												sap.firefly.InAConstants.QY_AGGREGATION,
												sap.firefly.QInAConverter
														.lookupAggregationTypeInA(basicAggregationType));
							}
							if (exporter.m_supportsDataCells === false) {
								sap.firefly.QInAMember
										.setIntegerIfNotNull(
												inaMember,
												sap.firefly.InAConstants.QY_NUMERIC_SHIFT,
												member.getNumericShift());
								sap.firefly.QInAMember
										.setIntegerIfNotNull(
												inaMember,
												sap.firefly.InAConstants.QY_NUMERIC_SCALE,
												member.getNumericScale());
								sap.firefly.QInAMember
										.setIntegerIfNotNull(
												inaMember,
												sap.firefly.InAConstants.QY_NUMERIC_PRECISION,
												member.getNumericPrecision());
							}
							if (exporter.m_supportsMemberVisibility) {
								resultVisibility = member.getResultVisibility();
								if (resultVisibility === null) {
									resultVisibility = sap.firefly.ResultVisibility.VISIBLE;
								}
								inaMember
										.setStringByName(
												sap.firefly.InAConstants.QY_VISIBILITY,
												sap.firefly.QInAConverter
														.lookupResultSetVisibilityInA(resultVisibility));
							}
							presentationSignReversal = member
									.getPresentationSignReversal();
							if (presentationSignReversal !== null) {
								inaMember
										.setBooleanByName(
												sap.firefly.InAConstants.QY_PRESENTATION_SIGN_REVERSAL,
												presentationSignReversal
														.getBooleanValue());
							}
							sap.firefly.QInAMember.exportPostAggregation(
									member, inaMember);
							sap.firefly.QInAMember
									.exportIgnoreExternalDimensions(exporter,
											member, inaMember);
							sap.firefly.QInAMember.exportExceptionAggregation(
									member, inaMember);
							return inaMember;
						},
						setIntegerIfNotNull : function(structure, name, value) {
							if (value !== null) {
								structure.setIntegerByName(name, value
										.getIntegerValue());
							}
						},
						exportIgnoreExternalDimensions : function(exporter,
								member, inaMember) {
							var ignoredExternalDimensions;
							var inaIgnoredExternalDimensions;
							var ignoredSize;
							var idxIgnore;
							if (exporter.m_supportsIgnoreExternalDimensions) {
								if (member.isIgnoringAllExternalDimensions()) {
									inaMember
											.setStringByName(
													sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS,
													sap.firefly.InAConstants.VA_IGNORE_EXTERNAL_DIMENSIONS_ALL);
								} else {
									ignoredExternalDimensions = member
											.getIgnoredExternalDimensions();
									if (ignoredExternalDimensions.hasElements()) {
										inaIgnoredExternalDimensions = inaMember
												.setNewListByName(sap.firefly.InAConstants.QY_IGNORE_EXTERNAL_DIMENSIONS);
										ignoredSize = ignoredExternalDimensions
												.size();
										for (idxIgnore = 0; idxIgnore < ignoredSize; idxIgnore++) {
											inaIgnoredExternalDimensions
													.addString(ignoredExternalDimensions
															.get(idxIgnore));
										}
									}
								}
							}
						},
						exportPostAggregation : function(member, inaMember) {
							var postAggregationType = member
									.getPostAggregationType();
							var postAggregationDimensions;
							var inaPostAggregationDimensions;
							var iterator;
							if (postAggregationType !== null) {
								inaMember
										.setStringByName(
												sap.firefly.InAConstants.QY_POST_AGGREGATION,
												sap.firefly.QInAConverter
														.lookupAggregationTypeInA(postAggregationType));
							}
							if (member.isPostAggregationIgnoringHierarchy()) {
								inaMember
										.setBooleanByName(
												sap.firefly.InAConstants.QY_POST_AGGREGATION_IGNORE_HIERARCHY,
												true);
							}
							postAggregationDimensions = member
									.getPostAggregationDimensions();
							if (postAggregationDimensions.hasElements()) {
								inaPostAggregationDimensions = inaMember
										.setNewListByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_DIMENSIONS);
								iterator = postAggregationDimensions
										.getIterator();
								while (iterator.hasNext()) {
									inaPostAggregationDimensions
											.add(sap.firefly.PrString
													.createWithValue(iterator
															.next()));
								}
							}
						},
						exportExceptionAggregation : function(member, inaMember) {
							var exceptionAggregationType;
							var exceptionAggregationDimensions;
							var inaPostAggregationDimensions;
							var padIt;
							if (member.getQueryModel()
									.supportsExceptionAggregationDimsFormulas()) {
								exceptionAggregationType = member
										.getExceptionAggregationType();
								if (exceptionAggregationType !== null) {
									inaMember
											.setStringByName(
													sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION,
													sap.firefly.QInAConverter
															.lookupAggregationTypeInA(exceptionAggregationType));
								}
								exceptionAggregationDimensions = member
										.getExceptionAggregationDimensions();
								if (exceptionAggregationDimensions
										.hasElements()) {
									inaPostAggregationDimensions = inaMember
											.setNewListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
									padIt = exceptionAggregationDimensions
											.getIterator();
									while (padIt.hasNext()) {
										inaPostAggregationDimensions
												.add(sap.firefly.PrString
														.createWithValue(padIt
																.next()));
									}
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.MemberType.ABSTRACT_MEMBER;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = context.getQueryModel();
						var dimension = parentComponent;
						var newMemberType;
						var newInAMemberType;
						var inaSelection;
						var member;
						var inaAggregationType;
						var aggregationType;
						var numericScale;
						var numericPrecision;
						var inaExceptionAggregationDimensions;
						var exceptionDimSize;
						var idx;
						if (dimension === null) {
							dimension = queryModel.getMeasureDimension();
						}
						newMemberType = null;
						if (inaStructure
								.hasValueByName(sap.firefly.InAConstants.QY_MEMBER_TYPE)) {
							newInAMemberType = inaStructure
									.getStringByNameWithDefault(
											sap.firefly.InAConstants.QY_MEMBER_TYPE,
											sap.firefly.InAConstants.QY_MEASURE);
							newMemberType = sap.firefly.QInAConverter
									.lookupMeasureStructureMemberType(newInAMemberType);
							if (newMemberType === null) {
								importer
										.addError(
												sap.firefly.ErrorCodes.INVALID_STATE,
												sap.firefly.XStringUtils
														.concatenate3(
																"MeasureStructure->MemberType unsupported: '",
																newInAMemberType,
																"'"));
								return null;
							}
						} else {
							if (inaStructure
									.hasValueByName(sap.firefly.InAConstants.QY_FORMULA)) {
								newMemberType = sap.firefly.MemberType.FORMULA;
							} else {
								inaSelection = inaStructure
										.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
								if (inaSelection !== null) {
									if (inaSelection
											.hasValueByName(sap.firefly.InAConstants.QY_OPERATOR)) {
										newMemberType = sap.firefly.MemberType.RESTRICTED_MEASURE;
									} else {
										newMemberType = sap.firefly.MemberType.MEASURE;
									}
								} else {
									newMemberType = sap.firefly.MemberType.MEASURE;
								}
							}
						}
						if (newMemberType === sap.firefly.MemberType.RESTRICTED_MEASURE) {
							member = importer.importRestrictedMeasure(
									inaStructure, dimension, context);
						} else {
							if (newMemberType === sap.firefly.MemberType.FORMULA) {
								member = importer.importFormulaMeasure(
										inaStructure, dimension, queryModel);
							} else {
								if (newMemberType === sap.firefly.MemberType.MEASURE) {
									member = importer.importBasicMeasure(
											inaStructure, dimension, context);
								} else {
									member = null;
								}
							}
						}
						if (member !== null) {
							sap.firefly.QInAMember.importQdMemberProperties(
									importer, member, inaStructure);
							if (inaStructure
									.hasValueByName(sap.firefly.InAConstants.QY_PRESENTATION_SIGN_REVERSAL)) {
								member
										.setPresentationSignReversal(inaStructure
												.getBooleanByName(sap.firefly.InAConstants.QY_PRESENTATION_SIGN_REVERSAL));
							}
							inaAggregationType = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_MEASURES_AGGREGATION,
											-1);
							aggregationType = sap.firefly.QInAConverter
									.lookupAggregationType2(inaAggregationType);
							if (aggregationType !== null) {
								member.setAggregationType(aggregationType);
							}
							numericScale = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_MEASURES_FRACT_DIGITS,
											-1);
							if (numericScale !== -1) {
								member.setNumericScale(numericScale);
							}
							numericPrecision = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_MEASURES_DIGITS,
											-1);
							if (numericPrecision !== -1) {
								member.setNumericPrecision(numericPrecision);
							}
							importer.importExceptions(inaStructure, member);
							if (((parentComponent !== null)
									&& (parentComponent.getContext()
											.getQueryModel() !== null) && parentComponent
									.getContext().getQueryModel()
									.supportsExceptionAggregationDimsFormulas())
									|| importer.m_supportsExceptionAggregationDimsFormulas) {
								member.clearExceptionAggregationDimensions();
								member.setExceptionAggregationType(null);
								inaExceptionAggregationDimensions = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
								if (inaExceptionAggregationDimensions !== null) {
									exceptionDimSize = inaExceptionAggregationDimensions
											.size();
									for (idx = 0; idx < exceptionDimSize; idx++) {
										member
												.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions
														.getStringByIndex(idx));
									}
								}
								member
										.setExceptionAggregationType(sap.firefly.QInAConverter
												.lookupAggregationType(inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION)));
							}
						}
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var componentType = modelComponent.getComponentType();
						var member;
						var inaMemberType;
						if (componentType
								.isTypeOf(sap.firefly.MemberType.MEASURE)) {
							member = modelComponent;
							exporter.exportExceptions(inaStructure, member);
							if (componentType === sap.firefly.MemberType.BASIC_MEASURE) {
								exporter.exportBasicMeasure(modelComponent,
										inaStructure);
							} else {
								if (componentType === sap.firefly.MemberType.FORMULA) {
									exporter.exportFormulaMeasure(
											modelComponent, inaStructure);
								} else {
									if (componentType === sap.firefly.MemberType.RESTRICTED_MEASURE) {
										exporter.exportRestrictedMeasure(
												modelComponent, inaStructure);
									}
								}
							}
							sap.firefly.QInAMember.exportQd(exporter, member,
									inaStructure);
							if (exporter.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
								inaMemberType = sap.firefly.QInAConverter
										.lookupMeasureStructureMemberTypeIna(member
												.getMemberType());
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_MEMBER_TYPE,
												inaMemberType);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMemberBasicMeasure",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.MemberType.BASIC_MEASURE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = parentComponent;
						var newMemberName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var newMemberText = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
						var keyField;
						var keyName;
						var textField;
						var textName;
						var memberOperand;
						var isFilterOnMeasures;
						var isFilterEqual;
						var structureMember;
						var member;
						var inaExceptionAggregationDimensions;
						var exceptionSize;
						var idx;
						var exceptionAggregation;
						var inaAggregationDimension;
						if ((newMemberName === null)
								&& (newMemberText === null)) {
							keyField = dimension.getKeyField();
							keyName = keyField.getName();
							newMemberName = inaStructure
									.getStringByName(keyName);
							textField = dimension.getTextField();
							textName = null;
							if (textField !== null) {
								textName = textField.getName();
							}
							newMemberText = inaStructure
									.getStringByName(textName);
						}
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(newMemberName)) {
							memberOperand = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_MEMBER_OPERAND);
							if (memberOperand !== null) {
								isFilterOnMeasures = sap.firefly.XString
										.isEqual(
												memberOperand
														.getStringByName(sap.firefly.InAConstants.QY_ATTRIBUTE_NAME),
												sap.firefly.InAConstants.QY_MEASURES);
								isFilterEqual = sap.firefly.QInAConverter
										.lookupComparison(memberOperand
												.getStringByName(sap.firefly.InAConstants.QY_COMPARISON)) === sap.firefly.ComparisonOperator.EQUAL;
								if (isFilterOnMeasures && isFilterEqual) {
									newMemberName = memberOperand
											.getStringByName(sap.firefly.InAConstants.QY_VALUE);
								}
							}
						}
						structureMember = dimension
								.getStructureMember(newMemberName);
						member = structureMember;
						if ((member === null) && (newMemberName !== null)) {
							if (inaStructure
									.hasValueByName(sap.firefly.InAConstants.QY_SELECTION) === false) {
								member = dimension.addNewBasicMeasure(
										newMemberName, newMemberText);
							}
						}
						if (member !== null) {
							if (dimension.getQueryModel()
									.supportsExceptionAggregationDimsFormulas()) {
								member.clearExceptionAggregationDimensions();
								member.setExceptionAggregationType(null);
								inaExceptionAggregationDimensions = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
								if (inaExceptionAggregationDimensions !== null) {
									exceptionSize = inaExceptionAggregationDimensions
											.size();
									for (idx = 0; idx < exceptionSize; idx++) {
										member
												.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions
														.getStringByIndex(idx));
									}
								}
								exceptionAggregation = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION);
								member
										.setExceptionAggregationType(sap.firefly.QInAConverter
												.lookupAggregationType(exceptionAggregation));
							} else {
								inaAggregationDimension = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(inaAggregationDimension)) {
									member
											.setAggregationDimensionName(inaAggregationDimension);
								}
							}
							sap.firefly.QInAMember.importQdMemberProperties(
									importer, member, inaStructure);
							importer.importExceptions(inaStructure, member);
						}
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var basicMeasure = modelComponent;
						var memberOperandElement;
						var basicAggregationType;
						var basicAggregationDimensionName;
						var value;
						var fieldValueType;
						var measureSorting;
						if (basicMeasure.getDimension().getDimensionType() === sap.firefly.DimensionType.ACCOUNT) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									basicMeasure.getName());
							return inaStructure;
						}
						memberOperandElement = sap.firefly.PrStructure.create();
						memberOperandElement.setStringByName(
								sap.firefly.InAConstants.QY_ATTRIBUTE_NAME,
								sap.firefly.InAConstants.QY_MEASURES);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_MEMBER_OPERAND,
								memberOperandElement);
						basicAggregationType = basicMeasure
								.getAggregationType();
						if (basicAggregationType !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_AGGREGATION,
									basicAggregationType.toString());
						}
						if (basicMeasure.getQueryModel()
								.supportsExceptionAggregationDimsFormulas() === false) {
							basicAggregationDimensionName = basicMeasure
									.getAggregationDimensionName();
							if (basicAggregationDimensionName !== null) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION,
												basicAggregationDimensionName);
							}
						}
						value = basicMeasure.getKeyFieldValue();
						fieldValueType = value.getValueType();
						memberOperandElement
								.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.QInAConverter
												.lookupComparisonInA(sap.firefly.ComparisonOperator.EQUAL));
						sap.firefly.QInAValueUtils.exportValue(exporter,
								sap.firefly.InAConstants.QY_VALUE,
								memberOperandElement, value, fieldValueType);
						if (exporter.m_supportsExtendedSort === false) {
							measureSorting = basicMeasure.getQueryModel()
									.getSortingManager().getMeasureSorting(
											basicMeasure, false);
							if (measureSorting !== null) {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_SORT_ORDER,
												sap.firefly.QInAConverter
														.lookupSortDirectionInA(measureSorting
																.getDirection()));
							} else {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_SORT_ORDER,
												sap.firefly.InAConstants.VA_SORTING_DEFAULT);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMemberFormulaMeasure",
				sap.firefly.QInAComponentWithStructure,
				{
					$statics : {
						importQdFormula : function(importer, structure,
								inaFormula, formulaItemx, context) {
							var inaFunction;
							var formulaItem;
							var functionName;
							var functionParameters;
							var newFormulaFunction;
							var paramSize;
							var paraIdx;
							var funcPara;
							var solveOrder;
							var constPara;
							var formulaConstant;
							var valueIs;
							var value;
							var queryModel;
							var variableManager;
							var variable;
							var valueTypePara;
							var valueIsNull;
							var constUnit;
							var constCurrency;
							var memberPara;
							var formulaMember;
							var memberParaName;
							var attribute;
							var attributeName;
							var formulaAttribute;
							if (inaFormula === null) {
								return null;
							}
							inaFunction = inaFormula
									.getStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
							formulaItem = formulaItemx;
							if (inaFunction !== null) {
								functionName = inaFunction
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								functionParameters = inaFunction
										.getListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								newFormulaFunction = sap.firefly.QFactory2
										.newFormulaFunction(context);
								if (functionParameters !== null) {
									newFormulaFunction
											.setFunctionName(functionName);
									paramSize = functionParameters.size();
									for (paraIdx = 0; paraIdx < paramSize; paraIdx++) {
										funcPara = functionParameters
												.getStructureByIndex(paraIdx);
										sap.firefly.QInAMemberFormulaMeasure
												.importQdFormula(importer,
														structure, funcPara,
														newFormulaFunction,
														context);
									}
								}
								solveOrder = inaFormula
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_SOLVE_ORDER,
												0);
								newFormulaFunction.setSolveOrder(solveOrder);
								if (formulaItem === null) {
									formulaItem = newFormulaFunction;
								} else {
									(formulaItem).add(newFormulaFunction);
								}
							} else {
								constPara = inaFormula
										.getStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
								if (constPara !== null) {
									formulaConstant = sap.firefly.QFactory2
											.newFormulaConstant(context);
									valueIs = constPara
											.getStringByName(sap.firefly.InAConstants.QY_VALUE_IS);
									if (sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE,
													valueIs)) {
										value = constPara
												.getStringByName(sap.firefly.InAConstants.QY_VALUE);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(value)) {
											queryModel = structure
													.getQueryModel();
											variableManager = queryModel
													.getVariableManager();
											variable = variableManager
													.getVariables().getByKey(
															value);
											formulaConstant
													.setVariable(variable);
										}
										if (formulaItem === null) {
											formulaItem = formulaConstant;
										} else {
											(formulaItem).add(formulaConstant);
										}
									} else {
										valueTypePara = constPara
												.getStringByName(sap.firefly.InAConstants.QY_VALUE_TYPE);
										valueIsNull = constPara
												.getElementByName(
														sap.firefly.InAConstants.QY_VALUE)
												.getType() === sap.firefly.PrElementType.THE_NULL;
										if (sap.firefly.XString
												.isEqual(
														valueTypePara,
														sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER)) {
											if (valueIsNull) {
												formulaConstant
														.setNullValue(sap.firefly.XValueType.DOUBLE);
											} else {
												formulaConstant
														.setDoubleValue(constPara
																.getDoubleByName(sap.firefly.InAConstants.QY_VALUE));
											}
										} else {
											if (sap.firefly.XString
													.isEqual(
															valueTypePara,
															sap.firefly.InAConstants.VA_VALUE_TYPE_STRING)) {
												if (valueIsNull) {
													formulaConstant
															.setNullValue(sap.firefly.XValueType.STRING);
												} else {
													formulaConstant
															.setStringValue(constPara
																	.getStringByName(sap.firefly.InAConstants.QY_VALUE));
												}
											} else {
												if (sap.firefly.XString
														.isEqual(
																valueTypePara,
																sap.firefly.InAConstants.VA_VALUE_TYPE_BOOL)) {
													if (valueIsNull) {
														formulaConstant
																.setNullValue(sap.firefly.XValueType.BOOLEAN);
													} else {
														formulaConstant
																.setBooleanValue(constPara
																		.getBooleanByName(sap.firefly.InAConstants.QY_VALUE));
													}
												} else {
													importer
															.addError(
																	sap.firefly.ErrorCodes.INVALID_TOKEN,
																	"Constant value type is not supported");
													return null;
												}
											}
										}
										constUnit = constPara
												.getStringByName(sap.firefly.InAConstants.QY_UNIT);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(constUnit)) {
											formulaConstant.setUnit(constUnit);
										}
										constCurrency = constPara
												.getStringByName(sap.firefly.InAConstants.QY_CURRENCY);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(constCurrency)) {
											formulaConstant
													.setCurrency(constCurrency);
										}
										if (formulaItem === null) {
											formulaItem = formulaConstant;
										} else {
											(formulaItem).add(formulaConstant);
										}
									}
								} else {
									memberPara = inaFormula
											.getStructureByName(sap.firefly.InAConstants.QY_MEMBER);
									if (memberPara !== null) {
										formulaMember = sap.firefly.QFactory2
												.newFormulaMember(context);
										memberParaName = memberPara
												.getStringByName(sap.firefly.InAConstants.QY_NAME);
										formulaMember
												.setMemberName(memberParaName);
										formulaMember
												.setDimensionName(memberPara
														.getStringByName(sap.firefly.InAConstants.QY_DIMENSION));
										if (formulaItem === null) {
											formulaItem = formulaMember;
										} else {
											(formulaItem).add(formulaMember);
										}
									} else {
										attribute = inaFormula
												.getStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_VALUE);
										if (attribute !== null) {
											attributeName = attribute
													.getStringByName(sap.firefly.InAConstants.QY_NAME);
											formulaAttribute = sap.firefly.QFactory2
													.newFormulaAttributeWithName(
															context,
															attributeName);
											if (formulaItem === null) {
												formulaItem = formulaAttribute;
											} else {
												(formulaItem)
														.add(formulaAttribute);
											}
										}
									}
								}
							}
							return formulaItem;
						},
						buildFormula : function(exporter, formulaMeasure,
								inaContainer) {
							var componentType;
							var fic;
							var constStructure;
							var ficUnit;
							var ficCurrency;
							var fio;
							var opStructure;
							var theOperator;
							var parameters;
							var leftSide;
							var rightSide;
							var fif;
							var funcStructure;
							var funcParameters;
							var i;
							var iqFormulaItem;
							var parameter;
							var solveOrder;
							var fim;
							var memberStructure;
							var memberVariable;
							var fia;
							var inaAttributeValue;
							if (formulaMeasure !== null) {
								componentType = formulaMeasure
										.getComponentType();
								if (componentType === sap.firefly.OlapComponentType.FORMULA_CONSTANT) {
									fic = formulaMeasure;
									constStructure = inaContainer
											.setNewStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
									ficUnit = fic.getUnit();
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(ficUnit)) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_UNIT,
														ficUnit);
									}
									ficCurrency = fic.getCurrency();
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(ficCurrency)) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_CURRENCY,
														ficCurrency);
									}
									sap.firefly.QInAMemberFormulaMeasure
											.setFormulaConstantValue(
													constStructure, fic);
								} else {
									if (componentType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
										fio = formulaMeasure;
										opStructure = inaContainer
												.setNewStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
										theOperator = fio.getOperator();
										opStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_NAME,
														theOperator
																.getDisplayString());
										parameters = opStructure
												.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
										leftSide = parameters.addNewStructure();
										sap.firefly.QInAMemberFormulaMeasure
												.buildFormula(exporter, fio
														.getLeftSide(),
														leftSide);
										rightSide = parameters
												.addNewStructure();
										sap.firefly.QInAMemberFormulaMeasure
												.buildFormula(exporter, fio
														.getRightSide(),
														rightSide);
									} else {
										if (componentType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
											fif = formulaMeasure;
											funcStructure = inaContainer
													.setNewStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
											funcStructure
													.setStringByName(
															sap.firefly.InAConstants.QY_NAME,
															fif
																	.getFunctionName());
											funcParameters = funcStructure
													.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
											for (i = 0; i < fif.size(); i++) {
												iqFormulaItem = fif.get(i);
												parameter = funcParameters
														.addNewStructure();
												sap.firefly.QInAMemberFormulaMeasure
														.buildFormula(exporter,
																iqFormulaItem,
																parameter);
											}
											solveOrder = fif.getSolveOrder();
											if (solveOrder !== 0) {
												inaContainer
														.setIntegerByName(
																sap.firefly.InAConstants.QY_SOLVE_ORDER,
																solveOrder);
											}
										} else {
											if (componentType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
												fim = formulaMeasure;
												memberStructure = inaContainer
														.setNewStructureByName(sap.firefly.InAConstants.QY_MEMBER);
												memberVariable = fim
														.getVariable();
												if (memberVariable !== null) {
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	fim
																			.getVariable()
																			.getName());
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME_IS,
																	sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE);
												} else {
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	fim
																			.getMemberName());
													memberStructure
															.setStringByNameNotNull(
																	sap.firefly.InAConstants.QY_DIMENSION,
																	fim
																			.getDimensionName());
												}
											} else {
												if (componentType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
													fia = formulaMeasure;
													inaAttributeValue = inaContainer
															.setNewStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_VALUE);
													inaAttributeValue
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	fia
																			.getFieldName());
												}
											}
										}
									}
								}
							}
						},
						setFormulaConstantValue : function(constStructure, fic) {
							var valueIsNull = fic.getValue() === null;
							var variable = fic.getVariable();
							var valueType;
							var timeSpanValue;
							if (valueIsNull && (variable === null)) {
								constStructure
										.setNullByName(sap.firefly.InAConstants.QY_VALUE);
							}
							valueType = fic.getValueType();
							if (valueType === sap.firefly.XValueType.INTEGER) {
								constStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_VALUE_TYPE,
												sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
								if (valueIsNull === false) {
									constStructure.setIntegerByName(
											sap.firefly.InAConstants.QY_VALUE,
											fic.getIntegerValue());
								}
							} else {
								if ((valueType === sap.firefly.XValueType.DOUBLE)
										|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
									constStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_VALUE_TYPE,
													sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
									if (valueIsNull === false) {
										constStructure
												.setDoubleByName(
														sap.firefly.InAConstants.QY_VALUE,
														fic.getDoubleValue());
									}
								} else {
									if (valueType === sap.firefly.XValueType.LONG) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_VALUE_TYPE,
														sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
										if (valueIsNull === false) {
											constStructure
													.setLongByName(
															sap.firefly.InAConstants.QY_VALUE,
															fic.getLongValue());
										}
									} else {
										if (valueType === sap.firefly.XValueType.STRING) {
											constStructure
													.setStringByName(
															sap.firefly.InAConstants.QY_VALUE_TYPE,
															sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
											if (valueIsNull === false) {
												constStructure
														.setStringByName(
																sap.firefly.InAConstants.QY_VALUE,
																fic
																		.getStringValue());
											}
										} else {
											if (valueType === sap.firefly.XValueType.BOOLEAN) {
												constStructure
														.setStringByName(
																sap.firefly.InAConstants.QY_VALUE_TYPE,
																sap.firefly.InAConstants.VA_VALUE_TYPE_BOOL);
												if (valueIsNull === false) {
													constStructure
															.setBooleanByName(
																	sap.firefly.InAConstants.QY_VALUE,
																	fic
																			.getBooleanValue());
												}
											} else {
												if (valueType === sap.firefly.XValueType.DATE) {
													constStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_VALUE_TYPE,
																	sap.firefly.InAConstants.VA_VALUE_TYPE_DATE);
													if (valueIsNull === false) {
														constStructure
																.setStringByName(
																		sap.firefly.InAConstants.QY_VALUE,
																		fic
																				.getDateValue()
																				.toString());
													}
												} else {
													if (valueType === sap.firefly.XValueType.DATE_TIME) {
														constStructure
																.setStringByName(
																		sap.firefly.InAConstants.QY_VALUE_TYPE,
																		sap.firefly.InAConstants.VA_VALUE_TYPE_DATE);
														if (valueIsNull === false) {
															constStructure
																	.setStringByName(
																			sap.firefly.InAConstants.QY_VALUE,
																			fic
																					.getDateTimeValue()
																					.toString());
														}
													} else {
														if (valueType
																.isSpatial()) {
															constStructure
																	.setStringByName(
																			sap.firefly.InAConstants.QY_VALUE_TYPE,
																			sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
															if (valueIsNull === false) {
																constStructure
																		.setStringByName(
																				sap.firefly.InAConstants.QY_VALUE,
																				fic
																						.getGeometry()
																						.toWKT());
															}
														} else {
															if (valueType === sap.firefly.XValueType.TIMESPAN) {
																constStructure
																		.setStringByName(
																				sap.firefly.InAConstants.QY_VALUE_TYPE,
																				sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
																if (valueIsNull === false) {
																	timeSpanValue = fic
																			.getTimeSpanValue();
																	constStructure
																			.setStringByName(
																					sap.firefly.InAConstants.QY_VALUE,
																					timeSpanValue
																							.toString());
																}
															} else {
																if (valueType === sap.firefly.XValueType.VARIABLE) {
																	if (variable !== null) {
																		constStructure
																				.setStringByName(
																						sap.firefly.InAConstants.QY_VALUE,
																						variable
																								.getName());
																	}
																	constStructure
																			.setStringByName(
																					sap.firefly.InAConstants.QY_VALUE_IS,
																					sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.MemberType.FORMULA;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = parentComponent;
						var queryModel = context.getQueryModel();
						var newMemberName;
						var newMemberText;
						var keyField;
						var keyName;
						var textField;
						var textName;
						var member;
						var inaFormula;
						var importFormula;
						if (dimension === null) {
							dimension = queryModel.getMeasureDimension();
						}
						newMemberName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						newMemberText = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
						if ((newMemberName === null)
								&& (newMemberText === null)) {
							if (dimension !== null) {
								keyField = dimension.getKeyField();
								keyName = keyField.getName();
								newMemberName = inaStructure
										.getStringByName(keyName);
								textField = dimension.getTextField();
								textName = null;
								if (textField !== null) {
									textName = textField.getName();
								}
								newMemberText = inaStructure
										.getStringByName(textName);
							}
						}
						member = sap.firefly.QFormulaMeasure
								._createFormulaMeasure(context, queryModel,
										dimension);
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(newMemberName)
								&& sap.firefly.XStringUtils
										.isNullOrEmpty(newMemberText)) {
							member
									.setName(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_NAME));
							member
									.setText(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
						} else {
							member.setName(newMemberName);
							member.setText(newMemberText);
						}
						inaFormula = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_FORMULA);
						importFormula = sap.firefly.QInAMemberFormulaMeasure
								.importQdFormula(importer, dimension,
										inaFormula, null, context);
						sap.firefly.QInAMember.importQdMemberProperties(
								importer, member, inaStructure);
						importer.importExceptions(inaStructure, member);
						member.setFormula(importFormula);
						if (member.supportsCalculatedBeforeAggregation()) {
							member
									.setIsCalculatedBeforeAggregation(sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_EXECUTION_STEP_CALCULATION_BEFORE_AGGREGATION,
													inaStructure
															.getStringByName(sap.firefly.InAConstants.QY_EXECUTION_STEP)));
						}
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var formulaMeasure = modelComponent;
						var text;
						var isAbap;
						var inaFormula;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								formulaMeasure.getName());
						text = formulaMeasure.getText();
						isAbap = exporter
								.isAbap(formulaMeasure.getQueryModel());
						if (isAbap || ((isAbap === false) && (text !== null))) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									text);
						}
						inaFormula = sap.firefly.PrStructure.create();
						sap.firefly.QInAMemberFormulaMeasure.buildFormula(
								exporter, formulaMeasure.getFormula(),
								inaFormula);
						if (inaFormula.hasElements()) {
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_FORMULA,
									inaFormula);
						}
						if (formulaMeasure
								.supportsCalculatedBeforeAggregation()) {
							if (formulaMeasure.isCalculatedBeforeAggregation()) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_EXECUTION_STEP,
												sap.firefly.InAConstants.VA_EXECUTION_STEP_CALCULATION_BEFORE_AGGREGATION);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMemberRestrictedMeasure",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.MemberType.RESTRICTED_MEASURE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var member = null;
						var dimension;
						var newMemberName;
						var newMemberText;
						var keyField;
						var keyName;
						var textField;
						var textName;
						var inaAggregationDimension;
						if (modelComponent === null) {
							dimension = parentComponent;
							newMemberName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_NAME);
							newMemberText = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
							if ((newMemberName === null)
									&& (newMemberText === null)) {
								keyField = dimension.getKeyField();
								keyName = keyField.getName();
								newMemberName = inaStructure
										.getStringByName(keyName);
								textField = dimension.getTextField();
								textName = null;
								if (textField !== null) {
									textName = textField.getName();
								}
								newMemberText = inaStructure
										.getStringByName(textName);
							}
							member = dimension.addNewRestrictedMeasure(
									newMemberName, newMemberText);
						} else {
							member = modelComponent;
						}
						inaAggregationDimension = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION);
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(inaAggregationDimension)) {
							member
									.setAggregationDimensionName(inaAggregationDimension);
						}
						importer.importFilterExpression(member.getFilter(),
								inaStructure, member, context);
						sap.firefly.QInAMember.importQdMemberProperties(
								importer, member, inaStructure);
						importer.importExceptions(inaStructure, member);
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var restrictedMeasure = modelComponent;
						var text;
						var isAbap;
						var restrictedAggregationType;
						var inaAggType;
						var aggregationDimensionName;
						var inaSelection;
						var filter;
						var filterRoot;
						var sb;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								restrictedMeasure.getName());
						text = restrictedMeasure.getText();
						isAbap = exporter.isAbap(restrictedMeasure
								.getQueryModel());
						if (isAbap || ((isAbap === false) && (text !== null))) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									text);
						}
						restrictedAggregationType = restrictedMeasure
								.getAggregationType();
						if (restrictedAggregationType !== null) {
							inaAggType = sap.firefly.QInAConverter
									.lookupAggregationTypeInA(restrictedAggregationType);
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_AGGREGATION,
									inaAggType);
						}
						if (restrictedMeasure
								.supportsExceptionAggregationDimsFormulas() === false) {
							aggregationDimensionName = restrictedMeasure
									.getAggregationDimensionName();
							if (aggregationDimensionName !== null) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION,
												aggregationDimensionName);
							}
						}
						inaSelection = null;
						filter = restrictedMeasure.getFilter();
						filterRoot = filter.getFilterRootElement();
						if (filterRoot !== null) {
							inaSelection = exporter
									.exportFilterElement(filterRoot);
						} else {
							if (restrictedMeasure.getAggregationDimensionName() !== null) {
								inaSelection = sap.firefly.PrStructure.create();
								sb = sap.firefly.XStringBuffer.create();
								sb.append(restrictedMeasure.getName());
								sb.append(":");
								sb.append(restrictedMeasure
										.getAggregationDimensionName());
								inaSelection
										.setStringByName(
												sap.firefly.InAConstants.QY_MEASURE_OPERAND,
												sb.toString());
							}
						}
						if (inaSelection !== null) {
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_SELECTION,
									inaSelection);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMembersAll",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.MEMBERS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						var inaMemberList;
						var memberStructureInRsFormat;
						var structureLayout;
						var inaMemberListSize;
						var iMember;
						var inaMember;
						var member;
						var member2;
						if (dimension.supportsCustomMembers()) {
							dimension.removeCustomMembers();
						}
						if (importer
								.hasCapability(sap.firefly.InACapabilities.AV_CAPABILITY_METADATA_ACCOUNT_DIM_IN_RS_FORMAT)) {
							memberStructureInRsFormat = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_MEMBERS);
							if (memberStructureInRsFormat === null) {
								return null;
							}
							inaMemberList = this
									.createMemberStructure(memberStructureInRsFormat);
						} else {
							inaMemberList = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_MEMBERS_REPO);
							if (inaMemberList === null) {
								inaMemberList = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_MEMBERS);
								if (inaMemberList === null) {
									return null;
								}
							}
						}
						structureLayout = dimension.getStructureLayout();
						if (structureLayout !== null) {
							structureLayout.clear();
							inaMemberListSize = inaMemberList.size();
							for (iMember = 0; iMember < inaMemberListSize; iMember++) {
								inaMember = inaMemberList
										.getStructureByIndex(iMember);
								member = importer.importStructureMember(
										dimension, inaMember, context);
								if (member !== null) {
									member2 = dimension
											.getStructureMember(member
													.getName());
									if (member2 !== null) {
										if (member2 !== member) {
											throw sap.firefly.XException
													.createIllegalStateException("Internal error: New member with same name not allowed");
										}
										structureLayout.removeElement(member2);
										structureLayout.add(member2);
									} else {
										dimension.addMeasure(member);
									}
								}
							}
						}
						return dimension;
					},
					createMemberStructure : function(memberStructureInRsFormat) {
						var memberList = sap.firefly.PrList.create();
						var memberNameValues;
						var memberTextValues;
						var aggregationValues;
						var numericPrecisionValues;
						var numericSaleValues;
						var numericShiftValues;
						var aggregationDimensionValues;
						var i;
						var structure;
						if (memberStructureInRsFormat.hasElements()) {
							memberNameValues = this.getValuesFromStructure(
									memberStructureInRsFormat,
									sap.firefly.InAConstants.QY_NAME);
							memberTextValues = this.getValuesFromStructure(
									memberStructureInRsFormat,
									sap.firefly.InAConstants.QY_DESCRIPTION);
							aggregationValues = this.getValuesFromStructure(
									memberStructureInRsFormat,
									sap.firefly.InAConstants.QY_AGGREGATION);
							numericPrecisionValues = this
									.getValuesFromStructure(
											memberStructureInRsFormat,
											sap.firefly.InAConstants.QY_DIGITS);
							numericSaleValues = this.getValuesFromStructure(
									memberStructureInRsFormat,
									sap.firefly.InAConstants.QY_FRACT_DIGITS);
							numericShiftValues = this.getValuesFromStructure(
									memberStructureInRsFormat,
									sap.firefly.InAConstants.QY_NUMERIC_SHIFT);
							aggregationDimensionValues = this
									.getValuesFromStructure(
											memberStructureInRsFormat,
											sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION);
							for (i = 0; i < memberNameValues.size(); i++) {
								structure = sap.firefly.PrStructure.create();
								this.setStringValueToStructure(structure,
										sap.firefly.InAConstants.QY_NAME,
										memberNameValues, i);
								this
										.setStringValueToStructure(
												structure,
												sap.firefly.InAConstants.QY_DESCRIPTION,
												memberTextValues, i);
								this
										.setIntegerValueToStructure(
												structure,
												sap.firefly.InAConstants.QY_AGGREGATION,
												aggregationValues, i);
								this.setIntegerValueToStructure(structure,
										sap.firefly.InAConstants.QY_DIGITS,
										numericPrecisionValues, i);
								this
										.setIntegerValueToStructure(
												structure,
												sap.firefly.InAConstants.QY_FRACT_DIGITS,
												numericSaleValues, i);
								this
										.setIntegerValueToStructure(
												structure,
												sap.firefly.InAConstants.QY_NUMERIC_SHIFT,
												numericShiftValues, i);
								this
										.setStringValueToStructure(
												structure,
												sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION,
												aggregationDimensionValues, i);
								memberList.add(structure);
							}
						}
						return memberList;
					},
					getValuesFromStructure : function(inaStructureMember, name) {
						var structure = inaStructureMember
								.getStructureByName(name);
						if (structure !== null) {
							return structure
									.getListByName(sap.firefly.InAConstants.QY_VALUES);
						}
						return null;
					},
					setStringValueToStructure : function(structure, name,
							valueList, index) {
						if ((valueList !== null) && (valueList.size() > index)) {
							structure.setStringByName(name, valueList
									.getStringByIndex(index));
						}
					},
					setIntegerValueToStructure : function(structure, name,
							valueList, index) {
						if ((valueList !== null) && (valueList.size() > index)) {
							structure.setIntegerByName(name, valueList
									.getIntegerByIndex(index));
						}
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var allStructureMembers = dimension
								.getStructureLayout();
						var isDimensionMeasure;
						var membersList;
						var size;
						var idxMember;
						var structureMember;
						var inaMember;
						var type;
						if (allStructureMembers !== null) {
							isDimensionMeasure = dimension.isMeasureStructure();
							if ((isDimensionMeasure === false)
									&& allStructureMembers.isEmpty()) {
								return null;
							}
							if (exporter.m_mode === sap.firefly.QModelFormat.INA_DATA) {
								membersList = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_MEMBERS);
							} else {
								membersList = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_MEMBERS_REPO);
							}
							size = allStructureMembers.size();
							for (idxMember = 0; idxMember < size; idxMember++) {
								structureMember = allStructureMembers
										.get(idxMember);
								if (exporter.m_mode === sap.firefly.QModelFormat.INA_DATA) {
									inaMember = exporter
											.exportStructureMember(structureMember);
								} else {
									type = structureMember.getMemberType();
									if ((type === sap.firefly.MemberType.RESTRICTED_MEASURE)
											|| (type === sap.firefly.MemberType.FORMULA)) {
										inaMember = exporter
												.exportStructureMember(structureMember);
										inaMember
												.setStringByName(
														sap.firefly.InAConstants.QY_MEMBER_TYPE,
														sap.firefly.QInAConverter
																.lookupMeasureStructureMemberTypeIna(type));
									} else {
										inaMember = exporter
												.exportStructureMember(structureMember);
									}
								}
								membersList.add(inaMember);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAQuery",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.QUERY_MODEL;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = modelComponent;
						var inaDefinition = inaStructure;
						var inaQueries = inaDefinition
								.getListByName(sap.firefly.InAConstants.QY_QUERIES);
						var resultStructureController;
						var queryManager;
						var inaPreQueries;
						var modeHolder;
						var i;
						var inaPreQuery;
						var runtimeElement;
						var dataSourceElement;
						var dsBuffer;
						var dataSource;
						var commandFactory;
						var xCmdDeserialize;
						var processCommand;
						var preQuery;
						var inaPreQueryName;
						var preQueryExisting;
						if (inaQueries !== null) {
							inaDefinition = inaQueries
									.getStructureByIndex(inaQueries.size() - 1);
						}
						if ((inaDefinition !== null)
								&& (inaDefinition
										.hasValueByName(sap.firefly.InAConstants.QY_ANALYTICS))) {
							inaDefinition = inaDefinition
									.getStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
							if ((inaDefinition !== null)
									&& (inaDefinition
											.hasValueByName(sap.firefly.InAConstants.QY_DEFINITION))) {
								inaDefinition = inaDefinition
										.getStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
							}
						}
						if (inaDefinition !== null) {
							importer.importDimensions(inaDefinition,
									queryModel, queryModel);
							importer.importFilter(inaDefinition, queryModel
									.getSelectorBase(), queryModel);
							importer.importSortingManager(inaDefinition,
									queryModel.getSortingManagerBase(),
									queryModel);
							importer.importDrillManager(inaDefinition,
									queryModel.getDrillManager(), queryModel);
							importer.importVariableContainer(inaDefinition,
									queryModel.getVariableManagerBase(),
									queryModel);
							importer.importQuerySettings(inaDefinition,
									queryModel);
							importer.importDataCells(inaDefinition, queryModel);
							importer.importConditionManager(inaDefinition,
									queryModel.getConditionManagerBase(),
									queryModel);
							if (importer.m_mode
									.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
								resultStructureController = queryModel
										.getResultStructureController();
								importer.importComponent(null, inaDefinition,
										resultStructureController, queryModel,
										queryModel);
								queryManager = queryModel.getQueryManager();
								if (queryManager !== null) {
									queryManager
											.setResultSetPersistanceTargetTable(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_TABLE));
									queryManager
											.setResultSetPersistanceTargetSchema(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_SCHEMA));
									queryManager
											.setResultSetPersistanceIdentifier(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_IDENTIFIER));
								}
								inaPreQueries = inaDefinition
										.getListByName(sap.firefly.InAConstants.QY_PRE_QUERIES);
								if (inaPreQueries !== null) {
									modeHolder = importer.getMode();
									importer.m_mode = importer
											.getOriginalMode();
									for (i = 0; i < inaPreQueries.size(); i++) {
										inaPreQuery = inaPreQueries
												.getStructureByIndex(i);
										runtimeElement = inaPreQuery
												.getElementByName(sap.firefly.InAConstants.QY_RUNTIME);
										if (runtimeElement === null) {
											runtimeElement = inaPreQuery;
										}
										dataSourceElement = runtimeElement
												.getElementByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
										dsBuffer = sap.firefly.XStringBuffer
												.create();
										dsBuffer
												.append(dataSourceElement
														.getStringByName(sap.firefly.InAConstants.QY_TYPE));
										dsBuffer.append(":[");
										if (queryModel.getSystemType() === sap.firefly.SystemType.HANA) {
											dsBuffer
													.append(dataSourceElement
															.getStringByName(sap.firefly.InAConstants.QY_SCHEMA_NAME));
											dsBuffer.append("][");
											dsBuffer
													.append(dataSourceElement
															.getStringByName(sap.firefly.InAConstants.QY_PACKAGE_NAME));
											dsBuffer.append("][");
										}
										dsBuffer
												.append(dataSourceElement
														.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME));
										dsBuffer.append("]");
										dataSource = dsBuffer.toString();
										commandFactory = sap.firefly.XCommandFactory
												.create(queryModel
														.getApplication());
										xCmdDeserialize = commandFactory
												.createCommand(sap.firefly.CmdCreateQueryManager.CMD_NAME);
										xCmdDeserialize
												.addParameter(
														sap.firefly.CmdCreateQueryManager.PARAM_I_APPLICATION,
														queryModel
																.getApplication());
										xCmdDeserialize
												.addParameterString(
														sap.firefly.CmdCreateQueryManager.PARAM_I_SYSTEM,
														(runtimeElement
																.getElementByName(sap.firefly.InAConstants.QY_DATA_SOURCE))
																.getStringByName(sap.firefly.InAConstants.QY_SYSTEM));
										xCmdDeserialize
												.addParameterString(
														sap.firefly.CmdCreateQueryManager.PARAM_I_DATA_SOURCE,
														dataSource);
										processCommand = xCmdDeserialize
												.processCommand(
														sap.firefly.SyncType.BLOCKING,
														null, null);
										importer.addMessages(processCommand
												.getMessages());
										xCmdDeserialize.releaseObject();
										if (!processCommand.hasErrors()) {
											preQuery = (processCommand
													.getData()
													.getResultParameter(sap.firefly.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER))
													.getQueryModel();
											importer.importPreQuery(
													inaPreQuery, preQuery);
											inaPreQueryName = inaPreQuery
													.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME);
											preQueryExisting = queryModel
													.getPreQueryByName(inaPreQueryName);
											if (preQueryExisting === null) {
												queryModel.addPreQueryWithName(
														preQuery,
														inaPreQueryName);
											}
										}
									}
									importer.m_mode = modeHolder;
								}
							}
						}
						return queryModel;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var queryModel = modelComponent;
						var withDataSource;
						var withVariables;
						var preQueries;
						var preQueriesSize;
						var inaPreQueries;
						var modeHolder;
						var i;
						var preQuery;
						var inaPreQuery;
						var preQueryName;
						var resultStructureController;
						var queryManager;
						var serviceConfig;
						exporter.exportDrillManager(queryModel
								.getDrillManager(), inaStructure);
						withDataSource = sap.firefly.XMath.binaryAnd(flags,
								sap.firefly.QImExFlag.DATASOURCE) > 0;
						if (withDataSource) {
							sap.firefly.QInADataSource
									.exportDataSource(
											exporter,
											queryModel.getDataSource(),
											queryModel
													.getQueryManager()
													.supportsAnalyticCapability(
															sap.firefly.InACapabilities.AV_CAPABILITY_RUN_AS_USER),
											inaStructure);
						}
						exporter.exportDimensions(queryModel, inaStructure);
						exporter.exportSortingManager(queryModel
								.getSortingManager(), inaStructure);
						if (!queryModel.hasProcessingStep()
								|| exporter.m_mode
										.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							exporter.exportDataCells(inaStructure, queryModel);
						}
						exporter.exportQuerySettings(inaStructure, queryModel);
						exporter.exportFilter(queryModel.getSelector(),
								inaStructure);
						exporter.exportConditionManager(queryModel
								.getConditionManager(), inaStructure);
						withVariables = sap.firefly.XMath.binaryAnd(flags,
								sap.firefly.QImExFlag.VARIABLES) > 0;
						if (withVariables
								&& (exporter.m_mode !== sap.firefly.QModelFormat.INA_REPOSITORY_NO_VARS)) {
							exporter.exportVariables(queryModel
									.getVariableContainer(), inaStructure);
						}
						if (exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							preQueries = queryModel.getPreQueries();
							if (preQueries !== null) {
								preQueriesSize = preQueries.size();
								if (preQueriesSize > 0) {
									inaPreQueries = inaStructure
											.getListByName(sap.firefly.InAConstants.QY_PRE_QUERIES);
									if (inaPreQueries === null) {
										inaPreQueries = inaStructure
												.setNewListByName(sap.firefly.InAConstants.QY_PRE_QUERIES);
									}
									modeHolder = exporter.getMode();
									exporter.m_mode = exporter
											.getOriginalMode();
									for (i = 0; i < preQueriesSize; i++) {
										preQuery = preQueries.get(i);
										inaPreQuery = exporter
												.exportPreQuery(preQuery
														.getObject());
										preQueryName = preQuery.getName();
										inaPreQuery
												.setStringByName(
														sap.firefly.InAConstants.QY_OBJECT_NAME,
														preQueryName);
										inaPreQueries.add(inaPreQuery);
									}
									exporter.m_mode = modeHolder;
									inaStructure
											.setElementByName(
													sap.firefly.InAConstants.QY_PRE_QUERIES,
													inaPreQueries);
								}
							}
							resultStructureController = queryModel
									.getResultStructureController();
							exporter.exportComponent(null,
									resultStructureController, inaStructure,
									flags);
							queryManager = queryModel.getQueryManager();
							serviceConfig = queryManager.getServiceConfig();
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_EXPERIMENTAL_FEATURES,
											serviceConfig
													.getExperimentalFeatures());
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_TABLE,
											queryManager
													.getResultSetPersistanceTable());
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_SCHEMA,
											queryManager
													.getResultSetPersistanceSchema());
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_RS_RESULT_SET_PERSISTANCE_IDENTIFIER,
											queryManager
													.getResultSetPersistanceIdentifier());
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAQuerySettings",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.QUERY_SETTINGS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var definitionNameString = sap.firefly.PrUtils
								.getStringProperty(inaStructure,
										sap.firefly.InAConstants.QY_NAME);
						var queryModel = context.getQueryModel();
						var inaQuery;
						var axesLayoutList;
						var axesLayoutIndex;
						var axisLayoutStructure;
						var axisType;
						var axis;
						var orderedDimensionNamesList;
						var orderedDimensionNames;
						var dimensionNameIndex;
						var dimensionNameString;
						var dimensions;
						if (definitionNameString !== null) {
							queryModel.setDefinitionName(definitionNameString
									.getStringValue());
						}
						inaQuery = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_QUERY);
						importer.importAxesSettings(inaQuery, queryModel);
						if (importer.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							axesLayoutList = sap.firefly.PrUtils
									.getListProperty(
											inaQuery,
											sap.firefly.InAConstants.QY_AXES_LAYOUT);
							for (axesLayoutIndex = 0; axesLayoutIndex < sap.firefly.PrUtils
									.getListSize(axesLayoutList, 0); axesLayoutIndex++) {
								axisLayoutStructure = sap.firefly.PrUtils
										.getStructureElement(axesLayoutList,
												axesLayoutIndex);
								axisType = sap.firefly.AxisType
										.lookup(sap.firefly.PrUtils
												.getStringValueProperty(
														axisLayoutStructure,
														sap.firefly.InAConstants.QY_AXIS,
														null));
								axis = queryModel.getAxis(axisType);
								if (axis === null) {
									continue;
								}
								orderedDimensionNamesList = sap.firefly.PrUtils
										.getListProperty(
												axisLayoutStructure,
												sap.firefly.InAConstants.QY_ORDERED_DIMENSION_NAMES);
								if (orderedDimensionNamesList === null) {
									continue;
								}
								orderedDimensionNames = sap.firefly.XListOfString
										.create();
								for (dimensionNameIndex = 0; dimensionNameIndex < sap.firefly.PrUtils
										.getListSize(orderedDimensionNamesList,
												0); dimensionNameIndex++) {
									dimensionNameString = sap.firefly.PrUtils
											.getStringElement(
													orderedDimensionNamesList,
													dimensionNameIndex);
									if (dimensionNameString === null) {
										continue;
									}
									orderedDimensionNames
											.add(dimensionNameString
													.getStringValue());
								}
								dimensions = axis.getDimensionListBase();
								if (dimensions === null) {
									continue;
								}
								dimensions
										.reOrderDimensions(orderedDimensionNames);
							}
						}
						return queryModel;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var queryModel = modelComponent;
						var definitionName = queryModel.getDefinitionName();
						var inaQuery;
						var axesLayoutList;
						var allAxisTypes;
						var axisTypeIndex;
						var axisType;
						var axis;
						var dimensions;
						var dimensionNames;
						var axisLayoutStructure;
						var orderedDimensionNamesList;
						var dimensionNameIndex;
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(definitionName)) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									definitionName);
						}
						if ((exporter.m_mode === sap.firefly.QModelFormat.INA_DATA)
								&& (exporter.isAbap(queryModel) === false)) {
							return inaStructure;
						}
						inaQuery = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_QUERY);
						if (inaQuery === null) {
							inaQuery = inaStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_QUERY);
						}
						exporter.exportAxesSettings(inaQuery, queryModel);
						if (exporter.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							axesLayoutList = inaQuery
									.setNewListByName(sap.firefly.InAConstants.QY_AXES_LAYOUT);
							allAxisTypes = sap.firefly.AxisType.getAll();
							for (axisTypeIndex = 0; axisTypeIndex < allAxisTypes
									.size(); axisTypeIndex++) {
								axisType = allAxisTypes.get(axisTypeIndex);
								axis = queryModel.getAxis(axisType);
								if (axis === null) {
									continue;
								}
								dimensions = axis.getDimensionListBase();
								if (dimensions === null) {
									continue;
								}
								dimensionNames = dimensions
										.getOrderedDimensionNames();
								if (dimensionNames === null) {
									continue;
								}
								axisLayoutStructure = axesLayoutList
										.addNewStructure();
								axisLayoutStructure.setStringByName(
										sap.firefly.InAConstants.QY_AXIS, axis
												.getName());
								orderedDimensionNamesList = axisLayoutStructure
										.setNewListByName(sap.firefly.InAConstants.QY_ORDERED_DIMENSION_NAMES);
								for (dimensionNameIndex = 0; dimensionNameIndex < dimensionNames
										.size(); dimensionNameIndex++) {
									orderedDimensionNamesList
											.addString(dimensionNames
													.get(dimensionNameIndex));
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInASort",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.SORT_MANAGER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_SORT;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var sortingManager = modelComponent;
						var queryModel;
						var sortIdx;
						var inaSort;
						var inaSortType;
						var sortType;
						var sortingOp;
						var inaFieldName;
						var field;
						var inaCollator;
						var measureName;
						var measureStructure;
						var measure;
						var structureName;
						var structure;
						var inaPath;
						var path;
						var idxStruct;
						var pathElement;
						var inaFieldName2;
						var inaValue;
						var field2;
						var inaHierarchyName;
						var dimElement;
						var dimensionName;
						var dimension;
						var dimensionSorting;
						var inaDirection;
						var sortDirection;
						var x;
						if (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT) {
							if (importer.m_supportsExtendedSort) {
								sortingManager.getSortingOperations().clear();
								if (inaList !== null) {
									queryModel = sortingManager.getQueryModel();
									for (sortIdx = 0; sortIdx < inaList.size(); sortIdx++) {
										inaSort = inaList
												.getStructureByIndex(sortIdx);
										inaSortType = inaSort
												.getStringByName(sap.firefly.InAConstants.QY_SORT_TYPE);
										sortType = sap.firefly.QInAConverter
												.lookupSortType(inaSortType);
										sortingOp = null;
										if (sortType === sap.firefly.SortType.FIELD) {
											inaFieldName = inaSort
													.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
											if (inaFieldName !== null) {
												field = queryModel
														.getFieldByName(inaFieldName);
												if (field !== null) {
													sortingOp = sortingManager
															.getFieldSorting(
																	field, true);
													if (sortingManager
															.getQueryModel()
															.supportsLocaleSorting()) {
														inaCollator = inaSort
																.getStructureByName(sap.firefly.InAConstants.QY_COLLATOR);
														if (inaCollator !== null) {
															(sortingOp)
																	.setIsCaseSensitive(inaCollator
																			.getBooleanByNameWithDefault(
																					sap.firefly.InAConstants.QY_CASE_SENSITIVE,
																					false));
															(sortingOp)
																	.setLocale(inaCollator
																			.getStringByNameWithDefault(
																					sap.firefly.InAConstants.QY_LOCALE,
																					null));
														}
													}
												}
											}
										} else {
											if (sortType === sap.firefly.SortType.MEASURE) {
												measureName = inaSort
														.getStringByName(sap.firefly.InAConstants.QY_MEASURE_NAME);
												if (measureName !== null) {
													measureStructure = queryModel
															.getMeasureDimension();
													measure = measureStructure
															.getStructureMember(measureName);
													if (measure !== null) {
														sortingOp = sortingManager
																.getMeasureSorting(
																		measure,
																		true);
													}
													structureName = inaSort
															.getStringByName(sap.firefly.InAConstants.QY_STRUCTURE_NAME);
													structure = queryModel
															.getNonMeasureDimension();
													if ((structureName !== null)
															&& (structure !== null)) {
														(sortingManager)
																.setStructure(structure
																		.getStructureMember(structureName));
													}
												}
											} else {
												if ((sortType === sap.firefly.SortType.DATA_CELL_VALUE)
														|| (sortType === sap.firefly.SortType.COMPLEX)) {
													inaPath = inaSort
															.getListByName(sap.firefly.InAConstants.QY_SORT_TUPLE);
													path = sap.firefly.XList
															.create();
													for (idxStruct = 0; idxStruct < inaPath
															.size(); idxStruct++) {
														pathElement = inaPath
																.getStructureByIndex(idxStruct);
														if (pathElement !== null) {
															inaFieldName2 = pathElement
																	.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
															inaValue = pathElement
																	.getStringByName(sap.firefly.InAConstants.QY_VALUE);
															if ((inaFieldName2 !== null)
																	&& (inaValue !== null)) {
																field2 = queryModel
																		.getFieldByName(inaFieldName2);
																if (field2 !== null) {
																	inaHierarchyName = pathElement
																			.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY);
																	dimElement = sap.firefly.QSelectValue
																			._createDimensionElement2(
																					context,
																					field2,
																					inaHierarchyName,
																					inaValue);
																	path
																			.add(dimElement);
																} else {
																	path = null;
																	break;
																}
															} else {
																path = null;
																break;
															}
														} else {
															path = null;
															break;
														}
													}
													if (path !== null) {
														if (sortType === sap.firefly.SortType.DATA_CELL_VALUE) {
															sortingOp = sortingManager
																	.getDataCellSorting(
																			path,
																			true);
														} else {
															if (sortType === sap.firefly.SortType.COMPLEX) {
																sortingOp = sortingManager
																		.getComplexSorting(
																				path,
																				true);
															}
														}
													}
												} else {
													dimensionName = inaSort
															.getStringByName(sap.firefly.InAConstants.QY_DIMENSION);
													dimension = queryModel
															.getDimensionByName(dimensionName);
													if (dimension !== null) {
														dimensionSorting = sortingManager
																.getDimensionSorting(
																		dimension,
																		true);
														sortingOp = dimensionSorting;
														if (sortType === sap.firefly.SortType.FILTER) {
															dimensionSorting
																	.setSortByFilter();
														} else {
															if (sortType === sap.firefly.SortType.MEMBER_KEY) {
																dimensionSorting
																		.setSortByKey();
															} else {
																if (sortType === sap.firefly.SortType.MEMBER_TEXT) {
																	dimensionSorting
																			.setSortByText();
																} else {
																	if (sortType === sap.firefly.SortType.HIERARCHY) {
																		dimensionSorting
																				.setSortByHierarchy();
																	}
																}
															}
														}
													}
												}
											}
										}
										if (sortingOp !== null) {
											inaDirection = inaSort
													.getStringByName(sap.firefly.InAConstants.QY_DIRECTION);
											if (inaDirection !== null) {
												sortDirection = sap.firefly.QInAConverter
														.lookupSortDirection2(inaDirection);
												if (sortDirection !== null) {
													sortingOp
															.setDirection(sortDirection);
												}
											}
											if ((sortingOp
													.supportsPreserveGrouping())
													&& (sortingOp
															.supportsBreakGrouping())) {
												x = inaSort
														.getBooleanByNameWithDefault(
																sap.firefly.InAConstants.QY_PRESERVE_GROUPING,
																false);
												sortingOp
														.setPreserveGrouping(x);
											}
										}
									}
								}
							}
						}
						return sortingManager;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var sortingManager = modelComponent;
						var inaSortOps = null;
						var mode;
						var sortingOperations;
						var size;
						var i;
						var sortOp;
						var inaSortOp;
						var sortingType;
						var direction;
						var dimension;
						var fieldSorting;
						var inaCollator;
						var icuLocale;
						var measureSorting;
						var measureName;
						var structureMember;
						var inaPath;
						var elementPath;
						var pathSize;
						var idxPath;
						var dimElement;
						var inaPathElement;
						var selectHierarchyName;
						if (exporter.m_supportsExtendedSort) {
							mode = exporter.m_mode;
							inaSortOps = sap.firefly.PrList.create();
							sortingOperations = sortingManager
									.getSortingOperations();
							size = sortingOperations.size();
							for (i = 0; i < size; i++) {
								sortOp = sortingOperations.get(i);
								inaSortOp = sap.firefly.PrStructure.create();
								sortingType = sortOp.getSortingType();
								inaSortOp
										.setStringByName(
												sap.firefly.InAConstants.QY_SORT_TYPE,
												sap.firefly.QInAConverter
														.lookupSortTypeInA(sortingType));
								direction = sortOp.getDirection();
								if (direction !== sap.firefly.XSortDirection.DEFAULT_VALUE) {
									inaSortOp
											.setStringByName(
													sap.firefly.InAConstants.QY_DIRECTION,
													sap.firefly.QInAConverter
															.lookupSortDirectionInA2(direction));
								} else {
									if (sortingType === sap.firefly.SortType.MEASURE) {
										continue;
									}
								}
								if ((sortOp.supportsPreserveGrouping())
										&& (sortOp.supportsBreakGrouping())) {
									inaSortOp
											.setBooleanByName(
													sap.firefly.InAConstants.QY_PRESERVE_GROUPING,
													sortOp
															.isPreserveGroupingEnabled());
								}
								dimension = null;
								if (sortingType === sap.firefly.SortType.FIELD) {
									fieldSorting = sortOp;
									inaSortOp
											.setStringByName(
													sap.firefly.InAConstants.QY_FIELD_NAME,
													fieldSorting.getField()
															.getName());
									if (sortOp.getQueryModel()
											.supportsLocaleSorting()) {
										inaCollator = sap.firefly.PrStructure
												.create();
										inaCollator
												.setBooleanByName(
														sap.firefly.InAConstants.QY_CASE_SENSITIVE,
														fieldSorting
																.isCaseSensitive());
										icuLocale = fieldSorting.getLocale();
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(icuLocale)) {
											inaCollator
													.setStringByName(
															sap.firefly.InAConstants.QY_LOCALE,
															icuLocale);
										}
										if (inaCollator.hasElements()) {
											inaSortOp
													.setElementByName(
															sap.firefly.InAConstants.QY_COLLATOR,
															inaCollator);
										}
									}
								} else {
									if (sortingType === sap.firefly.SortType.MEASURE) {
										measureSorting = sortOp;
										measureName = measureSorting
												.getMeasure().getName();
										inaSortOp
												.setStringByName(
														sap.firefly.InAConstants.QY_MEASURE_NAME,
														measureName);
										structureMember = measureSorting
												.getStructure();
										if (structureMember !== null) {
											inaSortOp
													.setStringByName(
															sap.firefly.InAConstants.QY_STRUCTURE_NAME,
															structureMember
																	.getName());
										}
										dimension = measureSorting
												.getDimension();
									} else {
										if ((sortingType === sap.firefly.SortType.DATA_CELL_VALUE)
												|| (sortingType === sap.firefly.SortType.COMPLEX)) {
											inaPath = inaSortOp
													.setNewListByName(sap.firefly.InAConstants.QY_SORT_TUPLE);
											elementPath = (sortOp)
													.getElementPath();
											pathSize = elementPath.size();
											for (idxPath = 0; idxPath < pathSize; idxPath++) {
												dimElement = elementPath
														.get(idxPath);
												inaPathElement = inaPath
														.addNewStructure();
												inaPathElement
														.setStringByName(
																sap.firefly.InAConstants.QY_FIELD_NAME,
																dimElement
																		.getSelectField()
																		.getName());
												inaPathElement
														.setStringByName(
																sap.firefly.InAConstants.QY_VALUE,
																dimElement
																		.getSelectValue());
												selectHierarchyName = dimElement
														.getSelectHierarchyName();
												if (sap.firefly.XStringUtils
														.isNotNullAndNotEmpty(selectHierarchyName)) {
													inaPathElement
															.setStringByName(
																	sap.firefly.InAConstants.QY_HIERARCHY,
																	selectHierarchyName);
												}
											}
											if (sortingType === sap.firefly.SortType.DATA_CELL_VALUE) {
												dimension = (sortOp)
														.getDimension();
											}
										} else {
											if (sortingType === sap.firefly.SortType.HIERARCHY) {
												dimension = (sortOp)
														.getDimension();
												if (dimension
														.isHierarchyAssignedAndActive() === false) {
													inaSortOp = null;
												}
											} else {
												dimension = (sortOp)
														.getDimension();
											}
										}
									}
								}
								if (inaSortOp !== null) {
									if (dimension !== null) {
										inaSortOp
												.setStringByName(
														sap.firefly.InAConstants.QY_DIMENSION,
														dimension.getName());
									}
									inaSortOps.add(inaSortOp);
								}
							}
							if ((mode === sap.firefly.QModelFormat.INA_DATA)
									|| (mode === sap.firefly.QModelFormat.INA_VALUE_HELP)) {
								inaSortOps = sap.firefly.QInAExportUtil
										.extendList(sortingManager, inaSortOps);
							}
						}
						return inaSortOps;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInATotals",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.TOTALS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var controller;
						var inaResultStructure;
						var alignment;
						var inaInnerResultStructure;
						var flexibleResultStructure;
						var size;
						var i;
						var resultStructureItem;
						if (importer.m_mode !== sap.firefly.QModelFormat.INA_DATA_REINIT) {
							controller = modelComponent;
							if (controller.supportsResultVisibility()) {
								inaResultStructure = this
										.getResultStructure(inaStructure);
								alignment = this.importResultAlignment(
										controller, inaResultStructure);
								controller
										.restoreTotalsVisibility(
												sap.firefly.RestoreAction.DEFAULT_VALUE,
												false);
								inaInnerResultStructure = inaResultStructure
										.getListByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE);
								if (inaInnerResultStructure !== null) {
									if (controller
											.supportsAdvancedResultStructure()
											&& (alignment === sap.firefly.ResultAlignment.STRUCTURE)) {
										flexibleResultStructure = controller
												.getAdvancedResultStructure();
										flexibleResultStructure.clear();
										if (alignment === null) {
											controller
													.setResultAlignmentBase(
															sap.firefly.ResultAlignment.STRUCTURE,
															true);
										}
									} else {
										flexibleResultStructure = null;
									}
									size = inaInnerResultStructure.size();
									for (i = 0; i < size; i++) {
										resultStructureItem = inaInnerResultStructure
												.getStructureByIndex(i);
										this.importResultStructureItem(
												resultStructureItem,
												controller,
												flexibleResultStructure);
									}
								}
							}
						}
						return null;
					},
					importResultAlignment : function(controller,
							inaResultStructure) {
						var inaResultAlignment;
						var alignment;
						if (controller.supportsResultAlignment()) {
							controller.restoreTotalsAlignment(
									sap.firefly.RestoreAction.DEFAULT_VALUE,
									false);
							inaResultAlignment = inaResultStructure
									.getStringByName(sap.firefly.InAConstants.QY_RS_ALIGNMENT);
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(inaResultAlignment)) {
								return null;
							}
							alignment = sap.firefly.QInAConverter
									.lookupAlignment(inaResultAlignment);
							controller.setResultAlignmentBase(alignment, false);
							return alignment;
						}
						return null;
					},
					getResultStructure : function(inaStructure) {
						var inaResultStructure = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE_BAG);
						if (inaResultStructure === null) {
							inaResultStructure = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_STRUCTURE);
							if (inaResultStructure === null) {
								return inaStructure;
							}
						}
						return inaResultStructure;
					},
					importResultStructureItem : function(resultStructureItem,
							controller, flexibleResultStructure) {
						var resultStructureElement = resultStructureItem
								.getStringByName(sap.firefly.InAConstants.QY_RESULT);
						var element;
						var inaVisibility;
						var visibility;
						if (sap.firefly.XString.isEqual(resultStructureElement,
								sap.firefly.InAConstants.VA_RESULT_MEMBERS)) {
							element = sap.firefly.ResultStructureElement.MEMBERS;
						} else {
							if (sap.firefly.XString.isEqual(
									resultStructureElement,
									sap.firefly.InAConstants.VA_RESULT_TOTAL)) {
								element = sap.firefly.ResultStructureElement.TOTAL;
							} else {
								if (sap.firefly.XString
										.isEqual(
												resultStructureElement,
												sap.firefly.InAConstants.VA_RESULT_TOTAL_INCLUDED_MEMBERS)) {
									element = sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;
								} else {
									if (sap.firefly.XString
											.isEqual(
													resultStructureElement,
													sap.firefly.InAConstants.VA_RESULT_TOTAL_REMAINING_MEMBERS)) {
										element = sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS;
									} else {
										return;
									}
								}
							}
						}
						inaVisibility = resultStructureItem
								.getStringByName(sap.firefly.InAConstants.QY_VISIBILITY);
						visibility = sap.firefly.QInAConverter
								.lookupResultSetVisibility(inaVisibility);
						if (flexibleResultStructure === null) {
							controller.setResultVisibilityByElement(element,
									visibility);
						} else {
							flexibleResultStructure.addWithVisibility(element,
									visibility);
						}
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var controller = modelComponent;
						var inaResultStructure;
						var resultStructure;
						if (controller.supportsTotals()) {
							if (exporter.m_mode.containsMetadata()
									|| (exporter.m_mode
											.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY))) {
								inaResultStructure = inaStructure
										.setNewStructureByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE_BAG);
							} else {
								inaResultStructure = inaStructure;
							}
							this.exportAlignment(exporter, controller,
									inaResultStructure);
							if (controller.supportsResultVisibility()) {
								if ((controller.isTotalsVisibilityOnDefault() === false)
										|| (controller.getModelLevel() === sap.firefly.QModelLevel.DIMENSIONS)) {
									resultStructure = controller
											.getTotalsStructure();
									if (sap.firefly.XCollectionUtils
											.hasElements(resultStructure)) {
										this.exportResultStructureItems(
												inaResultStructure,
												resultStructure, controller);
									}
								}
							}
						}
						return inaStructure;
					},
					exportAlignment : function(exporter, controller,
							inaResultStructure) {
						var resultAlignment;
						if ((exporter.m_mode === sap.firefly.QModelFormat.INA_DATA)
								&& (exporter.isAbap(controller.getQueryModel()) === false)) {
							return;
						}
						if (controller.supportsResultAlignment()) {
							if (controller.isTotalsAlignmentOnDefault() === false) {
								resultAlignment = controller
										.getResultAlignment();
								if (exporter.m_mode === sap.firefly.QModelFormat.INA_DATA) {
									if (resultAlignment === sap.firefly.ResultAlignment.STRUCTURE) {
										resultAlignment = null;
									}
								}
								if (resultAlignment !== null) {
									inaResultStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_RS_ALIGNMENT,
													sap.firefly.QInAConverter
															.lookupAlignmentInA(resultAlignment));
								}
							}
						}
					},
					exportResultStructureItems : function(inaResultStructure,
							resultStructure, controller) {
						var structure = inaResultStructure
								.setNewListByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE);
						var size = resultStructure.size();
						var i;
						var item;
						var visibility;
						var element;
						for (i = 0; i < size; i++) {
							item = resultStructure.get(i);
							visibility = item.getResultVisibility();
							if (this.isResultVisible(controller, visibility) === false) {
								continue;
							}
							element = item.getResultStructureElement();
							if (element === sap.firefly.ResultStructureElement.MEMBERS) {
								this
										.exportResultStructureElement(
												structure,
												visibility,
												sap.firefly.InAConstants.VA_RESULT_MEMBERS);
							} else {
								if (element === sap.firefly.ResultStructureElement.TOTAL) {
									this
											.exportResultStructureElement(
													structure,
													visibility,
													sap.firefly.InAConstants.VA_RESULT_TOTAL);
								} else {
									if (element === sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS) {
										if (this.isConditionalResultSupported(
												controller, element)) {
											this
													.exportResultStructureElement(
															structure,
															visibility,
															sap.firefly.InAConstants.VA_RESULT_TOTAL_INCLUDED_MEMBERS);
										}
									} else {
										if (element === sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS) {
											if (this
													.isConditionalResultSupported(
															controller, element)) {
												this
														.exportResultStructureElement(
																structure,
																visibility,
																sap.firefly.InAConstants.VA_RESULT_TOTAL_REMAINING_MEMBERS);
											}
										}
									}
								}
							}
						}
					},
					isResultVisible : function(controller, visibility) {
						return (visibility === sap.firefly.ResultVisibility.VISIBLE)
								|| ((visibility === sap.firefly.ResultVisibility.CONDITIONAL) && controller
										.supportsConditionalResultVisibility());
					},
					isConditionalResultSupported : function(controller, element) {
						return controller.supportsConditionalResults()
								&& controller.getSupportedConditionalResults()
										.contains(element);
					},
					exportResultStructureElement : function(inaParent,
							visibility, elementName) {
						var resultStructureLine = inaParent.addNewStructure();
						resultStructureLine
								.setStringByName(
										sap.firefly.InAConstants.QY_RESULT,
										elementName);
						resultStructureLine
								.setStringByName(
										sap.firefly.InAConstants.QY_VISIBILITY,
										sap.firefly.QInAConverter
												.lookupResultSetVisibilityInA(visibility));
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVarDimMember",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var memberVariable = modelComponent;
						var inaValues = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_VALUES);
						var selectionContainer;
						var newSelectionContainer;
						if (inaValues !== null) {
							selectionContainer = sap.firefly.QFilterExpression
									._createByApplication(context,
											memberVariable);
							newSelectionContainer = importer
									.importFilterExpression(selectionContainer,
											inaValues, memberVariable, context);
							memberVariable
									.setSelectionContainer(newSelectionContainer);
						} else {
							if ((memberVariable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE)
									&& (memberVariable.hasMemberSelection())
									&& (memberVariable.getDimension()
											.getKeyField() !== memberVariable
											.getMemberSelection().getField())) {
								memberVariable.setDimension(memberVariable
										.getDimension());
							}
						}
						return memberVariable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimensionMemberVariable = modelComponent;
						var name = dimensionMemberVariable.getName();
						var targetMemberSelection;
						var externMemberSelection;
						var memberSelection;
						var inaVariableValues;
						var inaSelection;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, name);
						targetMemberSelection = null;
						externMemberSelection = dimensionMemberVariable
								.getExternMemberSelection();
						if (sap.firefly.XCollectionUtils
								.hasElements(externMemberSelection)) {
							targetMemberSelection = externMemberSelection;
						} else {
							if (dimensionMemberVariable.hasMemberSelection()) {
								memberSelection = dimensionMemberVariable
										.getMemberSelection();
								if (sap.firefly.XCollectionUtils
										.hasElements(memberSelection)) {
									targetMemberSelection = memberSelection;
								}
							}
						}
						inaVariableValues = inaStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_VALUES);
						if (targetMemberSelection !== null) {
							inaSelection = inaVariableValues
									.setNewStructureByName(sap.firefly.InAConstants.QY_SELECTION);
							exporter.exportCartesianList(inaSelection,
									targetMemberSelection);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVarOptionList",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.OPTION_LIST_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var optionListVariable = modelComponent;
						var inaOptionValues = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_OPTION_VALUES);
						var currentOption;
						var len;
						var idxOption;
						if (inaOptionValues !== null) {
							if (optionListVariable.isUsingMultipleValues()) {
								optionListVariable.clearValues();
								len = inaOptionValues.size();
								for (idxOption = 0; idxOption < len; idxOption++) {
									currentOption = inaOptionValues
											.getStringByIndex(idxOption);
									optionListVariable
											.addStringValue(currentOption);
								}
							} else {
								if (inaOptionValues.size() === 1) {
									currentOption = inaOptionValues
											.getStringByIndex(0);
									optionListVariable
											.setStringValue(currentOption);
								}
							}
						}
						return optionListVariable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var variable = modelComponent;
						var inaVariableOptionValues;
						var multiOptionNames;
						var len;
						var c;
						var optionName;
						var currentOption;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, variable
										.getName());
						inaVariableOptionValues = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_OPTION_VALUES);
						if (variable.isUsingMultipleValues()) {
							multiOptionNames = variable.getValues();
							len = multiOptionNames.size();
							for (c = 0; c < len; c++) {
								optionName = multiOptionNames.get(c);
								inaVariableOptionValues.addString(optionName
										.getStringValue());
							}
						} else {
							currentOption = variable.getCurrentOption();
							if (currentOption !== null) {
								inaVariableOptionValues.addString(currentOption
										.getName());
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVarSimpleType",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var simpleTypeVariable = modelComponent;
						var valueType = simpleTypeVariable.getValueType();
						var idxValue;
						var sizeValue;
						var inaSimpleNumericValues;
						var integerValue;
						var doubleValue;
						var longValue;
						var numericElement0;
						var inaSimpleStringValues;
						var stringElement0;
						var inaSimpleDateValues;
						var dateValue;
						var dateElement0;
						var dateValue2;
						var inaSimpleTimeValues;
						var timeValue;
						var timeElement0;
						var timeValue2;
						var inaSimpleDateTimeValues;
						var dateTimeValue;
						var dateTimeElement0;
						var dateTimeValue2;
						if (valueType.isNumber()) {
							inaSimpleNumericValues = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_SIMPLE_NUMERIC_VALUES);
							if (inaSimpleNumericValues !== null) {
								sizeValue = inaSimpleNumericValues.size();
								if (simpleTypeVariable.isUsingMultipleValues()) {
									simpleTypeVariable.clearValues();
									for (idxValue = 0; idxValue < sizeValue; idxValue++) {
										if (valueType === sap.firefly.XValueType.INTEGER) {
											integerValue = inaSimpleNumericValues
													.getIntegerByIndex(idxValue);
											simpleTypeVariable
													.addIntegerValue(integerValue);
										} else {
											if ((valueType === sap.firefly.XValueType.DOUBLE)
													|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
												doubleValue = inaSimpleNumericValues
														.getDoubleByIndex(idxValue);
												simpleTypeVariable
														.addDoubleValue(doubleValue);
											} else {
												if (valueType === sap.firefly.XValueType.LONG) {
													longValue = inaSimpleNumericValues
															.getLongByIndex(idxValue);
													simpleTypeVariable
															.addLongValue(longValue);
												}
											}
										}
									}
								} else {
									if (sizeValue === 1) {
										numericElement0 = inaSimpleNumericValues
												.getElementByIndex(0);
										if ((numericElement0 !== null)
												&& numericElement0.isNumeric()) {
											if (valueType === sap.firefly.XValueType.INTEGER) {
												simpleTypeVariable
														.setIntegerValue(inaSimpleNumericValues
																.getIntegerByIndex(0));
											} else {
												if ((valueType === sap.firefly.XValueType.DOUBLE)
														|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
													simpleTypeVariable
															.setDoubleValue(inaSimpleNumericValues
																	.getDoubleByIndex(0));
												} else {
													if (valueType === sap.firefly.XValueType.LONG) {
														simpleTypeVariable
																.setLongValue(inaSimpleNumericValues
																		.getLongByIndex(0));
													}
												}
											}
										}
									}
								}
							}
						} else {
							if (valueType.isString()) {
								inaSimpleStringValues = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_SIMPLE_STRING_VALUES);
								if (inaSimpleStringValues !== null) {
									sizeValue = inaSimpleStringValues.size();
									if (simpleTypeVariable
											.isUsingMultipleValues()) {
										simpleTypeVariable.clearValues();
										for (idxValue = 0; idxValue < sizeValue; idxValue++) {
											simpleTypeVariable
													.addStringValue(inaSimpleStringValues
															.getStringByIndex(idxValue));
										}
									} else {
										if (sizeValue === 1) {
											stringElement0 = inaSimpleStringValues
													.getElementByIndex(0);
											if ((stringElement0 !== null)
													&& stringElement0
															.isString()) {
												simpleTypeVariable
														.setStringValue((stringElement0)
																.getStringValue());
											}
										}
									}
								}
							} else {
								if (valueType === sap.firefly.XValueType.DATE) {
									inaSimpleDateValues = inaStructure
											.getListByName(sap.firefly.InAConstants.QY_SIMPLE_STRING_VALUES);
									if (inaSimpleDateValues !== null) {
										sizeValue = inaSimpleDateValues.size();
										if (simpleTypeVariable
												.isUsingMultipleValues()) {
											simpleTypeVariable.clearValues();
											for (idxValue = 0; idxValue < sizeValue; idxValue++) {
												dateValue = inaSimpleDateValues
														.getStringByIndex(idxValue);
												if (sap.firefly.XStringUtils
														.isNotNullAndNotEmpty(dateValue)) {
													simpleTypeVariable
															.addDateValue(sap.firefly.XDate
																	.createDateFromStringWithFlag(
																			dateValue,
																			importer.m_supportsSAPDateFormat));
												}
											}
										} else {
											if (sizeValue === 1) {
												dateElement0 = inaSimpleDateValues
														.getElementByIndex(0);
												if ((dateElement0 !== null)
														&& dateElement0
																.isString()) {
													dateValue2 = (dateElement0)
															.getStringValue();
													if (sap.firefly.XStringUtils
															.isNotNullAndNotEmpty(dateValue2)) {
														simpleTypeVariable
																.setDateValue(sap.firefly.XDate
																		.createDateFromStringWithFlag(
																				dateValue2,
																				importer.m_supportsSAPDateFormat));
													}
												}
											}
										}
									}
								} else {
									if (valueType === sap.firefly.XValueType.TIME) {
										inaSimpleTimeValues = inaStructure
												.getListByName(sap.firefly.InAConstants.QY_SIMPLE_STRING_VALUES);
										if (inaSimpleTimeValues !== null) {
											sizeValue = inaSimpleTimeValues
													.size();
											if (simpleTypeVariable
													.isUsingMultipleValues()) {
												simpleTypeVariable
														.clearValues();
												for (idxValue = 0; idxValue < sizeValue; idxValue++) {
													timeValue = inaSimpleTimeValues
															.getStringByIndex(idxValue);
													if (sap.firefly.XStringUtils
															.isNotNullAndNotEmpty(timeValue)) {
														simpleTypeVariable
																.addTimeValue(sap.firefly.XTime
																		.createTimeFromStringWithFlag(
																				timeValue,
																				importer.m_supportsSAPDateFormat));
													}
												}
											} else {
												if (sizeValue === 1) {
													timeElement0 = inaSimpleTimeValues
															.getElementByIndex(0);
													if ((timeElement0 !== null)
															&& timeElement0
																	.isString()) {
														timeValue2 = (timeElement0)
																.getStringValue();
														if (sap.firefly.XStringUtils
																.isNotNullAndNotEmpty(timeValue2)) {
															simpleTypeVariable
																	.setTimeValue(sap.firefly.XTime
																			.createTimeFromStringWithFlag(
																					timeValue2,
																					importer.m_supportsSAPDateFormat));
														}
													}
												}
											}
										}
									} else {
										if (valueType === sap.firefly.XValueType.DATE_TIME) {
											inaSimpleDateTimeValues = inaStructure
													.getListByName(sap.firefly.InAConstants.QY_SIMPLE_STRING_VALUES);
											if (inaSimpleDateTimeValues !== null) {
												sizeValue = inaSimpleDateTimeValues
														.size();
												if (simpleTypeVariable
														.isUsingMultipleValues()) {
													simpleTypeVariable
															.clearValues();
													for (idxValue = 0; idxValue < sizeValue; idxValue++) {
														dateTimeValue = inaSimpleDateTimeValues
																.getStringByIndex(idxValue);
														if (sap.firefly.XStringUtils
																.isNotNullAndNotEmpty(dateTimeValue)) {
															simpleTypeVariable
																	.addDateTimeValue(sap.firefly.XDateTime
																			.createDateTimeFromStringWithFlag(
																					dateTimeValue,
																					importer.m_supportsSAPDateFormat));
														}
													}
												} else {
													if (sizeValue === 1) {
														dateTimeElement0 = inaSimpleDateTimeValues
																.getElementByIndex(0);
														if ((dateTimeElement0 !== null)
																&& dateTimeElement0
																		.isString()) {
															dateTimeValue2 = (dateTimeElement0)
																	.getStringValue();
															if (sap.firefly.XStringUtils
																	.isNotNullAndNotEmpty(dateTimeValue2)) {
																simpleTypeVariable
																		.setDateTimeValue(sap.firefly.XDateTime
																				.createDateTimeFromStringWithFlag(
																						dateTimeValue2,
																						importer.m_supportsSAPDateFormat));
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						return null;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var variable = modelComponent;
						var valueType;
						var simpleValues;
						var multiValues;
						var size;
						var idx;
						var intValue;
						var longValue;
						var doubleValue;
						var stringValue;
						var dateValue;
						var timeValue;
						var dateTimeValue;
						var booleanValue;
						var spatialValue;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, variable
										.getName());
						valueType = variable.getValueType();
						if ((valueType === sap.firefly.XValueType.STRING)
								|| (valueType === sap.firefly.XValueType.DATE)
								|| (valueType === sap.firefly.XValueType.TIME)
								|| (valueType === sap.firefly.XValueType.DATE_TIME)
								|| valueType.isSpatial()) {
							simpleValues = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_SIMPLE_STRING_VALUES);
						} else {
							if ((valueType === sap.firefly.XValueType.DOUBLE)
									|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)
									|| (valueType === sap.firefly.XValueType.LONG)
									|| (valueType === sap.firefly.XValueType.INTEGER)) {
								simpleValues = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_SIMPLE_NUMERIC_VALUES);
							} else {
								exporter
										.addError(
												sap.firefly.ErrorCodes.INVALID_DATATYPE,
												sap.firefly.XStringUtils
														.concatenate3(
																"SimpleTypeVariable '",
																variable
																		.getName(),
																"' not exported"));
								return null;
							}
						}
						if (variable.isUsingMultipleValues()) {
							multiValues = variable.getValues();
							size = multiValues.size();
							for (idx = 0; idx < size; idx++) {
								if (valueType === sap.firefly.XValueType.INTEGER) {
									intValue = multiValues.get(idx);
									simpleValues.addInteger(intValue
											.getIntegerValue());
								} else {
									if (valueType === sap.firefly.XValueType.LONG) {
										longValue = multiValues.get(idx);
										simpleValues.addLong(longValue
												.getLongValue());
									} else {
										if (valueType === sap.firefly.XValueType.DOUBLE) {
											doubleValue = multiValues.get(idx);
											simpleValues.addDouble(doubleValue
													.getDoubleValue());
										} else {
											if (valueType === sap.firefly.XValueType.STRING) {
												stringValue = multiValues
														.get(idx);
												simpleValues
														.addString(stringValue
																.getStringValue());
											} else {
												if (valueType === sap.firefly.XValueType.DATE) {
													dateValue = multiValues
															.get(idx);
													simpleValues
															.addString(sap.firefly.QInAExportUtil
																	.dateToString(
																			exporter,
																			dateValue));
												} else {
													if (valueType === sap.firefly.XValueType.TIME) {
														timeValue = multiValues
																.get(idx);
														simpleValues
																.addString(sap.firefly.QInAExportUtil
																		.timeToString(
																				exporter,
																				timeValue));
													} else {
														if (valueType === sap.firefly.XValueType.DATE_TIME) {
															dateTimeValue = multiValues
																	.get(idx);
															simpleValues
																	.addString(sap.firefly.QInAExportUtil
																			.dateTimeToString(
																					exporter,
																					dateTimeValue));
														} else {
															if (valueType === sap.firefly.XValueType.BOOLEAN) {
																booleanValue = multiValues
																		.get(idx);
																simpleValues
																		.addString(sap.firefly.XBoolean
																				.convertBooleanToString(booleanValue
																						.getBooleanValue()));
															} else {
																if (valueType
																		.isSpatial()) {
																	spatialValue = multiValues
																			.get(idx);
																	simpleValues
																			.addString(spatialValue
																					.toWKT());
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						} else {
							if (valueType === sap.firefly.XValueType.INTEGER) {
								if ((variable.hasValue() === false)
										&& (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY)) {
									simpleValues.addNull();
								} else {
									simpleValues.addInteger(variable
											.getIntegerValue());
								}
							} else {
								if (valueType === sap.firefly.XValueType.LONG) {
									if ((variable.hasValue() === false)
											&& (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY)) {
										simpleValues.addNull();
									} else {
										simpleValues.addLong(variable
												.getLongValue());
									}
								} else {
									if (valueType === sap.firefly.XValueType.BOOLEAN) {
										if ((variable.hasValue() === false)
												&& (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY)) {
											simpleValues.addNull();
										} else {
											simpleValues.addBoolean(variable
													.getBooleanValue());
										}
									} else {
										if (valueType === sap.firefly.XValueType.DOUBLE) {
											if ((variable.hasValue() === false)
													&& (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY)) {
												simpleValues.addNull();
											} else {
												simpleValues.addDouble(variable
														.getDoubleValue());
											}
										} else {
											if (variable.hasValue() === false) {
												if (exporter.getMode() === sap.firefly.QModelFormat.INA_REPOSITORY) {
													simpleValues.addNull();
												} else {
													simpleValues.addString("");
												}
											} else {
												if ((valueType === sap.firefly.XValueType.STRING)
														|| valueType
																.isSpatial()) {
													simpleValues
															.addString(variable
																	.getStringValue());
												} else {
													if (valueType === sap.firefly.XValueType.DATE) {
														simpleValues
																.addString(sap.firefly.QInAExportUtil
																		.dateToString(
																				exporter,
																				variable
																						.getDateValue()));
													} else {
														if (valueType === sap.firefly.XValueType.TIME) {
															simpleValues
																	.addString(sap.firefly.QInAExportUtil
																			.timeToString(
																					exporter,
																					variable
																							.getTimeValue()));
														} else {
															if (valueType === sap.firefly.XValueType.DATE_TIME) {
																simpleValues
																		.addString(sap.firefly.QInAExportUtil
																				.dateTimeToString(
																						exporter,
																						variable
																								.getDateTimeValue()));
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVariableContainer",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.VARIABLE_CONTAINER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_VARIABLES;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var variableContainer = modelComponent;
						importer.importVariableList(inaList, variableContainer);
						return modelComponent;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var variableContainer = modelComponent;
						var variables = variableContainer.getVariables();
						var inaVariableList = null;
						if (sap.firefly.XCollectionUtils.hasElements(variables)) {
							inaVariableList = exporter
									.exportVariableList(variableContainer);
						}
						return inaVariableList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVariablesList",
				sap.firefly.QInAComponentWithList,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.VARIABLE_LIST;
					},
					importComponentWithList : function(importer, inaList,
							modelComponent, parentComponent, context) {
						var variableContainer = modelComponent;
						var len;
						var varIdx;
						var inaVariable;
						var variableName;
						var variable;
						var variableType;
						var dimMemberVar;
						if (inaList !== null) {
							len = inaList.size();
							for (varIdx = 0; varIdx < len; varIdx++) {
								inaVariable = inaList
										.getStructureByIndex(varIdx);
								variableName = inaVariable
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								variable = variableContainer
										.getVariableBaseByName(variableName);
								if (variable !== null) {
									variableType = variable.getVariableType();
									if (variableType
											.isTypeOf(sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE)) {
										importer.importSimpleTypeVariable(
												inaVariable, variable, context);
									} else {
										if (variableType
												.isTypeOf(sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)) {
											dimMemberVar = variable;
											importer
													.importDimensionMemberVariable(
															inaVariable,
															dimMemberVar, null,
															dimMemberVar);
										} else {
											if (variableType
													.isTypeOf(sap.firefly.VariableType.OPTION_LIST_VARIABLE)) {
												importer
														.importOptionListVariable(
																inaVariable,
																variable,
																context);
											} else {
												importer
														.addError(
																sap.firefly.ErrorCodes.INVALID_PARAMETER,
																sap.firefly.XStringUtils
																		.concatenate5(
																				"The variable '",
																				variableName,
																				"' of variable type '",
																				variableType
																						.getName(),
																				"' was not imported correctly"));
											}
										}
									}
								} else {
									importer
											.addWarning(
													sap.firefly.ErrorCodes.ET_ELEMENT_NOT_FOUND,
													sap.firefly.XStringUtils
															.concatenate3(
																	"The variable '",
																	variableName,
																	"' was not found"));
								}
							}
						}
						return modelComponent;
					},
					exportComponentWithList : function(exporter,
							modelComponent, flags) {
						var variableContainer = modelComponent;
						var variables = variableContainer.getVariables();
						var inaVariableList;
						var len;
						var mode;
						var i;
						var variable;
						var inaVariable;
						var externalVariable;
						if ((variables === null) || variables.isEmpty()) {
							return null;
						}
						inaVariableList = sap.firefly.PrList.create();
						len = variables.size();
						mode = exporter.m_mode;
						for (i = 0; i < len; i++) {
							variable = variables.get(i);
							inaVariable = null;
							if (mode === sap.firefly.QModelFormat.INA_METADATA) {
								exporter.exportVariable(variable, inaVariable);
							} else {
								if ((mode === sap.firefly.QModelFormat.INA_DATA)
										|| (mode === sap.firefly.QModelFormat.INA_VALUE_HELP)) {
									externalVariable = variable
											.getExternalRepresentation();
									if ((externalVariable !== null)
											&& (variable.getOlapComponentType() === externalVariable
													.getOlapComponentType())
											&& (sap.firefly.XString.isEqual(
													externalVariable.getName(),
													variable.getName()))) {
										variable = externalVariable;
									}
									if (variable.isInputEnabled()) {
										inaVariable = sap.firefly.PrStructure
												.create();
										inaVariable
												.setStringByName(
														sap.firefly.InAConstants.QY_NAME,
														variable.getName());
										exporter.exportVariable(variable,
												inaVariable);
									}
								} else {
									inaVariable = sap.firefly.PrStructure
											.create();
									inaVariable.setStringByName(
											sap.firefly.InAConstants.QY_NAME,
											variable.getName());
									exporter.exportVariable(variable,
											inaVariable);
								}
							}
							if (inaVariable !== null) {
								inaVariableList.add(inaVariable);
							}
						}
						return inaVariableList;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepository",
				sap.firefly.QInAComponentWithStructure,
				{
					getModelFormat : function() {
						return sap.firefly.QModelFormat.INA_REPOSITORY;
					},
					isMatching : function(version, inaImportElement) {
						var isMatching = sap.firefly.QInARepository.$superclass.isMatching
								.call(this, version, inaImportElement);
						var inaStructure;
						var tagName;
						if ((isMatching) && (inaImportElement !== null)) {
							inaStructure = inaImportElement;
							tagName = this.getTagName();
							if (tagName === null) {
								if (inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_CTYPE) === null) {
									isMatching = false;
								}
							} else {
								isMatching = inaStructure
										.hasValueByName(tagName);
							}
						}
						return isMatching;
					},
					getComponentType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					extendCustom : function(exporter, modelComponent,
							inaStructure) {
						var olapComponentType = this.getComponentType();
						var ctypeValue = sap.firefly.QInAConverter
								.lookupComponentTypeInA(olapComponentType);
						if (ctypeValue === null) {
							throw sap.firefly.XException
									.createRuntimeException("ctype not found");
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_CTYPE, ctypeValue);
						return inaStructure;
					}
				});
$Firefly.createClass("sap.firefly.QInATxtAxis", sap.firefly.QInATxt, {
	getComponentType : function() {
		return sap.firefly.OlapComponentType.AXIS;
	},
	exportText : function(exporter, modelComponent, buffer) {
		var axis = modelComponent;
		var size;
		var i;
		buffer.append(axis.getType().getName());
		buffer.append(": ");
		size = axis.size();
		for (i = 0; i < size; i++) {
			if (i > 0) {
				buffer.append(", ");
			}
			buffer.append(axis.get(i).getName());
		}
	}
});
$Firefly.createClass("sap.firefly.QInATxtDataCell", sap.firefly.QInATxt, {
	getComponentType : function() {
		return sap.firefly.OlapComponentType.DATA_CELL;
	},
	exportText : function(exporter, modelComponent, buffer) {
		var dataCell = modelComponent;
		buffer.append("Name:");
		buffer.append("\t\t\t\t");
		buffer.append(dataCell.getName());
		buffer.append("\nDecimal Places:");
		buffer.append("\t\t\t");
		buffer.append(sap.firefly.XInteger.convertIntegerToString(dataCell
				.getDecimalPlaces()));
		buffer.append("\nScaling Factor:");
		buffer.append("\t\t\t");
		buffer.append(sap.firefly.XInteger.convertIntegerToString(dataCell
				.getScalingFactor()));
		buffer.append("\nHas Sign Reversal:");
		buffer.append("\t\t");
		buffer.append(sap.firefly.XBoolean.convertBooleanToString(dataCell
				.hasSignReversal()));
		buffer.append("\nHas Selection:");
		buffer.append("\t\t\t");
		buffer.appendBoolean(false);
		buffer.append("\nIs Input Enabled:");
		buffer.append("\t\t");
		buffer.append(sap.firefly.XBoolean.convertBooleanToString(dataCell
				.isInputEnabled()));
		buffer.append("\nIs Emphasized:");
		buffer.append("\t\t\t");
		buffer.append(sap.firefly.XBoolean.convertBooleanToString(dataCell
				.isEmphasized()));
		buffer.append("\nIs Cumulated:");
		buffer.append("\t\t\t");
		buffer.append(sap.firefly.XBoolean.convertBooleanToString(dataCell
				.isCumulated()));
		buffer.append("\nDisaggregation Mode:");
		buffer.append("\t\t");
		buffer.append(dataCell.getDisaggregationMode().getName());
		buffer.append("\nDisaggregation Ref:");
		buffer.append("\t\t");
		buffer.append(dataCell.getDisaggregationRefCellName());
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInATxtDimension",
				sap.firefly.QInATxt,
				{
					$statics : {
						LINEBREAK : "\r\n"
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.ABSTRACT_DIMENSION;
					},
					exportText : function(exporter, modelComponent, buffer) {
						var dimension = modelComponent;
						var supportedAxes;
						var idxAxis;
						var keyField;
						var textField;
						var fields;
						var readonlyFields;
						var idxField;
						var field;
						var attributes;
						var readonlyAttributes;
						var idxAttribute;
						var attribute;
						var attributeFields;
						var iterator;
						var attributeField;
						var fieldLayoutType;
						var resultsetAttributes;
						var idxResultsetAttributes;
						var resultsetAttribute;
						var resultSetFields;
						var idxResultSet;
						var fieldInside;
						var resultsetFields;
						var idxResultsetFields;
						var resultsetField;
						var hierarchyName;
						var hierarchyDueDate;
						var hierarchyVersion;
						var alignment;
						buffer.append("Type: '");
						buffer.append(dimension.getDimensionType().getName());
						buffer.append("'\r\nName: '");
						buffer.append(dimension.getName());
						buffer.append("'\r\nText: '");
						buffer.append(dimension.getText());
						buffer.append("'\r\nAxis: ");
						buffer.append(dimension.getAxis().getType().getName());
						supportedAxes = dimension.getSupportedAxesTypes()
								.getValuesAsReadOnlyList();
						buffer.append(" | {");
						for (idxAxis = 0; idxAxis < (supportedAxes.size() - 1); idxAxis++) {
							buffer.append(supportedAxes.get(idxAxis).getName());
							buffer.append(", ");
						}
						buffer.append(supportedAxes.get(
								supportedAxes.size() - 1).getName());
						buffer.append("}");
						if (dimension.supportsResultAlignment()) {
							buffer.append("\r\nResult Alignment: ");
							buffer.append(dimension.getResultAlignment()
									.getName());
						}
						buffer
								.append("\r\n\r\n=== Fields =============================\r\n");
						keyField = dimension.getKeyField();
						buffer.append("Keyfield:         '");
						if (keyField !== null) {
							buffer.append(keyField.getName());
						}
						textField = dimension.getTextField();
						buffer.append("'\r\nTextfield:        '");
						if (textField !== null) {
							buffer.append(textField.getName());
						}
						buffer
								.append("'\r\n----------------------------------------\r\n");
						fields = dimension.getFields();
						readonlyFields = fields.getValuesAsReadOnlyList();
						for (idxField = 0; idxField < readonlyFields.size(); idxField++) {
							if (idxField > 0) {
								buffer.append("\r\n");
							}
							field = readonlyFields.get(idxField);
							buffer.append(field.getName());
							buffer.append(" | '");
							buffer.append(field.getText());
							buffer.append("' [");
							buffer
									.append(field.getPresentationType()
											.getName());
							buffer.append("] ");
							buffer.append(field.getValueType().getName());
							buffer.append(" ");
							if (field.isEqualTo(keyField)) {
								buffer.append(" / *** The keyfield");
							} else {
								if (field.isEqualTo(textField)) {
									buffer.append(" / *** The textfield");
								}
							}
						}
						buffer
								.append("\r\n\r\n=== Attributes =========================\r\n");
						attributes = dimension.getAttributes();
						readonlyAttributes = attributes
								.getValuesAsReadOnlyList();
						for (idxAttribute = 0; idxAttribute < readonlyAttributes
								.size(); idxAttribute++) {
							if (idxAttribute > 0) {
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
							}
							attribute = readonlyAttributes.get(idxAttribute);
							buffer.append(attribute.getName());
							buffer
									.append(sap.firefly.QInATxtDimension.LINEBREAK);
							attributeFields = attribute.getFields();
							iterator = attributeFields.getIterator();
							while (iterator.hasNext()) {
								attributeField = iterator.next();
								buffer.append("    ");
								buffer.append(attributeField.getName());
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
							}
							iterator.releaseObject();
						}
						buffer
								.append("\r\n=== Resultset ==========================\r\n");
						buffer.append("Layout Type: ");
						fieldLayoutType = dimension.getFieldLayoutType();
						buffer.append(fieldLayoutType.getName());
						if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
							buffer.append("\r\nResultset Attributes:");
							resultsetAttributes = dimension
									.getResultSetAttributes()
									.getValuesAsReadOnlyList();
							for (idxResultsetAttributes = 0; idxResultsetAttributes < resultsetAttributes
									.size(); idxResultsetAttributes++) {
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
								resultsetAttribute = resultsetAttributes
										.get(idxResultsetAttributes);
								buffer.append("    ");
								buffer.append(resultsetAttribute.getName());
								resultSetFields = resultsetAttribute
										.getResultSetFields();
								buffer.append("\r\n        Fields: {");
								for (idxResultSet = 0; idxResultSet < resultSetFields
										.size(); idxResultSet++) {
									if (idxResultSet > 0) {
										buffer.append(", ");
									}
									fieldInside = resultSetFields
											.get(idxResultSet);
									buffer.append(fieldInside.getName());
								}
								buffer.append("}");
							}
						} else {
							buffer.append("\r\nResultset Fields:");
							resultsetFields = dimension.getResultSetFields()
									.getValuesAsReadOnlyList();
							for (idxResultsetFields = 0; idxResultsetFields < resultsetFields
									.size(); idxResultsetFields++) {
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
								resultsetField = resultsetFields
										.get(idxResultsetFields);
								buffer.append("    ");
								buffer.append(resultsetField.getName());
							}
						}
						hierarchyName = dimension.getHierarchyName();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(hierarchyName)) {
							buffer
									.append("\r\n=== Hierarchy ==========================\r\n");
							buffer.append("Name: '");
							buffer.append(hierarchyName);
							buffer.append("'\r\n");
							hierarchyDueDate = dimension.getHierarchyDueDate();
							if (hierarchyDueDate !== null) {
								buffer.append("Due Date: ");
								buffer.append(hierarchyDueDate.toIsoFormat());
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
							}
							hierarchyVersion = dimension.getHierarchyVersion();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(hierarchyVersion)) {
								buffer.append("Version: ");
								buffer.append(hierarchyVersion);
								buffer
										.append(sap.firefly.QInATxtDimension.LINEBREAK);
							}
							alignment = dimension.getLowerLevelNodeAlignment();
							buffer.append("Alignment: ");
							buffer.append(alignment.getName());
							buffer
									.append(sap.firefly.QInATxtDimension.LINEBREAK);
						}
					}
				});
$Firefly.createClass("sap.firefly.QInATxtGenericComponent",
		sap.firefly.QInATxt, {
			getComponentType : function() {
				return sap.firefly.OlapComponentType.OLAP;
			},
			exportText : function(exporter, modelComponent, buffer) {
				buffer.append("Type: ");
				buffer.append(modelComponent.getComponentType().getName());
				buffer.appendNewLine();
				buffer.append("Name: ");
				buffer.append(modelComponent.getName());
				sap.firefly.PrString.createWithValue(buffer.toString());
			}
		});
$Firefly.createClass("sap.firefly.QInATxtOperation", sap.firefly.QInATxt, {
	getComponentType : function() {
		return sap.firefly.FilterComponentType.OPERATION;
	},
	exportText : function(exporter, modelComponent, buffer) {
		var element = modelComponent;
		var field = element.getField();
		var comparisonOperator;
		var low;
		var value;
		if (field !== null) {
			buffer.append(field.getName());
		}
		buffer.append(" ");
		comparisonOperator = element.getComparisonOperator();
		if (comparisonOperator !== null) {
			buffer.append(comparisonOperator.getDisplayString());
		}
		buffer.append(" ");
		low = element.getLow();
		if (low !== null) {
			value = low.getValue();
			if (value !== null) {
				buffer.append(value.toString());
			}
		}
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInAHierarchyValueHelp",
				sap.firefly.QInAComponentWithStructure,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.HIERARCHY;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_HIERARCHY;
					},
					getModelFormat : function() {
						return sap.firefly.QModelFormat.INA_VALUE_HELP;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qDimension = modelComponent;
						var hierarchyName = qDimension.getHierarchyName();
						var inaHierarchy;
						var hierarchyVersion;
						var visibility;
						var memberOfPostedNodeVisibility;
						if (qDimension.isSelectorHierarchyActive()
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(hierarchyName)) {
							inaHierarchy = sap.firefly.PrStructure.create();
							hierarchyVersion = qDimension.getHierarchyVersion();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(hierarchyVersion)) {
								inaHierarchy.setStringByName(
										sap.firefly.InAConstants.QY_VERSION,
										hierarchyVersion);
							}
							sap.firefly.QInAExportUtil.setDate(exporter,
									inaHierarchy,
									sap.firefly.InAConstants.QY_DUE_DATE,
									qDimension.getHierarchyDueDate());
							inaHierarchy.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									hierarchyName);
							inaHierarchy
									.setIntegerByName(
											sap.firefly.InAConstants.QY_INITIAL_DRILL_LEVEL,
											qDimension.getSelectorRootLevel());
							visibility = qDimension
									.getMemberOfPostedNodeVisibility();
							memberOfPostedNodeVisibility = sap.firefly.QInAConverter
									.lookupResultSetVisibilityInA(visibility);
							inaHierarchy
									.setStringByName(
											sap.firefly.InAConstants.QY_MEMBER_OF_POSTED_NODE_VISIBILITY,
											memberOfPostedNodeVisibility);
							return inaHierarchy;
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsDataEntry",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(column, row, queryModel,
								originalXValue, originalLock,
								originalPlanningCommand, originalForceNewValue) {
							var value = new sap.firefly.RsDataEntry();
							var originalXValue2;
							value.m_column = column;
							value.m_row = row;
							originalXValue2 = originalXValue;
							if (originalXValue2 === null) {
								originalXValue2 = sap.firefly.XDoubleValue
										.create(0);
							}
							value.m_originXValue = originalXValue2.clone();
							value.m_xvalue = originalXValue2.clone();
							value.m_originalLock = originalLock;
							value.m_lock = originalLock;
							value.m_planningCommand = originalPlanningCommand;
							value.m_forceNewValue = originalForceNewValue;
							return value;
						}
					},
					m_column : 0,
					m_row : 0,
					m_originalLock : false,
					m_originXValue : null,
					m_xvalue : null,
					m_lockSet : false,
					m_lock : false,
					m_forceNewValue : false,
					m_planningCommand : null,
					m_processingOrder : 0,
					m_priority : 0,
					m_processingType : null,
					releaseObject : function() {
						this.m_originXValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_originXValue);
						this.m_xvalue = sap.firefly.XObject
								.releaseIfNotNull(this.m_xvalue);
						this.m_planningCommand = null;
						sap.firefly.RsDataEntry.$superclass.releaseObject
								.call(this);
					},
					getColumn : function() {
						return this.m_column;
					},
					getRow : function() {
						return this.m_row;
					},
					isValueChanged : function() {
						var isEqual = this.m_originXValue
								.isEqualTo(this.m_xvalue);
						return !isEqual;
					},
					resetNewValue : function() {
						this.m_xvalue.resetValue(this.m_originXValue);
					},
					setValueLock : function(lock) {
						if (lock === this.m_originalLock) {
							this.resetValueLock();
						} else {
							this.m_lock = lock;
							this.m_lockSet = true;
						}
					},
					isValueLocked : function() {
						return this.m_lock;
					},
					isValueLockChanged : function() {
						return this.m_lockSet;
					},
					resetValueLock : function() {
						this.m_lock = this.m_originalLock;
						this.m_lockSet = false;
					},
					forceNewValue : function(forceNewValue) {
						this.m_forceNewValue = forceNewValue;
					},
					isNewValueForced : function() {
						return this.m_forceNewValue;
					},
					getPlanningCommand : function() {
						return this.m_planningCommand;
					},
					setPlanningCommand : function(planningCommand) {
						this.m_planningCommand = planningCommand;
					},
					getProcessingOrder : function() {
						return this.m_processingOrder;
					},
					setProcessingOrder : function(processingOrder) {
						if (processingOrder < 0) {
							throw sap.firefly.XException
									.createIllegalArgumentException("processing order must not be negative");
						}
						this.m_processingOrder = processingOrder;
					},
					getPriority : function() {
						return this.m_priority;
					},
					setPriority : function(priority) {
						this.m_priority = priority;
					},
					setDoubleValue : function(doubleValue) {
						this.m_xvalue = sap.firefly.XDoubleValue
								.create(doubleValue);
					},
					getDoubleValue : function() {
						this.assertType(sap.firefly.XValueType.DOUBLE);
						return (this.m_xvalue).getDoubleValue();
					},
					setDateValue : function(dateValue) {
						this.m_xvalue = dateValue;
					},
					getDateValue : function() {
						this.assertType(sap.firefly.XValueType.DATE);
						return this.m_xvalue;
					},
					setDateTimeValue : function(dateTimeValue) {
						this.m_xvalue = dateTimeValue;
					},
					getDateTimeValue : function() {
						this.assertType(sap.firefly.XValueType.DATE_TIME);
						return this.m_xvalue;
					},
					setTimeValue : function(timeValue) {
						this.m_xvalue = timeValue;
					},
					getTimeValue : function() {
						this.assertType(sap.firefly.XValueType.TIME);
						return this.m_xvalue;
					},
					setStringValue : function(stringValue) {
						this.m_xvalue = sap.firefly.XStringValue
								.create(stringValue);
					},
					getStringValue : function() {
						var sv;
						this.assertType(sap.firefly.XValueType.STRING);
						sv = this.m_xvalue;
						return sv.getStringValue();
					},
					setNewValueExternal : function(valueExternal) {
						var newXString;
						if (this.m_xvalue.getValueType() === sap.firefly.XValueType.STRING) {
							newXString = this.m_xvalue;
							newXString.setStringValue(valueExternal);
						} else {
							newXString = sap.firefly.XStringValue
									.create(valueExternal);
							this.m_xvalue = newXString;
						}
					},
					getNewValueExternal : function() {
						var newXString;
						this.assertType(sap.firefly.XValueType.STRING);
						newXString = this.m_xvalue;
						return newXString.getStringValue();
					},
					setTimeSpanValue : function(value) {
						this.m_xvalue = value;
					},
					getTimeSpanValue : function() {
						this.assertType(sap.firefly.XValueType.TIMESPAN);
						return this.m_xvalue;
					},
					setLongValue : function(longValue) {
						this.m_xvalue = sap.firefly.XLongValue
								.create(longValue);
					},
					getLongValue : function() {
						this.assertType(sap.firefly.XValueType.LONG);
						return (this.m_xvalue).getLongValue();
					},
					setIntegerValue : function(integerValue) {
						this.m_xvalue = sap.firefly.XIntegerValue
								.create(integerValue);
					},
					getIntegerValue : function() {
						this.assertType(sap.firefly.XValueType.INTEGER);
						return (this.m_xvalue).getIntegerValue();
					},
					setBooleanValue : function(booleanValue) {
						this.m_xvalue = sap.firefly.XBooleanValue
								.create(booleanValue);
					},
					getBooleanValue : function() {
						this.assertType(sap.firefly.XValueType.BOOLEAN);
						return (this.m_xvalue).getBooleanValue();
					},
					setXValue : function(value) {
						this.m_xvalue = value;
					},
					getXValue : function() {
						return this.m_xvalue;
					},
					assertType : function(valueType) {
						if (this.m_xvalue.getValueType() !== valueType) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					resetAllChanges : function() {
						this.resetNewValue();
						this.resetValueLock();
						this.setPlanningCommand(null);
						this.setProcessingOrder(0);
						this.setPriority(0);
					},
					getProcessingType : function() {
						return this.m_processingType;
					},
					setProcessingType : function(dataEntryProcessingType) {
						this.m_processingType = dataEntryProcessingType;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QVisibilityTriplet",
				sap.firefly.DfNameObject,
				{
					$statics : {
						create : function(alignment, element, visibility) {
							var newObj = new sap.firefly.QVisibilityTriplet();
							newObj.m_alignment = alignment;
							newObj.m_element = element;
							newObj.m_visibility = visibility;
							newObj.setName(sap.firefly.QVisibilityTriplet
									.getVisibilityKey(alignment, element));
							return newObj;
						},
						getVisibilityKey : function(alignment, element) {
							if (alignment === null) {
								throw sap.firefly.XException
										.createIllegalArgumentException("Alignment not defined");
							}
							return sap.firefly.XStringUtils
									.concatenate3(alignment.getName(), "-",
											element.getName());
						}
					},
					m_alignment : null,
					m_element : null,
					m_visibility : null,
					clone : function() {
						return sap.firefly.QVisibilityTriplet.create(
								this.m_alignment, this.m_element,
								this.m_visibility);
					},
					releaseObject : function() {
						this.m_alignment = null;
						this.m_element = null;
						this.m_visibility = null;
						sap.firefly.QVisibilityTriplet.$superclass.releaseObject
								.call(this);
					},
					getAlignment : function() {
						return this.m_alignment;
					},
					getElement : function() {
						return this.m_element;
					},
					setVisibility : function(visibility) {
						this.m_visibility = visibility;
					},
					getVisibility : function() {
						return this.m_visibility;
					},
					toString : function() {
						return sap.firefly.XStringUtils.concatenate3(this
								.getName(), "-", this.m_visibility.getName());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QCapabilities",
				sap.firefly.XObject,
				{
					$statics : {
						create : function() {
							var newObj = new sap.firefly.QCapabilities();
							newObj.m_supportedResultAlignmentLevel = sap.firefly.QModelLevel.NONE;
							newObj.m_supportedVisibilityLocation = sap.firefly.QModelLevel.NONE;
							newObj.m_supportedReorderingCapability = sap.firefly.ReorderingCapability.NONE;
							newObj.m_supportedResultAlignment = sap.firefly.XList
									.create();
							newObj.m_supportedConditionalResults = sap.firefly.XList
									.create();
							return newObj;
						}
					},
					m_systemType : null,
					m_supportsCustomDimensionFilterCapability : false,
					m_supportsFormulaMeasures : false,
					m_supportsRestrictedMeasures : false,
					m_supportsResultsetFacets : false,
					m_supportsExpandBottomUp : false,
					m_supportsMetadataDataCategory : false,
					m_supportsExtendedSort : false,
					m_supportsDataCells : false,
					m_supportsSpatialTransformation : false,
					m_supportsSpatialClustering : false,
					m_supportsConditionalResultVisibility : false,
					m_supportsConditionalResults : false,
					m_supportsMemberVisibility : false,
					m_supportsUniqueHierarchyPath : false,
					m_supportsCubeBlending : false,
					m_supportsCubeBlendingProperties : false,
					m_supportsCubeBlendingOutOfContext : false,
					m_supportsExceptionAggregationDimsFormulas : false,
					m_supportsIgnoreExternalDimensions : false,
					m_supportsHierarchyNavigationDeltaMode : false,
					m_supportsHierarchyMetadata : false,
					m_supportsHierarchyLevelMetadata : false,
					m_supportsHierarchyTrapezoidFilter : false,
					m_supportsHierarchyLevelOffsetFilter : false,
					m_supportsConditions : false,
					m_supportsExceptions : false,
					m_supportsExceptionsSettings : false,
					m_supportsOriginalTexts : false,
					m_supportsAverageCountNullZero : false,
					m_supportsLocaleSorting : false,
					m_supportsCeScenarioParams : false,
					m_supportsUnifiedDataCells : false,
					m_supportsCartesianFilterIntersect : false,
					m_supportsCheckVariables : false,
					m_supportsReInitVariables : false,
					m_supportsDirectVariableTransfer : false,
					m_supportsHierarchyPath : false,
					m_supportsReturnedDataSelection : false,
					m_supportsShutdown : false,
					m_supportsCellValueOperands : false,
					m_supportsIntersectLayers : false,
					m_supportsComplexSelections : false,
					m_supportsSelectionVisibilityContainer : false,
					m_supportsObtainability : false,
					m_supportsSapDateFormat : false,
					m_supportsDataCellMixedValues : false,
					m_supportsSetOperand : false,
					m_supportsConvertToFlatFilter : false,
					m_supportsCummulative : false,
					m_supportsHierNavCounter : false,
					m_supportsHierAttHierFields : false,
					m_supportsHierCarryingDim : false,
					m_supportsSortType : false,
					m_supportsSpatialFilter : false,
					m_supportsSpatialFilterSrid : false,
					m_supportsExtendedDimensions : false,
					m_supportsInputReadinessStates : false,
					m_supportsSortNewValues : false,
					m_supportsIgnoreUnitOfZeroValueInAggregation : false,
					m_supportsCubeBlendingWithNSubqueries : false,
					m_supportsDataRefreshAndDataTopicality : false,
					m_supportedResultAlignmentLevel : null,
					m_supportedVisibilityLocation : null,
					m_supportedReorderingCapability : null,
					m_supportedResultAlignment : null,
					m_supportedConditionalResults : null,
					clone : function() {
						var source = this;
						var target = new sap.firefly.QCapabilities();
						target.m_systemType = source.getSystemType();
						target.m_supportsCustomDimensionFilterCapability = source
								.supportsCustomDimensionFilterCapability();
						target.m_supportsFormulaMeasures = source
								.supportsFormulaMeasures();
						target.m_supportsRestrictedMeasures = source
								.supportsRestrictedMeasures();
						target.m_supportsResultsetFacets = source
								.supportsResultsetFacets();
						target.m_supportsExpandBottomUp = source
								.supportsExpandBottomUp();
						target.m_supportsMetadataDataCategory = source
								.getSupportsMetadataDataCategory();
						target.m_supportsExtendedSort = source
								.supportsExtendedSort();
						target.m_supportsDataCells = source.supportsDataCells();
						target.m_supportsSpatialTransformation = source
								.supportsSpatialTransformation();
						target.m_supportsSpatialClustering = source
								.supportsSpatialClustering();
						target.m_supportsConditionalResultVisibility = source
								.supportsConditionalResultVisibility();
						target.m_supportsConditionalResults = source
								.supportsConditionalResults();
						target.m_supportsMemberVisibility = source
								.supportsMemberVisibility();
						target.m_supportsUniqueHierarchyPath = source
								.supportsUniqueHierarchyPath();
						target.m_supportsCubeBlending = source
								.supportsCubeBlending();
						target.m_supportsCubeBlendingProperties = source
								.supportsCubeBlendingProperties();
						target.m_supportsCubeBlendingOutOfContext = source
								.supportsCubeBlendingOutOfContext();
						target.m_supportsExceptionAggregationDimsFormulas = source
								.supportsExceptionAggregationDimsFormulas();
						target.m_supportsIgnoreExternalDimensions = source
								.supportsIgnoreExternalDimensions();
						target.m_supportsHierarchyNavigationDeltaMode = source
								.supportsHierarchyNavigationDeltaMode();
						target.m_supportsHierarchyMetadata = source
								.supportsHierarchyMetadata();
						target.m_supportsHierarchyLevelMetadata = source
								.supportsHierarchyLevelMetadata();
						target.m_supportsHierarchyTrapezoidFilter = source
								.supportsHierarchyTrapezoidFilter();
						target.m_supportsHierarchyLevelOffsetFilter = source
								.supportsHierarchyLevelOffsetFilter();
						target.m_supportsConditions = source
								.supportsConditions();
						target.m_supportsExceptions = source
								.supportsExceptions();
						target.m_supportsExceptionsSettings = source
								.supportsExceptionSettings();
						target.m_supportsOriginalTexts = source
								.supportsKeepOriginalTexts();
						target.m_supportsAverageCountNullZero = source
								.supportsAverageCountNullZero();
						target.m_supportsLocaleSorting = source
								.supportsLocaleSorting();
						target.m_supportsCeScenarioParams = source
								.supportsCeScenarioParams();
						target.m_supportsUnifiedDataCells = source
								.supportsUnifiedDataCells();
						target.m_supportsCartesianFilterIntersect = source
								.supportsCartesianFilterIntersect();
						target.m_supportedResultAlignmentLevel = source
								.getSupportedResultAlignmentLevel();
						target.m_supportedVisibilityLocation = source
								.getSupportedResultVisibilityLevel();
						target.m_supportedReorderingCapability = source
								.getResultStructureReorderingCapability();
						target.m_supportedResultAlignment.addAll(source
								.getSupportedResultAlignments());
						target.m_supportedConditionalResults.addAll(source
								.getSupportedConditionalResults());
						target.m_supportsCheckVariables = source
								.supportsCheckVariables();
						target.m_supportsReInitVariables = source
								.supportsReInitVariables();
						target.m_supportsDirectVariableTransfer = source
								.supportsDirectVariableTransfer();
						target.m_supportsHierarchyPath = source
								.supportsHierarchyPath();
						target.m_supportsReturnedDataSelection = source
								.supportsReturnedDataSelection();
						target.m_supportsShutdown = source.supportsShutdown();
						target.m_supportsCellValueOperands = source
								.supportsCellValueOperand();
						target.m_supportsIntersectLayers = source
								.supportsIntersectLayers();
						target.m_supportsComplexSelections = source
								.supportsComplexSelections();
						target.m_supportsSelectionVisibilityContainer = source
								.supportsSelectionVisibilityContainer();
						target.m_supportsObtainability = source
								.supportsObtainability();
						target.m_supportsSapDateFormat = source
								.supportsSapDateFormat();
						target.m_supportsDataCellMixedValues = source
								.supportsDataCellMixedValues();
						target.m_supportsSetOperand = source
								.supportsSetOperand();
						target.m_supportsConvertToFlatFilter = source
								.supportsConvertToFlatFilter();
						target.m_supportsCummulative = source
								.supportsCummulative();
						target.m_supportsHierNavCounter = source
								.supportsHierarchyNavCounter();
						target.m_supportsHierAttHierFields = source
								.supportsHierarchyAttHierFields();
						target.m_supportsHierCarryingDim = source
								.supportsHierarchyCarryingDim();
						target.m_supportsSortType = source.supportsSortType();
						target.m_supportsSpatialFilter = source
								.supportsSpatialFilter();
						target.m_supportsSpatialFilterSrid = source
								.supportsSpatialFilterSrid();
						target.m_supportsExtendedDimensions = source
								.supportsExtendedDimensions();
						target.m_supportsSortNewValues = source.m_supportsSortNewValues;
						target.m_supportsIgnoreUnitOfZeroValueInAggregation = source.m_supportsIgnoreUnitOfZeroValueInAggregation;
						target.m_supportsDataRefreshAndDataTopicality = source
								.supportsDataRefreshAndDataTopicality();
						return target;
					},
					configureForModelFormat : function(modelFormat) {
						if ((modelFormat !== sap.firefly.QModelFormat.INA_DATA)
								&& (modelFormat !== sap.firefly.QModelFormat.INA_DATA_REINIT)
								&& (modelFormat !== sap.firefly.QModelFormat.INA_VALUE_HELP)
								&& (modelFormat !== sap.firefly.QModelFormat.INA_METADATA)) {
							this.setSupportsSapDateFormat(false);
							this.setSupportsExtendedDimensions(true);
							this.setSupportsSpatialFilterSrid(true);
							this.setSupportsCummulative(true);
						}
					},
					supportsCartesianFilterIntersect : function() {
						return this.m_supportsCartesianFilterIntersect;
					},
					setSupportsCartesianFilterIntersect : function(
							supportsCartesianFilterIntersect) {
						this.m_supportsCartesianFilterIntersect = supportsCartesianFilterIntersect;
					},
					supportsCustomDimensionFilterCapability : function() {
						return this.m_supportsCustomDimensionFilterCapability;
					},
					setSupportsCustomDimensionFilterCapability : function(
							supportsCustomDimensionFilter) {
						this.m_supportsCustomDimensionFilterCapability = supportsCustomDimensionFilter;
					},
					supportsLocaleSorting : function() {
						return this.m_supportsLocaleSorting;
					},
					setSupportsLocaleSorting : function(supportsLocaleSorting) {
						this.m_supportsLocaleSorting = supportsLocaleSorting;
					},
					supportsResultsetFacets : function() {
						return this.m_supportsResultsetFacets;
					},
					setSupportsResultsetFacets : function(
							supportsResultsetFacets) {
						this.m_supportsResultsetFacets = supportsResultsetFacets;
					},
					supportsDataCells : function() {
						return this.m_supportsDataCells;
					},
					setSupportsDataCells : function(supportsDataCells) {
						this.m_supportsDataCells = supportsDataCells;
					},
					supportsExtendedSort : function() {
						return this.m_supportsExtendedSort;
					},
					setSupportsExtendedSort : function(supportsExtendedSort) {
						this.m_supportsExtendedSort = supportsExtendedSort;
					},
					supportsConditions : function() {
						return this.m_supportsConditions;
					},
					setSupportsConditions : function(supportsConditions) {
						this.m_supportsConditions = supportsConditions;
					},
					supportsExpandBottomUp : function() {
						return this.m_supportsExpandBottomUp;
					},
					setSupportsExpandBottomUp : function(supportsExpandBottomUp) {
						this.m_supportsExpandBottomUp = supportsExpandBottomUp;
					},
					setSupportsCubeBlending : function(supportsCubeBlending) {
						this.m_supportsCubeBlending = supportsCubeBlending;
					},
					supportsCubeBlending : function() {
						return this.m_supportsCubeBlending;
					},
					supportsHierarchyTrapezoidFilter : function() {
						return this.m_supportsHierarchyTrapezoidFilter;
					},
					setSupportsHierarchyTrapezoidFilter : function(
							supportsHierarchyTrapezoidFilter) {
						this.m_supportsHierarchyTrapezoidFilter = supportsHierarchyTrapezoidFilter;
					},
					supportsSpatialClustering : function() {
						return this.m_supportsSpatialClustering;
					},
					setSupportsSpatialClustering : function(
							supportsSpatialClustering) {
						this.m_supportsSpatialClustering = supportsSpatialClustering;
					},
					supportsAverageCountNullZero : function() {
						return this.m_supportsAverageCountNullZero;
					},
					setSupportsAverageCountNullZero : function(
							supportsAverageCountNullZero) {
						this.m_supportsAverageCountNullZero = supportsAverageCountNullZero;
					},
					supportsCeScenarioParams : function() {
						return this.m_supportsCeScenarioParams;
					},
					setSupportsCeScenarioParams : function(
							supportsCeScenarioParams) {
						this.m_supportsCeScenarioParams = supportsCeScenarioParams;
					},
					setSupportsHierarchyLevelOffsetFilter : function(
							supportsHierarchyLevelOffsetFilter) {
						this.m_supportsHierarchyLevelOffsetFilter = supportsHierarchyLevelOffsetFilter;
					},
					supportsHierarchyLevelOffsetFilter : function() {
						return this.m_supportsHierarchyLevelOffsetFilter;
					},
					getSupportsMetadataDataCategory : function() {
						return this.m_supportsMetadataDataCategory;
					},
					setSupportsMetadataDataCategory : function(
							supportsMetadataDataCategory) {
						this.m_supportsMetadataDataCategory = supportsMetadataDataCategory;
					},
					supportsSpatialTransformation : function() {
						return this.m_supportsSpatialTransformation;
					},
					setSupportsSpatialTransformations : function(
							supportsSpatrialTransformations) {
						this.m_supportsSpatialTransformation = supportsSpatrialTransformations;
					},
					supportsMemberVisibility : function() {
						return this.m_supportsMemberVisibility;
					},
					setSupportsMemberVisibility : function(
							supportsMemberVisibility) {
						this.m_supportsMemberVisibility = supportsMemberVisibility;
					},
					supportsUniqueHierarchyPath : function() {
						return this.m_supportsUniqueHierarchyPath;
					},
					setSupportsUniqueHierarchyPath : function(
							supportsUniqueHierarchyPath) {
						this.m_supportsUniqueHierarchyPath = supportsUniqueHierarchyPath;
					},
					supportsCubeBlendingProperties : function() {
						return this.m_supportsCubeBlendingProperties;
					},
					setSupportsCubeBlendingProperties : function(
							supportsCubeBlendingProperties) {
						this.m_supportsCubeBlendingProperties = supportsCubeBlendingProperties;
					},
					supportsExceptionAggregationDimsFormulas : function() {
						return this.m_supportsExceptionAggregationDimsFormulas;
					},
					setSupportsExceptionAggregationDimsFormulas : function(
							supportsExceptionAggregation) {
						this.m_supportsExceptionAggregationDimsFormulas = supportsExceptionAggregation;
					},
					supportsIgnoreExternalDimensions : function() {
						return this.m_supportsIgnoreExternalDimensions;
					},
					setSupportsIgnoreExternalDimension : function(
							supportsIgnoreExternalDimensions) {
						this.m_supportsIgnoreExternalDimensions = supportsIgnoreExternalDimensions;
					},
					supportsHierarchyNavigationDeltaMode : function() {
						return this.m_supportsHierarchyNavigationDeltaMode;
					},
					setSupportsHierarchyNavigationDeltaModel : function(
							supportsHierarchyNavigationDeltaMode) {
						this.m_supportsHierarchyNavigationDeltaMode = supportsHierarchyNavigationDeltaMode;
					},
					supportsHierarchyMetadata : function() {
						return this.m_supportsHierarchyMetadata;
					},
					setSupportsHierarchyMetadata : function(
							supportsHierarchyMetadata) {
						this.m_supportsHierarchyMetadata = supportsHierarchyMetadata;
					},
					supportsExceptions : function() {
						return this.m_supportsExceptions;
					},
					setSupportsExceptions : function(supportsExceptions) {
						this.m_supportsExceptions = supportsExceptions;
					},
					supportsHierarchyLevelMetadata : function() {
						return this.m_supportsHierarchyLevelMetadata;
					},
					setSupportsHierarchyLevelMetadata : function(
							supportsHierarchyLevelMetadata) {
						this.m_supportsHierarchyLevelMetadata = supportsHierarchyLevelMetadata;
					},
					supportsExceptionSettings : function() {
						return this.m_supportsExceptionsSettings;
					},
					setSupportsExceptionSettings : function(
							supportsExceptionSettings) {
						this.m_supportsExceptionsSettings = supportsExceptionSettings;
					},
					setSupportsConditionalResult : function(
							supportsConditionalResults) {
						this.m_supportsConditionalResults = supportsConditionalResults;
					},
					supportsConditionalResults : function() {
						return this.m_supportsConditionalResults;
					},
					setSupportsConditionalResultVisibility : function(
							supportsConditionalResultVisibility) {
						this.m_supportsConditionalResultVisibility = supportsConditionalResultVisibility;
					},
					supportsConditionalResultVisibility : function() {
						return this.m_supportsConditionalResultVisibility;
					},
					supportsRestrictedMeasures : function() {
						return this.m_supportsRestrictedMeasures;
					},
					setSupportsRestrictedMeasures : function(
							supportsRestrictedMeasures) {
						this.m_supportsRestrictedMeasures = supportsRestrictedMeasures;
					},
					supportsFormulaMeasures : function() {
						return this.m_supportsFormulaMeasures;
					},
					setSupportsFormulaMeasures : function(
							supportsFormulaMeasures) {
						this.m_supportsFormulaMeasures = supportsFormulaMeasures;
					},
					supportsKeepOriginalTexts : function() {
						return this.m_supportsOriginalTexts;
					},
					setSupportsKeepOriginalTexts : function(
							supportsOriginalTexts) {
						this.m_supportsOriginalTexts = supportsOriginalTexts;
					},
					supportsUnifiedDataCells : function() {
						return this.m_supportsUnifiedDataCells;
					},
					setSupportsUnifiedDataCells : function(
							supportsUnifiedDataCells) {
						this.m_supportsUnifiedDataCells = supportsUnifiedDataCells;
					},
					getSupportedResultAlignmentLevel : function() {
						return this.m_supportedResultAlignmentLevel;
					},
					setSupportedResultAlignmentLevel : function(
							supportedAlignmentLocation) {
						this.m_supportedResultAlignmentLevel = supportedAlignmentLocation;
					},
					getSupportedResultVisibilityLevel : function() {
						return this.m_supportedVisibilityLocation;
					},
					setSupportedVisibilityLocation : function(
							supportedVisibilityLocation) {
						this.m_supportedVisibilityLocation = supportedVisibilityLocation;
					},
					getResultStructureReorderingCapability : function() {
						return this.m_supportedReorderingCapability;
					},
					setResultStructureReorderingCapability : function(
							supportedReorderingCapability) {
						this.m_supportedReorderingCapability = supportedReorderingCapability;
					},
					getSupportedResultAlignments : function() {
						return this.m_supportedResultAlignment;
					},
					supportsResultAlignmentType : function(resultAlignment) {
						return this.m_supportedResultAlignment
								.contains(resultAlignment);
					},
					addSupportedResultAlignment : function(
							supportedResultAlignment) {
						this.m_supportedResultAlignment
								.add(supportedResultAlignment);
					},
					clearSupportedResultAlignment : function() {
						this.m_supportedResultAlignment.clear();
					},
					addSupportedConditionalElement : function(element) {
						this.m_supportedConditionalResults.add(element);
					},
					getSupportedConditionalResults : function() {
						return this.m_supportedConditionalResults;
					},
					getSystemType : function() {
						return this.m_systemType;
					},
					setSystemType : function(systemType) {
						this.m_systemType = systemType;
					},
					supportsCheckVariables : function() {
						return this.m_supportsCheckVariables;
					},
					setSupportsCheckVariables : function(supportsCheckVariables) {
						this.m_supportsCheckVariables = supportsCheckVariables;
					},
					supportsReInitVariables : function() {
						return this.m_supportsReInitVariables;
					},
					setSupportsReInitVariables : function(
							supportsReInitVariables) {
						this.m_supportsReInitVariables = supportsReInitVariables;
					},
					supportsDirectVariableTransfer : function() {
						return this.m_supportsDirectVariableTransfer;
					},
					setSupportsDirectVariableTransfer : function(
							supportsDirectVariableTransfer) {
						this.m_supportsDirectVariableTransfer = supportsDirectVariableTransfer;
					},
					supportsHierarchyPath : function() {
						return this.m_supportsHierarchyPath;
					},
					setSupportsHierarchyPath : function(supportsHierarchyPath) {
						this.m_supportsHierarchyPath = supportsHierarchyPath;
					},
					supportsReturnedDataSelection : function() {
						return this.m_supportsReturnedDataSelection;
					},
					setSupportsReturnedDataSelection : function(
							supportsReturnedDataSelection) {
						this.m_supportsReturnedDataSelection = supportsReturnedDataSelection;
					},
					supportsShutdown : function() {
						return this.m_supportsShutdown;
					},
					setSupportsShutdown : function(supportsShutdown) {
						this.m_supportsShutdown = supportsShutdown;
					},
					supportsComplexSelections : function() {
						return this.m_supportsComplexSelections;
					},
					setSupportsComplexSelections : function(
							supportsComplexSelections) {
						this.m_supportsComplexSelections = supportsComplexSelections;
					},
					supportsCellValueOperand : function() {
						return this.m_supportsCellValueOperands;
					},
					setSupportsCellValueOperands : function(
							supportsCellValueOperands) {
						this.m_supportsCellValueOperands = supportsCellValueOperands;
					},
					supportsIntersectLayers : function() {
						return this.m_supportsIntersectLayers;
					},
					setSupportsIntersectLayers : function(
							supportsIntersectLayers) {
						this.m_supportsIntersectLayers = supportsIntersectLayers;
					},
					supportsSelectionVisibilityContainer : function() {
						return this.m_supportsSelectionVisibilityContainer;
					},
					setSupportsSelectionVisibilityContainer : function(
							supportsSelectionVisibilityContainer) {
						this.m_supportsSelectionVisibilityContainer = supportsSelectionVisibilityContainer;
					},
					supportsObtainability : function() {
						return this.m_supportsObtainability;
					},
					setSupportsObtainability : function(supportsObtainability) {
						this.m_supportsObtainability = supportsObtainability;
					},
					supportsSapDateFormat : function() {
						return this.m_supportsSapDateFormat;
					},
					setSupportsSapDateFormat : function(supportsSapDateFormat) {
						this.m_supportsSapDateFormat = supportsSapDateFormat;
					},
					supportsDataCellMixedValues : function() {
						return this.m_supportsDataCellMixedValues;
					},
					setSupportsDataCellMixedValues : function(
							supportsDataCellMixedValues) {
						this.m_supportsDataCellMixedValues = supportsDataCellMixedValues;
					},
					supportsSetOperand : function() {
						return this.m_supportsSetOperand;
					},
					setSupportsSetOperand : function(supportsSetOperand) {
						this.m_supportsSetOperand = supportsSetOperand;
					},
					supportsConvertToFlatFilter : function() {
						return this.m_supportsConvertToFlatFilter;
					},
					setSupportsConvertToFlatFilter : function(
							supportsConvertToFlatFilter) {
						this.m_supportsConvertToFlatFilter = supportsConvertToFlatFilter;
					},
					supportsCummulative : function() {
						return this.m_supportsCummulative;
					},
					setSupportsCummulative : function(supportsCummulative) {
						this.m_supportsCummulative = supportsCummulative;
					},
					supportsHierarchyNavCounter : function() {
						return this.m_supportsHierNavCounter;
					},
					setSupportsHierarchyNavCounter : function(
							supportsHierarchyNavCounter) {
						this.m_supportsHierNavCounter = supportsHierarchyNavCounter;
					},
					supportsHierarchyAttHierFields : function() {
						return this.m_supportsHierAttHierFields;
					},
					setSupportsHierarchyAttHierFields : function(
							supportsHierAttHierFields) {
						this.m_supportsHierAttHierFields = supportsHierAttHierFields;
					},
					supportsHierarchyCarryingDim : function() {
						return this.m_supportsHierCarryingDim;
					},
					setSupportsHierarchyCarryingDim : function(
							supportsHierCarryingDim) {
						this.m_supportsHierCarryingDim = supportsHierCarryingDim;
					},
					supportsSortType : function() {
						return this.m_supportsSortType;
					},
					setSupportsSortType : function(supportsSortType) {
						this.m_supportsSortType = supportsSortType;
					},
					supportsSpatialFilter : function() {
						return this.m_supportsSpatialFilter;
					},
					setSupportsSpatialFilter : function(supportsSpatialFilter) {
						this.m_supportsSpatialFilter = supportsSpatialFilter;
					},
					supportsSpatialFilterSrid : function() {
						return this.m_supportsSpatialFilterSrid;
					},
					setSupportsSpatialFilterSrid : function(
							supportsSpatialFilterSrid) {
						this.m_supportsSpatialFilterSrid = supportsSpatialFilterSrid;
					},
					supportsExtendedDimensions : function() {
						return this.m_supportsExtendedDimensions;
					},
					setSupportsExtendedDimensions : function(
							supportsExtendedDimensions) {
						this.m_supportsExtendedDimensions = supportsExtendedDimensions;
					},
					supportsCubeBlendingOutOfContext : function() {
						return this.m_supportsCubeBlendingOutOfContext;
					},
					setSupportsCubeBlendingOutOfContext : function(
							supportsCubeBlendingOutOfContext) {
						this.m_supportsCubeBlendingOutOfContext = supportsCubeBlendingOutOfContext;
					},
					supportsInputReadinessStates : function() {
						return this.m_supportsInputReadinessStates;
					},
					setSupportsInputReadinessStates : function(
							supportsInputReadinessStates) {
						this.m_supportsInputReadinessStates = supportsInputReadinessStates;
					},
					supportsSortNewValues : function() {
						return this.m_supportsSortNewValues;
					},
					setSupportsSortNewValues : function(supportsSortNewValues) {
						this.m_supportsSortNewValues = supportsSortNewValues;
					},
					supportsIgnoreUnitOfZeroValueInAggregation : function() {
						return this.m_supportsIgnoreUnitOfZeroValueInAggregation;
					},
					setSupportsIgnoreUnitOfZeroValueInAggregation : function(
							supportsIgnoreUnitOfZeroValueInAggregation) {
						this.m_supportsIgnoreUnitOfZeroValueInAggregation = supportsIgnoreUnitOfZeroValueInAggregation;
					},
					supportsCubeBlendingWithNSubqueries : function() {
						return this.m_supportsCubeBlendingWithNSubqueries;
					},
					setSupportsCubeBlendingWithNSubqueries : function(
							supportsCubeBlendingWithNSubqueries) {
						this.m_supportsCubeBlendingWithNSubqueries = supportsCubeBlendingWithNSubqueries;
					},
					supportsDataRefreshAndDataTopicality : function() {
						return this.m_supportsDataRefreshAndDataTopicality;
					},
					setSupportsDataRefreshAndDataTopicality : function(
							supportsDataRefreshAndDataTopicality) {
						this.m_supportsDataRefreshAndDataTopicality = supportsDataRefreshAndDataTopicality;
					}
				});
$Firefly.createClass("sap.firefly.QGenericCmd", sap.firefly.DfCmd, {
	$statics : {
		createGenericCmd : function(methodName, primitiveReturnType, signature,
				signatureList) {
			var cmd = new sap.firefly.QGenericCmd();
			cmd.setupValues(methodName, primitiveReturnType, signature,
					signatureList);
			return cmd;
		}
	},
	m_methodName : null,
	m_signature : null,
	m_signatureList : null,
	m_primitiveReturnType : null,
	newRuntimeInstance : function() {
		return sap.firefly.QGenericCmd.createGenericCmd(this.m_methodName,
				this.m_primitiveReturnType, this.m_signature, this
						.getSignature());
	},
	setupValues : function(methodName, primitiveReturnType, signature,
			signatureList) {
		this.m_methodName = methodName;
		this.m_primitiveReturnType = primitiveReturnType;
		this.m_signature = signature;
		this.m_signatureList = signatureList;
	},
	execute : function() {
		var returnValue = null;
		if ((this.m_params !== null) && this.m_params.hasElements()) {
			returnValue = sap.firefly.XReflection.invokeMethodWithArgs(
					this.m_cmds, this.m_methodName, this.m_params.getValues(),
					this.m_primitiveReturnType);
		} else {
			returnValue = sap.firefly.XReflection.invokeMethod(this.m_cmds,
					this.m_methodName, this.m_primitiveReturnType);
		}
		this.m_ret = returnValue;
	},
	getSignature : function() {
		var splitString;
		var i;
		if ((this.m_signatureList === null) && (this.m_signature !== null)) {
			splitString = sap.firefly.XStringTokenizer.splitString(
					this.m_signature, ",");
			this.m_signatureList = sap.firefly.PrList.create();
			for (i = 0; i < splitString.size(); i++) {
				this.m_signatureList.addString(splitString.get(i));
			}
		}
		return this.m_signatureList;
	}
});
$Firefly
		.createClass(
				"sap.firefly.QDeltaBroadcastPhase",
				sap.firefly.XConstant,
				{
					$statics : {
						BEFORE_EVENTS_BROADCAST : null,
						AFTER_EVENTS_BROADCAST : null,
						staticSetup : function() {
							sap.firefly.QDeltaBroadcastPhase.BEFORE_EVENTS_BROADCAST = sap.firefly.QDeltaBroadcastPhase
									.create("BeforeEventsBroadcast");
							sap.firefly.QDeltaBroadcastPhase.AFTER_EVENTS_BROADCAST = sap.firefly.QDeltaBroadcastPhase
									.create("AfterEventsBroadcast");
						},
						create : function(name) {
							var pt = new sap.firefly.QDeltaBroadcastPhase();
							pt.setName(name);
							return pt;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDeltaChangeState",
				sap.firefly.XConstant,
				{
					$statics : {
						UNCHANGED : null,
						NODE_CHANGED : null,
						NODE_AND_CHILDREN_CHANGED : null,
						CHILDREN_CHANGED : null,
						staticSetup : function() {
							sap.firefly.QDeltaChangeState.UNCHANGED = sap.firefly.QDeltaChangeState
									.create("Unchanged");
							sap.firefly.QDeltaChangeState.NODE_CHANGED = sap.firefly.QDeltaChangeState
									.create("NodeChanged");
							sap.firefly.QDeltaChangeState.NODE_AND_CHILDREN_CHANGED = sap.firefly.QDeltaChangeState
									.create("NodeAndChildrenChanged");
							sap.firefly.QDeltaChangeState.CHILDREN_CHANGED = sap.firefly.QDeltaChangeState
									.create("ChildrenChanged");
						},
						create : function(name) {
							var newConstant = new sap.firefly.QDeltaChangeState();
							newConstant.setName(name);
							return newConstant;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDeltaOperationPhase",
				sap.firefly.XConstant,
				{
					$statics : {
						QUEUE : null,
						STOP : null,
						RESUME : null,
						staticSetup : function() {
							sap.firefly.QDeltaOperationPhase.QUEUE = sap.firefly.QDeltaOperationPhase
									.create("Queue");
							sap.firefly.QDeltaOperationPhase.STOP = sap.firefly.QDeltaOperationPhase
									.create("Stop");
							sap.firefly.QDeltaOperationPhase.RESUME = sap.firefly.QDeltaOperationPhase
									.create("Resume");
						},
						create : function(name) {
							var pt = new sap.firefly.QDeltaOperationPhase();
							pt.setName(name);
							return pt;
						}
					}
				});
$Firefly.createClass("sap.firefly.QMetadataModel", sap.firefly.XObject, {
	$statics : {
		create : function(queryModel) {
			var metaDataCache = new sap.firefly.QMetadataModel();
			metaDataCache.setup(queryModel);
			return metaDataCache;
		}
	},
	m_queryModel : null,
	m_hierarchies : null,
	setup : function(queryModel) {
		this.m_hierarchies = sap.firefly.XList.create();
		this.m_queryModel = sap.firefly.XWeakReferenceUtil
				.getWeakRef(queryModel);
	},
	clone : function() {
		return this.cloneOlapComponent(null, null);
	},
	cloneOlapComponent : function(context, parent) {
		var metadataModelClone = sap.firefly.QMetadataModel.create(this
				.getQueryModel());
		var iterator = this.m_hierarchies.getIterator();
		var element;
		var cloneObj;
		while (iterator.hasNext()) {
			element = iterator.next();
			cloneObj = element.cloneOlapComponent(null, null);
			metadataModelClone.getLeveledHierarchiesBase().add(cloneObj);
		}
		iterator.releaseObject();
		return metadataModelClone;
	},
	releaseObject : function() {
		this.m_hierarchies = sap.firefly.XCollectionUtils
				.releaseEntriesAndCollectionIfNotNull(this.m_hierarchies);
		this.m_queryModel = null;
		sap.firefly.QMetadataModel.$superclass.releaseObject.call(this);
	},
	getComponentType : function() {
		return this.getOlapComponentType();
	},
	getOlapComponentType : function() {
		return sap.firefly.OlapComponentType.OLAP_METADATA_MODEL;
	},
	getQueryModel : function() {
		return sap.firefly.XWeakReferenceUtil.getHardRef(this.m_queryModel);
	},
	getLeveledHierarchiesBase : function() {
		return this.m_hierarchies;
	},
	getLeveledHierarchies : function() {
		var hierarchies;
		var iterator;
		if (this.m_hierarchies === null) {
			return null;
		}
		hierarchies = sap.firefly.XList.create();
		iterator = this.m_hierarchies.getIterator();
		while (iterator.hasNext()) {
			hierarchies.add(iterator.next());
		}
		iterator.releaseObject();
		return hierarchies;
	},
	getLeveledHierarchiesByDimension : function(dimension) {
		var dimensionHierarchies;
		var hierIt;
		var next;
		if ((this.m_hierarchies === null)
				|| (dimension.supportsHierarchyLevelMetadata() === false)) {
			return null;
		}
		dimensionHierarchies = sap.firefly.XList.create();
		hierIt = this.m_hierarchies.getIterator();
		while (hierIt.hasNext()) {
			next = hierIt.next();
			if (next.getDimension().isEqualTo(dimension)) {
				dimensionHierarchies.add(next);
			}
		}
		hierIt.releaseObject();
		return dimensionHierarchies;
	},
	getMetadataResponse : function() {
		return this.getQueryModel().getServerBaseSerialization();
	},
	registerChangedListener : function(listener, customIdentifier) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	unregisterChangedListener : function(listener) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	queueEventing : function() {
	},
	stopEventing : function() {
	},
	isEventingStopped : function() {
		return false;
	},
	resumeEventing : function() {
	}
});
$Firefly.createClass("sap.firefly.CsGetVersion", sap.firefly.XConstant, {
	$statics : {
		create : function() {
			var call = new sap.firefly.CsGetVersion();
			call.setName("getVersion");
			return call;
		}
	},
	execute : function(context) {
		var value = sap.firefly.XIntegerValue.create(23);
		context.setReturnValue(value);
	}
});
$Firefly.createClass("sap.firefly.CsPrint", sap.firefly.XConstant, {
	$statics : {
		create : function() {
			var call = new sap.firefly.CsPrint();
			call.setName("print");
			return call;
		}
	},
	execute : function(context) {
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInA",
				sap.firefly.MessageManager,
				{
					$statics : {
						s_lookupByFormat : null,
						staticSetup : function() {
							sap.firefly.QInA.s_lookupByFormat = sap.firefly.XHashMapByString
									.create();
							sap.firefly.QInA.addAllFormats();
							sap.firefly.QInA.addAllTypes();
							sap.firefly.QInA.addAllComponents();
							sap.firefly.QInA.removeEmptyContainers();
						},
						addAllComponents : function() {
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdVariableContainer());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdVarDimMember());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdVarOptionList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdVariable());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdBasicMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdField());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdDimension());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdSort());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdDrillManager());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdQuery());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMdGenericComponent());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATxtDataCell());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATxtOperation());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATxtDimension());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATxtAxis());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATxtGenericComponent());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoField());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoTotals());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoSortOperation());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoDimension());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoSort());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterCellValueOperand());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoVarHierNode());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoVarDimMember());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoMembersAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoMemberRestricted());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoMemberFormulaMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoMemberBasicMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterOperation());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterCartesianList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterCartesianProduct());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterExpression());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterAlgebra());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoAxis());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInARepoFilterTuple());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAQuery());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADimension());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInACalculatedDimension());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInASort());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAConditionManager());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAConditionsCondition());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAConditionsThreshold());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADataSource());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAQuerySettings());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInATotals());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAAttribute());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAAxesSettings());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAAxis());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADataCell());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADataCellsAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADrillManager());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADrillPathElement());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADrillPathOperation());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAField());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVariableContainer());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVariablesList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVarSimpleType());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVarDimMember());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVarOptionList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAVarHierNode());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMember());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMembersAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMemberRestrictedMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMemberBasicMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAMemberFormulaMeasure());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterExpression());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterCellValueOperand());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterTuple());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterElement());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterAlgebra());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterCartesianList());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterFixed());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterDynamic());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterVisibility());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterOperation());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterGeo());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterMemberOp());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAFilterCartesianProduct());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAHierarchyValueHelp());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAHierarchy());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInADimensionsAll());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAExceptions());
							sap.firefly.QInA
									.addInAComponent(new sap.firefly.QInAGenericComponent());
						},
						addInAComponent : function(inaComponent) {
							var key = inaComponent.getComponentType().getName();
							var modelFormat = inaComponent.getModelFormat();
							var usages;
							var size;
							var k;
							var list;
							var container2;
							if (modelFormat === null) {
								modelFormat = sap.firefly.QModelFormat.INA_DATA;
							}
							usages = modelFormat.getUsages();
							size = usages.size();
							for (k = 0; k < size; k++) {
								list = sap.firefly.QInA.s_lookupByFormat
										.getByKey(usages.get(k).getName());
								container2 = list.getByKey(key);
								if (container2 === null) {
									throw sap.firefly.XException
											.createRuntimeException(sap.firefly.XString
													.concatenate2(
															"Container not defined: ",
															key));
								}
								container2.add(inaComponent);
							}
						},
						addAllTypes : function() {
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.CONDITIONS_MANAGER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.CONDITION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.CONDITIONS_THRESHOLD);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.CONDITIONS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.QUERY_MODEL);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DATA_CELL);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.AXIS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.SORT_MANAGER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.LAYER_MODEL);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DATA_SOURCE);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.SELECTOR);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.ATTRIBUTE_CONTAINER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.ATTRIBUTE);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DRILL_MANAGER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DRILL_OPERATION);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.DRILL_PATH_ELEMENT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FIELD_CONTAINER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FIELD_LIST);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FIELD);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.RESULT_STRUCTURE);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DATA_CELLS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.TOTALS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.EXCEPTION_MANAGER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.QUERY_SETTINGS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.HIERARCHY);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.AXES_SETTINGS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.PROPERTY);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.PLANNING_COMMAND);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.MEMBER);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.SINGLE_MEMBER_EXIT);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.MEMBER_EXITS);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.LITERAL_MEMBER);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.BASIC_MEASURE);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.FORMULA);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.SERVER_BASED_FORMULA);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.RESTRICTED_MEASURE);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.HIERARCHY_NODE);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.RESULT);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.CONDITION_RESULT);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.CONDITION_OTHERS_RESULT);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.MEASURE);
							sap.firefly.QInA
									.addType(sap.firefly.MemberType.ABSTRACT_MEMBER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FORMULA_CONSTANT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FORMULA_OPERATION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FORMULA_FUNCTION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.MEMBERS);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DIMENSION_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FIELD_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DATA_CELL_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.COMPLEX_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.MEASURE_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.GENERIC_SORTING);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.LAYER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.LAYER_SYNC_DEFINITION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.LAYER_REFERENCE_DEFINITION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.ABSTRACT_LAYER_MODEL);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.VARIABLE_MANAGER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.VARIABLE_CONTAINER);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.VARIABLE_LIST);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.TEXT_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.FORMULA_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.HIERARCHY_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.OPTION_LIST_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.VariableType.ANY_VARIABLE);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.VARIABLE_CONTEXT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_CAPABILITY_GROUP);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_CAPABILITY);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_EXPRESSION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_LITERAL);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_FIXED);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_DYNAMIC);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_VISIBILITY);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.CARTESIAN_SPATIAL_LIST);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.CARTESIAN_LIST);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.CARTESIAN_PRODUCT);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.AND);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.OR);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.NOT);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.SPATIAL_FILTER);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.MEMBER_OPERAND);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.OPERATION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.FILTER_ELEMENT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DIMENSION_CONTEXT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.DIMENSIONS);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.PRESENTATION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.CONTAINER);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.ATTRIBUTE_DIM);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.CURRENCY);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.UNIT);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.TIME);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.DATE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.HIERARCHY_VERSION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.HIERARCHY_NAME);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SEARCH_DIMENSION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.VERSION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.ACCOUNT);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.GIS_DIMENSION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SEARCH_RESULT);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SUGGEST_TERM);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SUGGEST_SCOPE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SUGGEST_ATTRIBUTE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.MEASURE_STRUCTURE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.SECONDARY_STRUCTURE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.ABSTRACT_STRUCTURE);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.DIMENSION);
							sap.firefly.QInA
									.addType(sap.firefly.DimensionType.CALCULATED_DIMENSION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.ABSTRACT_DIMENSION);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.COMPONENT_LIST);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.QUERY_CONTEXT);
							sap.firefly.QInA
									.addType(sap.firefly.OlapComponentType.OLAP);
							sap.firefly.QInA
									.addType(sap.firefly.FilterComponentType.TUPLE);
						},
						addType : function(componentType) {
							var all = sap.firefly.QModelFormat.getAll();
							var size = all.size();
							var i;
							var list;
							for (i = 0; i < size; i++) {
								list = sap.firefly.QInA.s_lookupByFormat
										.getByKey(all.get(i).getName());
								list.add(sap.firefly.QInAComponentContainer
										.create(componentType));
							}
						},
						addAllFormats : function() {
							var all = sap.firefly.QModelFormat.getAll();
							var size = all.size();
							var i;
							var list;
							for (i = 0; i < size; i++) {
								list = sap.firefly.XListOfNameObject.create();
								sap.firefly.QInA.s_lookupByFormat.put(all
										.get(i).getName(), list);
							}
						},
						removeEmptyContainers : function() {
							var all = sap.firefly.QModelFormat.getAll();
							var allSize = all.size();
							var i;
							var list;
							var k;
							for (i = 0; i < allSize; i++) {
								list = sap.firefly.QInA.s_lookupByFormat
										.getByKey(all.get(i).getName());
								for (k = 0; k < list.size();) {
									if (list.get(k).isEmpty()) {
										list.removeAt(k);
									} else {
										k++;
									}
								}
							}
						}
					},
					m_application : null,
					m_capabilities : null,
					m_mode : null,
					m_originalMode : null,
					m_version : 0,
					m_supportsSetOperand : false,
					m_supportsSAPDateFormat : false,
					m_supportsCummulative : false,
					m_supportsExceptions : false,
					m_supportsExceptionSettings : false,
					m_supportsExceptionAggregationDimsFormulas : false,
					m_supportsHierNavCounter : false,
					m_supportsHierAttHierFields : false,
					m_supportsSortType : false,
					m_supportsExtendedSort : false,
					m_supportsSpatialFilter : false,
					m_supportsSpatialFilterSrid : false,
					m_supportsSpatialTransformations : false,
					m_supportsMemberVisibility : false,
					m_supportsCustomDimensionMemberExecutionStep : false,
					m_supportsConvertToFlatFilter : false,
					m_supportsExtendedDimensions : false,
					m_supportsIgnoreExternalDimensions : false,
					m_supportsManualInput : false,
					m_supportsSupplements : false,
					m_supportsDataCells : false,
					m_supportsConditions : false,
					m_supportsCubeBlendingProperties : false,
					m_supportsAverageCountIgnoreNullZero : false,
					m_isSubmit : false,
					m_modelContext : null,
					setupImportExport : function(application, mode,
							capabilities, memberReadModeContext) {
						this.setup();
						this.setApplication(application);
						if (application === null) {
							this.m_version = sap.firefly.XVersion.MAX;
						} else {
							this.m_version = application.getVersion();
						}
						this.m_mode = mode;
						this.m_originalMode = mode;
						this.m_modelContext = memberReadModeContext;
						this.m_capabilities = capabilities;
						if (capabilities !== null) {
							this.m_supportsSetOperand = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SET_OPERAND);
							this.m_supportsConvertToFlatFilter = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_HIERARCHY_SELECTION_AS_FLAT_SELECTION);
							this.m_supportsSAPDateFormat = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SAP_DATE);
							this.m_supportsCummulative = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_CUMMULATIVE);
							this.m_supportsExceptions = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTIONS);
							this.m_supportsExceptionSettings = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTION_SETTINGS);
							this.m_supportsExceptionAggregationDimsFormulas = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_EXCEPTION_AGGREGATION_DIMS_FORMULAS);
							this.m_supportsHierNavCounter = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_HIERARCHY_NAV_COUNTER);
							this.m_supportsHierAttHierFields = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_ATT_HIER_ATT_FIELDS);
							this.m_supportsSortType = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SORT_TYPE);
							this.m_supportsExtendedSort = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_EXTENDED_SORT);
							this.m_supportsSpatialFilter = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_FILTER);
							if (this.m_supportsSpatialFilter) {
								this.m_supportsSpatialFilterSrid = capabilities
										.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_FILTER_WITH_SRID);
							}
							this.m_supportsSpatialTransformations = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_SPATIAL_TRANSFORMATIONS);
							this.m_supportsMemberVisibility = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_MEMBER_VISIBILITY);
							this.m_supportsCustomDimensionMemberExecutionStep = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_CUSTOM_DIMENSION_MEMBER_EXECUTION_STEP);
							this.m_supportsExtendedDimensions = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_EXTENDED_DIMENSIONS);
							this.m_supportsIgnoreExternalDimensions = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPORTS_IGNORE_EXTERNAL_DIMENSIONS);
							this.m_supportsManualInput = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_MANUAL_INPUT);
							this.m_supportsSupplements = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_SUPPLEMENTS);
							this.m_supportsDataCells = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_QUERY_DATA_CELLS);
							this.m_supportsConditions = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_CONDITIONS);
							this.m_supportsCubeBlendingProperties = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_CUBE_BLENDING)
									&& capabilities
											.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_CUBE_BLENDING_PROPERTIES);
							this.m_supportsAverageCountIgnoreNullZero = capabilities
									.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_AVERAGE_COUNT_NULL_ZERO);
						} else {
							this.m_supportsSetOperand = true;
							this.m_supportsConvertToFlatFilter = true;
							this.m_supportsSAPDateFormat = false;
							this.m_supportsCummulative = true;
							this.m_supportsExceptions = true;
							this.m_supportsExceptionSettings = true;
							this.m_supportsExceptionAggregationDimsFormulas = false;
							this.m_supportsHierNavCounter = false;
							this.m_supportsHierAttHierFields = false;
							this.m_supportsSortType = true;
							this.m_supportsExtendedSort = true;
							this.m_supportsSpatialFilter = true;
							this.m_supportsSpatialFilterSrid = true;
							this.m_supportsSpatialTransformations = true;
							this.m_supportsMemberVisibility = true;
							this.m_supportsCustomDimensionMemberExecutionStep = true;
							this.m_supportsExtendedDimensions = true;
							this.m_supportsIgnoreExternalDimensions = true;
							this.m_supportsManualInput = true;
							this.m_supportsSupplements = true;
							this.m_supportsDataCells = false;
							this.m_supportsConditions = false;
							this.m_supportsCubeBlendingProperties = false;
							this.m_supportsAverageCountIgnoreNullZero = false;
						}
					},
					getComponentName : function() {
						return "QInAImportExport";
					},
					lookupInAComponent : function(olapComponentType,
							inaImportElement) {
						var componentModel = null;
						var containerList = sap.firefly.QInA.s_lookupByFormat
								.getByKey(this.m_mode.getName());
						var container = containerList
								.getByKey(olapComponentType.getName());
						var size;
						var i;
						if (container === null) {
							size = containerList.size();
							for (i = 0; i < size; i++) {
								container = containerList.get(i);
								if (olapComponentType.isTypeOf(container
										.getComponentType())) {
									componentModel = container.get(
											this.m_version, inaImportElement);
									break;
								}
							}
						} else {
							componentModel = container.get(this.m_version,
									inaImportElement);
						}
						if (componentModel === null) {
							this
									.addError(
											0,
											sap.firefly.XString
													.concatenate2(
															"Cannot find serialization/deserialization component for type: ",
															olapComponentType
																	.getName()));
						}
						return componentModel;
					},
					getSession : function() {
						return this.getApplication();
					},
					getApplication : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_application);
					},
					setApplication : function(application) {
						this.m_application = sap.firefly.XWeakReferenceUtil
								.getWeakRef(application);
					},
					getMode : function() {
						return this.m_mode;
					},
					getOriginalMode : function() {
						return this.m_originalMode;
					},
					hasCapability : function(name) {
						return ((this.m_capabilities !== null) && this.m_capabilities
								.containsKey(name));
					},
					isAbap : function(queryModel) {
						var queryManager = queryModel.getQueryManager();
						var systemDescription;
						var systemType;
						if (queryManager === null) {
							return false;
						}
						systemDescription = queryManager.getSystemDescription();
						if (systemDescription === null) {
							return false;
						}
						systemType = systemDescription.getSystemType();
						if (systemType === null) {
							return false;
						} else {
							if (systemType
									.isTypeOf(sap.firefly.SystemType.ABAP)) {
								return true;
							} else {
								return false;
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdBasicMeasure",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.MemberType.BASIC_MEASURE;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						return sap.firefly.QBasicMeasure._createBasicMeasure(
								context, parentComponent);
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var basicMeasure = modelComponent;
						basicMeasure
								.setName(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_NAME));
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								modelComponent.getName());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdDataSource",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaQueryModel,
								queryModel, context) {
							var name = sap.firefly.InAConstants.QY_DATA_SOURCE;
							var inaStructure = inaQueryModel;
							var dataSource;
							var text;
							var baseDatasource;
							var infoProvider;
							if ((inaStructure !== null)
									&& (inaStructure.hasValueByName(name) === false)) {
								inaStructure = inaStructure
										.getStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
								if ((inaStructure !== null)
										&& (inaStructure.hasValueByName(name) === false)) {
									inaStructure = inaStructure
											.getStructureByName(sap.firefly.InAConstants.QY_DEFINITION);
								}
							}
							if ((inaStructure !== null)
									&& (inaStructure.hasValueByName(name))) {
								dataSource = sap.firefly.QInADataSource
										.importQd(importer, inaStructure, name,
												context);
								if (dataSource !== null) {
									if (sap.firefly.XStringUtils
											.isNullOrEmpty(dataSource.getText())) {
										text = inaStructure
												.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
										if (sap.firefly.XStringUtils
												.isNullOrEmpty(text) === false) {
											dataSource.setText(text);
										}
									}
									queryModel.setDataSource(dataSource);
									queryModel.setText(dataSource.getText());
								}
							}
							baseDatasource = sap.firefly.QInADataSource
									.importQd(
											importer,
											inaQueryModel,
											sap.firefly.InAConstants.QY_BASE_DATA_SOURCE,
											context);
							if (baseDatasource !== null) {
								queryModel.setBaseDataSource(baseDatasource);
								infoProvider = sap.firefly.QInfoProvider
										.createInfoProvider(queryModel,
												baseDatasource.getObjectName(),
												baseDatasource.getObjectName(),
												null);
								queryModel.setInfoProvider(infoProvider);
							}
						},
						exportMd : function(exporter, inaStructure, queryModel) {
							var inaDataSource = sap.firefly.QInADataSource
									.exportDataSource(exporter, queryModel
											.getDataSource(), false,
											inaStructure);
							return inaDataSource;
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = modelComponent;
						sap.firefly.QInAMdDataSource.importMd(importer,
								inaStructure, queryModel, context);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var queryModel = modelComponent;
						return sap.firefly.QInAMdDataSource.exportMd(exporter,
								inaStructure, queryModel);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdDimMembers",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, dimension, inaStructure) {
							var inaStructureMemberList;
							var fieldList;
							var keyField;
							var keyFieldName;
							var textField;
							var textFieldName;
							var size;
							var memberIdx;
							var inaStructureMember;
							var memberName;
							var memberText;
							var structureMember;
							var inaDefaultSelectedDimensions;
							var sizeDefaultSelections;
							var idxDefaultSelection;
							var resultCalculation;
							var aggregationType;
							var numericPrecision;
							var numericScale;
							var numericShift;
							var singleValueCalculation;
							var fieldSize;
							var fieldIdx;
							var field;
							var name;
							var valueType;
							var orderedNamesList;
							var orderedStructureMemberNames;
							var orderedNameIndex;
							var orderedNameString;
							if (dimension.supportsBasicStructureMembers()) {
								if (importer
										.hasCapability(sap.firefly.InACapabilities.AV_CAPABILITY_METADATA_ACCOUNT_DIM_IN_RS_FORMAT)) {
									sap.firefly.QInAMdDimMembers
											.importRSFormat(dimension,
													inaStructure);
								} else {
									inaStructureMemberList = inaStructure
											.getListByName(sap.firefly.InAConstants.QY_BASIC_MEMBERS);
									if (inaStructureMemberList === null) {
										inaStructureMemberList = inaStructure
												.getListByName(sap.firefly.InAConstants.QY_MEMBERS);
									}
									if (inaStructureMemberList !== null) {
										fieldList = dimension.getFields();
										keyField = dimension.getKeyField();
										keyFieldName = keyField.getName();
										textField = dimension.getTextField();
										if (textField === null) {
											textFieldName = null;
										} else {
											textFieldName = textField.getName();
										}
										size = inaStructureMemberList.size();
										for (memberIdx = 0; memberIdx < size; memberIdx++) {
											inaStructureMember = inaStructureMemberList
													.getStructureByIndex(memberIdx);
											memberName = inaStructureMember
													.getStringByName(keyFieldName);
											memberText = inaStructureMember
													.getStringByName(textFieldName);
											structureMember = dimension
													.addNewBasicMeasure(
															memberName,
															memberText);
											structureMember
													.setIsSelectionCandidate(inaStructureMember
															.getBooleanByNameWithDefault(
																	sap.firefly.InAConstants.QY_IS_SELECTION_CANDIDATE,
																	true));
											inaDefaultSelectedDimensions = inaStructureMember
													.getListByName(sap.firefly.InAConstants.QY_DEFAULT_SELECTED_DIMENSIONS);
											if (inaDefaultSelectedDimensions !== null) {
												sizeDefaultSelections = inaDefaultSelectedDimensions
														.size();
												for (idxDefaultSelection = 0; idxDefaultSelection < sizeDefaultSelections; idxDefaultSelection++) {
													structureMember
															.addDefaultSelectionDimensionByName(inaDefaultSelectedDimensions
																	.getStringByIndex(idxDefaultSelection));
												}
											}
											resultCalculation = sap.firefly.QInAConverter
													.lookupResultCalculation(inaStructureMember
															.getStringByNameWithDefault(
																	sap.firefly.InAConstants.QY_RESULTCALCULATION,
																	null));
											structureMember
													.setResultCalculation(resultCalculation);
											aggregationType = sap.firefly.AggregationType
													.lookup(sap.firefly.PrUtils
															.getStringValueProperty(
																	inaStructureMember,
																	sap.firefly.InAConstants.QY_AGGREGATION,
																	null));
											if (aggregationType !== null) {
												structureMember
														.setAggregationType(aggregationType);
											}
											numericPrecision = sap.firefly.PrUtils
													.getIntegerProperty(
															inaStructureMember,
															sap.firefly.InAConstants.QY_NUMERIC_PRECISION);
											if (numericPrecision !== null) {
												structureMember
														.setNumericPrecision(numericPrecision
																.getIntegerValue());
											}
											numericScale = sap.firefly.PrUtils
													.getIntegerProperty(
															inaStructureMember,
															sap.firefly.InAConstants.QY_NUMERIC_SCALE);
											if (numericScale !== null) {
												structureMember
														.setNumericScale(numericScale
																.getIntegerValue());
											}
											numericShift = sap.firefly.PrUtils
													.getIntegerProperty(
															inaStructureMember,
															sap.firefly.InAConstants.QY_NUMERIC_SHIFT);
											if (numericShift !== null) {
												structureMember
														.setNumericShift(numericShift
																.getIntegerValue());
											}
											singleValueCalculation = sap.firefly.QInAConverter
													.lookupSingleValueCalculation(inaStructureMember
															.getStringByNameWithDefault(
																	sap.firefly.InAConstants.QY_SINGLE_VALUE_CALCULATION,
																	null));
											structureMember
													.setSingleValueCalculation(singleValueCalculation);
											fieldSize = fieldList.size();
											for (fieldIdx = 0; fieldIdx < fieldSize; fieldIdx++) {
												field = fieldList.get(fieldIdx);
												if (field
														.isCubeBlendingPropertiesField()) {
													continue;
												}
												name = field.getName();
												if (inaStructureMember
														.hasValueByName(name) === false) {
													continue;
												}
												valueType = field
														.getValueType();
												if (valueType === sap.firefly.XValueType.STRING) {
													structureMember
															.createAndAddFieldValueWithString(
																	field,
																	inaStructureMember
																			.getStringByName(name));
												} else {
													if (valueType === sap.firefly.XValueType.BOOLEAN) {
														structureMember
																.createAndAddFieldValueWithBoolean(
																		field,
																		inaStructureMember
																				.getBooleanByName(name));
													} else {
														if (valueType === sap.firefly.XValueType.INTEGER) {
															structureMember
																	.createAndAddFieldValueWithInteger(
																			field,
																			inaStructureMember
																					.getIntegerByName(name));
														} else {
															if (valueType === sap.firefly.XValueType.LONG) {
																structureMember
																		.createAndAddFieldValueWithLong(
																				field,
																				inaStructureMember
																						.getLongByName(name));
															} else {
																if ((valueType === sap.firefly.XValueType.DOUBLE)
																		|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
																	structureMember
																			.createAndAddFieldValueWithDouble(
																					field,
																					inaStructureMember
																							.getDoubleByName(name));
																} else {
																	importer
																			.addError(
																					sap.firefly.ErrorCodes.INVALID_TOKEN,
																					"Unsupported member type");
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							orderedNamesList = sap.firefly.PrUtils
									.getListProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_ORDERED_STRUCTURE_MEMBER_NAMES);
							if (orderedNamesList !== null) {
								orderedStructureMemberNames = sap.firefly.XListOfString
										.create();
								for (orderedNameIndex = 0; orderedNameIndex < sap.firefly.PrUtils
										.getListSize(orderedNamesList, 0); orderedNameIndex++) {
									orderedNameString = sap.firefly.PrUtils
											.getStringElement(orderedNamesList,
													orderedNameIndex);
									if (orderedNameString === null) {
										throw sap.firefly.XException
												.createIllegalStateException("illegal state");
									}
									orderedStructureMemberNames
											.add(orderedNameString
													.getStringValue());
								}
								dimension
										.reOrderStructureMembers(orderedStructureMemberNames);
							}
						},
						importRSFormat : function(dimension, inaStructure) {
							var inaStructureMember = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_MEMBERS);
							var memberNameValues;
							var memberTextValues;
							var aggregationValues;
							var numericPrecisionValues;
							var numericSaleValues;
							var numericShiftValues;
							var aggregationDimensionValues;
							var i;
							var memberName;
							var memberText;
							var structureMember;
							var type;
							if (inaStructureMember !== null) {
								memberNameValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_NAME);
								memberTextValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_DESCRIPTION);
								aggregationValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_AGGREGATION);
								numericPrecisionValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_DIGITS);
								numericSaleValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_FRACT_DIGITS);
								numericShiftValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_NUMERIC_SHIFT);
								aggregationDimensionValues = sap.firefly.QInAMdDimMembers
										.getValuesFromStructure(
												inaStructureMember,
												sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION);
								for (i = 0; i < memberNameValues.size(); i++) {
									memberName = memberNameValues
											.getStringByIndex(i);
									memberText = memberTextValues
											.getStringByIndex(i);
									structureMember = dimension
											.addNewBasicMeasure(memberName,
													memberText);
									if (aggregationValues !== null) {
										type = sap.firefly.QInAConverter
												.lookupAggregationType2(aggregationValues
														.getIntegerByIndex(i));
										if (type !== null) {
											structureMember
													.setAggregationType(type);
										}
									}
									if (numericPrecisionValues !== null) {
										structureMember
												.setNumericPrecision(numericPrecisionValues
														.getIntegerByIndex(i));
									}
									if (numericSaleValues !== null) {
										structureMember
												.setNumericScale(numericSaleValues
														.getIntegerByIndex(i));
									}
									if (numericShiftValues !== null) {
										structureMember
												.setNumericShift(numericShiftValues
														.getIntegerByIndex(i));
									}
									if (aggregationDimensionValues !== null) {
										structureMember
												.setAggregationDimensionName(aggregationDimensionValues
														.getStringByIndex(i));
									}
								}
							}
						},
						getValuesFromStructure : function(inaStructureMember,
								name) {
							var selectionCandidateStructure = inaStructureMember
									.getStructureByName(name);
							if (selectionCandidateStructure !== null) {
								return selectionCandidateStructure
										.getListByName(sap.firefly.InAConstants.QY_VALUES);
							}
							return null;
						},
						exportMd : function(exporter, inaDimension, dimension) {
							var basicStructureMembers = dimension
									.getBasicStructureMembers();
							var fieldList;
							var fieldSize;
							var inaBasicMemberList;
							var memberSize;
							var idxMember;
							var inaMember;
							var idxField;
							var field;
							var fieldValue;
							var structureMember;
							var defaultSelectedDimensions;
							var inaDefaultSelectedDimensions;
							var sizeDefaultSelections;
							var idxDefaultSelections;
							var aggregationType;
							var numericPrecision;
							var numericScale;
							var numericShift;
							var fieldName;
							var valueType;
							var orderedStructureMemberNames;
							var orderedNamesList;
							var i;
							if (basicStructureMembers !== null) {
								fieldList = dimension.getFields();
								fieldSize = fieldList.size();
								inaBasicMemberList = inaDimension
										.setNewListByName(sap.firefly.InAConstants.QY_BASIC_MEMBERS);
								memberSize = basicStructureMembers.size();
								for (idxMember = 0; idxMember < memberSize; idxMember++) {
									inaMember = inaBasicMemberList
											.addNewStructure();
									for (idxField = 0; idxField < fieldSize; idxField++) {
										field = fieldList.get(idxField);
										if (field
												.isCubeBlendingPropertiesField()) {
											continue;
										}
										fieldValue = basicStructureMembers.get(
												idxMember).getFieldValue(field);
										if (fieldValue === null) {
											continue;
										}
										structureMember = basicStructureMembers
												.get(idxMember);
										if (structureMember
												.isSelectionCandidate() === false) {
											inaMember
													.setBooleanByName(
															sap.firefly.InAConstants.QY_IS_SELECTION_CANDIDATE,
															false);
										}
										defaultSelectedDimensions = structureMember
												.getDefaultSelectedDimensionNames();
										if (defaultSelectedDimensions !== null) {
											inaDefaultSelectedDimensions = inaMember
													.setNewListByName(sap.firefly.InAConstants.QY_DEFAULT_SELECTED_DIMENSIONS);
											sizeDefaultSelections = defaultSelectedDimensions
													.size();
											for (idxDefaultSelections = 0; idxDefaultSelections < sizeDefaultSelections; idxDefaultSelections++) {
												inaDefaultSelectedDimensions
														.addString(defaultSelectedDimensions
																.get(idxDefaultSelections));
											}
										}
										if (structureMember
												.getSingleValueCalculation() !== null) {
											inaMember
													.setStringByName(
															sap.firefly.InAConstants.QY_SINGLE_VALUE_CALCULATION,
															structureMember
																	.getSingleValueCalculation()
																	.toString());
										}
										if (structureMember
												.getResultCalculation() !== null) {
											inaMember
													.setStringByName(
															sap.firefly.InAConstants.QY_RESULTCALCULATION,
															structureMember
																	.getResultCalculation()
																	.toString());
										}
										aggregationType = structureMember
												.getAggregationType();
										if (aggregationType !== null) {
											inaMember
													.setStringByName(
															sap.firefly.InAConstants.QY_AGGREGATION,
															aggregationType
																	.getName());
										}
										numericPrecision = structureMember
												.getNumericPrecision();
										if (numericPrecision !== null) {
											inaMember
													.setIntegerByName(
															sap.firefly.InAConstants.QY_NUMERIC_PRECISION,
															numericPrecision
																	.getIntegerValue());
										}
										numericScale = structureMember
												.getNumericScale();
										if (numericScale !== null) {
											inaMember
													.setIntegerByName(
															sap.firefly.InAConstants.QY_NUMERIC_SCALE,
															numericScale
																	.getIntegerValue());
										}
										numericShift = structureMember
												.getNumericShift();
										if (numericShift !== null) {
											inaMember
													.setIntegerByName(
															sap.firefly.InAConstants.QY_NUMERIC_SHIFT,
															numericShift
																	.getIntegerValue());
										}
										fieldName = field.getName();
										valueType = fieldValue.getValueType();
										if (valueType === sap.firefly.XValueType.STRING) {
											inaMember.setStringByName(
													fieldName, fieldValue
															.getStringValue());
										} else {
											if (valueType === sap.firefly.XValueType.BOOLEAN) {
												inaMember
														.setBooleanByName(
																fieldName,
																fieldValue
																		.getBooleanValue());
											} else {
												if (valueType === sap.firefly.XValueType.INTEGER) {
													inaMember
															.setIntegerByName(
																	fieldName,
																	fieldValue
																			.getIntegerValue());
												} else {
													if (valueType === sap.firefly.XValueType.LONG) {
														inaMember
																.setLongByName(
																		fieldName,
																		fieldValue
																				.getLongValue());
													} else {
														if ((valueType === sap.firefly.XValueType.DOUBLE)
																|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
															inaMember
																	.setDoubleByName(
																			fieldName,
																			fieldValue
																					.getDoubleValue());
														} else {
															exporter
																	.addError(
																			sap.firefly.ErrorCodes.INVALID_TOKEN,
																			"Unsupported element type");
														}
													}
												}
											}
										}
									}
								}
							}
							orderedStructureMemberNames = (dimension)
									.getOrderedStructureMemberNames();
							if (orderedStructureMemberNames !== null) {
								orderedNamesList = inaDimension
										.setNewListByName(sap.firefly.InAConstants.QY_ORDERED_STRUCTURE_MEMBER_NAMES);
								for (i = 0; i < orderedStructureMemberNames
										.size(); i++) {
									orderedNamesList
											.addString(orderedStructureMemberNames
													.get(i));
								}
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdDimMembers.importMd(importer,
								modelComponent, inaStructure);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdDimMembers.exportMd(exporter,
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdDimProperties",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMdNameValuePairs : function(inaStructure,
								dimension) {
							var prElementTypeHierarchyProperties;
							var iPrStructureHierarchyProperties;
							var prElementTypeMasterDataProperties;
							var iPrStructureMasterDataProperties;
							var prElementTypeMasterDataPropertyInterval;
							if (inaStructure
									.hasValueByName(sap.firefly.InAConstants.QY_HIERARCHY_PROPERTIES)) {
								prElementTypeHierarchyProperties = inaStructure
										.getElementTypeByName(sap.firefly.InAConstants.QY_HIERARCHY_PROPERTIES);
								if (prElementTypeHierarchyProperties === sap.firefly.PrElementType.STRUCTURE) {
									iPrStructureHierarchyProperties = inaStructure
											.getStructureByName(sap.firefly.InAConstants.QY_HIERARCHY_PROPERTIES);
									if (iPrStructureHierarchyProperties !== null) {
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_MAINTENANCE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_CREATION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_CREATION_BY_REFERENCE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_UPDATE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_COPY,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_DELETION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_SAVING,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_ACTIVATION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_EXTERNAL_DIMENSION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_INTERVALS,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_REVERSE_SIGN,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_STRUCTURE_TIME_DEP,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_TIME_DEP,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_VERSION_DEP,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_MAINTENANCE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_CREATION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_CREATION_BY_REFERENCE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_UPDATE,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_COPY,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_DELETION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_SAVING,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_ACTIVATION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_EXTERNAL_DIMENSION,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_INTERVALS,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_REVERSE_SIGN,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_STRUCTURE_TIME_DEP,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_TIME_DEP,
														iPrStructureHierarchyProperties);
										sap.firefly.QInAMdDimProperties
												.importHierarchyProperties(
														dimension,
														sap.firefly.InAConstants.QY_HIERARCHY_LOCAL_VERSION_DEP,
														iPrStructureHierarchyProperties);
									}
								} else {
									if (inaStructure
											.hasValueByName(sap.firefly.InAConstants.QY_MASTER_DATA_PROPERTIES)) {
										prElementTypeMasterDataProperties = inaStructure
												.getElementTypeByName(sap.firefly.InAConstants.QY_MASTER_DATA_PROPERTIES);
										if (prElementTypeMasterDataProperties === sap.firefly.PrElementType.STRUCTURE) {
											iPrStructureMasterDataProperties = inaStructure
													.getStructureByName(sap.firefly.InAConstants.QY_MASTER_DATA_PROPERTIES);
											if (iPrStructureMasterDataProperties !== null) {
												if (iPrStructureMasterDataProperties
														.hasValueByName(sap.firefly.InAConstants.QY_MASTER_DATA_MAINTENANCE)) {
													prElementTypeMasterDataPropertyInterval = iPrStructureMasterDataProperties
															.getElementTypeByName(sap.firefly.InAConstants.QY_MASTER_DATA_MAINTENANCE);
													if (prElementTypeMasterDataPropertyInterval === sap.firefly.PrElementType.BOOLEAN) {
														dimension
																.addNameValuePair(sap.firefly.XNameValuePair
																		.createWithValues(
																				sap.firefly.InAConstants.QY_MASTER_DATA_MAINTENANCE,
																				sap.firefly.XBoolean
																						.convertBooleanToString(iPrStructureMasterDataProperties
																								.getBooleanByNameWithDefault(
																										sap.firefly.InAConstants.QY_MASTER_DATA_MAINTENANCE,
																										true))));
													}
												}
											}
										}
									}
								}
							}
						},
						importHierarchyProperties : function(dimension,
								propertyName, inaStructureHierarchyProperties) {
							var prElementTypeHierarchyPropertyMaintenance;
							if (inaStructureHierarchyProperties
									.hasValueByName(propertyName)) {
								prElementTypeHierarchyPropertyMaintenance = inaStructureHierarchyProperties
										.getElementTypeByName(propertyName);
								if (prElementTypeHierarchyPropertyMaintenance === sap.firefly.PrElementType.BOOLEAN) {
									dimension
											.addNameValuePair(sap.firefly.XNameValuePair
													.createWithValues(
															propertyName,
															sap.firefly.XBoolean
																	.convertBooleanToString(inaStructureHierarchyProperties
																			.getBooleanByNameWithDefault(
																					propertyName,
																					false))));
								}
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdDimProperties.importMdNameValuePairs(
								inaStructure, modelComponent);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdDimension",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importDimensionGroups : function(inaStructure,
								dimension) {
							var isGrouping = inaStructure
									.getBooleanByNameWithDefault(
											sap.firefly.InAConstants.QY_IS_DIMENSION_GROUP,
											false);
							var dimensionGroups;
							var len;
							var j;
							var dimensionGroup;
							dimension.setIsGroupingDimension(isGrouping);
							dimensionGroups = sap.firefly.PrUtils
									.getListProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_DIMENSION_GROUPS);
							len = sap.firefly.PrUtils.getListSize(
									dimensionGroups, 0);
							for (j = 0; j < len; j++) {
								dimensionGroup = sap.firefly.PrUtils
										.getStringElement(dimensionGroups, j);
								if (dimensionGroup !== null) {
									dimension
											.addGroupingDimension(dimensionGroup
													.getStringValue());
								}
							}
						},
						exportDimensionGroup : function(inaStructure, dimension) {
							var groupingDimensions;
							var dimensionGroupList;
							var size;
							var j;
							if (dimension.isGroupingDimension()) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_IS_DIMENSION_GROUP,
												true);
							}
							groupingDimensions = dimension
									.getGroupingDimensions();
							if (sap.firefly.XCollectionUtils
									.hasElements(groupingDimensions)) {
								dimensionGroupList = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_DIMENSION_GROUPS);
								size = groupingDimensions.size();
								for (j = 0; j < size; j++) {
									dimensionGroupList
											.addString(groupingDimensions
													.get(j).getName());
								}
							}
						},
						importDimensionFlags : function(dimension,
								inaStructure, hasQueryModel) {
							var supportsMultipleValues;
							var selectionCapabilities;
							dimension
									.setText(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
							dimension
									.setExternalName(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_NAME_EXTERNAL));
							dimension
									.setSupportsLowerCase(sap.firefly.PrUtils
											.getBooleanValueProperty(
													inaStructure,
													sap.firefly.InAConstants.QY_LOWERCASE_SUPPORTED,
													false));
							dimension
									.setIsOwnerDimension(inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_IS_OWNER_DIMENSION,
													false));
							dimension
									.setSupportsCumulative(inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_SUPPORTS_CUMMULATIVE,
													false));
							supportsMultipleValues = sap.firefly.PrUtils
									.getBooleanValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
											hasQueryModel);
							selectionCapabilities = dimension
									.getSelectionCapabilitiesBase();
							selectionCapabilities
									.setSupportsMultipleValues(supportsMultipleValues);
							dimension
									.setCanBeAggregated(inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_CAN_BE_AGGREGATED,
													true));
						},
						exportDimensionFlags : function(inaStructure, dimension) {
							var selectionCapabilities;
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									dimension.getText());
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_NAME_EXTERNAL,
									dimension.getExternalName());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_LOWERCASE_SUPPORTED,
											dimension.supportsLowerCase());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_IS_OWNER_DIMENSION,
											dimension.isOwnerDimension());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_CUMMULATIVE,
											dimension.supportsCumulative());
							selectionCapabilities = dimension
									.getSelectionCapabilities();
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
											selectionCapabilities
													.supportsMultipleValues());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_CAN_BE_AGGREGATED,
											dimension.canBeAggregated());
						},
						importAxesConstraints : function(dimension,
								inaStructure) {
							var queryModel = dimension.getQueryModel();
							var axisConstraints;
							var size;
							var axisIdx;
							if (queryModel !== null) {
								axisConstraints = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_AXIS_CONSTRAINTS);
								if (!sap.firefly.PrUtils
										.isListEmpty(axisConstraints)) {
									size = axisConstraints.size();
									for (axisIdx = 0; axisIdx < size; axisIdx++) {
										dimension
												.addSupportedAxis(sap.firefly.QInAConverter
														.lookupAxisType(axisConstraints
																.getStringByIndex(axisIdx)));
									}
								} else {
									dimension
											.addSupportedAxis(sap.firefly.AxisType.FREE);
									dimension
											.addSupportedAxis(sap.firefly.AxisType.ROWS);
									dimension
											.addSupportedAxis(sap.firefly.AxisType.COLUMNS);
								}
							}
						},
						exportAxesConstraints : function(inaDimension,
								dimension) {
							var supportedAxesTypes = dimension
									.getSupportedAxesTypes().getIterator();
							var inaAxisConstaints = inaDimension
									.setNewListByName(sap.firefly.InAConstants.QY_AXIS_CONSTRAINTS);
							while (supportedAxesTypes.hasNext()) {
								inaAxisConstaints.addString(supportedAxesTypes
										.next().getName());
							}
							supportedAxesTypes.releaseObject();
						},
						importDimensionReadModes : function(queryModel,
								dimension, inaStructure) {
							if (queryModel !== null) {
								sap.firefly.QInAMdDimension
										.importMdReadModeSettings(
												inaStructure,
												dimension,
												sap.firefly.QContextType.RESULT_SET,
												sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_READ_MODES,
												sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_MEMBER_READ_MODES,
												sap.firefly.InAConstants.QY_RS_DEFAULT_READ_MODE,
												sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_READ_MODE,
												sap.firefly.InAConstants.QY_RESULT_SET_MEMBER_DEFAULT_READ_MODE);
								sap.firefly.QInAMdDimension
										.importMdReadModeSettings(
												inaStructure,
												dimension,
												sap.firefly.QContextType.VARIABLE,
												sap.firefly.InAConstants.QY_SUPPORTED_VARIABLE_READ_MODES,
												null,
												sap.firefly.InAConstants.QY_DEFAULT_VARIABLE_READ_MODE,
												null, null);
							}
							sap.firefly.QInAMdDimension
									.importMdReadModeSettings(
											inaStructure,
											dimension,
											sap.firefly.QContextType.SELECTOR,
											sap.firefly.InAConstants.QY_SUPPORTED_SELECTOR_READ_MODES,
											null,
											sap.firefly.InAConstants.QY_SELECTOR_DEFAULT_READ_MODE,
											sap.firefly.InAConstants.QY_DEFAULT_SELECTOR_READ_MODE,
											null);
						},
						addSupportedReadModes : function(
								supportedRsMemberReadModes, dimension, context) {
							var size = supportedRsMemberReadModes.size();
							var i;
							var qReadMode;
							for (i = 0; i < size; i++) {
								qReadMode = sap.firefly.QInAConverter
										.lookupReadMode(supportedRsMemberReadModes
												.getStringByIndex(i));
								if (qReadMode !== null) {
									dimension.addSupportedReadMode(context,
											qReadMode);
								}
							}
						},
						setDefaultReadmode : function(inaDimension, dimension,
								context, defaultReadModeV1, defaultReadModeV2,
								defaultReadModeV3) {
							var readModeName = inaDimension
									.getStringByName(defaultReadModeV1);
							var readMode;
							if ((readModeName === null)
									&& (defaultReadModeV2 !== null)) {
								readModeName = inaDimension
										.getStringByName(defaultReadModeV2);
							}
							if ((readModeName === null)
									&& (defaultReadModeV3 !== null)) {
								readModeName = inaDimension
										.getStringByName(defaultReadModeV3);
							}
							if (readModeName !== null) {
								readMode = sap.firefly.QInAConverter
										.lookupReadMode(readModeName);
								if (readMode !== null) {
									dimension.setReadModeDefault(context,
											readMode);
								}
							}
						},
						importMdReadModeSettings : function(inaDimension,
								dimension, context, supportedReadModesV1,
								supportedReadModesV2, defaultReadModeV1,
								defaultReadModeV2, defaultReadModeV3) {
							var inaSupportedRsMemberReadModes = inaDimension
									.getListByName(supportedReadModesV1);
							if ((inaSupportedRsMemberReadModes === null)
									&& (supportedReadModesV2 !== null)) {
								inaSupportedRsMemberReadModes = inaDimension
										.getListByName(supportedReadModesV2);
							}
							if (inaSupportedRsMemberReadModes === null) {
								dimension.addSupportedReadMode(context,
										sap.firefly.QMemberReadMode.BOOKED);
								dimension.addSupportedReadMode(context,
										sap.firefly.QMemberReadMode.MASTER);
								dimension.setReadModeDefault(context,
										sap.firefly.QMemberReadMode.BOOKED);
							} else {
								if (inaSupportedRsMemberReadModes.isEmpty()) {
									dimension.addSupportedReadMode(context,
											sap.firefly.QMemberReadMode.BOOKED);
									dimension.addSupportedReadMode(context,
											sap.firefly.QMemberReadMode.MASTER);
									dimension.setReadModeDefault(context,
											sap.firefly.QMemberReadMode.BOOKED);
								} else {
									sap.firefly.QInAMdDimension
											.addSupportedReadModes(
													inaSupportedRsMemberReadModes,
													dimension, context);
									sap.firefly.QInAMdDimension
											.setDefaultReadmode(inaDimension,
													dimension, context,
													defaultReadModeV1,
													defaultReadModeV2,
													defaultReadModeV3);
								}
							}
						},
						exportDimensionReadModes : function(exporter,
								inaStructure, dimension) {
							if (exporter.isAbap(dimension.getQueryModel())) {
								sap.firefly.QInAMdDimension
										.exportMdSupportedReadModes(
												dimension,
												sap.firefly.QContextType.RESULT_SET,
												inaStructure,
												sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_READ_MODES,
												sap.firefly.InAConstants.QY_RS_DEFAULT_READ_MODE);
								sap.firefly.QInAMdDimension
										.exportMdSupportedReadModes(
												dimension,
												sap.firefly.QContextType.VARIABLE,
												inaStructure,
												sap.firefly.InAConstants.QY_SUPPORTED_VARIABLE_READ_MODES,
												sap.firefly.InAConstants.QY_DEFAULT_VARIABLE_READ_MODE);
							} else {
								sap.firefly.QInAMdDimension
										.exportMdSupportedReadModes(
												dimension,
												sap.firefly.QContextType.RESULT_SET,
												inaStructure,
												sap.firefly.InAConstants.QY_SUPPORTED_RESULT_SET_MEMBER_READ_MODES,
												sap.firefly.InAConstants.QY_RS_DEFAULT_READ_MODE);
							}
							sap.firefly.QInAMdDimension
									.exportMdSupportedReadModes(
											dimension,
											sap.firefly.QContextType.SELECTOR,
											inaStructure,
											sap.firefly.InAConstants.QY_SUPPORTED_SELECTOR_READ_MODES,
											sap.firefly.InAConstants.QY_SELECTOR_DEFAULT_READ_MODE);
						},
						exportMdSupportedReadModes : function(dimension,
								context, inaStructure, inaSupportedName,
								inaDefaultReadModeName) {
							var readModesIterator = dimension
									.getSupportedReadModes(context)
									.getIterator();
							var sortedList = sap.firefly.XListOfString.create();
							var inaSupportedReadModes;
							var size;
							var i;
							var readModeDefault;
							while (readModesIterator.hasNext()) {
								sortedList.add(readModesIterator.next()
										.getName());
							}
							readModesIterator.releaseObject();
							sortedList
									.sortByDirection(sap.firefly.XSortDirection.ASCENDING);
							inaSupportedReadModes = inaStructure
									.setNewListByName(inaSupportedName);
							size = sortedList.size();
							for (i = 0; i < size; i++) {
								inaSupportedReadModes.addString(sortedList
										.get(i));
							}
							readModeDefault = dimension
									.getReadModeDefault(context);
							if (readModeDefault !== null) {
								inaStructure
										.setStringByName(
												inaDefaultReadModeName,
												sap.firefly.QInAConverter
														.lookupReadModeInA(readModeDefault));
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.ABSTRACT_DIMENSION;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						var myParent = parentComponent;
						if (myParent === null) {
							myParent = context.getQueryModel();
						}
						return sap.firefly.QDimension._create(context,
								myParent, null);
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						var dimName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var inaDimType;
						var dimType;
						var queryModel;
						var hasQueryModel;
						var sortingManager;
						var axisDefaultName;
						var axisDefault;
						var supportedAxesTypes;
						var iterator;
						dimension.setName(dimName);
						inaDimType = inaStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.QY_DIMENSION_TYPE,
										sap.firefly.InAConstants.VA_DIMENSION_TYPE_NON_STRUCT_C);
						dimType = sap.firefly.QInAConverter
								.lookupDimensionType(inaDimType);
						dimension.setDimensionType(dimType);
						dimension
								.setAttributeViewName(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_VIEW_ATTRIBUTES,
												null));
						sap.firefly.QInAMdDimension.importAxesConstraints(
								dimension, inaStructure);
						queryModel = context.getQueryModel();
						hasQueryModel = queryModel !== null;
						sap.firefly.QInAMdDimension.importDimensionFlags(
								dimension, inaStructure, hasQueryModel);
						if (importer.m_supportsExtendedSort === false) {
							if (hasQueryModel) {
								if (dimension.isMeasureStructure() === false) {
									sortingManager = queryModel
											.getSortingManagerBase();
									sortingManager
											.addSupportedSortType(sap.firefly.SortType.FIELD);
									sortingManager
											.addSupportedSortType(sap.firefly.SortType.MEMBER_KEY);
									sortingManager
											.addSupportedSortType(sap.firefly.SortType.MEMBER_TEXT);
								}
							}
						}
						if (importer.m_supportsCustomDimensionMemberExecutionStep) {
							if (dimension.isStructure()) {
								dimension
										.setSupportsCalculatedBeforeAggregation(true);
							}
						}
						sap.firefly.QInAMdFieldsList.importMd(importer,
								inaStructure, dimension);
						sap.firefly.QInAMdFieldsAttributes.importMd(importer,
								dimension, inaStructure);
						sap.firefly.QInAMdFieldsRoles.importMd(importer,
								inaStructure, dimension);
						sap.firefly.QInAMdFieldsResultSet.importMd(importer,
								inaStructure, dimension);
						sap.firefly.QInAMdDimMembers.importMd(importer,
								dimension, inaStructure);
						sap.firefly.QInAMdDimension.importDimensionReadModes(
								queryModel, dimension, inaStructure);
						sap.firefly.QInAMdDimension.importDimensionGroups(
								inaStructure, dimension);
						sap.firefly.QInAMdHierarchy.importMdHierarchy(importer,
								inaStructure, dimension);
						sap.firefly.QInAMdDimProperties.importMdNameValuePairs(
								inaStructure, dimension);
						if (hasQueryModel) {
							axisDefaultName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_AXIS_DEFAULT);
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(axisDefaultName)) {
								axisDefaultName = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_AXIS);
							}
							if (axisDefaultName === null) {
								axisDefault = sap.firefly.AxisType.FREE;
							} else {
								axisDefault = sap.firefly.QInAConverter
										.lookupAxisType(axisDefaultName);
							}
							if (dimension.isAxisSupported(axisDefault) === false) {
								supportedAxesTypes = dimension
										.getSupportedAxesTypes();
								iterator = supportedAxesTypes.getIterator();
								if (iterator.hasNext()) {
									axisDefault = iterator.next();
								}
								iterator.releaseObject();
							}
							dimension.setDefaultAxisType(axisDefault);
						}
						dimension
								.setEnforceDynamicValue(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_ENFORCE_DYNAMIC_VALUE,
												false));
						return dimension;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var dimName = dimension.getName();
						var dimType;
						var axisType;
						var inaAxisType;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, dimName);
						dimType = sap.firefly.QInAConverter
								.lookupDimensionTypeInA(dimension
										.getDimensionType());
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_DIMENSION_TYPE,
								dimType);
						inaStructure.setStringByNameNotNull(
								sap.firefly.InAConstants.QY_VIEW_ATTRIBUTES,
								dimension.getAttributeViewName());
						axisType = dimension.getDefaultAxisType();
						inaAxisType = sap.firefly.QInAConverter
								.lookupAxisTypeInA(axisType);
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS_DEFAULT,
								inaAxisType);
						sap.firefly.QInAMdDimension.exportDimensionFlags(
								inaStructure, dimension);
						sap.firefly.QInAMdDimMembers.exportMd(exporter,
								inaStructure, dimension);
						sap.firefly.QInAMdFieldsList.exportMd(exporter,
								inaStructure, dimension);
						sap.firefly.QInAMdFieldsResultSet.exportMd(
								inaStructure, dimension);
						sap.firefly.QInAMdFieldsRoles.exportMd(inaStructure,
								dimension);
						sap.firefly.QInAMdFieldsAttributes.exportMd(
								inaStructure, dimension);
						sap.firefly.QInAMdDimension.exportDimensionGroup(
								inaStructure, dimension);
						sap.firefly.QInAMdHierarchy.exportMdHierarchy(exporter,
								inaStructure, dimension);
						sap.firefly.QInAMdDimension.exportAxesConstraints(
								inaStructure, dimension);
						sap.firefly.QInAMdDimension.exportDimensionReadModes(
								exporter, inaStructure, dimension);
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_ENFORCE_DYNAMIC_VALUE,
										dimension.isEnforcedDynamicValue());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdDrillManager",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.DRILL_MANAGER;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						return sap.firefly.QFactory2.newDrillManager(context);
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var supports = importer.m_supportsHierNavCounter;
						var drillManager;
						if (inaStructure !== null) {
							supports = inaStructure
									.getBooleanByNameWithDefault(
											sap.firefly.InAConstants.QY_SUPPORTS_HIERARCHY_NAV_COUNTER,
											supports);
						}
						drillManager = modelComponent;
						drillManager.setSupportsDrillCounter(supports);
						return drillManager;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var drillManager = modelComponent;
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_SUPPORTS_HIERARCHY_NAV_COUNTER,
										drillManager.supportsDrillCounter());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdField",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						return sap.firefly.QField._createField(context,
								parentComponent, null);
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var field = modelComponent;
						var inaDataType;
						var attValueType;
						var attPresentationType;
						var presentationType;
						var usageTypeValue;
						var usageType;
						var precision;
						var attrInfoObjectType;
						var qAttrInfoObjectType;
						var attrVisibilityType;
						var qAttrVisibilityType;
						var dimension;
						var dimSelectionCapabilities;
						var fieldSelectionCapability;
						field
								.setName(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_NAME));
						field
								.setAliasName(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_ALIAS_NAME));
						field
								.setText(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
						field
								.setMappedColumnName(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_MAPPED_COLUMN,
												null));
						field.setSqlType(inaStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_SQL_TYPE,
										null));
						inaDataType = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DATA_TYPE);
						attValueType = sap.firefly.QInAConverter
								.lookupValueType(inaDataType);
						field.setValueType(attValueType);
						attPresentationType = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_PRESENTATION_TYPE);
						presentationType = sap.firefly.QInAConverter
								.lookupPresentationType(attPresentationType);
						if (presentationType === sap.firefly.PresentationType.WHY_FOUND) {
							if (attValueType !== sap.firefly.XValueType.PROPERTIES) {
								importer.addError(
										sap.firefly.ErrorCodes.INVALID_STATE,
										"Why found has not properties type");
								return null;
							}
						}
						field.setPresentationType(presentationType);
						if ((importer.m_capabilities !== null)
								&& importer.m_capabilities
										.containsKey(sap.firefly.InACapabilities.AV_CAPABILITY_RESULT_SET_INTERVAL)) {
							field
									.setUpperBound(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_UPPER_BOUND));
							field
									.setLowerBound(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_LOWER_BOUND));
						}
						field
								.setIsFilterable(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_IS_FILTERABLE,
												true));
						field
								.setIsLowerCaseEnabled(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_LOWER_CASE_ENABLED,
												false));
						field
								.setInitialValue(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_INITIAL_VALUE,
												null));
						field.setLength(inaStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.QY_LENGTH, 0));
						field
								.setDecimals(inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_DECIMALS,
												0));
						usageTypeValue = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_USAGE_TYPE);
						if (usageTypeValue !== null) {
							usageType = sap.firefly.FieldUsageType
									.lookup(usageTypeValue);
							field.setUsageType(usageType);
						}
						precision = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_FRACT_DIGITS, 0);
						if (precision !== 0) {
							field.setPrecision(precision);
						}
						attrInfoObjectType = inaStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_INFO_OBJ_TYPE,
										null);
						if (attrInfoObjectType !== null) {
							qAttrInfoObjectType = sap.firefly.QInAConverter
									.lookupInfoObjectType(attrInfoObjectType);
							field.setInfoObjectType(qAttrInfoObjectType);
						}
						attrVisibilityType = inaStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_VISIBILITY_TYPE,
										null);
						if (attrVisibilityType !== null) {
							qAttrVisibilityType = sap.firefly.QInAConverter
									.lookupVisibilityType(attrVisibilityType);
							field.setVisibilityType(qAttrVisibilityType);
						}
						field
								.setIsDisplayAttributeField(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_IS_DISPLAY_ATTRIBUTE,
												false));
						field
								.setAttributeType(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_ATTRIBUTE_TYPE,
												null));
						field
								.setNavigationalAttributeDescription(inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_NAVIGATIONAL_ATTRIBUTE_DESCRIPTION,
												null));
						this.importDependencies(inaStructure, field);
						dimension = parentComponent;
						if (dimension !== null) {
							dimSelectionCapabilities = dimension
									.getSelectionCapabilitiesBase();
							fieldSelectionCapability = sap.firefly.QInAMdFilterCapability
									.importMd(importer, inaStructure, field,
											dimSelectionCapabilities, context);
							if (fieldSelectionCapability !== null) {
								dimSelectionCapabilities
										.addSelectionCapability(fieldSelectionCapability);
							}
						}
						return field;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var field = modelComponent;
						var infoObjectType;
						var visibilityType;
						var selectionCapabilities;
						var selectionCapability;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, field
										.getName());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ALIAS_NAME, field
										.getAliasName());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DESCRIPTION, field
										.getText());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DATA_TYPE,
								sap.firefly.QInAConverter
										.lookupValueTypeInA(field
												.getValueType()));
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_PRESENTATION_TYPE,
								sap.firefly.QInAConverter
										.lookupPresentationTypeInA(field
												.getPresentationType()));
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_IS_FILTERABLE,
								field.isFilterable());
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_LOWER_CASE_ENABLED,
								field.getIsLowerCaseEnabled());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_INITIAL_VALUE,
								field.getInitialValue());
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_LENGTH, field
										.getLength());
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_DECIMALS, field
										.getDecimals());
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_IS_DISPLAY_ATTRIBUTE,
										field.isDisplayAttributeField());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_MAPPED_COLUMN,
								field.getMappedColumnName());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ATTRIBUTE_TYPE,
								field.getAttributeType());
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_NAVIGATIONAL_ATTRIBUTE_DESCRIPTION,
										field
												.getNavigationalAttributeDescription());
						inaStructure.setStringByNameNotNull(
								sap.firefly.InAConstants.QY_SQL_TYPE, field
										.getSqlType());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_USAGE_TYPE, field
										.getUsageType().getName());
						inaStructure.setStringByNameNotNull(
								sap.firefly.InAConstants.QY_LOWER_BOUND, field
										.getLowerBound());
						inaStructure.setStringByNameNotNull(
								sap.firefly.InAConstants.QY_UPPER_BOUND, field
										.getUpperBound());
						if (field.getPrecision() !== 0) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_FRACT_DIGITS,
									field.getPrecision());
						}
						infoObjectType = field.getInfoObjectType();
						if (infoObjectType !== null) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_INFO_OBJ_TYPE,
											sap.firefly.QInAConverter
													.lookupInfoObjectTypeInA(infoObjectType));
						}
						visibilityType = field.getVisibilityType();
						if (visibilityType !== null) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_VISIBILITY_TYPE,
											sap.firefly.QInAConverter
													.lookupVisibilityTypeInA(visibilityType));
						}
						this.exportDependencies(inaStructure, field);
						selectionCapabilities = field.getDimension()
								.getSelectionCapabilities();
						selectionCapability = selectionCapabilities
								.getSelectionCapabilitiesByField(field);
						sap.firefly.QInAMdFilterCapability.exportMd(exporter,
								selectionCapability, inaStructure);
						return inaStructure;
					},
					importDependencies : function(inaStructure, field) {
						var inaDependentAttributes;
						var dependentSize;
						var i;
						var dependentAttribute;
						if (inaStructure !== null) {
							inaDependentAttributes = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_DEPENDENT_ATTRIBUTES);
							if (inaDependentAttributes !== null) {
								dependentSize = inaDependentAttributes.size();
								for (i = 0; i < dependentSize; i++) {
									dependentAttribute = inaDependentAttributes
											.getStringByIndex(i);
									if (dependentAttribute !== null) {
										field
												.addDependencyField(dependentAttribute);
									}
								}
							}
						}
					},
					exportDependencies : function(inaStructure, field) {
						var inaDependentAttributes = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_DEPENDENT_ATTRIBUTES);
						var dependencyFields = field.getDependencyFields();
						var dependencySize = dependencyFields.size();
						var i;
						for (i = 0; i < dependencySize; i++) {
							inaDependentAttributes.addString(dependencyFields
									.get(i));
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdFieldsAttributes",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, dimension, inaStructure) {
							var inaAttributeHierarchy = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_HIERARCHY);
							var rootAttribute;
							if (inaAttributeHierarchy !== null) {
								rootAttribute = sap.firefly.QInAMdFieldsAttributes
										.importMdAttributeHierarchyNode(
												importer,
												inaAttributeHierarchy,
												dimension);
								if (rootAttribute !== null) {
									dimension
											.addSupportedFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED);
									dimension.getAttributeContainerBase()
											.setMainAttribute(rootAttribute);
								}
							}
						},
						importMdAttributeHierarchyNode : function(importer,
								inaAttributeHierarchy, dimension) {
							var attribute;
							var fields;
							var defaultKeyField;
							var defaultDisplayKeyField;
							var defaultTextField;
							var hierarchyKeyField;
							var hierarchyDisplayKeyField;
							var hierarchyTextField;
							var inaChildren;
							var childSize;
							var k;
							var childAttribute;
							if (inaAttributeHierarchy === null) {
								return null;
							}
							attribute = sap.firefly.QAttribute.createAttribute(
									dimension.getContext(), dimension);
							attribute
									.setName(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_NAME));
							attribute
									.setText(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
							fields = dimension.getFields();
							defaultKeyField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_DEFAULT_KEY_ATTRIBUTE));
							if (defaultKeyField !== null) {
								attribute.setFlatKeyField(defaultKeyField);
							}
							defaultDisplayKeyField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_DEFAULT_DISPLAY_KEY_ATTRIBUTE));
							if (defaultDisplayKeyField !== null) {
								attribute
										.setFlatDisplayKeyField(defaultDisplayKeyField);
							}
							defaultTextField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_DEFAULT_TEXT_ATTRIBUTE));
							if (defaultTextField !== null) {
								attribute.setFlatTextField(defaultTextField);
							}
							hierarchyKeyField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_KEY_ATTRIBUTE));
							if (hierarchyKeyField !== null) {
								attribute
										.setHierachyKeyField(hierarchyKeyField);
								sap.firefly.QInAMdFieldsAttributes
										.setFieldUsage(defaultKeyField,
												hierarchyKeyField);
							}
							hierarchyDisplayKeyField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_DISPLAY_KEY_ATTRIBUTE));
							if (hierarchyDisplayKeyField !== null) {
								attribute
										.setHierarchyDisplayKeyField(hierarchyDisplayKeyField);
								sap.firefly.QInAMdFieldsAttributes
										.setFieldUsage(defaultDisplayKeyField,
												hierarchyDisplayKeyField);
							}
							hierarchyTextField = fields
									.getByKey(inaAttributeHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_TEXT_ATTRIBUTE));
							if (hierarchyTextField !== null) {
								attribute
										.setHierarchyTextField(hierarchyTextField);
								sap.firefly.QInAMdFieldsAttributes
										.setFieldUsage(defaultTextField,
												hierarchyTextField);
							}
							sap.firefly.QInAMdFieldsAttributes
									.importAttributeFields(attribute, fields,
											inaAttributeHierarchy);
							dimension.getAttributeContainerBase()
									.addAttributeInternal(attribute);
							inaChildren = inaAttributeHierarchy
									.getListByName(sap.firefly.InAConstants.QY_CHILDREN);
							if (inaChildren !== null) {
								childSize = inaChildren.size();
								for (k = 0; k < childSize; k++) {
									childAttribute = sap.firefly.QInAMdFieldsAttributes
											.importMdAttributeHierarchyNode(
													importer,
													inaChildren
															.getStructureByIndex(k),
													dimension);
									attribute.addChildAttribute(childAttribute);
								}
							}
							return attribute;
						},
						setFieldUsage : function(flatField, hierarchyField) {
							if (hierarchyField !== flatField) {
								if (flatField !== null) {
									flatField
											.setUsageType(sap.firefly.FieldUsageType.FLAT);
								}
								if (hierarchyField !== null) {
									hierarchyField
											.setUsageType(sap.firefly.FieldUsageType.HIERARCHY);
								}
							} else {
								if (flatField !== null) {
									flatField
											.setUsageType(sap.firefly.FieldUsageType.ALL);
								}
							}
						},
						importAttributeFields : function(attribute, fields,
								inaAttributeHierarchy) {
							var inaFieldNames = inaAttributeHierarchy
									.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTE_NAMES);
							var size = inaFieldNames.size();
							var idxFieldName;
							var field;
							var inaDefaultResultSetAttributes;
							for (idxFieldName = 0; idxFieldName < size; idxFieldName++) {
								field = fields.getByKey(inaFieldNames
										.getStringByIndex(idxFieldName));
								if (field !== null) {
									attribute.addFieldInternal(field);
								}
							}
							inaDefaultResultSetAttributes = inaAttributeHierarchy
									.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES);
							size = inaDefaultResultSetAttributes.size();
							for (idxFieldName = 0; idxFieldName < size; idxFieldName++) {
								field = attribute
										.getFieldByName(inaDefaultResultSetAttributes
												.getStringByIndex(idxFieldName));
								if (field !== null) {
									attribute.addDefaultResultSetField(field);
								}
							}
						},
						exportMd : function(inaStructure, dimension) {
							var attributeContainer = dimension
									.getAttributeContainer();
							var mainAttribute = attributeContainer
									.getMainAttribute();
							var inaAttributeHierarchy;
							if (mainAttribute !== null) {
								inaAttributeHierarchy = inaStructure
										.setNewStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_HIERARCHY);
								sap.firefly.QInAMdFieldsAttributes
										.exportMdAttribute(mainAttribute,
												inaAttributeHierarchy);
							}
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE,
											sap.firefly.QInAConverter
													.lookupFieldLayoutTypeInA(dimension
															.getFieldLayoutType()));
						},
						exportMdAttribute : function(attribute,
								inaAttributeHierarchy) {
							var maKeyField;
							var maTextField;
							var childAttributes;
							var inaChildren;
							var childAttrSize;
							var i;
							inaAttributeHierarchy.setStringByName(
									sap.firefly.InAConstants.QY_NAME, attribute
											.getName());
							inaAttributeHierarchy.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									attribute.getText());
							maKeyField = attribute.getKeyField();
							if (maKeyField !== null) {
								inaAttributeHierarchy
										.setStringByName(
												sap.firefly.InAConstants.QY_DEFAULT_KEY_ATTRIBUTE,
												maKeyField.getName());
							}
							maTextField = attribute.getTextField();
							if (maTextField !== null) {
								inaAttributeHierarchy
										.setStringByName(
												sap.firefly.InAConstants.QY_DEFAULT_TEXT_ATTRIBUTE,
												maTextField.getName());
							}
							inaAttributeHierarchy
									.setElementByName(
											sap.firefly.InAConstants.QY_ATTRIBUTE_NAMES,
											sap.firefly.QInAMdFieldsAttributes
													.exportFieldNames(attribute
															.getFields()));
							inaAttributeHierarchy
									.setElementByName(
											sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES,
											sap.firefly.QInAMdFieldsAttributes
													.exportFieldNames(attribute
															.getResultSetFields()));
							childAttributes = attribute.getChildAttributes();
							inaChildren = inaAttributeHierarchy
									.setNewListByName(sap.firefly.InAConstants.QY_CHILDREN);
							if (childAttributes !== null) {
								childAttrSize = childAttributes.size();
								for (i = 0; i < childAttrSize; i++) {
									sap.firefly.QInAMdFieldsAttributes
											.exportMdAttribute(childAttributes
													.get(i), inaChildren
													.addNewStructure());
								}
							}
						},
						exportFieldNames : function(fields) {
							var inaFieldNames = sap.firefly.PrList.create();
							var size = fields.size();
							var m;
							for (m = 0; m < size; m++) {
								inaFieldNames
										.addString(fields.get(m).getName());
							}
							return inaFieldNames;
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						sap.firefly.QInAMdFieldsAttributes.importMd(importer,
								dimension, inaStructure);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdFieldsAttributes.exportMd(
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdFieldsList",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure, dimension) {
							var inaFieldList = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTES_MD);
							var len;
							var fieldIdx;
							var inaField;
							var field;
							if (inaFieldList === null) {
								inaFieldList = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTES);
							}
							if (inaFieldList !== null) {
								len = inaFieldList.size();
								for (fieldIdx = 0; fieldIdx < len; fieldIdx++) {
									inaField = inaFieldList
											.getStructureByIndex(fieldIdx);
									field = importer
											.importComponent(
													sap.firefly.OlapComponentType.FIELD,
													inaField, null, dimension,
													dimension);
									dimension.addFieldInternal(field);
								}
							}
						},
						exportMd : function(exporter, inaStructure, dimension) {
							var inaList = sap.firefly.PrList.create();
							var fields = dimension.getFields();
							var len = fields.size();
							var i;
							for (i = 0; i < len; i++) {
								inaList.add(exporter.exportComponent(
										sap.firefly.OlapComponentType.FIELD,
										fields.get(i), null,
										sap.firefly.QImExFlag.DEFAULT_ALL));
							}
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_ATTRIBUTES_MD,
									inaList);
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						sap.firefly.QInAMdFieldsList.importMd(importer,
								inaStructure, dimension);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdFieldsList.exportMd(exporter,
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdFieldsResultSet",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure, dimension) {
							var inaDefaultResultSetFields = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES_MD);
							var inaDefaultResultSetNodes;
							var fieldLayoutTypeValue;
							var fieldLayoutType;
							var resultSetFields;
							var selectorFields;
							var duplicateNames;
							var defaultFieldSize;
							var i;
							var fieldName;
							var field;
							var attributeContainer;
							var rootAttribute;
							var resultSetAttributes;
							var selectorAttributes;
							var defaultNodeSize;
							var k;
							var attribute;
							var attributeResultSetFields;
							var attributeSize;
							var m;
							var field2;
							var isFixed;
							var dimResultSetFields;
							var resultSize;
							var s;
							if (inaDefaultResultSetFields === null) {
								inaDefaultResultSetFields = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES);
							}
							inaDefaultResultSetNodes = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTE_NODES_MD);
							if (inaDefaultResultSetNodes === null) {
								inaDefaultResultSetNodes = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTE_NODES);
							}
							fieldLayoutTypeValue = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE);
							fieldLayoutType = null;
							if (fieldLayoutTypeValue !== null) {
								fieldLayoutType = sap.firefly.QInAConverter
										.lookupFieldLayoutType(fieldLayoutTypeValue);
							}
							if (fieldLayoutType === null) {
								if ((inaDefaultResultSetNodes !== null)
										&& dimension
												.supportsFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED)) {
									fieldLayoutType = sap.firefly.FieldLayoutType.ATTRIBUTE_BASED;
								} else {
									fieldLayoutType = sap.firefly.FieldLayoutType.FIELD_BASED;
								}
							}
							dimension.setFieldLayoutType(fieldLayoutType);
							dimension
									.setDefaultFieldLayoutType(fieldLayoutType);
							resultSetFields = dimension.getResultSetFields();
							selectorFields = dimension.getSelectorFields();
							if (inaDefaultResultSetFields !== null) {
								duplicateNames = sap.firefly.XHashSetOfString
										.create();
								defaultFieldSize = inaDefaultResultSetFields
										.size();
								for (i = 0; i < defaultFieldSize; i++) {
									fieldName = inaDefaultResultSetFields
											.getStringByIndex(i);
									if (duplicateNames.contains(fieldName)) {
										continue;
									}
									duplicateNames.put(fieldName);
									field = dimension.getFieldByName(fieldName);
									if (field === null) {
										importer
												.addError(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														fieldName);
										return;
									}
									dimension.addDefaultResultSetField(field);
									resultSetFields.add(field);
									selectorFields.add(field);
								}
							}
							if (inaDefaultResultSetNodes !== null) {
								if (dimension
										.supportsFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED)) {
									attributeContainer = dimension
											.getAttributeContainerBase();
									rootAttribute = attributeContainer
											.getMainAttribute();
									if (rootAttribute !== null) {
										resultSetAttributes = attributeContainer
												.getResultSetAttributes();
										selectorAttributes = attributeContainer
												.getSelectorAttributes();
										if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
											resultSetFields.clear();
											selectorFields.clear();
										}
										defaultNodeSize = inaDefaultResultSetNodes
												.size();
										for (k = 0; k < defaultNodeSize; k++) {
											attribute = attributeContainer
													.getAttributeByName(inaDefaultResultSetNodes
															.getStringByIndex(k));
											if (attribute !== null) {
												attributeContainer
														.addDefaultResultSetAttribute(attribute);
												resultSetAttributes
														.add(attribute);
												selectorAttributes
														.add(attribute);
												if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
													attributeResultSetFields = attribute
															.getResultSetFields();
													attributeSize = attributeResultSetFields
															.size();
													for (m = 0; m < attributeSize; m++) {
														field2 = attributeResultSetFields
																.get(m);
														resultSetFields
																.add(field2);
														selectorFields
																.add(field2);
													}
												}
											}
										}
									}
								}
							}
							isFixed = inaStructure
									.getBooleanByNameWithDefault(
											sap.firefly.InAConstants.QY_RS_FIXED_ATTRIBUTES,
											false);
							dimension.setHasFixedResultSetFields(isFixed);
							resultSetFields.setIsFixed(isFixed);
							selectorFields.setIsFixed(isFixed);
							if (inaStructure
									.hasValueByName(sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE) === false) {
								if (inaStructure
										.hasValueByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES)) {
									dimension.clearDefaultResultSetFields();
								} else {
									if (inaStructure
											.hasValueByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS) === false) {
										if (dimension
												.supportsFieldLayoutType(sap.firefly.FieldLayoutType.FIELD_BASED)) {
											dimension
													.setFieldLayoutType(sap.firefly.FieldLayoutType.FIELD_BASED);
											dimension
													.setDefaultFieldLayoutType(sap.firefly.FieldLayoutType.FIELD_BASED);
											dimension
													.clearDefaultResultSetFields();
											dimResultSetFields = dimension
													.getResultSetFields();
											resultSize = dimResultSetFields
													.size();
											for (s = 0; s < resultSize; s++) {
												dimension
														.addDefaultResultSetField(dimResultSetFields
																.get(s));
											}
										}
									}
								}
							}
						},
						exportMd : function(inaStructure, dimension) {
							var inaDefaultResultSetFields = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTES_MD);
							var resultSetFields = dimension
									.getDefaultResultSetFields();
							var resultFieldSize = resultSetFields.size();
							var i;
							var attributeContainer;
							var resultSetAttributes;
							var inaDefaultResultSetNodes;
							var resultAttributeSize;
							var j;
							for (i = 0; i < resultFieldSize; i++) {
								inaDefaultResultSetFields
										.addString(resultSetFields.get(i)
												.getName());
							}
							if (dimension
									.supportsFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED)) {
								attributeContainer = dimension
										.getAttributeContainer();
								resultSetAttributes = attributeContainer
										.getDefaultResultSetAttributes();
								inaDefaultResultSetNodes = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_DEFAULT_RESULT_SET_ATTRIBUTE_NODES_MD);
								resultAttributeSize = resultSetAttributes
										.size();
								for (j = 0; j < resultAttributeSize; j++) {
									inaDefaultResultSetNodes
											.addString(resultSetAttributes.get(
													j).getName());
								}
							}
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_RS_FIXED_ATTRIBUTES,
											dimension.hasFixedResultSetFields());
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						sap.firefly.QInAMdFieldsResultSet.importMd(importer,
								inaStructure, dimension);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdFieldsResultSet.exportMd(
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdFieldsRoles",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						getFieldBySuffix : function(suffix, dimension) {
							var fields = dimension.getFields();
							var size = fields.size();
							var i;
							var field;
							var isFieldWithSuffix;
							for (i = 0; i < size; i++) {
								field = fields.get(i);
								isFieldWithSuffix = sap.firefly.XString
										.endsWith(field.getName(), suffix);
								if (isFieldWithSuffix) {
									return field;
								}
							}
							return null;
						},
						importMd : function(importer, inaStructure, dimension) {
							var inaFieldDefaults = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_FIELD_DEFAULTS);
							var inaFieldRoles;
							var flatKeyField;
							var flatTextField;
							var flatDisplayKeyField;
							var hierKeyField;
							var hierTextField;
							var hierDisplayKeyField;
							var hierPathField;
							var blendingPropertiesField;
							var attributeContainer;
							var rootAttribute;
							if (inaFieldDefaults !== null) {
								inaFieldRoles = inaFieldDefaults;
							} else {
								inaFieldRoles = inaStructure;
							}
							flatKeyField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_KEY_ATTRIBUTE));
							flatTextField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_TEXT_ATTRIBUTE));
							flatDisplayKeyField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_DISPLAY_KEY_ATTRIBUTE));
							hierKeyField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_KEY_ATTRIBUTE));
							hierTextField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_TEXT_ATTRIBUTE));
							hierDisplayKeyField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_DISPLAY_KEY_ATTRIBUTE));
							hierPathField = dimension
									.getFieldByName(inaFieldRoles
											.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_PATH_ATTRIBUTE));
							blendingPropertiesField = null;
							if (inaFieldDefaults === null) {
								if (hierPathField === null) {
									hierPathField = sap.firefly.QInAMdFieldsRoles
											.getFieldBySuffix(".path",
													dimension);
								}
								if (importer.m_supportsCubeBlendingProperties) {
									blendingPropertiesField = sap.firefly.QInAMdFieldsRoles
											.getFieldBySuffix(
													".cubeBlendingProperties",
													dimension);
								}
								attributeContainer = dimension
										.getAttributeContainer();
								rootAttribute = attributeContainer
										.getMainAttribute();
								if (rootAttribute !== null) {
									flatKeyField = rootAttribute.getKeyField();
									flatDisplayKeyField = rootAttribute
											.getDisplayKeyField();
									flatTextField = rootAttribute
											.getTextField();
									if (importer.m_supportsHierAttHierFields) {
										hierKeyField = rootAttribute
												.getHierarchyKeyField();
										hierTextField = rootAttribute
												.getHierarchyTextField();
										hierDisplayKeyField = rootAttribute
												.getHierarchyDisplayKeyField();
									}
								}
								if (flatKeyField === null) {
									flatKeyField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.KEY);
								}
								if (flatDisplayKeyField === null) {
									flatDisplayKeyField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.DISPLAY_KEY);
								}
								if (flatTextField === null) {
									flatTextField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.TEXT);
								}
								if (hierKeyField === null) {
									hierKeyField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_KEY);
								}
								if (hierTextField === null) {
									hierTextField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_TEXT);
								}
								if (hierDisplayKeyField === null) {
									hierDisplayKeyField = dimension
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_DISPLAY_KEY);
								}
								if (hierKeyField === null) {
									hierKeyField = flatKeyField;
								}
								if (hierTextField === null) {
									hierTextField = flatTextField;
								}
								if (hierDisplayKeyField === null) {
									hierDisplayKeyField = flatDisplayKeyField;
								}
							}
							if (flatKeyField !== null) {
								(flatKeyField).setIsFlatKeyField(true);
							}
							if (flatTextField !== null) {
								(flatTextField).setIsFlatTextField(true);
							}
							if (hierPathField !== null) {
								(hierPathField).setIsHierarchyPathField(true);
							}
							if (hierKeyField !== null) {
								(hierKeyField).setIsHierarchyKeyField(true);
							}
							if (blendingPropertiesField !== null) {
								(blendingPropertiesField)
										.setIsCubeBlendingPropertiesField(true);
							}
							dimension.setFlatKeyField(flatKeyField);
							dimension.setFlatTextField(flatTextField);
							dimension
									.setFlatDisplayKeyField(flatDisplayKeyField);
							dimension.setHierachyKeyField(hierKeyField);
							dimension.setHierarchyTextField(hierTextField);
							dimension
									.setHierarchyDisplayKeyField(hierDisplayKeyField);
							dimension.setHierarchyPathField(hierPathField);
							dimension
									.setCubeBlendingPropertiesField(blendingPropertiesField);
						},
						exportMd : function(inaStructure, dimension) {
							var inaFieldDefaults = inaStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_FIELD_DEFAULTS);
							sap.firefly.QInAMdFieldsRoles.setField(
									inaFieldDefaults,
									sap.firefly.InAConstants.QY_KEY_ATTRIBUTE,
									dimension.getFlatKeyField());
							sap.firefly.QInAMdFieldsRoles.setField(
									inaFieldDefaults,
									sap.firefly.InAConstants.QY_TEXT_ATTRIBUTE,
									dimension.getFlatTextField());
							sap.firefly.QInAMdFieldsRoles
									.setField(
											inaFieldDefaults,
											sap.firefly.InAConstants.QY_DISPLAY_KEY_ATTRIBUTE,
											dimension.getFlatDisplayKeyField());
							sap.firefly.QInAMdFieldsRoles
									.setField(
											inaFieldDefaults,
											sap.firefly.InAConstants.QY_HIERARCHY_KEY_ATTRIBUTE,
											dimension.getHierarchyKeyField());
							sap.firefly.QInAMdFieldsRoles
									.setField(
											inaFieldDefaults,
											sap.firefly.InAConstants.QY_HIERARCHY_TEXT_ATTRIBUTE,
											dimension.getHierarchyTextField());
							sap.firefly.QInAMdFieldsRoles
									.setField(
											inaFieldDefaults,
											sap.firefly.InAConstants.QY_HIERARCHY_DISPLAY_KEY_ATTRIBUTE,
											dimension
													.getHierarchyDisplayKeyField());
							sap.firefly.QInAMdFieldsRoles
									.setField(
											inaFieldDefaults,
											sap.firefly.InAConstants.QY_HIERARCHY_PATH_ATTRIBUTE,
											dimension.getHierarchyPathField());
						},
						setField : function(inaFieldDefaults, name, field) {
							if (field !== null) {
								inaFieldDefaults.setStringByName(name, field
										.getName());
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdFieldsRoles.importMd(importer,
								inaStructure, modelComponent);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdFieldsRoles.exportMd(inaStructure,
								modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdFilterCapability",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure, field,
								parentContext, context) {
							var inaFilterCapability = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_FILTER_CAPABILITY);
							var inaComparisonGroup;
							var filterCapability;
							var capabilityGroup;
							var inaComparison;
							var filterCapabilityBase;
							var message;
							if (inaFilterCapability !== null) {
								inaComparisonGroup = inaFilterCapability
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_CAPABILITY_COMPARISON_GROUP,
												null);
							} else {
								inaComparisonGroup = inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_CAPABILITY_COMPARISON_GROUP,
												null);
							}
							filterCapability = null;
							if (inaComparisonGroup !== null) {
								capabilityGroup = sap.firefly.QFilterCapabilityGroup
										._createFilterCapabilityGroup(context,
												parentContext, field);
								capabilityGroup
										.setGroup(sap.firefly.QInAConverter
												.lookupComparisonGroup(inaComparisonGroup));
								filterCapability = capabilityGroup;
							} else {
								if ((inaFilterCapability !== null)
										&& inaFilterCapability.hasElements()) {
									inaComparison = inaFilterCapability
											.getStructureByName(sap.firefly.InAConstants.QY_COMPARISON);
									if (inaComparison !== null) {
										filterCapabilityBase = sap.firefly.QFilterCapability
												._createFilterCapability(
														context, parentContext,
														field);
										filterCapability = filterCapabilityBase;
										sap.firefly.QInAMdFilterCapability
												.importOperators(
														importer,
														inaComparison,
														filterCapabilityBase,
														sap.firefly.InAConstants.QY_CAPABILITY_INCLUDING,
														sap.firefly.SetSign.INCLUDING);
										sap.firefly.QInAMdFilterCapability
												.importOperators(
														importer,
														inaComparison,
														filterCapabilityBase,
														sap.firefly.InAConstants.QY_CAPABILITY_EXCLUDING,
														sap.firefly.SetSign.EXCLUDING);
									} else {
										message = sap.firefly.XStringBuffer
												.create();
										message
												.append("Metadata warning: No filter capability found for field ");
										if (field !== null) {
											message.append(field.getName());
										}
										importer
												.addWarning(
														sap.firefly.ErrorCodes.IMPORT_FILTER_CAPABILITY_NOT_FOUND,
														message.toString());
									}
								}
							}
							return filterCapability;
						},
						importOperators : function(importer, inaComparison,
								filterCapabilityBase, inaName, setSign) {
							var inaOperators = inaComparison
									.getListByName(inaName);
							var comparisonOperators;
							var size;
							var i;
							var inaSupportedComparisonOperator;
							var comparisonOperator;
							if (!sap.firefly.PrUtils.isListEmpty(inaOperators)) {
								filterCapabilityBase
										.addSupportedSetSign(setSign);
								comparisonOperators = filterCapabilityBase
										.getModifiableSupportedComparisonOperators(setSign);
								size = inaOperators.size();
								for (i = 0; i < size; i++) {
									inaSupportedComparisonOperator = inaOperators
											.getStringByIndex(i);
									if (inaSupportedComparisonOperator !== null) {
										comparisonOperator = sap.firefly.QInAConverter
												.lookupComparison(inaSupportedComparisonOperator);
										if (comparisonOperator === null) {
											importer
													.addWarning(
															sap.firefly.ErrorCodes.IMPORT_FILTER_CAPABILITY_UNSUPPORTED_OPERATORS,
															sap.firefly.XStringUtils
																	.concatenate3(
																			"Metadata warning: Unsupported Comparison Operator '",
																			inaSupportedComparisonOperator,
																			"'!"));
										} else {
											comparisonOperators
													.add(comparisonOperator);
										}
									}
								}
							}
						},
						exportMd : function(exporter, filterCapability,
								inaParent) {
							var inaStructure = sap.firefly.PrStructure.create();
							var capabilityGroup;
							var inaComparisonGroup;
							var isBw;
							var inaComparison;
							if (filterCapability !== null) {
								if (filterCapability
										.getComponentType()
										.isTypeOf(
												sap.firefly.OlapComponentType.FILTER_CAPABILITY_GROUP)) {
									capabilityGroup = filterCapability;
									inaComparisonGroup = sap.firefly.QInAConverter
											.lookupComparisonGroupInA(capabilityGroup
													.getGroup());
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_CAPABILITY_COMPARISON_GROUP,
													inaComparisonGroup);
								} else {
									isBw = exporter.isAbap(filterCapability
											.getQueryModel());
									inaComparison = inaStructure
											.setNewStructureByName(sap.firefly.InAConstants.QY_COMPARISON);
									sap.firefly.QInAMdFilterCapability
											.exportOperators(
													isBw,
													inaComparison,
													filterCapability,
													sap.firefly.InAConstants.QY_CAPABILITY_INCLUDING,
													sap.firefly.SetSign.INCLUDING);
									sap.firefly.QInAMdFilterCapability
											.exportOperators(
													isBw,
													inaComparison,
													filterCapability,
													sap.firefly.InAConstants.QY_CAPABILITY_EXCLUDING,
													sap.firefly.SetSign.EXCLUDING);
								}
							}
							if (inaParent !== null) {
								inaParent
										.setElementByName(
												sap.firefly.InAConstants.QY_FILTER_CAPABILITY,
												inaStructure);
							}
							return inaStructure;
						},
						exportOperators : function(isBw, inaStructure,
								filterCapability, inaName, setSign) {
							var inaOperators;
							var comparisonOperators;
							var size;
							var i;
							var comparisonOperator;
							var comparison;
							if (filterCapability.supportsSetSign(setSign)) {
								inaOperators = inaStructure
										.setNewListByName(inaName);
								comparisonOperators = filterCapability
										.getSupportedComparisonOperators(setSign);
								size = comparisonOperators.size();
								for (i = 0; i < size; i++) {
									comparisonOperator = comparisonOperators
											.get(i);
									if ((comparisonOperator === sap.firefly.ComparisonOperator.NOT_BETWEEN)
											&& isBw) {
										comparison = sap.firefly.InAConstants.VA_COMPARISON_NOTBETWEEN;
									} else {
										comparison = sap.firefly.QInAConverter
												.lookupComparisonInA(comparisonOperator);
									}
									inaOperators.addString(comparison);
								}
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						return sap.firefly.QInAMdFilterCapability.importMd(
								importer, inaStructure, parentComponent, null,
								context);
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						return sap.firefly.QInAMdFilterCapability.exportMd(
								exporter, modelComponent, inaStructure);
					}
				});
$Firefly.createClass("sap.firefly.QInAMdGenericComponent",
		sap.firefly.QInAComponentMetadata, {
			getComponentType : function() {
				return sap.firefly.OlapComponentType.OLAP;
			},
			importComponentWithStructure : function(importer, inaStructure,
					modelComponent, parentComponent, context) {
				return modelComponent;
			},
			exportComponentWithStructure : function(exporter, modelComponent,
					inaStructure, flags) {
				inaStructure.setStringByName(sap.firefly.InAConstants.QY_NAME,
						modelComponent.getName());
				inaStructure.setStringByName(sap.firefly.InAConstants.QY_TYPE,
						modelComponent.getComponentType().getName());
				return inaStructure;
			},
			extendCustom : function(exporter, modelComponent, inaStructure) {
				var olapComponentType = modelComponent.getOlapComponentType();
				var ctypeValue = sap.firefly.QInAConverter
						.lookupComponentTypeInA(olapComponentType);
				if (ctypeValue !== null) {
					inaStructure.setStringByName(
							sap.firefly.InAConstants.QY_CTYPE, ctypeValue);
				}
				return inaStructure;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QInAMdHierarchy",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMdHierarchy : function(importer, inaStructure,
								dimension) {
							var hierarchyManagerBase = dimension
									.getHierarchyManagerBase();
							var hierarchies;
							var context;
							var metadataModel;
							var metaHierarchies;
							var size;
							var hierIdx;
							var inaHierarchy;
							var hier;
							var hierDueDate;
							var inaLevels;
							hierarchyManagerBase
									.setSupportsHierarchy(sap.firefly.PrUtils
											.getBooleanValueProperty(
													inaStructure,
													sap.firefly.InAConstants.QY_HIERARCHIES_POSSIBLE,
													false));
							hierarchyManagerBase
									.setDefaultHierarchyName(sap.firefly.PrUtils
											.getStringValueProperty(
													inaStructure,
													sap.firefly.InAConstants.QY_DEFAULT_HIERARCHY,
													""));
							if (dimension.supportsHierarchyMetadata() === false) {
								return;
							}
							hierarchies = sap.firefly.PrUtils.getListProperty(
									inaStructure,
									sap.firefly.InAConstants.QY_HIERARCHIES);
							hierarchyManagerBase
									.setHierarchies(sap.firefly.HierarchyCatalogResult
											.createFromDimensionMetadata(
													hierarchies, dimension
															.getName()));
							if (hierarchies === null) {
								return;
							}
							context = dimension.getContext();
							metadataModel = dimension.getQueryModelBase()
									.getQueryManagerBase()
									.getMetadataModelBase();
							metaHierarchies = metadataModel
									.getLeveledHierarchiesBase();
							size = hierarchies.size();
							for (hierIdx = 0; hierIdx < size; hierIdx++) {
								inaHierarchy = hierarchies
										.getStructureByIndex(hierIdx);
								if (inaHierarchy
										.hasValueByName(sap.firefly.InAConstants.QY_NAME)) {
									hier = sap.firefly.QLeveledHierarchy
											.create(
													context,
													dimension,
													inaHierarchy
															.getStringByName(sap.firefly.InAConstants.QY_NAME));
								} else {
									hier = sap.firefly.QLeveledHierarchy
											.create(
													context,
													dimension,
													inaHierarchy
															.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_NAME));
								}
								hier
										.setHierarchyUniqueName(inaHierarchy
												.getStringByName(sap.firefly.InAConstants.QY_UNIQUE_NAME));
								hierDueDate = inaHierarchy
										.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(hierDueDate)) {
									hier
											.setDateTo(sap.firefly.XDate
													.createDateFromStringWithFlag(
															hierDueDate,
															importer.m_supportsSAPDateFormat));
								}
								hier
										.setHierarchyDescription(inaHierarchy
												.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
								inaLevels = inaHierarchy
										.getListByName(sap.firefly.InAConstants.QY_LEVELS);
								if (!sap.firefly.PrUtils.isListEmpty(inaLevels)) {
									sap.firefly.QInAMdHierarchy.importLevels(
											hier, inaLevels);
								}
								if (metaHierarchies.contains(hier) === false) {
									metaHierarchies.add(hier);
								}
							}
						},
						importLevels : function(hier, inaLevels) {
							var size = inaLevels.size();
							var levelIdx;
							var inaLevel;
							var level;
							for (levelIdx = 0; levelIdx < size; levelIdx++) {
								inaLevel = inaLevels
										.getStructureByIndex(levelIdx);
								level = sap.firefly.QHierarchyLevel
										.create(
												hier,
												inaLevel
														.getStringByName(sap.firefly.InAConstants.QY_LEVEL_UNIQUE_NAME),
												inaLevel
														.getIntegerByName(sap.firefly.InAConstants.QY_LEVEL));
								level
										.setLevelName(inaLevel
												.getStringByName(sap.firefly.InAConstants.QY_LEVEL_NAME));
								level
										.setLevelText(inaLevel
												.getStringByName(sap.firefly.InAConstants.QY_LEVEL_CAPTION));
								level
										.setLevelDimensionName(inaLevel
												.getStringByName(sap.firefly.InAConstants.QY_DIMENSION_NAME));
								level
										.setLevelType(sap.firefly.QInAConverter
												.lookupHierarchyLevelType(inaLevel
														.getIntegerByName(sap.firefly.InAConstants.QY_LEVEL_TYPE)));
								hier.getAllLevelBase().add(level);
							}
						},
						exportMdHierarchy : function(exporter, inaStructure,
								dimension) {
							var inaHierarchies;
							var hierarchies;
							var hierIt;
							var hierarchyItem;
							var inaHierarchy;
							var hierarchyType;
							var hierarchyDueDate;
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_HIERARCHIES_POSSIBLE,
											dimension.supportsHierarchy());
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DEFAULT_HIERARCHY,
											dimension.getDefaultHierarchyName());
							if (dimension.supportsHierarchy()) {
								if (dimension.supportsHierarchyMetadata()) {
									inaHierarchies = inaStructure
											.setNewListByName(sap.firefly.InAConstants.QY_HIERARCHIES);
									hierarchies = dimension.getHierarchies();
									hierIt = hierarchies.getObjectsIterator();
									while (hierIt.hasNext()) {
										hierarchyItem = hierIt.next();
										inaHierarchy = inaHierarchies
												.addNewStructure();
										inaHierarchy
												.setStringByName(
														sap.firefly.InAConstants.QY_NAME,
														hierarchyItem
																.getHierarchyName());
										inaHierarchy
												.setStringByName(
														sap.firefly.InAConstants.QY_DESCRIPTION,
														hierarchyItem
																.getHierarchyDescription());
										if (hierarchyItem.hasVersionName()) {
											inaHierarchy
													.setStringByName(
															sap.firefly.InAConstants.QY_VERSION,
															hierarchyItem
																	.getVersionName());
										}
										hierarchyType = hierarchyItem
												.getHierarchyType();
										if (hierarchyType !== sap.firefly.HierarchyType.UNKNOWN) {
											inaHierarchy
													.setStringByName(
															sap.firefly.InAConstants.QY_STRUCTURE,
															hierarchyType
																	.getName());
										}
										hierarchyDueDate = hierarchyItem
												.getDateTo();
										if (hierarchyDueDate !== null) {
											if (exporter.m_supportsSAPDateFormat) {
												inaHierarchy
														.setStringByName(
																sap.firefly.InAConstants.QY_DUE_DATE,
																hierarchyDueDate
																		.toSAPFormat());
											} else {
												inaHierarchy
														.setStringByName(
																sap.firefly.InAConstants.QY_DUE_DATE,
																hierarchyDueDate
																		.toIsoFormat());
											}
										}
										sap.firefly.QInAMdHierarchy
												.exportLevels(inaHierarchy,
														hierarchyItem);
									}
									hierIt.releaseObject();
								}
							}
						},
						exportLevels : function(inaHierarchy, hierarchyItem) {
							var inaLevels = inaHierarchy
									.setNewListByName(sap.firefly.InAConstants.QY_LEVELS);
							var hierarchyLevels = hierarchyItem
									.getHierarchyLevels();
							var size = hierarchyLevels.size();
							var levelIdx;
							var currentLevel;
							var inaLevel;
							for (levelIdx = 0; levelIdx < size; levelIdx++) {
								currentLevel = hierarchyLevels.get(levelIdx);
								inaLevel = inaLevels.addNewStructure();
								inaLevel
										.setStringByName(
												sap.firefly.InAConstants.QY_LEVEL_UNIQUE_NAME,
												currentLevel
														.getLevelUniqueName());
								inaLevel.setIntegerByName(
										sap.firefly.InAConstants.QY_LEVEL,
										currentLevel.getLevel());
								inaLevel.setStringByName(
										sap.firefly.InAConstants.QY_LEVEL_NAME,
										currentLevel.getLevelName());
								inaLevel
										.setStringByName(
												sap.firefly.InAConstants.QY_LEVEL_CAPTION,
												currentLevel
														.getLevelDescription());
								inaLevel
										.setStringByNameNotNull(
												sap.firefly.InAConstants.QY_DIMENSION_NAME,
												currentLevel
														.getLevelDimensionName());
								inaLevel
										.setIntegerByName(
												sap.firefly.InAConstants.QY_LEVEL_TYPE,
												sap.firefly.QInAConverter
														.lookupHierarchyLevelTypeIna(currentLevel
																.getLevelType()));
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdHierarchy.importMdHierarchy(importer,
								inaStructure, modelComponent);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdHierarchy.exportMdHierarchy(exporter,
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdQuery",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importVariants : function(inaStructure, queryModel) {
							var queryManager;
							var inaVariants;
							var size;
							var idx;
							var inaVariant;
							var variant;
							if (inaStructure === null) {
								return;
							}
							queryManager = queryModel.getQueryManagerBase();
							if (queryManager === null) {
								return;
							}
							inaVariants = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_VARIABLE_VARIANTS);
							if (inaVariants === null) {
								return;
							}
							size = inaVariants.size();
							for (idx = 0; idx < size; idx++) {
								inaVariant = inaVariants
										.getStructureByIndex(idx);
								variant = sap.firefly.QVariableVariant
										.createVariantWithTypeAndScope(
												inaVariant
														.getStringByName(sap.firefly.InAConstants.QY_NAME),
												inaVariant
														.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION),
												sap.firefly.VariableVariantType
														.lookupByName(inaVariant
																.getStringByName(sap.firefly.InAConstants.QY_TYPE)),
												sap.firefly.Scope
														.lookupByName(inaVariant
																.getStringByName(sap.firefly.InAConstants.QY_SCOPE)));
								queryManager.addVariableVariant(variant);
							}
						},
						exportVariants : function(inaStructure, queryModel) {
							var variants = queryModel.getQueryManager()
									.getVariableVariants();
							var inaVariants;
							var size;
							var idx;
							var variant;
							var inaVariant;
							if (variants !== null) {
								inaVariants = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_VARIABLE_VARIANTS);
								size = variants.size();
								for (idx = 0; idx < size; idx++) {
									variant = variants.get(idx);
									inaVariant = inaVariants.addNewStructure();
									inaVariant.setStringByName(
											sap.firefly.InAConstants.QY_NAME,
											variant.getName());
									inaVariant
											.setStringByName(
													sap.firefly.InAConstants.QY_DESCRIPTION,
													variant.getText());
									inaVariant.setStringByName(
											sap.firefly.InAConstants.QY_TYPE,
											variant.getVariableVariantType()
													.getName());
									inaVariant.setStringByName(
											sap.firefly.InAConstants.QY_SCOPE,
											variant.getScope().getName());
								}
							}
						},
						importPlanning : function(inaStructure, queryModel) {
							if (sap.firefly.PrUtils
									.getBooleanValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_SUPPORTS_DATA_ENTRY_READ_ONLY,
											false)) {
								queryModel.setSupportsDataEntryReadOnly(true);
							}
							if (sap.firefly.PrUtils
									.getBooleanValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_DATA_ENTRY_ENABLED,
											false)) {
								queryModel.setDataEntryEnabled(true);
							}
						},
						exportPlanning : function(inaStructure, queryModel) {
							if (queryModel.supportsDataEntryReadOnly()) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_SUPPORTS_DATA_ENTRY_READ_ONLY,
												true);
							}
							if (queryModel.isDataEntryEnabled()) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_DATA_ENTRY_ENABLED,
												true);
							}
						},
						importSupportsFlags : function(importer, inaStructure,
								queryModel) {
							var capabilities = queryModel
									.getModelCapabilitiesBase();
							if (inaStructure !== null) {
								capabilities
										.setSupportsConditions(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_SUPPORTS_CONDITIONS,
														importer.m_supportsConditions));
								capabilities
										.setSupportsDataCells(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_SUPPORTS_DATA_CELLS,
														importer.m_supportsDataCells));
								capabilities
										.setSupportsExtendedSort(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_SUPPORTS_EXTENDED_SORT,
														importer.m_supportsExtendedSort));
								capabilities
										.setSupportsExceptionAggregationDimsFormulas(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_SUPPORTS_EXCEPTION_AGGREGATION_DIMS_FORMULAS,
														importer.m_supportsExceptionAggregationDimsFormulas));
								capabilities
										.setSupportsResultsetFacets(inaStructure
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_SUPPORTS_RESULTSET_FACETS,
														false));
							}
						},
						exportSupportsFlags : function(inaStructure, queryModel) {
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_CONDITIONS,
											queryModel.supportsConditions());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_DATA_CELLS,
											queryModel.supportsDataCells());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_EXTENDED_SORT,
											queryModel.supportsExtendedSort());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_EXCEPTION_AGGREGATION_DIMS_FORMULAS,
											queryModel
													.supportsExceptionAggregationDimsFormulas());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_SUPPORTS_RESULTSET_FACETS,
											queryModel
													.supportsResultsetFacets());
						},
						importTotals : function(inaStructure, queryModel) {
							var capabilities = queryModel
									.getModelCapabilitiesBase();
							var inaQuery;
							var inaResultStructureFeature;
							var rc;
							var inaResultAlignment;
							var inaResultAlignmentConfigLevel;
							var supportedAlignmentLocation;
							var inaResultAlignments;
							var alignmentSize;
							var idxAlignment;
							var qAlignment;
							var inaReordering;
							var conditionalResultsSupported;
							var inaConditionalTotals;
							var conditionSize;
							var idxCondition;
							var inaConditionalTotalResult;
							if (inaStructure !== null) {
								inaQuery = inaStructure
										.getStructureByName(sap.firefly.InAConstants.QY_QUERY_MD);
								if (inaQuery === null) {
									inaQuery = inaStructure
											.getStructureByName(sap.firefly.InAConstants.QY_QUERY);
								}
								if (inaQuery !== null) {
									inaResultStructureFeature = inaQuery
											.getStructureByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE_FEATURE);
									rc = queryModel
											.getMdResultStructureControllerBase();
									if ((inaResultStructureFeature !== null)
											&& (inaResultStructureFeature
													.getBooleanByNameWithDefault(
															sap.firefly.InAConstants.QY_ENABLED,
															false))) {
										sap.firefly.QInAMdQuery
												.importReturnedDataSelections(
														inaResultStructureFeature,
														queryModel
																.getQueryManager());
										rc.setSupportsTotals(true);
										inaResultAlignment = inaResultStructureFeature
												.getStructureByName(sap.firefly.InAConstants.QY_RS_ALIGNMENT);
										inaResultAlignmentConfigLevel = inaResultAlignment
												.getStringByName(sap.firefly.InAConstants.QY_CONFIG_LEVEL);
										supportedAlignmentLocation = sap.firefly.QInAConverter
												.lookupConfigLevel(inaResultAlignmentConfigLevel);
										capabilities
												.setSupportedResultAlignmentLevel(supportedAlignmentLocation);
										inaResultAlignments = inaResultAlignment
												.getListByName(sap.firefly.InAConstants.QY_RESULT_ALIGNMENT_LIST);
										capabilities
												.clearSupportedResultAlignment();
										alignmentSize = inaResultAlignments
												.size();
										for (idxAlignment = 0; idxAlignment < alignmentSize; idxAlignment++) {
											qAlignment = sap.firefly.QInAConverter
													.lookupAlignment(inaResultAlignments
															.getStringByIndex(idxAlignment));
											capabilities
													.addSupportedResultAlignment(qAlignment);
										}
										if (queryModel
												.getResultStructureReorderingCapability() === sap.firefly.ReorderingCapability.FULL) {
											capabilities
													.addSupportedResultAlignment(sap.firefly.ResultAlignment.STRUCTURE);
										}
										capabilities
												.setSupportedVisibilityLocation(sap.firefly.QModelLevel.DIMENSIONS);
										capabilities
												.setSupportsConditionalResultVisibility(inaResultStructureFeature
														.getBooleanByNameWithDefault(
																sap.firefly.InAConstants.QY_CONDITIONAL_VISIBILITY,
																false));
										inaReordering = inaResultStructureFeature
												.getStringByNameWithDefault(
														sap.firefly.InAConstants.QY_REORDERING,
														sap.firefly.InAConstants.VA_REORDERING_NONE);
										capabilities
												.setResultStructureReorderingCapability(sap.firefly.QInAConverter
														.lookupReordering(inaReordering));
										conditionalResultsSupported = inaResultStructureFeature
												.getBooleanByNameWithDefault(
														sap.firefly.InAConstants.QY_CONDITIONAL_TOTALS,
														false);
										capabilities
												.setSupportsConditionalResult(conditionalResultsSupported);
										if (conditionalResultsSupported) {
											inaConditionalTotals = inaResultStructureFeature
													.getListByName(sap.firefly.InAConstants.QY_CONDITIONAL_TOTALS_LIST);
											conditionSize = inaConditionalTotals
													.size();
											for (idxCondition = 0; idxCondition < conditionSize; idxCondition++) {
												inaConditionalTotalResult = inaConditionalTotals
														.getStringByIndex(idxCondition);
												if (sap.firefly.XString
														.isEqual(
																inaConditionalTotalResult,
																sap.firefly.InAConstants.VA_TOTAL_INCLUDED_MEMBERS)) {
													capabilities
															.addSupportedConditionalElement(sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
												} else {
													if (sap.firefly.XString
															.isEqual(
																	inaConditionalTotalResult,
																	sap.firefly.InAConstants.VA_TOTAL_REMAINING_MEMBERS)) {
														capabilities
																.addSupportedConditionalElement(sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
													}
												}
											}
										}
									} else {
										rc.setSupportsTotals(false);
										capabilities
												.setSupportedResultAlignmentLevel(sap.firefly.QModelLevel.NONE);
										capabilities
												.setSupportedVisibilityLocation(sap.firefly.QModelLevel.NONE);
										capabilities
												.setSupportsConditionalResultVisibility(false);
										capabilities
												.setResultStructureReorderingCapability(sap.firefly.ReorderingCapability.NONE);
										capabilities
												.setSupportsConditionalResult(false);
									}
								}
							}
						},
						importReturnedDataSelections : function(
								inaResultStructureFeature, queryManager) {
							var inaReturnedDataSelection;
							var inaElementNames;
							var size;
							var i;
							var dataSelection;
							if ((queryManager === null)
									|| (queryManager
											.supportsReturnedDataSelection() === false)) {
								return;
							}
							inaReturnedDataSelection = inaResultStructureFeature
									.getStructureByName(sap.firefly.InAConstants.QY_RETURNED_DATA_SELECTION);
							if ((inaReturnedDataSelection === null)
									|| (inaReturnedDataSelection.hasElements() === false)) {
								return;
							}
							inaElementNames = inaReturnedDataSelection
									.getStructureElementNames();
							size = inaElementNames.size();
							queryManager.clearDataSelections();
							for (i = 0; i < size; i++) {
								dataSelection = sap.firefly.ReturnedDataSelection
										.lookupOrCreate(inaElementNames.get(i));
								if (dataSelection === null) {
									continue;
								}
								if (dataSelection === sap.firefly.ReturnedDataSelection.TUPLE_ELEMENT_IDS) {
									queryManager
											.enableReturnedDataSelection(dataSelection);
									continue;
								}
								if (inaReturnedDataSelection
										.getBooleanByName(dataSelection
												.getName())) {
									queryManager
											.enableReturnedDataSelection(dataSelection);
								} else {
									queryManager
											.disableReturnedDataSelection(dataSelection);
								}
							}
						},
						exportReturnedDataSelections : function(
								inaResultStructureFeature, queryManager) {
							var inaReturnedDataSelection;
							var itActive;
							var itInactive;
							if (queryManager.supportsReturnedDataSelection() === false) {
								return;
							}
							inaReturnedDataSelection = inaResultStructureFeature
									.setNewStructureByName(sap.firefly.InAConstants.QY_RETURNED_DATA_SELECTION);
							itActive = queryManager
									.getAllEnabledReturnedDataSelections()
									.getIterator();
							while (itActive.hasNext()) {
								inaReturnedDataSelection.setBooleanByName(
										itActive.next(), true);
							}
							itActive.releaseObject();
							itInactive = queryManager
									.getAllDisabledReturnedDataSelections()
									.getIterator();
							while (itInactive.hasNext()) {
								inaReturnedDataSelection.setBooleanByName(
										itInactive.next(), false);
							}
							itInactive.releaseObject();
						},
						exportTotals : function(exporter, inaStructure,
								queryModel) {
							var inaQuery = inaStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_QUERY_MD);
							var inaResultStructureFeature;
							var inaResultAlignment;
							var supportedAlignmentLocation;
							var supportedResultAlignments;
							var inaResultAlignments;
							var alignmentSize;
							var iResultAlignment;
							var supportsConditionalResults;
							var inaConditionalTotals;
							var supportedConditionalResults;
							var conditionSize;
							var iSupportedConditionResults;
							var rse;
							if (exporter.m_mode.containsMetadata()
									|| (exporter.m_mode
											.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY))
									|| (exporter.m_mode === sap.firefly.QModelFormat.INA_METADATA_CORE)) {
								if (queryModel.supportsResultVisibility()) {
									inaResultStructureFeature = inaQuery
											.setNewStructureByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE_FEATURE);
									inaResultStructureFeature
											.setBooleanByName(
													sap.firefly.InAConstants.QY_ENABLED,
													queryModel
															.supportsResultVisibility());
									inaResultStructureFeature
											.setBooleanByName(
													sap.firefly.InAConstants.QY_CONDITIONAL_VISIBILITY,
													queryModel
															.supportsConditionalResultVisibility());
									inaResultStructureFeature
											.setStringByName(
													sap.firefly.InAConstants.QY_REORDERING,
													sap.firefly.QInAConverter
															.lookupReorderingInA(queryModel
																	.getResultStructureReorderingCapability()));
									inaResultAlignment = inaResultStructureFeature
											.setNewStructureByName(sap.firefly.InAConstants.QY_RS_ALIGNMENT);
									supportedAlignmentLocation = queryModel
											.getSupportedResultAlignmentLevel();
									inaResultAlignment
											.setStringByName(
													sap.firefly.InAConstants.QY_CONFIG_LEVEL,
													sap.firefly.QInAConverter
															.lookupConfigLevelInA(supportedAlignmentLocation));
									supportedResultAlignments = queryModel
											.getSupportedResultAlignments();
									if (sap.firefly.XCollectionUtils
											.hasElements(supportedResultAlignments)) {
										inaResultAlignments = inaResultAlignment
												.setNewListByName(sap.firefly.InAConstants.QY_RESULT_ALIGNMENT_LIST);
										alignmentSize = supportedResultAlignments
												.size();
										for (iResultAlignment = 0; iResultAlignment < alignmentSize; iResultAlignment++) {
											inaResultAlignments
													.addString(sap.firefly.QInAConverter
															.lookupAlignmentInA(supportedResultAlignments
																	.get(iResultAlignment)));
										}
									}
									supportsConditionalResults = queryModel
											.supportsConditionalResults();
									inaResultStructureFeature
											.setBooleanByName(
													sap.firefly.InAConstants.QY_CONDITIONAL_TOTALS,
													supportsConditionalResults);
									if (supportsConditionalResults) {
										inaConditionalTotals = inaResultStructureFeature
												.setNewListByName(sap.firefly.InAConstants.QY_CONDITIONAL_TOTALS_LIST);
										supportedConditionalResults = queryModel
												.getSupportedConditionalResults();
										conditionSize = supportedConditionalResults
												.size();
										for (iSupportedConditionResults = 0; iSupportedConditionResults < conditionSize; iSupportedConditionResults++) {
											rse = supportedConditionalResults
													.get(iSupportedConditionResults);
											if (rse === sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS) {
												inaConditionalTotals
														.addString(sap.firefly.InAConstants.VA_TOTAL_INCLUDED_MEMBERS);
											} else {
												if (rse === sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS) {
													inaConditionalTotals
															.addString(sap.firefly.InAConstants.VA_TOTAL_REMAINING_MEMBERS);
												}
											}
										}
									}
									sap.firefly.QInAMdQuery
											.exportReturnedDataSelections(
													inaResultStructureFeature,
													queryModel
															.getQueryManager());
								}
							}
						},
						importDimensions : function(importer, inaStructure,
								queryModel) {
							var inaDimensions;
							var dimensionSize;
							var i;
							var inaDimension;
							var dimension;
							var dimensionExisting;
							var axis2;
							var dimensionManagerBase;
							if (inaStructure !== null) {
								inaDimensions = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_DIMENSIONS);
								if (inaDimensions !== null) {
									dimensionSize = inaDimensions.size();
									for (i = 0; i < dimensionSize; i++) {
										inaDimension = inaDimensions
												.getStructureByIndex(i);
										dimension = importer.importDimension(
												inaDimension, queryModel);
										dimensionExisting = queryModel
												.getDimensionByName(dimension
														.getName());
										if (dimensionExisting === null) {
											queryModel.addDimension(dimension);
										} else {
											dimension = dimensionExisting;
										}
										axis2 = queryModel.getAxis(dimension
												.getDefaultAxisType());
										axis2.add(dimension);
										dimensionManagerBase = queryModel
												.getDimensionManagerBase();
										dimensionManagerBase
												.finalizeDimensionMetadataSetup(dimension);
									}
								}
							}
						},
						exportDimensions : function(exporter, queryModel,
								inaStructure) {
							var inaDimensions = sap.firefly.PrList.create();
							var dimensions = sap.firefly.XList.create();
							var comparator;
							var dimensionSize;
							var optimizedExportModeActive;
							var i;
							var dimension;
							var inaDim;
							sap.firefly.XListUtils.listAddAll(dimensions,
									queryModel.getDimensions());
							comparator = sap.firefly.XComparatorName.create();
							dimensions.sortByComparator(comparator);
							dimensionSize = dimensions.size();
							optimizedExportModeActive = queryModel
									.isOptimizedExportModeActive();
							for (i = 0; i < dimensionSize; i++) {
								dimension = dimensions.get(i);
								if (optimizedExportModeActive) {
									if (dimension.isIgnoredOnOptimizedExport()) {
										continue;
									}
								}
								if (dimension.getDimensionType() === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
									continue;
								}
								inaDim = exporter.exportDimension(dimension);
								inaDimensions.add(inaDim);
							}
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_DIMENSIONS,
									inaDimensions);
							return inaDimensions;
						},
						importProperties : function(inaStructure, queryModel) {
							var description;
							var metadataPropertiesBase;
							if (inaStructure !== null) {
								description = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(description)) {
									queryModel
											.setText(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
								}
								metadataPropertiesBase = queryModel
										.getMetadataPropertiesBase();
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_TYPE,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_TYPE));
								if (inaStructure
										.hasStringByName(sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON)) {
									metadataPropertiesBase
											.setStringByName(
													sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON,
													inaStructure
															.getStringByName(sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON));
								} else {
									metadataPropertiesBase
											.setStringByName(
													sap.firefly.InAConstants.QY_LAST_UPDATE,
													inaStructure
															.getStringByName(sap.firefly.InAConstants.QY_LAST_UPDATE));
								}
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_LAST_UPDATE_BY,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_LAST_UPDATE_BY));
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_CREATED_BY,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_CREATED_BY));
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_CREATED_ON,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_CREATED_ON));
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_REPOSITORY_TYPE,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_REPOSITORY_TYPE));
								metadataPropertiesBase
										.setStringByName(
												sap.firefly.InAConstants.QY_DUE_DATE,
												inaStructure
														.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE));
							}
						},
						exportProperties : function(inaStructure, queryModel) {
							var metadataProperties;
							var lastUpdate;
							var infoProvider;
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									queryModel.getText());
							metadataProperties = queryModel
									.getMetadataProperties();
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_TYPE,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_TYPE));
							lastUpdate = metadataProperties
									.getStringByName(sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON);
							if (lastUpdate !== null) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON,
												lastUpdate);
							} else {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_LAST_UPDATE,
												metadataProperties
														.getStringByName(sap.firefly.InAConstants.QY_LAST_UPDATE));
							}
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_LAST_UPDATE_BY,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_LAST_UPDATE_BY));
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_REPOSITORY_TYPE,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_REPOSITORY_TYPE));
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_CREATED_BY,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_CREATED_BY));
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_CREATED_ON,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_CREATED_ON));
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DUE_DATE,
											metadataProperties
													.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE));
							infoProvider = queryModel.getInfoProvider();
							if (infoProvider !== null) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_BASE_DATA_SOURCE,
												infoProvider.getName());
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.QUERY_MODEL;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						return sap.firefly.QueryModel.create(application, null,
								null, sap.firefly.QCapabilities.create());
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = modelComponent;
						sap.firefly.QInAMdQuery.importSupportsFlags(importer,
								inaStructure, queryModel);
						sap.firefly.QInAMdDataSource.importMd(importer,
								inaStructure, queryModel, queryModel);
						sap.firefly.QInAMdQuery.importProperties(inaStructure,
								queryModel);
						sap.firefly.QInAMdQuery.importTotals(inaStructure,
								queryModel);
						sap.firefly.QInAMdQuery.importDimensions(importer,
								inaStructure, queryModel);
						importer.importSortingManager(inaStructure, queryModel
								.getSortingManagerBase(), null);
						importer
								.importVariableContainer(inaStructure,
										queryModel.getVariableManagerBase(),
										queryModel);
						importer.importDrillManager(inaStructure, queryModel
								.getDrillManagerBase(), queryModel);
						sap.firefly.QInAMdQuery.importPlanning(inaStructure,
								queryModel);
						sap.firefly.QInAMdQuery.importVariants(inaStructure,
								queryModel);
						return queryModel;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var queryModel = modelComponent;
						sap.firefly.QInAMdQuery.exportSupportsFlags(
								inaStructure, queryModel);
						sap.firefly.QInAMdDataSource.exportMd(exporter,
								inaStructure, queryModel);
						sap.firefly.QInAMdQuery.exportProperties(inaStructure,
								queryModel);
						sap.firefly.QInAMdQuery.exportTotals(exporter,
								inaStructure, queryModel);
						sap.firefly.QInAMdQuery.exportDimensions(exporter,
								queryModel, inaStructure);
						exporter.exportSortingManager(queryModel
								.getSortingManager(), inaStructure);
						exporter.exportDrillManager(queryModel
								.getDrillManager(), inaStructure);
						exporter.exportVariableContainer(queryModel
								.getVariableManager(), inaStructure);
						sap.firefly.QInAMdQuery.exportPlanning(inaStructure,
								queryModel);
						sap.firefly.QInAMdQuery.exportVariants(inaStructure,
								queryModel);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdSort",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.SORT_MANAGER;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var sortingManager = modelComponent;
						var sortTypes;
						var sortSize;
						var i;
						var inaSortType;
						var sortType;
						var breakingGroups;
						var breakingSize;
						var j;
						var sortType2;
						if ((importer.m_supportsExtendedSort)
								&& (inaStructure !== null)) {
							sortTypes = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_EXTENDED_SORT_TYPES);
							if (sortTypes !== null) {
								sortingManager.clearSupportedSortType();
								sortSize = sortTypes.size();
								for (i = 0; i < sortSize; i++) {
									inaSortType = sortTypes.getStringByIndex(i);
									sortType = sap.firefly.QInAConverter
											.lookupSortType(inaSortType);
									if (sortType === null) {
										importer
												.addWarning(
														sap.firefly.ErrorCodes.INVALID_PARAMETER,
														sap.firefly.XString
																.concatenate2(
																		"Sort type unknown: ",
																		inaSortType));
									} else {
										sortingManager
												.addSupportedSortType(sortType);
									}
								}
							}
							breakingGroups = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_SORT_TYPES_BREAKING_GROUP);
							if (breakingGroups !== null) {
								breakingSize = breakingGroups.size();
								for (j = 0; j < breakingSize; j++) {
									sortType2 = sap.firefly.QInAConverter
											.lookupSortType(breakingGroups
													.getStringByIndex(j));
									sortingManager
											.addSupportedBreakGrouping(sortType2);
								}
							}
						}
						return sortingManager;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var sortManager = modelComponent;
						var inaSortTypes;
						var allSortTypes;
						var allSize;
						var i;
						var sortType;
						var inaBreakingGroups;
						var j;
						var sortType2;
						if (exporter.m_supportsExtendedSort) {
							inaSortTypes = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_EXTENDED_SORT_TYPES);
							allSortTypes = sap.firefly.SortType
									.getAllSortTypes();
							allSize = allSortTypes.size();
							for (i = 0; i < allSize; i++) {
								sortType = allSortTypes.get(i);
								if (sortManager.isSortTypeSupported(sortType)) {
									inaSortTypes
											.addString(sap.firefly.QInAConverter
													.lookupSortTypeInA(sortType));
								}
							}
							inaBreakingGroups = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_SORT_TYPES_BREAKING_GROUP);
							for (j = 0; j < allSize; j++) {
								sortType2 = allSortTypes.get(j);
								if (sortManager
										.supportsBreakGrouping(sortType2)) {
									inaBreakingGroups
											.addString(sap.firefly.QInAConverter
													.lookupSortTypeInA(sortType2));
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarDimMember",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var variableContainer = parentComponent;
						var variableType = sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE;
						var inaSemanticType;
						var memberVariable;
						var name;
						var variables;
						var supportsValuehelp;
						var dimension;
						var inaDimensionReference;
						var dimensionName;
						var dimensionAccessor;
						var message;
						var queryModel;
						var queryManager;
						var inaValues;
						var selectionContainer;
						var tmp;
						var newSelectionContainer;
						var cProduct;
						var cartesianList;
						if (inaStructure
								.hasValueByName(sap.firefly.InAConstants.QY_DIMENSION_IS_HIERARCHICAL)) {
							if (inaStructure
									.getBooleanByNameWithDefault(
											sap.firefly.InAConstants.QY_DIMENSION_IS_HIERARCHICAL,
											false)) {
								variableType = sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE;
							}
						} else {
							inaSemanticType = sap.firefly.PrUtils
									.getStringValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
											null);
							if (inaSemanticType !== null) {
								if (sap.firefly.XString
										.isEqual(
												inaSemanticType,
												sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIER_NODE_VAR)) {
									variableType = sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE;
								} else {
									if (sap.firefly.XString
											.isEqual(
													inaSemanticType,
													sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIER_NAME_VAR)) {
										variableType = sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE;
									}
								}
							}
						}
						name = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						variables = variableContainer.getVariables();
						if (variables.containsKey(name)) {
							memberVariable = variables.getByKey(name);
						} else {
							if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
								memberVariable = sap.firefly.QHierarchyNodeVariable
										.createHierarchyNodeVariable(context,
												variableContainer, name, null);
							} else {
								if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
									memberVariable = sap.firefly.QHierarchyNameVariable
											.createDimensionHierarchyVariable(
													context, variableContainer,
													name, null);
								} else {
									memberVariable = sap.firefly.QDimensionMemberVariable
											.createDimensionMemberVariable(
													context, variableContainer,
													name, null);
								}
							}
						}
						sap.firefly.QInAMdVarMisc.importMd(importer,
								inaStructure, memberVariable);
						supportsValuehelp = inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_SUPPORTS_VALUE_HELP,
										true);
						memberVariable.setSupportsValueHelp(supportsValuehelp);
						dimension = null;
						inaDimensionReference = sap.firefly.PrUtils
								.getStructureProperty(
										inaStructure,
										sap.firefly.InAConstants.QY_DIMENSION_REFERENCE);
						if (inaDimensionReference !== null) {
							dimensionName = inaDimensionReference
									.getStringByName(sap.firefly.InAConstants.QY_NAME);
							if (dimensionName !== null) {
								dimensionAccessor = variableContainer
										.getDimensionAccessor();
								if (dimensionAccessor !== null) {
									dimension = dimensionAccessor
											.getDimensionByName(dimensionName);
								}
							}
						}
						if (dimension !== null) {
							memberVariable.setDimension(dimension);
						} else {
							message = sap.firefly.XStringUtils
									.concatenate3(
											"Error in importing Variables: No dimension specified for variable ",
											name, " !");
							if (memberVariable.isInputEnabled() === false) {
								importer
										.addWarning(
												sap.firefly.ErrorCodes.IMPORT_VARIABE_NO_DIMENSION,
												message);
							} else {
								importer.addError(
										sap.firefly.ErrorCodes.INVALID_STATE,
										message);
								return null;
							}
						}
						sap.firefly.QInAMdVarSelectionCap.importMd(importer,
								inaStructure, memberVariable, context);
						sap.firefly.QInAMdVarHierInfo.importMd(importer,
								inaStructure, memberVariable, context);
						memberVariable
								.setIsUsedInFixedFilter(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_USED_IN_FIXED_FILTER,
												false));
						memberVariable
								.setIsUsedInDynamicFilter(inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_USED_IN_DYNAMIC_FILTER,
												false));
						queryModel = memberVariable.getQueryModel();
						queryManager = null;
						if (queryModel !== null) {
							queryManager = queryModel.getQueryManager();
						}
						inaValues = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_VALUES);
						if ((inaValues !== null)
								&& (((queryManager !== null) && (queryManager
										.getVariableProcessorState() !== sap.firefly.VariableProcessorState.PROCESSING_REINIT)))) {
							selectionContainer = sap.firefly.QFilterExpression
									._createByApplication(context,
											memberVariable);
							tmp = importer.m_mode;
							importer.m_mode = sap.firefly.QModelFormat.INA_DATA;
							newSelectionContainer = importer
									.importFilterExpression(selectionContainer,
											inaValues, memberVariable, context);
							importer.m_mode = tmp;
							cProduct = newSelectionContainer
									.getCartesianProduct();
							if (cProduct !== null) {
								cartesianList = cProduct
										.getCartesianList(memberVariable
												.getDimension());
								memberVariable
										.setDefaultSelectionCartesianList(cartesianList
												.cloneOlapComponent(
														memberVariable, null));
							}
						}
						return memberVariable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var memberVariable = modelComponent;
						var variableType;
						var inaDimensionReference;
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_VARIABLE_TYPE,
										sap.firefly.InAConstants.VA_VAR_TYPE_DIM_MEMBER_VARIABLE);
						variableType = memberVariable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
											sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIER_NAME_VAR);
						} else {
							if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
												sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIER_NODE_VAR);
							} else {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
												sap.firefly.InAConstants.VA_SEMANTIC_TYPE_DIM_MEMBER_VAR);
							}
						}
						sap.firefly.QInAMdVarMisc.exportMd(exporter,
								memberVariable, inaStructure);
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_SUPPORTS_VALUE_HELP,
										memberVariable.supportsValueHelp());
						if (memberVariable.getDimension() !== null) {
							inaDimensionReference = inaStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_DIMENSION_REFERENCE);
							inaDimensionReference.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									memberVariable.getDimension().getName());
						}
						sap.firefly.QInAMdVarSelectionCap.exportMd(exporter,
								inaStructure, memberVariable);
						sap.firefly.QInAMdVarHierInfo.exportMd(inaStructure,
								memberVariable);
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_USED_IN_FIXED_FILTER,
										memberVariable.isUsedInFixedFilter());
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_USED_IN_DYNAMIC_FILTER,
										memberVariable.isUsedInDynamicFilter());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarHierInfo",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure, variable,
								context) {
							var inaHierarchy;
							var date;
							var variableType;
							var variableContainer;
							var dimensionHierarchyVariable;
							var hierarchyBaseDimName;
							var dimensionAccessor2;
							var hierarchyDimension;
							var variableMode;
							var hierarchyName;
							var dimension;
							var hierarchy;
							var hierarchyVersion;
							var hierarchyKeyDate;
							var dueDate;
							variable.setHierarchyName(null);
							variable.setHierarchyVersion(null);
							variable.setHierarchyKeyDate(null);
							variable.setHierarchyBaseDimension(null);
							inaHierarchy = sap.firefly.PrUtils
									.getStructureProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_HIERARCHY);
							if (inaHierarchy !== null) {
								variable
										.setHierarchyBaseDimension(inaHierarchy
												.getStringByName(sap.firefly.InAConstants.QY_BASE_DIMENSION));
								variable
										.setHierarchyName(inaHierarchy
												.getStringByName(sap.firefly.InAConstants.QY_NAME));
								variable
										.setHierarchyVersion(inaHierarchy
												.getStringByName(sap.firefly.InAConstants.QY_VERSION));
								date = inaHierarchy
										.getStringByName(sap.firefly.InAConstants.QY_DUE_DATE);
								if (date === null) {
									date = inaHierarchy
											.getStringByName(sap.firefly.InAConstants.QY_DATE_TO);
								}
								variable.setHierarchyKeyDate(date);
							}
							variableType = variable.getVariableType();
							variableContainer = variable.getVariableContext();
							if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
								dimensionHierarchyVariable = variable;
								hierarchyBaseDimName = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_BASE_DIMENSION);
								if (hierarchyBaseDimName === null) {
									hierarchyBaseDimName = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_HIERACHY_BASE_DIMENSION);
								}
								if (hierarchyBaseDimName !== null) {
									dimensionAccessor2 = variableContainer
											.getDimensionAccessor();
									if (dimensionAccessor2 !== null) {
										hierarchyDimension = dimensionAccessor2
												.getDimensionByName(hierarchyBaseDimName);
										dimensionHierarchyVariable
												.setHierarchyNameDimension(hierarchyDimension);
									}
								}
							} else {
								if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
									variableMode = variableContainer
											.getVariableMode();
									if (variableMode === sap.firefly.VariableMode.DIRECT_VALUE_TRANSFER) {
										hierarchyName = variable
												.getHierarchyName();
										dimension = variable.getDimension();
										if ((hierarchyName !== null)
												&& (dimension !== null)) {
											hierarchy = sap.firefly.QHierarchy
													.create(context, dimension,
															hierarchyName);
											hierarchyVersion = variable
													.getHierarchyVersion();
											hierarchy
													.setHierarchyVersion(hierarchyVersion);
											hierarchyKeyDate = variable
													.getHierarchyKeyDate();
											if (sap.firefly.XString.isEqual(
													hierarchyKeyDate, "") === false) {
												dueDate = sap.firefly.XDate
														.createDateFromStringWithFlag(
																hierarchyKeyDate,
																importer.m_supportsSAPDateFormat);
												if (dueDate !== null) {
													hierarchy
															.setHierarchyDueDate(dueDate);
												}
												dimension
														.setHierarchy(hierarchy);
											}
										}
									}
								}
							}
						},
						exportMd : function(inaStructure, variable) {
							var inaHierarchy = inaStructure
									.setNewStructureByName(sap.firefly.InAConstants.QY_HIERARCHY);
							var variableType;
							var hierarchyNameDimension;
							sap.firefly.PrUtils.setStringIfNotNull(
									inaHierarchy,
									sap.firefly.InAConstants.QY_BASE_DIMENSION,
									variable.getHierarchyBaseDimension());
							sap.firefly.PrUtils.setStringIfNotNull(
									inaHierarchy,
									sap.firefly.InAConstants.QY_NAME, variable
											.getHierarchyName());
							sap.firefly.PrUtils.setStringIfNotNull(
									inaHierarchy,
									sap.firefly.InAConstants.QY_VERSION,
									variable.getHierarchyVersion());
							sap.firefly.PrUtils.setStringIfNotNull(
									inaHierarchy,
									sap.firefly.InAConstants.QY_DUE_DATE,
									variable.getHierarchyKeyDate());
							variableType = variable.getVariableType();
							if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
								hierarchyNameDimension = (variable)
										.getHierarchyNameDimension();
								if (hierarchyNameDimension !== null) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_HIERARCHY_BASE_DIMENSION,
													hierarchyNameDimension
															.getName());
								}
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdVarHierInfo.importMd(importer,
								inaStructure, modelComponent, context);
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdVarHierInfo.exportMd(inaStructure,
								modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarMisc",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure, variable) {
							var inaInputEnabled;
							var inaInputType;
							var screenOrder;
							var inaDependentVariables;
							var dependentSize;
							var j;
							if (variable !== null) {
								variable
										.setText(inaStructure
												.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
								inaInputEnabled = inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_INPUT_ENABLED,
												false);
								variable.setInputEnabled(inaInputEnabled);
								inaInputType = inaStructure
										.getStringByNameWithDefault(
												sap.firefly.InAConstants.QY_INPUT_TYPE,
												sap.firefly.InAConstants.VA_INPUT_TYPE_OPTIONAL);
								if (sap.firefly.XString
										.isEqual(
												inaInputType,
												sap.firefly.InAConstants.VA_INPUT_TYPE_OPTIONAL)) {
									variable.setMandatory(false);
									variable.setInitialValueAllowed(true);
								} else {
									if (sap.firefly.XString
											.isEqual(
													inaInputType,
													sap.firefly.InAConstants.VA_INPUT_TYPE_MANDATORY)) {
										variable.setMandatory(true);
										variable.setInitialValueAllowed(true);
									} else {
										if (sap.firefly.XString
												.isEqual(
														inaInputType,
														sap.firefly.InAConstants.VA_INPUT_TYPE_MANDATORY_NOT_INITIAL)) {
											variable.setMandatory(true);
											variable
													.setInitialValueAllowed(false);
										}
									}
								}
								screenOrder = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_SCREEN_ORDER,
												0);
								variable.setVariableOrder(screenOrder);
								inaDependentVariables = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_DEPENDENT_OF_VARIABLE);
								if (!sap.firefly.PrUtils
										.isListEmpty(inaDependentVariables)) {
									dependentSize = inaDependentVariables
											.size();
									for (j = 0; j < dependentSize; j++) {
										variable
												.addDependentVariableName(inaDependentVariables
														.getStringByIndex(j));
									}
								}
							}
						},
						exportMd : function(exporter, variable, inaStructure) {
							var dependentVariables;
							var inaDependentVariables;
							var dependentSize;
							var i;
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_NAME, variable
											.getName());
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									variable.getText());
							inaStructure.setBooleanByName(
									sap.firefly.InAConstants.QY_INPUT_ENABLED,
									variable.isInputEnabled());
							if (variable.isMandatory()) {
								if (variable.isInitialValueAllowed()) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_INPUT_TYPE,
													sap.firefly.InAConstants.VA_INPUT_TYPE_MANDATORY);
								} else {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_INPUT_TYPE,
													sap.firefly.InAConstants.VA_INPUT_TYPE_MANDATORY_NOT_INITIAL);
								}
							} else {
								if (variable.isInitialValueAllowed()) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_INPUT_TYPE,
													sap.firefly.InAConstants.VA_INPUT_TYPE_OPTIONAL);
								} else {
									exporter
											.addError(
													sap.firefly.ErrorCodes.INVALID_STATE,
													"illegal combination: optional variables must support initial values");
								}
							}
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_SCREEN_ORDER,
									variable.getVariableOrder());
							dependentVariables = variable
									.getDependentVariablesNames();
							if (sap.firefly.XCollectionUtils
									.hasElements(dependentVariables)) {
								inaDependentVariables = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_DEPENDENT_OF_VARIABLE);
								dependentSize = dependentVariables.size();
								for (i = 0; i < dependentSize; i++) {
									inaDependentVariables
											.addString(dependentVariables
													.get(i));
								}
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdVarMisc.exportMd(exporter,
								modelComponent, inaStructure);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarOptionList",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.OPTION_LIST_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var variableContainer = context.getVariableContainer();
						var name = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var variables = variableContainer.getVariables();
						var optionListVariable;
						var variable;
						var inaSemanticType;
						var hasMultipleValues;
						var inaOptionList;
						var len;
						var i;
						var inaOption;
						var inaOptionName;
						var inaOptionDescription;
						if (variables.containsKey(name)) {
							variable = variables.getByKey(name);
							optionListVariable = variable;
						} else {
							inaSemanticType = sap.firefly.PrUtils
									.getStringValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
											null);
							hasMultipleValues = inaStructure
									.getBooleanByNameWithDefault(
											sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
											false);
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIERARCHY_VARIABLE,
											inaSemanticType)) {
								optionListVariable = sap.firefly.QSimpleTypeVariable
										.createHierarchyVariable(context,
												variableContainer, name, null,
												hasMultipleValues);
							} else {
								optionListVariable = sap.firefly.QSimpleTypeVariable
										.createOptionListVariable(context,
												variableContainer, name, null,
												hasMultipleValues);
							}
						}
						sap.firefly.QInAMdVarMisc.importMd(importer,
								inaStructure, optionListVariable);
						optionListVariable.clearOptions();
						inaOptionList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_OPTIONLIST_OPTIONS);
						if (!sap.firefly.PrUtils.isListEmpty(inaOptionList)) {
							len = inaOptionList.size();
							for (i = 0; i < len; i++) {
								inaOption = inaOptionList
										.getStructureByIndex(i);
								inaOptionName = inaOption
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								inaOptionDescription = inaOption
										.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
								optionListVariable.createAndAddOption(
										inaOptionName, inaOptionDescription);
							}
						}
						return optionListVariable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var variable = modelComponent;
						var variableType;
						var options;
						var inaOptionList;
						var len;
						var i;
						var option;
						var inaOption;
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_VARIABLE_TYPE,
										sap.firefly.InAConstants.VA_VAR_TYPE_OPTION_LIST_VARIABLE);
						variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_VARIABLE) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
											sap.firefly.InAConstants.VA_SEMANTIC_TYPE_HIERARCHY_VARIABLE);
						} else {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
											sap.firefly.InAConstants.VA_SEMANTIC_TYPE_OPTION_LIST_VARIABLE);
						}
						sap.firefly.QInAMdVarMisc.exportMd(exporter, variable,
								inaStructure);
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
								variable.isUsingMultipleValues());
						options = variable.getOptions();
						inaOptionList = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_OPTIONLIST_OPTIONS);
						len = options.size();
						for (i = 0; i < len; i++) {
							option = options.get(i);
							inaOption = inaOptionList.addNewStructure();
							inaOption.setStringByName(
									sap.firefly.InAConstants.QY_NAME, option
											.getName());
							inaOption.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									option.getText());
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarSelectionCap",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure,
								memberVariable, context) {
							var variableField = null;
							var dimension = memberVariable.getDimension();
							var inaValues;
							var inaSelection;
							var inaSetOperand;
							var definedSelectionCapability;
							var variableSelectionCapabilities;
							var supportsMultipleValues;
							if (dimension !== null) {
								inaValues = inaStructure
										.getStructureByName(sap.firefly.InAConstants.QY_VALUES);
								if (inaValues !== null) {
									inaSelection = inaValues
											.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
									if (inaSelection !== null) {
										inaSetOperand = inaSelection
												.getStructureByName(sap.firefly.InAConstants.QY_SET_OPERAND);
										if (inaSetOperand !== null) {
											variableField = dimension
													.getFieldByName(inaSetOperand
															.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME));
										}
									}
								}
							}
							definedSelectionCapability = sap.firefly.QInAMdFilterCapability
									.importMd(importer, inaStructure,
											variableField, memberVariable,
											context);
							memberVariable
									.setSelectionCapability(definedSelectionCapability);
							variableSelectionCapabilities = sap.firefly.QFilterCapabilityList
									.createFilterCapabilitiesForVariable(
											context, memberVariable);
							memberVariable
									.setSelectionCapabilities(variableSelectionCapabilities);
							supportsMultipleValues = sap.firefly.PrUtils
									.getBooleanValueProperty(
											inaStructure,
											sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
											false);
							variableSelectionCapabilities
									.setSupportsMultipleValues(supportsMultipleValues);
							sap.firefly.QInAMdVarSelectionCap
									.mergeCapabilities(dimension,
											definedSelectionCapability,
											variableSelectionCapabilities);
						},
						mergeCapabilities : function(dimension,
								definedSelectionCapability,
								variableSelectionCapabilities) {
							var dimFilterCapabilities;
							var dimFilterableFields;
							var fieldSize;
							var i;
							var field;
							var dimFilterCapability;
							var newVariableCapability;
							if ((dimension !== null)
									&& (definedSelectionCapability !== null)) {
								dimFilterCapabilities = dimension
										.getSelectionCapabilities();
								dimFilterableFields = dimFilterCapabilities
										.getSelectableFields();
								fieldSize = dimFilterableFields.size();
								for (i = 0; i < fieldSize; i++) {
									field = dimFilterableFields.get(i);
									dimFilterCapability = dimFilterCapabilities
											.getSelectionCapabilitiesByField(field);
									if (dimFilterCapability
											.supportsSetSign(sap.firefly.SetSign.INCLUDING)) {
										newVariableCapability = variableSelectionCapabilities
												.createAndAddSelectionCapabilitiesForField(field);
										sap.firefly.QInAMdVarSelectionCap
												.mergeOperators(
														sap.firefly.SetSign.INCLUDING,
														newVariableCapability,
														dimFilterCapability,
														definedSelectionCapability);
										sap.firefly.QInAMdVarSelectionCap
												.mergeOperators(
														sap.firefly.SetSign.EXCLUDING,
														newVariableCapability,
														dimFilterCapability,
														definedSelectionCapability);
									}
								}
							}
						},
						mergeOperators : function(setSign,
								newVariableCapability, dimFilterCapability,
								definedSelectionCapability) {
							var newIncludingOperators;
							var includingsByField;
							var includingsVariable;
							var size;
							var j;
							var comparionsOperator;
							if (definedSelectionCapability !== null) {
								if (definedSelectionCapability
										.supportsSetSign(setSign)) {
									newVariableCapability
											.addSupportedSetSign(setSign);
									newIncludingOperators = newVariableCapability
											.getModifiableSupportedComparisonOperators(setSign);
									includingsByField = dimFilterCapability
											.getSupportedComparisonOperators(setSign);
									includingsVariable = definedSelectionCapability
											.getSupportedComparisonOperators(setSign);
									size = includingsVariable.size();
									for (j = 0; j < size; j++) {
										comparionsOperator = includingsVariable
												.get(j);
										if (includingsByField
												.contains(comparionsOperator)) {
											newIncludingOperators
													.add(comparionsOperator);
										}
									}
								}
							}
						},
						exportMd : function(exporter, inaStructure,
								memberVariable) {
							var selectionCapability = memberVariable
									.getSelectionCapability();
							var selectionCapabilities;
							sap.firefly.QInAMdFilterCapability
									.exportMd(exporter, selectionCapability,
											inaStructure);
							selectionCapabilities = memberVariable
									.getSelectionCapabilities();
							if (selectionCapabilities !== null) {
								inaStructure
										.setBooleanByName(
												sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
												selectionCapabilities
														.supportsMultipleValues());
							}
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						sap.firefly.QInAMdVarSelectionCap.importMd(importer,
								inaStructure, modelComponent, context);
						return modelComponent;
					},
					exportComponent : function(exporter, modelComponent,
							inaParentStructure, flags) {
						var inaStructure = inaParentStructure;
						if (inaStructure === null) {
							inaStructure = sap.firefly.PrStructure.create();
						}
						return this.exportComponentWithStructure(exporter,
								modelComponent, inaStructure, flags);
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						sap.firefly.QInAMdVarSelectionCap.exportMd(exporter,
								inaStructure, modelComponent);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVarSimpleType",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						importMd : function(importer, inaStructure,
								variableContext, context) {
							var simpleTypeVariable = null;
							var name = sap.firefly.PrUtils
									.getStringValueProperty(inaStructure,
											sap.firefly.InAConstants.QY_NAME,
											null);
							var variables;
							var inaSemanticType;
							var hasMultipleValues;
							var inaValueType;
							var valueType;
							var inaScale;
							var inaLength;
							if (name !== null) {
								variables = variableContext.getVariables();
								if (variables.containsKey(name)) {
									simpleTypeVariable = variables
											.getByKey(name);
								} else {
									inaSemanticType = sap.firefly.PrUtils
											.getStringValueProperty(
													inaStructure,
													sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
													null);
									hasMultipleValues = inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
													false);
									if (sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_SEMANTIC_TYPE_FORMULA_VARIABLE,
													inaSemanticType)) {
										simpleTypeVariable = sap.firefly.QSimpleTypeVariable
												.createFormulaVariable(context,
														variableContext, name,
														null, hasMultipleValues);
									} else {
										if (sap.firefly.XString
												.isEqual(
														sap.firefly.InAConstants.VA_SEMANTIC_TYPE_TEXT_VARIABLE,
														inaSemanticType)) {
											simpleTypeVariable = sap.firefly.QSimpleTypeVariable
													.createTextVariable(
															context,
															variableContext,
															name, null,
															hasMultipleValues);
										} else {
											inaValueType = sap.firefly.PrUtils
													.getStringValueProperty(
															inaStructure,
															sap.firefly.InAConstants.QY_VALUE_TYPE,
															null);
											valueType = sap.firefly.QInAConverter
													.lookupValueType(inaValueType);
											simpleTypeVariable = sap.firefly.QSimpleTypeVariable
													.createSimpleTypeVariable(
															context,
															variableContext,
															valueType, name,
															null,
															hasMultipleValues);
										}
									}
								}
								sap.firefly.QInAMdVarMisc.importMd(importer,
										inaStructure, simpleTypeVariable);
								inaScale = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_SCALE,
												-1);
								if (inaScale !== -1) {
									simpleTypeVariable.setValueScale(inaScale);
								}
								inaLength = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_LENGTH,
												-1);
								if (inaLength !== -1) {
									simpleTypeVariable
											.setValueLength(inaLength);
								}
							}
							return simpleTypeVariable;
						},
						exportMd : function(exporter, variable, inaStructure) {
							var variableType;
							var valueType;
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_VARIABLE_TYPE,
											sap.firefly.InAConstants.VA_VAR_TYPE_SIMPLE_TYPE_VARIABLE);
							variableType = variable.getVariableType();
							if (variableType === sap.firefly.VariableType.FORMULA_VARIABLE) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
												sap.firefly.InAConstants.VA_SEMANTIC_TYPE_FORMULA_VARIABLE);
							} else {
								if (variableType === sap.firefly.VariableType.TEXT_VARIABLE) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
													sap.firefly.InAConstants.VA_SEMANTIC_TYPE_TEXT_VARIABLE);
								} else {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_SEMANTIC_TYPE,
													sap.firefly.InAConstants.VA_SEMANTIC_TYPE_VALUE_VARIABLE);
									valueType = variable.getValueType();
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_VALUE_TYPE,
													sap.firefly.QInAConverter
															.lookupValueTypeInA(valueType));
								}
							}
							sap.firefly.QInAMdVarMisc.exportMd(exporter,
									variable, inaStructure);
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_SCALE, variable
											.getValueScale());
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_LENGTH,
									variable.getValueLength());
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
											variable.isUsingMultipleValues());
							return inaStructure;
						}
					},
					getComponentType : function() {
						return null;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						return sap.firefly.QInAMdVarSimpleType.exportMd(
								exporter, modelComponent, inaStructure);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVariable",
				sap.firefly.QInAComponentMetadata,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.ANY_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var variableContext = parentComponent;
						var variable;
						var inaVariableType = sap.firefly.PrUtils
								.getStringValueProperty(
										inaStructure,
										sap.firefly.InAConstants.QY_VARIABLE_TYPE,
										null);
						if (sap.firefly.XString
								.isEqual(
										sap.firefly.InAConstants.VA_VAR_TYPE_DIM_MEMBER_VARIABLE,
										inaVariableType)) {
							variable = importer.importDimensionMemberVariable(
									inaStructure, null, variableContext,
									variableContext);
						} else {
							if (sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.VA_VAR_TYPE_OPTION_LIST_VARIABLE,
											inaVariableType)) {
								variable = importer.importOptionListVariable(
										inaStructure, null, variableContext);
							} else {
								if (sap.firefly.XString
										.isEqual(
												sap.firefly.InAConstants.VA_VAR_TYPE_SIMPLE_TYPE_VARIABLE,
												inaVariableType)) {
									variable = sap.firefly.QInAMdVarSimpleType
											.importMd(importer, inaStructure,
													variableContext, context);
								} else {
									importer
											.addError(
													0,
													sap.firefly.XString
															.concatenate2(
																	"Variable type not supported: ",
																	inaVariableType));
									return null;
								}
							}
						}
						return variable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var variable = modelComponent;
						var variableType = variable.getVariableType();
						if (variableType
								.isTypeOf(sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)) {
							return exporter.exportDimensionMemberVariable(
									variable, inaStructure);
						} else {
							if (variableType
									.isTypeOf(sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE)) {
								sap.firefly.QInAMdVarSimpleType.exportMd(
										exporter, variable, inaStructure);
							} else {
								if (variableType
										.isTypeOf(sap.firefly.VariableType.OPTION_LIST_VARIABLE)) {
									exporter.exportOptionListVariable(variable,
											inaStructure);
								} else {
									exporter
											.addError(
													0,
													sap.firefly.XString
															.concatenate2(
																	"Variable type not supported: ",
																	variableType
																			.getName()));
								}
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAMdVariableContainer",
				sap.firefly.QInAComponentMetadata,
				{
					$statics : {
						resolveVariableDependencies : function(
								variableContainer) {
							var variables = variableContainer.getVariables();
							var variableSize = variables.size();
							var i;
							var variable;
							var dependentVariablesNames;
							var dependentSize;
							var j;
							var otherVariable;
							for (i = 0; i < variableSize; i++) {
								variable = variables.get(i);
								dependentVariablesNames = variable
										.getDependentVariablesNames();
								dependentSize = dependentVariablesNames.size();
								for (j = 0; j < dependentSize; j++) {
									otherVariable = variables
											.getByKey(dependentVariablesNames
													.get(j));
									variable
											.addDependentVariable(otherVariable);
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.VARIABLE_CONTAINER;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var variableContainer;
						var inaList;
						if (inaStructure !== null) {
							variableContainer = modelComponent;
							inaList = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_VARIABLES_MD);
							if (inaList === null) {
								inaList = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_VARIABLES);
							}
							this.importVariableList(importer, inaList,
									variableContainer);
						}
						return modelComponent;
					},
					importVariableList : function(importer, inaElement,
							modelComponent) {
						var variableContainer = modelComponent;
						var inaVariablesList = inaElement;
						var variables;
						var variableSize;
						var i;
						var inaStructure;
						var variable;
						if (inaVariablesList !== null) {
							variables = variableContainer.getVariables();
							variableSize = inaVariablesList.size();
							for (i = 0; i < variableSize; i++) {
								inaStructure = sap.firefly.PrUtils
										.getStructureElement(inaVariablesList,
												i);
								if (inaStructure !== null) {
									variable = importer.importVariable(
											inaStructure, variableContainer);
									if ((variable !== null)
											&& (variables.contains(variable) === false)) {
										variableContainer.addVariable(variable);
									}
								}
							}
							sap.firefly.QInAMdVariableContainer
									.resolveVariableDependencies(variableContainer);
						}
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var varMgr = modelComponent;
						var inaList = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_VARIABLES_MD);
						var variables = varMgr.getVariables();
						var variableSize = variables.size();
						var i;
						for (i = 0; i < variableSize; i++) {
							inaList.add(exporter.exportVariable(variables
									.get(i), null));
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInACalculatedDimension",
				sap.firefly.QInADimension,
				{
					getComponentType : function() {
						return sap.firefly.DimensionType.CALCULATED_DIMENSION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						var inaDataSource;
						var inaJoinFields;
						var size;
						var idx;
						var inaJoinField;
						var inaFieldMappings;
						var inaFieldMapping;
						if (dimension === null) {
							dimension = sap.firefly.QCalculatedDimension
									._createCalculatedDimension(context,
											parentComponent, null);
						}
						dimension
								.setName(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_NAME));
						dimension.setTopEntries(inaStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.QY_TOP, 0));
						dimension.setSkipEntries(inaStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.QY_SKIP, 0));
						inaDataSource = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dimension
								.setPreQueryName(inaDataSource
										.getStringByName(sap.firefly.InAConstants.QY_OBJECT_NAME));
						dimension
								.setJoinType(sap.firefly.JoinType
										.lookup(inaStructure
												.getStringByName(sap.firefly.InAConstants.QY_JOIN_TYPE)));
						inaJoinFields = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_JOIN_FIELDS);
						size = inaJoinFields.size();
						for (idx = 0; idx < size; idx++) {
							inaJoinField = inaJoinFields
									.getStructureByIndex(idx);
							dimension
									.addJoinFieldByString(
											inaJoinField
													.getStringByName(sap.firefly.InAConstants.QY_JOIN_FIELD_NAME),
											inaJoinField
													.getStringByName(sap.firefly.InAConstants.QY_JOIN_FIELD_NAME_IN_REFERENCED_DATA));
						}
						inaFieldMappings = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_FIELD_MAPPINGS);
						size = inaFieldMappings.size();
						for (idx = 0; idx < size; idx++) {
							inaFieldMapping = inaFieldMappings
									.getStructureByIndex(idx);
							dimension
									.addFieldMappingByString(
											inaFieldMapping
													.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME),
											inaFieldMapping
													.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME_IN_REFERENCED_DATA));
						}
						sap.firefly.QInADimension.importFieldsLayout(importer,
								inaStructure, dimension, context);
						importer.importTotals(inaStructure, dimension
								.getResultStructureControllerBase(), context);
						return dimension;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var type;
						var topEntries;
						var skipEntries;
						var inaDataSource;
						var inaJoinFields;
						var joinFields;
						var size;
						var i;
						var fieldNamePair;
						var inaJoinField;
						var inaFieldMappings;
						var fieldMappings;
						var fieldMapping;
						var inaFieldMapping;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, dimension
										.getName());
						type = dimension.getAxis().getType();
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS,
								sap.firefly.QInAConverter
										.lookupAxisTypeInA(type));
						topEntries = dimension.getTopEntries();
						if (topEntries > 0) {
							inaStructure
									.setIntegerByName(
											sap.firefly.InAConstants.QY_TOP,
											topEntries);
						}
						skipEntries = dimension.getSkipEntries();
						if (skipEntries > 0) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_SKIP,
									skipEntries);
						}
						inaDataSource = inaStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						inaDataSource.setStringByName(
								sap.firefly.InAConstants.QY_OBJECT_NAME,
								dimension.getPreQueryName());
						inaDataSource.setStringByName(
								sap.firefly.InAConstants.QY_TYPE,
								sap.firefly.InAConstants.QY_QUERY);
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_JOIN_TYPE,
								dimension.getJoinType().getName());
						inaJoinFields = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_JOIN_FIELDS);
						joinFields = dimension.getJoinFields();
						size = joinFields.size();
						for (i = 0; i < size; i++) {
							fieldNamePair = joinFields.get(i);
							inaJoinField = inaJoinFields.addNewStructure();
							inaJoinField
									.setStringByName(
											sap.firefly.InAConstants.QY_JOIN_FIELD_NAME,
											fieldNamePair.getLocaleFieldName());
							inaJoinField
									.setStringByName(
											sap.firefly.InAConstants.QY_JOIN_FIELD_NAME_IN_REFERENCED_DATA,
											fieldNamePair
													.getReferencedFieldName());
						}
						inaFieldMappings = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_FIELD_MAPPINGS);
						fieldMappings = dimension.getFieldMappings();
						size = fieldMappings.size();
						for (i = 0; i < size; i++) {
							fieldMapping = fieldMappings.get(i);
							inaFieldMapping = inaFieldMappings
									.addNewStructure();
							inaFieldMapping.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									fieldMapping.getLocaleFieldName());
							inaFieldMapping
									.setStringByName(
											sap.firefly.InAConstants.QY_FIELD_NAME_IN_REFERENCED_DATA,
											fieldMapping
													.getReferencedFieldName());
						}
						sap.firefly.QInADimension.exportFieldLayout(exporter,
								inaStructure, dimension);
						exporter.exportTotals(inaStructure, dimension);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAVarHierNode",
				sap.firefly.QInAVarDimMember,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var nodeVariable = modelComponent;
						var inaNodeValues = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_VALUES);
						var selectionContainerNode = sap.firefly.QFilterExpression
								._createByApplication(context, nodeVariable);
						importer.importFilterExpression(selectionContainerNode,
								inaNodeValues, nodeVariable, context);
						nodeVariable
								.setSelectionContainer(selectionContainerNode);
						return nodeVariable;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoAxis",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.AXIS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = context.getQueryModel();
						var axisType;
						var axisTypeValue = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_AXIS);
						var axisTypeIntValue;
						var axis;
						var valueType;
						var suppressionType;
						var inaLayout;
						var i;
						var dimensionName;
						var dimension;
						if (axisTypeValue !== null) {
							axisType = sap.firefly.QInAConverter
									.lookupAxisType(axisTypeValue);
						} else {
							axisTypeIntValue = inaStructure
									.getIntegerByName(sap.firefly.InAConstants.QY_TYPE);
							axisType = sap.firefly.QInAConverter
									.lookupAxisTypeInt(axisTypeIntValue);
						}
						axis = queryModel.getAxisBase(axisType);
						if (axis !== null) {
							if (axis.supportsZeroSuppression()) {
								valueType = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_ZERO_SUPPRESSION_TYPE,
												sap.firefly.InAConstants.VA_ZERO_SUPPRESSION_TYPE_NONE);
								suppressionType = sap.firefly.QInAConverter
										.lookupSuppressionType(valueType);
								axis.setZeroSuppressionType(suppressionType);
							}
							inaLayout = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_LAYOUT);
							if (inaLayout !== null) {
								axis.clear();
								for (i = 0; i < inaLayout.size(); i++) {
									dimensionName = inaLayout
											.getStringByIndex(i);
									dimension = queryModel
											.getDimensionByName(dimensionName);
									axis.add(dimension);
								}
							}
							importer.importTotals(inaStructure, axis
									.getResultStructureControllerBase(),
									context);
						}
						return axis;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var axis = modelComponent;
						var typeZeroSuppression;
						var inaLayout;
						var i;
						var dimension;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS,
								sap.firefly.QInAConverter
										.lookupAxisTypeInA(axis.getType()));
						inaStructure.setIntegerByName(
								sap.firefly.InAConstants.QY_TYPE,
								sap.firefly.QInAConverter
										.lookupAxisTypeInAInt(axis.getType()));
						typeZeroSuppression = axis.getZeroSuppressionType();
						inaStructure
								.setIntegerByName(
										sap.firefly.InAConstants.QY_ZERO_SUPPRESSION_TYPE,
										sap.firefly.QInAConverter
												.lookupSuppressionTypeInA(typeZeroSuppression));
						inaLayout = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_LAYOUT);
						for (i = 0; i < axis.size(); i++) {
							dimension = axis.getDimensionByIndex(i);
							inaLayout.addString(dimension.getName());
						}
						exporter.exportTotals(inaStructure, axis
								.getResultStructureController());
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoDimension",
				sap.firefly.QInARepository,
				{
					$statics : {
						importRsAttributeNodes : function(inaDimension,
								dimension) {
							var inaResultSetAttributes = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_ATTRIBUTE_NODES);
							var resultSetAttributes;
							var attributeSize;
							var idxAttribute;
							var attributeName;
							var attribute;
							if (inaResultSetAttributes !== null) {
								resultSetAttributes = dimension
										.getResultSetAttributes();
								resultSetAttributes.clear();
								attributeSize = inaResultSetAttributes.size();
								for (idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++) {
									attributeName = inaResultSetAttributes
											.getStringByIndex(idxAttribute);
									attribute = dimension
											.getAttributeByName(attributeName);
									if (attribute !== null) {
										resultSetAttributes.add(attribute);
									}
								}
							}
						},
						importRsFields : function(inaDimension, dimension) {
							var inaResultSetFields = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
							var resultSetFields;
							var fieldSize;
							var idxField;
							var fieldName;
							var field;
							if (inaResultSetFields !== null) {
								resultSetFields = dimension
										.getResultSetFields();
								resultSetFields.clear();
								fieldSize = inaResultSetFields.size();
								for (idxField = 0; idxField < fieldSize; idxField++) {
									fieldName = inaResultSetFields
											.getStringByIndex(idxField);
									field = dimension.getFieldByName(fieldName);
									if (field !== null) {
										resultSetFields.add(field);
									}
								}
							}
						},
						importFieldsLayout : function(importer, inaDimension,
								dimension, context) {
							var inaFieldLayoutType = inaDimension
									.getStringByName(sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE);
							var inaAllFields = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_FIELD_SETTINGS);
							var inaAllFieldSize;
							var p1;
							var inaAllAttributes;
							var inaAllAttributesSize;
							var p2;
							if (inaAllFields !== null) {
								inaAllFieldSize = inaAllFields.size();
								for (p1 = 0; p1 < inaAllFieldSize; p1++) {
									importer
											.importComponent(
													sap.firefly.OlapComponentType.FIELD,
													inaAllFields
															.getStructureByIndex(p1),
													null, dimension, context);
								}
							}
							inaAllAttributes = inaDimension
									.getListByName(sap.firefly.InAConstants.QY_ATTRIBUTE_SETTINGS);
							if (inaAllAttributes !== null) {
								inaAllAttributesSize = inaAllAttributes.size();
								for (p2 = 0; p2 < inaAllAttributesSize; p2++) {
									importer.importAttribute(inaAllAttributes
											.getStructureByIndex(p2),
											dimension, context);
								}
							}
							sap.firefly.QInARepoDimension.importRsFields(
									inaDimension, dimension);
							sap.firefly.QInARepoDimension
									.importRsAttributeNodes(inaDimension,
											dimension);
							dimension
									.setFieldLayoutType(sap.firefly.QInAConverter
											.lookupFieldLayoutType(inaFieldLayoutType));
						},
						exportFieldLayout : function(exporter, inaDimension,
								dimension) {
							var fieldLayoutType = dimension
									.getFieldLayoutType();
							var inaAllFields;
							var resultSetFieldsAtDim;
							var inaResultSetFields;
							var resultFieldSize;
							var idxResultField;
							var resultSetAttributesAtDim;
							var inaResultSetAttributes;
							var resultAttributeSize;
							var idxResultAttribute;
							inaDimension
									.setStringByName(
											sap.firefly.InAConstants.QY_FIELD_LAYOUT_TYPE,
											sap.firefly.QInAConverter
													.lookupFieldLayoutTypeInA(fieldLayoutType));
							inaAllFields = inaDimension
									.setNewListByName(sap.firefly.InAConstants.QY_FIELD_SETTINGS);
							sap.firefly.QInARepoDimension.exportListOfFields(
									dimension.getFields(), inaAllFields,
									exporter);
							resultSetFieldsAtDim = dimension
									.getResultSetFields();
							inaResultSetFields = inaDimension
									.setNewListByName(sap.firefly.InAConstants.QY_RESULT_SET_FIELDS);
							resultFieldSize = resultSetFieldsAtDim.size();
							for (idxResultField = 0; idxResultField < resultFieldSize; idxResultField++) {
								inaResultSetFields
										.addString(resultSetFieldsAtDim.get(
												idxResultField).getName());
							}
							resultSetAttributesAtDim = dimension
									.getResultSetAttributes();
							inaResultSetAttributes = inaDimension
									.setNewListByName(sap.firefly.InAConstants.QY_RESULT_SET_ATTRIBUTE_NODES);
							resultAttributeSize = resultSetAttributesAtDim
									.size();
							for (idxResultAttribute = 0; idxResultAttribute < resultAttributeSize; idxResultAttribute++) {
								inaResultSetAttributes
										.addString(resultSetAttributesAtDim
												.get(idxResultAttribute)
												.getName());
							}
						},
						exportListOfFields : function(fields, inaFields,
								exporter) {
							var fieldsSize = fields.size();
							var i;
							var field;
							for (i = 0; i < fieldsSize; i++) {
								field = fields.get(i);
								if (field.getTextTransformation() === null) {
									continue;
								}
								inaFields.add(exporter.exportComponent(
										sap.firefly.OlapComponentType.FIELD,
										field, null,
										sap.firefly.QImExFlag.DEFAULT_ALL));
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.ABSTRACT_DIMENSION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var queryModel = context.getQueryModel();
						var dimension = modelComponent;
						var dimName;
						var sortingManager;
						var inaSortOrder;
						var sortOrder;
						var skipEntries;
						var topEntries;
						var inaReadMode;
						var readMode;
						if (dimension === null) {
							dimName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_NAME);
							if (queryModel !== null) {
								dimension = queryModel
										.getDimensionByName(dimName);
							}
							if (dimension === null) {
								importer
										.addWarning(
												sap.firefly.ErrorCodes.INVALID_DIMENSION,
												sap.firefly.XStringUtils
														.concatenate3(
																"Dimension '",
																dimName,
																"' not found in QueryModel! Can't deserialize dimension."));
								return null;
							}
						}
						importer
								.importMembers(inaStructure, dimension, context);
						sap.firefly.QInARepoDimension.importFieldsLayout(
								importer, inaStructure, dimension, context);
						importer.importHierarchy(dimension, inaStructure);
						if ((queryModel !== null)
								&& (queryModel.supportsExtendedSort() === false)) {
							sortingManager = queryModel.getSortingManager();
							if (sortingManager.supportsDimensionSorting(
									dimension, sap.firefly.SortType.MEMBER_KEY)) {
								inaSortOrder = inaStructure
										.getIntegerByNameWithDefault(
												sap.firefly.InAConstants.QY_SORT_ORDER,
												sap.firefly.QInAConverter
														.lookupSortDirectionInA(sap.firefly.XSortDirection.DEFAULT_VALUE));
								sortOrder = sap.firefly.QInAConverter
										.lookupSortDirection(inaSortOrder);
								dimension.getResultSetSorting().setDirection(
										sortOrder);
							}
						}
						if (importer.m_supportsCummulative
								&& dimension.supportsCumulative()) {
							dimension
									.setIsCumulative(inaStructure
											.getBooleanByNameWithDefault(
													sap.firefly.InAConstants.QY_IS_CUMMULATIVE,
													false));
						}
						skipEntries = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_SKIP, 0);
						dimension.setSkipEntries(skipEntries);
						topEntries = inaStructure.getIntegerByNameWithDefault(
								sap.firefly.InAConstants.QY_TOP, 0);
						dimension.setTopEntries(topEntries);
						inaReadMode = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_READ_MODE);
						if (inaReadMode !== null) {
							readMode = sap.firefly.QInAConverter
									.lookupReadMode(inaReadMode);
							dimension.setReadModeGraceful(
									sap.firefly.QContextType.RESULT_SET,
									readMode);
						}
						importer.importTotals(inaStructure, dimension
								.getResultStructureControllerBase(), context);
						this.importAlternativeFieldValues(inaStructure,
								dimension);
						return dimension;
					},
					importAlternativeFieldValues : function(inaStructure,
							dimension) {
						var alternativeFieldValuesList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ALTERNATIVE_FIELD_VALUES);
						var size;
						var i;
						var currentElement;
						var currentStructure;
						var strValueType;
						var valueType;
						var valueAsString;
						var value;
						var hierarchyKey;
						var memberKey;
						var fieldName;
						var language;
						if (alternativeFieldValuesList !== null) {
							size = alternativeFieldValuesList.size();
							for (i = 0; i < size; i++) {
								currentElement = alternativeFieldValuesList
										.getElementByIndex(i);
								if (currentElement.isStructure()) {
									currentStructure = currentElement;
									strValueType = currentStructure
											.getStringByName(sap.firefly.InAConstants.QY_VALUE_TYPE);
									valueType = sap.firefly.QInAConverter
											.lookupValueType(strValueType);
									valueAsString = currentStructure
											.getStringByName(sap.firefly.InAConstants.QY_VALUE);
									value = null;
									if (valueType === sap.firefly.XValueType.INTEGER) {
										value = sap.firefly.XIntegerValue
												.create(sap.firefly.XInteger
														.convertStringToIntegerWithRadix(
																valueAsString,
																10));
									} else {
										if (valueType === sap.firefly.XValueType.LONG) {
											value = sap.firefly.XLongValue
													.create(sap.firefly.XLong
															.convertStringToLong(valueAsString));
										} else {
											if (valueType === sap.firefly.XValueType.DOUBLE) {
												value = sap.firefly.XDoubleValue
														.create(sap.firefly.XDouble
																.convertStringToDouble(valueAsString));
											} else {
												if (valueType === sap.firefly.XValueType.STRING) {
													value = sap.firefly.XStringValue
															.create(valueAsString);
												} else {
													if (valueType === sap.firefly.XValueType.DATE) {
														value = sap.firefly.XDate
																.createDateFromIsoFormat(valueAsString);
													} else {
														if (valueType === sap.firefly.XValueType.DATE_TIME) {
															value = sap.firefly.XDateTime
																	.createDateTimeFromIsoFormat(valueAsString);
														}
													}
												}
											}
										}
									}
									if (value !== null) {
										hierarchyKey = currentStructure
												.getBooleanByName(sap.firefly.InAConstants.QY_HIERARCHY_KEY);
										memberKey = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_MEMBER_KEY);
										fieldName = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
										language = currentStructure
												.getStringByName(sap.firefly.InAConstants.QY_LANGUAGE);
										dimension.setAlternativeFieldValue(
												hierarchyKey, memberKey,
												fieldName, value, language);
									}
								}
							}
						}
					},
					exportAlternativeFieldValues : function(inaStructure,
							dimension) {
						this
								.exportAlternativeFieldValuesForKeyType(
										inaStructure,
										dimension,
										dimension
												.getAlternativeFieldValueMemberKeys(false),
										false);
						this
								.exportAlternativeFieldValuesForKeyType(
										inaStructure,
										dimension,
										dimension
												.getAlternativeFieldValueMemberKeys(true),
										true);
					},
					exportAlternativeFieldValuesForKeyType : function(
							inaStructure, dimension,
							alternativeFieldValueMemberKeys, hierarchyKey) {
						var alternativeFieldValuesList;
						var sizeKeys;
						var i;
						var memberKey;
						var alternativeFieldValueFields;
						var sizeFields;
						var j;
						var fieldName;
						var alternativeFieldValueLanguages;
						var sizeLanguages;
						var k;
						var language;
						var alternativeFieldValue;
						var fieldTransformationStruct;
						if (alternativeFieldValueMemberKeys !== null) {
							alternativeFieldValuesList = sap.firefly.PrList
									.create();
							sizeKeys = alternativeFieldValueMemberKeys.size();
							for (i = 0; i < sizeKeys; i++) {
								memberKey = alternativeFieldValueMemberKeys
										.get(i);
								alternativeFieldValueFields = dimension
										.getAlternativeFieldValueFields(
												hierarchyKey, memberKey);
								if (alternativeFieldValueFields !== null) {
									sizeFields = alternativeFieldValueFields
											.size();
									for (j = 0; j < sizeFields; j++) {
										fieldName = alternativeFieldValueFields
												.get(j);
										alternativeFieldValueLanguages = dimension
												.getAlternativeFieldValueLanguages(
														hierarchyKey,
														memberKey, fieldName);
										if (alternativeFieldValueLanguages !== null) {
											sizeLanguages = alternativeFieldValueLanguages
													.size();
											for (k = 0; k < sizeLanguages; k++) {
												language = alternativeFieldValueLanguages
														.get(k);
												alternativeFieldValue = dimension
														.getAlternativeFieldValue(
																hierarchyKey,
																memberKey,
																fieldName,
																language);
												if (alternativeFieldValue !== null) {
													fieldTransformationStruct = alternativeFieldValuesList
															.addNewStructure();
													fieldTransformationStruct
															.setBooleanByName(
																	sap.firefly.InAConstants.QY_HIERARCHY_KEY,
																	hierarchyKey);
													fieldTransformationStruct
															.setStringByName(
																	sap.firefly.InAConstants.QY_MEMBER_KEY,
																	memberKey);
													fieldTransformationStruct
															.setStringByName(
																	sap.firefly.InAConstants.QY_FIELD_NAME,
																	fieldName);
													fieldTransformationStruct
															.setStringByName(
																	sap.firefly.InAConstants.QY_LANGUAGE,
																	language);
													fieldTransformationStruct
															.setStringByName(
																	sap.firefly.InAConstants.QY_VALUE_TYPE,
																	sap.firefly.QInAConverter
																			.lookupValueTypeInA(alternativeFieldValue
																					.getValueType()));
													fieldTransformationStruct
															.setStringByName(
																	sap.firefly.InAConstants.QY_VALUE,
																	alternativeFieldValue
																			.getStringRepresentation());
												}
											}
										}
									}
								}
							}
							if (alternativeFieldValuesList.size() > 0) {
								inaStructure
										.setElementByName(
												sap.firefly.InAConstants.QY_ALTERNATIVE_FIELD_VALUES,
												alternativeFieldValuesList);
							}
						}
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var readMode;
						var skipEntries;
						var topEntries;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, dimension
										.getName());
						readMode = dimension
								.getReadMode(sap.firefly.QContextType.RESULT_SET);
						if (readMode !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_READ_MODE,
									readMode.getName());
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_AXIS,
								sap.firefly.QInAConverter
										.lookupAxisTypeInA(dimension.getAxis()
												.getType()));
						skipEntries = dimension.getSkipEntries();
						if (skipEntries > 0) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_SKIP,
									skipEntries);
						}
						topEntries = dimension.getTopEntries();
						if (topEntries > 0) {
							inaStructure
									.setIntegerByName(
											sap.firefly.InAConstants.QY_TOP,
											topEntries);
						}
						if (dimension.supportsCumulative()) {
							inaStructure.setBooleanByName(
									sap.firefly.InAConstants.QY_IS_CUMMULATIVE,
									dimension.isCumulative());
						}
						exporter.exportHierarchy(dimension, inaStructure);
						exporter.exportTotals(inaStructure, dimension);
						exporter.exportMembers(dimension, inaStructure);
						sap.firefly.QInARepoDimension.exportFieldLayout(
								exporter, inaStructure, dimension);
						this.exportAlternativeFieldValues(inaStructure,
								dimension);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoField",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var field = modelComponent;
						var name;
						var dimension;
						var inaTextTransformation;
						var textTransformation;
						if (field === null) {
							name = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_NAME);
							dimension = parentComponent;
							field = dimension.getFieldByName(name);
						}
						inaTextTransformation = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_TEXT_TRANSFORMATION);
						if (inaTextTransformation !== null) {
							textTransformation = sap.firefly.QInAConverter
									.lookupTextTransformation(inaTextTransformation);
							field.setTextTransformation(textTransformation);
						}
						return field;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var field = modelComponent;
						var textTransformationType;
						var inaTextTransform;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME, field
										.getName());
						textTransformationType = field.getTextTransformation();
						if (textTransformationType !== null) {
							inaTextTransform = sap.firefly.QInAConverter
									.lookupTextTransformationInA(textTransformationType);
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_TEXT_TRANSFORMATION,
											inaTextTransform);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterAlgebra",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = null;
						var parentFilterElement;
						var code;
						var filterAlgebra;
						var uniqueId;
						var inaSubSelections;
						var size;
						var i;
						var subSelection;
						var child;
						if (parentComponent !== null) {
							parentFilterElement = parentComponent;
							filterExpression = parentFilterElement
									.getFilterExpression();
						}
						code = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_CODE);
						filterAlgebra = null;
						if (sap.firefly.XString.isEqual(code,
								sap.firefly.InAConstants.VA_CODE_AND)) {
							filterAlgebra = sap.firefly.QFilterAnd._create(
									context, filterExpression);
						} else {
							if (sap.firefly.XString.isEqual(code,
									sap.firefly.InAConstants.VA_CODE_NOT)) {
								filterAlgebra = sap.firefly.QFilterNot._create(
										context, filterExpression);
							} else {
								filterAlgebra = sap.firefly.QFilterOr._create(
										context, filterExpression);
							}
						}
						uniqueId = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_ID);
						filterAlgebra.setUniqueId(uniqueId);
						inaSubSelections = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						if (inaSubSelections !== null) {
							size = inaSubSelections.size();
							for (i = 0; i < size; i++) {
								subSelection = inaSubSelections
										.getStructureByIndex(i);
								child = importer.importComponent(null,
										subSelection, null, filterAlgebra,
										context);
								if (child !== null) {
									(filterAlgebra).add(child);
								}
							}
						}
						return filterAlgebra;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var type = modelComponent.getComponentType();
						var qLogicalContainer = modelComponent;
						var inaSubSelections;
						var size;
						var i;
						var inaChildElement;
						if (type.isTypeOf(sap.firefly.FilterComponentType.AND)) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_CODE,
									sap.firefly.InAConstants.VA_CODE_AND);
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_ID,
									qLogicalContainer.getUniqueId());
						} else {
							if (type
									.isTypeOf(sap.firefly.FilterComponentType.OR)) {
								inaStructure.setStringByName(
										sap.firefly.InAConstants.QY_CODE,
										sap.firefly.InAConstants.VA_CODE_OR);
								inaStructure.setStringByName(
										sap.firefly.InAConstants.QY_ID,
										qLogicalContainer.getUniqueId());
							} else {
								if (type
										.isTypeOf(sap.firefly.FilterComponentType.NOT)) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_CODE,
													sap.firefly.InAConstants.VA_CODE_NOT);
									inaStructure.setStringByName(
											sap.firefly.InAConstants.QY_ID,
											qLogicalContainer.getUniqueId());
								}
							}
						}
						inaSubSelections = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						size = qLogicalContainer.size();
						for (i = 0; i < size; i++) {
							inaChildElement = exporter.exportComponent(null,
									qLogicalContainer.get(i), null, flags);
							if (inaChildElement !== null) {
								inaSubSelections.add(inaChildElement);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterAll",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.SELECTOR;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_FILTER_REPO;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filter = modelComponent;
						var selectionStateContainer = filter
								.getSelectionStateContainer();
						var inaFilterExpression = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_DYNAMIC_FILTER);
						var selectionVisibilityContainer;
						var inaVisibilityExpression;
						var selectionSpaceContainer;
						var inaSpaceExpression;
						var valueHelpContainer;
						var inaValueHelpExpression;
						importer.importFilterExpression(
								selectionStateContainer, inaFilterExpression,
								filter, context);
						selectionVisibilityContainer = filter
								.getSelectionVisibilityContainer();
						inaVisibilityExpression = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_VISIBILITY_FILTER);
						importer.importFilterExpression(
								selectionVisibilityContainer,
								inaVisibilityExpression, filter, context);
						selectionSpaceContainer = filter
								.getSelectionSpaceContainer();
						inaSpaceExpression = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_FIXED_FILTER);
						importer.importFilterExpression(
								selectionSpaceContainer, inaSpaceExpression,
								filter, context);
						valueHelpContainer = filter.getSelectorContainer();
						inaValueHelpExpression = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_VALUE_HELP_FILTER);
						importer.importFilterExpression(valueHelpContainer,
								inaValueHelpExpression, filter, context);
						return filter;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filter = modelComponent;
						var selectionStateContainer = filter
								.getSelectionStateContainer();
						var inaState = exporter
								.exportFilterExpression(selectionStateContainer);
						var selectionVisibilityContainer;
						var inaVisibility;
						var selectionSpaceContainer;
						var inaSpace;
						var valueHelpContainer;
						var inaValueHelp;
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_DYNAMIC_FILTER,
								inaState);
						selectionVisibilityContainer = filter
								.getSelectionVisibilityContainer();
						inaVisibility = exporter
								.exportFilterExpression(selectionVisibilityContainer);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_VISIBILITY_FILTER,
								inaVisibility);
						selectionSpaceContainer = filter
								.getSelectionSpaceContainer();
						inaSpace = exporter
								.exportFilterExpression(selectionSpaceContainer);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_FIXED_FILTER,
								inaSpace);
						valueHelpContainer = filter.getSelectorContainer();
						inaValueHelp = exporter
								.exportFilterExpression(valueHelpContainer);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_VALUE_HELP_FILTER,
								inaValueHelp);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterCartesianList",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_LIST;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = null;
						var parentFilterElement;
						var cartesianList;
						var fieldName;
						var fieldAccessor;
						var field;
						var uniqueId;
						var hierarchyName;
						var isConvertToFlatSelection;
						var inaElements;
						var size;
						var i;
						var inaSelection;
						var child;
						var filterElement;
						if (parentComponent !== null) {
							parentFilterElement = parentComponent;
							filterExpression = parentFilterElement
									.getFilterExpression();
						}
						cartesianList = modelComponent;
						if (cartesianList === null) {
							cartesianList = sap.firefly.QFactory2
									.newFilterCartesianList(filterExpression);
						}
						fieldName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
						if ((fieldName !== null) && (context !== null)) {
							fieldAccessor = context.getFieldAccessorSingle();
							field = fieldAccessor.getFieldByName(fieldName);
							if (field === null) {
								return null;
							}
							cartesianList.setField(field);
						}
						uniqueId = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_ID);
						cartesianList.setUniqueId(uniqueId);
						hierarchyName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_NAME);
						cartesianList.setHierarchyName(hierarchyName);
						isConvertToFlatSelection = inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
										false);
						cartesianList
								.setConvertToFlatSelection(isConvertToFlatSelection);
						inaElements = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						cartesianList.clear();
						if (inaElements !== null) {
							size = inaElements.size();
							for (i = 0; i < size; i++) {
								inaSelection = inaElements
										.getStructureByIndex(i);
								child = importer.importComponent(null,
										inaSelection, null, cartesianList,
										context);
								filterElement = child;
								cartesianList.add(filterElement);
							}
						}
						return cartesianList;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var cartesianList = modelComponent;
						var field;
						var hierarchyName;
						var inaElements;
						var size;
						var j;
						var cartesianElement;
						var inaInnerElement;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ID, cartesianList
										.getUniqueId());
						field = cartesianList.getField();
						if (field !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									field.getName());
						}
						hierarchyName = cartesianList.getHierarchyName();
						if (hierarchyName !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_HIERARCHY_NAME,
									hierarchyName);
						}
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_CONVERT_TO_FLAT_SELECTION,
										cartesianList
												.isConvertToFlatSelection());
						inaElements = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						size = cartesianList.size();
						for (j = 0; j < size; j++) {
							cartesianElement = cartesianList.getOp(j);
							inaInnerElement = exporter.exportComponent(null,
									cartesianElement, null, flags);
							inaElements.add(inaInnerElement);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterCartesianProduct",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_PRODUCT;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = null;
						var parentFilterElement;
						var cartesianProduct;
						var uniqueId;
						var inaElements;
						var i;
						var inaSelection;
						var child;
						var msl;
						if (parentComponent !== null) {
							parentFilterElement = parentComponent;
							filterExpression = parentFilterElement
									.getFilterExpression();
						}
						cartesianProduct = modelComponent;
						if (cartesianProduct === null) {
							cartesianProduct = sap.firefly.QFactory2
									.newFilterCartesianProduct(filterExpression);
						}
						cartesianProduct.clear();
						uniqueId = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_ID);
						cartesianProduct.setUniqueId(uniqueId);
						inaElements = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						if (inaElements !== null) {
							for (i = 0; i < inaElements.size(); i++) {
								inaSelection = inaElements
										.getStructureByIndex(i);
								child = importer.importComponent(null,
										inaSelection, null, cartesianProduct,
										context);
								msl = child;
								cartesianProduct.add(msl);
							}
						}
						return cartesianProduct;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var cartesianProduct = modelComponent;
						var inaSubSelections;
						var i;
						var msl;
						var innerElement;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ID,
								cartesianProduct.getUniqueId());
						inaSubSelections = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						for (i = 0; i < cartesianProduct.size(); i++) {
							msl = cartesianProduct.getCartesianChild(i);
							innerElement = exporter.exportComponent(null, msl,
									null, flags);
							if (innerElement !== null) {
								inaSubSelections.add(innerElement);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterCellValueOperand",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var operand = modelComponent;
						var comparison;
						var operator;
						var isExcluding;
						var inaValueList;
						if (operand === null) {
							operand = sap.firefly.QFilterCellValueOperand
									._create(context, null, null, null, null);
						}
						comparison = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_COMPARISON);
						operator = sap.firefly.QInAConverter
								.lookupComparison(comparison);
						operand.setComparisonOperator(operator);
						isExcluding = inaStructure
								.getBooleanByName(sap.firefly.InAConstants.QY_IS_EXCLUDING);
						operand.setIsExcluding(isExcluding);
						inaValueList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_VALUES);
						sap.firefly.QInARepoFilterOperation.importValues(
								importer, inaValueList, operand, null, context);
						return operand;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var cellValueOperand = modelComponent;
						var comparisonOperator;
						var inaValueList;
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_IS_EXCLUDING,
								cellValueOperand.isExcluding());
						comparisonOperator = cellValueOperand
								.getComparisonOperator();
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.QInAConverter
												.lookupComparisonInA(comparisonOperator));
						inaValueList = sap.firefly.QInARepoFilterOperation
								.exportValues(exporter, cellValueOperand);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_VALUES,
								inaValueList);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterExpression",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_EXPRESSION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var expression = modelComponent;
						var uniqueId;
						var isSuppressingNulls;
						var inaFilterElement;
						var component;
						var filterElement;
						var inaElements;
						var i;
						var inaCellValueOperand;
						var cellValueOperand;
						if (sap.firefly.XString.isEqual(expression.getName(),
								"selectionSpaceContainer")
								&& (expression.getFilterRootElement() !== null)) {
							return modelComponent;
						}
						expression.setComplexSelection(null);
						if (expression.supportsCellValueOperands()) {
							expression.setIsSuppressingNulls(false);
							expression.clearCellValueSelections();
						}
						if (inaStructure !== null) {
							uniqueId = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_ID);
							expression.setUniqueId(uniqueId);
							if (expression.supportsCellValueOperands()) {
								isSuppressingNulls = inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_IS_SUPPRESSING_NULLS,
												false);
								expression
										.setIsSuppressingNulls(isSuppressingNulls);
							}
							inaFilterElement = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_FILTER_ROOT);
							if (inaFilterElement !== null) {
								component = importer.importComponent(null,
										inaFilterElement, null, expression,
										context);
								filterElement = component;
								expression.setComplexSelection(filterElement);
							}
							if (expression.supportsCellValueOperands()) {
								inaElements = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
								if (inaElements !== null) {
									for (i = 0; i < inaElements.size(); i++) {
										inaCellValueOperand = inaElements
												.getStructureByIndex(i);
										cellValueOperand = importer
												.importComponent(
														sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND,
														inaCellValueOperand,
														null, expression,
														context);
										expression
												.addCellValueSelection(cellValueOperand);
									}
								}
							}
						}
						return modelComponent;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var expression = modelComponent;
						var rootElement;
						var inaRootElement;
						var inaElements;
						var cellValueOperands;
						var i;
						var cellValueOperand;
						var inaCellValueOperand;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ID, expression
										.getUniqueId());
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_IS_SUPPRESSING_NULLS,
										expression.isSuppressingNulls());
						rootElement = expression.getFilterRootElement();
						if (rootElement !== null) {
							inaRootElement = exporter.exportComponent(null,
									rootElement, null,
									sap.firefly.QImExFlag.DEFAULT_ALL);
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_FILTER_ROOT,
									inaRootElement);
						}
						if (expression.supportsCellValueOperands()) {
							inaElements = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_CELL_VALUE_OPERAND);
							cellValueOperands = expression
									.getCellValueOperands();
							for (i = 0; i < cellValueOperands.size(); i++) {
								cellValueOperand = cellValueOperands.get(i);
								inaCellValueOperand = exporter
										.exportCellValueOperand(cellValueOperand);
								inaElements.add(inaCellValueOperand);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterOperation",
				sap.firefly.QInARepository,
				{
					$statics : {
						importValues : function(importer, inaValueList,
								filterValueContainer, field, context) {
							var size = inaValueList.size();
							var i;
							var inaValueStructure;
							var valueBag;
							var inaType;
							var filterValueType;
							var varName;
							var variables;
							var variable;
							var inaNavigationList;
							var navigations;
							var inaNaviSize;
							var naviIdx;
							var memberNavigation;
							for (i = 0; (i < size) && (i < 3); i++) {
								inaValueStructure = inaValueList
										.getStructureByIndex(i);
								valueBag = filterValueContainer
										.getValueByIndex(i);
								inaType = inaValueStructure
										.getStringByName(sap.firefly.InAConstants.QY_TYPE);
								filterValueType = sap.firefly.QInAConverter
										.lookupValueType(inaType);
								if (filterValueType === sap.firefly.XValueType.VARIABLE) {
									valueBag
											.setFilterValueType(filterValueType);
									varName = inaValueStructure
											.getStringByName(sap.firefly.InAConstants.QY_VALUE);
									if (varName !== null) {
										variables = context
												.getVariableContainer()
												.getVariables();
										variable = variables.getByKey(varName);
										valueBag.setVariableValue(variable);
									}
								} else {
									if (filterValueType === sap.firefly.XValueType.CURRENT_MEMBER) {
										valueBag
												.setFilterValueType(filterValueType);
									}
									inaNavigationList = sap.firefly.PrUtils
											.getListProperty(
													inaValueStructure,
													sap.firefly.InAConstants.QY_LOW_NAVIGATIONS);
									if (inaNavigationList === null) {
										inaNavigationList = sap.firefly.PrUtils
												.getListProperty(
														inaValueStructure,
														sap.firefly.InAConstants.QY_VALUE);
									}
									if (inaNavigationList !== null) {
										navigations = valueBag
												.getMemberNavigations();
										navigations.clear();
										inaNaviSize = inaNavigationList.size();
										for (naviIdx = 0; naviIdx < inaNaviSize; naviIdx++) {
											memberNavigation = sap.firefly.QInARepoFilterOperation
													.importMemberNavigation(inaNavigationList
															.getStructureByIndex(naviIdx));
											navigations.add(memberNavigation);
										}
									}
									if (filterValueType !== sap.firefly.XValueType.CURRENT_MEMBER) {
										sap.firefly.QInAValueUtils.importValue(
												importer, valueBag,
												inaValueStructure, null, null,
												field);
									}
								}
							}
						},
						importMemberNavigation : function(inaNavigation) {
							var memberNavigation = sap.firefly.QFactory2
									.createMemberNavigation(sap.firefly.CurrentMemberFunction
											.lookup(inaNavigation
													.getStringByName(sap.firefly.InAConstants.QY_FUNCTION)));
							var inaParameters;
							var inaParaSize;
							var idxPara;
							var inaParameter;
							var inaNavigations;
							var inaNaviSize;
							var idxNavi;
							var inaLevelValue;
							var inaConstantValue;
							if (inaNavigation
									.hasValueByName(sap.firefly.InAConstants.QY_PARAMETERS)) {
								inaParameters = inaNavigation
										.getListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								inaParaSize = inaParameters.size();
								for (idxPara = 0; idxPara < inaParaSize; idxPara++) {
									inaParameter = inaParameters
											.getStructureByIndex(idxPara);
									if (inaParameter
											.hasValueByName(sap.firefly.InAConstants.QY_NAVIGATIONS)) {
										inaNavigations = inaParameter
												.getListByName(sap.firefly.InAConstants.QY_NAVIGATIONS);
										inaNaviSize = inaNavigations.size();
										for (idxNavi = 0; idxNavi < inaNaviSize; idxNavi++) {
											memberNavigation
													.addNavigation(sap.firefly.QInARepoFilterOperation
															.importMemberNavigation(inaNavigations
																	.getStructureByIndex(idxNavi)));
										}
									} else {
										if (inaParameter
												.hasValueByName(sap.firefly.InAConstants.QY_LEVEL)) {
											inaLevelValue = inaParameter
													.getElementByName(sap.firefly.InAConstants.QY_LEVEL);
											if (inaLevelValue.isNumeric()) {
												memberNavigation
														.addParameter(sap.firefly.QFactory2
																.createNavigationParameterWithLevelNumber((inaLevelValue)
																		.getIntegerValue()));
											} else {
												memberNavigation
														.addParameter(sap.firefly.QFactory2
																.createNavigationParameterWithLevelLiteral((inaLevelValue)
																		.getStringValue()));
											}
										} else {
											if (inaParameter
													.hasValueByName(sap.firefly.InAConstants.QY_MEMBER)) {
												memberNavigation
														.addParameter(sap.firefly.QFactory2
																.createNavigationParameterWithMemberName(inaParameter
																		.getStringByName(sap.firefly.InAConstants.QY_MEMBER)));
											} else {
												inaConstantValue = inaParameter
														.getElementByName(sap.firefly.InAConstants.QY_CONSTANT);
												if (inaConstantValue
														.isNumeric()) {
													memberNavigation
															.addParameter(sap.firefly.QFactory2
																	.createNavigationParameterWithIntegerConstant((inaConstantValue)
																			.getIntegerValue()));
												} else {
													memberNavigation
															.addParameter(sap.firefly.QFactory2
																	.createNavigationParameterWithStringConstant((inaConstantValue)
																			.getStringValue()));
												}
											}
										}
									}
								}
							}
							return memberNavigation;
						},
						exportValues : function(exporter, filterValueContainer) {
							var inaValueList = sap.firefly.PrList.create();
							var size = filterValueContainer.size();
							var i;
							var valueBag;
							var inaValueStructure;
							var filterValueType;
							var variableValue;
							var inaNavigationList;
							var literalField;
							var fieldValue;
							var memberNavigations;
							var memberNavigationSize;
							var mnIdx;
							for (i = 0; i < size; i++) {
								valueBag = filterValueContainer
										.getValueByIndex(i);
								inaValueStructure = inaValueList
										.addNewStructure();
								filterValueType = valueBag.getFilterValueType();
								if (filterValueType === sap.firefly.XValueType.VARIABLE) {
									inaValueStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_TYPE,
													sap.firefly.InAConstants.VA_DATA_TYPE_VARIABLE);
									variableValue = valueBag.getVariableValue();
									if (variableValue !== null) {
										inaValueStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_VALUE,
														variableValue.getName());
									}
								} else {
									if (filterValueType === sap.firefly.XValueType.CURRENT_MEMBER) {
										inaValueStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_TYPE,
														sap.firefly.InAConstants.VA_DATA_TYPE_CURRENT_MEMBER);
									}
									literalField = null;
									fieldValue = valueBag.getFieldValue();
									if (fieldValue !== null) {
										literalField = fieldValue.getField();
									}
									sap.firefly.QInAValueUtils
											.exportFieldValue(exporter, null,
													inaValueStructure,
													literalField, valueBag,
													null);
									memberNavigations = valueBag
											.getMemberNavigations();
									memberNavigationSize = memberNavigations
											.size();
									if (memberNavigationSize > 0) {
										inaNavigationList = inaValueStructure
												.setNewListByName(sap.firefly.InAConstants.QY_LOW_NAVIGATIONS);
										for (mnIdx = 0; mnIdx < memberNavigationSize; mnIdx++) {
											sap.firefly.QInAFilterOperation
													.exportMemberNavigation(
															memberNavigations
																	.get(mnIdx),
															inaNavigationList
																	.addNewStructure());
										}
									}
								}
							}
							return inaValueList;
						}
					},
					getComponentType : function() {
						return sap.firefly.FilterComponentType.OPERATION;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = null;
						var parentFilterElement;
						var filterOperation;
						var fieldName;
						var field;
						var fieldAccessor;
						var inaComparison;
						var comparisonOperator;
						var isExcluding;
						var hasLevelOffset;
						var levelOffset;
						var hasDepth;
						var depth;
						var uniqueId;
						var exactness;
						var hierarchyName;
						var inaValueList;
						if (parentComponent !== null) {
							parentFilterElement = parentComponent;
							filterExpression = parentFilterElement
									.getFilterExpression();
						}
						filterOperation = modelComponent;
						if (filterOperation === null) {
							filterOperation = sap.firefly.QFactory2
									.newFilterOperation(filterExpression);
						}
						fieldName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
						field = null;
						if ((fieldName !== null) && (context !== null)) {
							fieldAccessor = context.getFieldAccessorSingle();
							field = fieldAccessor.getFieldByName(fieldName);
							if (field === null) {
								return null;
							}
							filterOperation.setField(field);
						}
						inaComparison = inaStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.InAConstants.VA_COMPARISON_EQUAL);
						if (inaComparison !== null) {
							comparisonOperator = sap.firefly.QInAConverter
									.lookupComparison(inaComparison);
							if (comparisonOperator === null) {
								importer
										.addError(
												sap.firefly.ErrorCodes.INVALID_OPERATOR,
												sap.firefly.XString
														.concatenate2(
																"Unsupported comparison operator: ",
																inaComparison));
							}
							filterOperation
									.setComparisonOperator(comparisonOperator);
						}
						isExcluding = inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_IS_EXCLUDING,
										false);
						if (isExcluding) {
							filterOperation
									.setSetSign(sap.firefly.SetSign.EXCLUDING);
						} else {
							filterOperation
									.setSetSign(sap.firefly.SetSign.INCLUDING);
						}
						hasLevelOffset = inaStructure
								.getBooleanByNameWithDefault(
										sap.firefly.InAConstants.QY_HAS_LEVEL_OFFSET,
										false);
						if (hasLevelOffset === false) {
							filterOperation.resetLevelOffset();
						} else {
							levelOffset = inaStructure
									.getIntegerByNameWithDefault(
											sap.firefly.InAConstants.QY_LEVEL_OFFSET,
											0);
							filterOperation.setLevelOffset(levelOffset);
						}
						hasDepth = inaStructure.getBooleanByNameWithDefault(
								sap.firefly.InAConstants.QY_HAS_DEPTH, false);
						if (hasDepth === false) {
							filterOperation.resetDepth();
						} else {
							depth = inaStructure.getIntegerByNameWithDefault(
									sap.firefly.InAConstants.QY_DEPTH, 0);
							filterOperation.setDepth(depth);
						}
						uniqueId = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_ID);
						filterOperation.setUniqueId(uniqueId);
						exactness = inaStructure.getDoubleByNameWithDefault(
								sap.firefly.InAConstants.QY_EXACTNESS, 0);
						filterOperation.setExactness(exactness);
						hierarchyName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY_NAME);
						filterOperation.setHierarchyName(hierarchyName);
						inaValueList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_VALUES);
						sap.firefly.QInARepoFilterOperation.importValues(
								importer, inaValueList, filterOperation, field,
								context);
						return filterOperation;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var filterOperation = modelComponent;
						var field;
						var comparisonOperator;
						var inaValueList;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ID, filterOperation
										.getUniqueId());
						field = filterOperation.getField();
						if (field !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									field.getName());
						}
						comparisonOperator = filterOperation
								.getComparisonOperator();
						inaStructure
								.setStringByName(
										sap.firefly.InAConstants.QY_COMPARISON,
										sap.firefly.QInAConverter
												.lookupComparisonInA(comparisonOperator));
						inaStructure
								.setBooleanByName(
										sap.firefly.InAConstants.QY_IS_EXCLUDING,
										filterOperation.getSetSign() === sap.firefly.SetSign.EXCLUDING);
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_HAS_LEVEL_OFFSET,
								filterOperation.hasLevelOffset());
						if (filterOperation.hasLevelOffset()) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_LEVEL_OFFSET,
									filterOperation.getLevelOffset());
						}
						inaStructure.setBooleanByName(
								sap.firefly.InAConstants.QY_HAS_DEPTH,
								filterOperation.hasDepth());
						if (filterOperation.hasDepth()) {
							inaStructure.setIntegerByName(
									sap.firefly.InAConstants.QY_DEPTH,
									filterOperation.getDepth());
						}
						inaStructure.setDoubleByName(
								sap.firefly.InAConstants.QY_EXACTNESS,
								filterOperation.getExactness());
						inaStructure.setStringByNameNotNull(
								sap.firefly.InAConstants.QY_HIERARCHY_NAME,
								filterOperation.getHierarchyName());
						inaValueList = sap.firefly.QInARepoFilterOperation
								.exportValues(exporter, filterOperation);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_VALUES,
								inaValueList);
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoFilterTuple",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.FilterComponentType.TUPLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var filterExpression = null;
						var parentFilterElement;
						var filterTuple;
						var inaSubSelectionsOfTuples;
						var tuplesOperandInInA;
						var fieldNamesFromInA;
						var fieldNames;
						var j;
						var tuplesFromInA;
						var k;
						var tupleDataInInA;
						var tupleData;
						var l;
						if (parentComponent !== null) {
							parentFilterElement = parentComponent;
							filterExpression = parentFilterElement
									.getFilterExpression();
						}
						filterTuple = sap.firefly.QFilterTuple._create(context,
								filterExpression);
						filterTuple
								.setUniqueId(inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_ID));
						inaSubSelectionsOfTuples = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						if (inaSubSelectionsOfTuples !== null) {
							tuplesOperandInInA = inaSubSelectionsOfTuples
									.getStructureByIndex(0);
							tuplesOperandInInA = tuplesOperandInInA
									.getStructureByName(sap.firefly.InAConstants.QY_TUPLES_OPERAND);
							fieldNamesFromInA = tuplesOperandInInA
									.getListByName(sap.firefly.InAConstants.QY_TUPLES_FIELDNAMES);
							fieldNames = sap.firefly.XListOfString.create();
							for (j = 0; j < fieldNamesFromInA.size(); j++) {
								fieldNames.add(fieldNamesFromInA
										.getStringByIndex(j));
							}
							filterTuple.setFieldNames(fieldNames);
							tuplesFromInA = tuplesOperandInInA
									.getListByName(sap.firefly.InAConstants.QY_TUPLES_TUPLES);
							for (k = 0; k < tuplesFromInA.size(); k++) {
								tupleDataInInA = tuplesFromInA
										.getListByIndex(k);
								tupleData = sap.firefly.XListOfString.create();
								for (l = 0; l < tupleDataInInA.size(); l++) {
									tupleData.add(tupleDataInInA
											.getStringByIndex(l));
								}
								filterTuple.addTupleCriteria(tupleData);
							}
						}
						return filterTuple;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qFilterTuple = modelComponent;
						var inaSubSelectionsTuples;
						var tupleStructureInSubSelections;
						var tuplesOperandStructure;
						var fieldNames;
						var fieldNamesForFiltering;
						var k;
						var tuplesInInA;
						var tuples;
						var l;
						var singleTupleCondition;
						var tuplesData;
						var j;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_CODE,
								sap.firefly.InAConstants.QY_CODE_TUPLE);
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_ID, qFilterTuple
										.getUniqueId());
						inaSubSelectionsTuples = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_SUB_SELECTIONS);
						tupleStructureInSubSelections = inaSubSelectionsTuples
								.addNewStructure();
						tuplesOperandStructure = tupleStructureInSubSelections
								.setNewStructureByName(sap.firefly.InAConstants.QY_TUPLES_OPERAND);
						fieldNames = tuplesOperandStructure
								.setNewListByName(sap.firefly.InAConstants.QY_TUPLES_FIELDNAMES);
						fieldNamesForFiltering = qFilterTuple.getFieldNames();
						for (k = 0; k < fieldNamesForFiltering.size(); k++) {
							fieldNames.addString(fieldNamesForFiltering.get(k));
						}
						tuplesInInA = tuplesOperandStructure
								.setNewListByName(sap.firefly.InAConstants.QY_TUPLES_TUPLES);
						tuples = qFilterTuple.getTuples();
						for (l = 0; l < tuples.size(); l++) {
							singleTupleCondition = tuples.get(l);
							tuplesData = tuplesInInA.addNewList();
							for (j = 0; j < fieldNamesForFiltering.size(); j++) {
								tuplesData.addString(singleTupleCondition
										.get(j));
							}
						}
						return inaStructure;
					}
				});
$Firefly.createClass("sap.firefly.QInARepoList", sap.firefly.QInARepository, {
	getComponentType : function() {
		return sap.firefly.OlapComponentType.COMPONENT_LIST;
	},
	extendCustom : function(exporter, modelComponent, inaStructure) {
		var olapComponentType = modelComponent.getOlapComponentType();
		var ctypeValue = sap.firefly.QInAConverter
				.lookupComponentTypeInA(olapComponentType);
		inaStructure.setStringByName(sap.firefly.InAConstants.QY_CTYPE,
				ctypeValue);
		return inaStructure;
	},
	importComponentWithStructure : function(importer, inaStructure,
			modelComponent, parentComponent, context) {
		return modelComponent;
	},
	exportComponentWithStructure : function(exporter, modelComponent,
			inaStructure, flags) {
		var qList = modelComponent;
		var inaList = inaStructure
				.setNewListByName(sap.firefly.InAConstants.QY_LIST);
		var len = qList.size();
		var i;
		var childComponent;
		var inaChild;
		for (i = 0; i < len; i++) {
			childComponent = qList.get(i);
			inaChild = exporter.exportComponent(null, childComponent, null,
					flags);
			inaList.add(inaChild);
		}
		return inaStructure;
	}
});
$Firefly
		.createClass(
				"sap.firefly.QInARepoMember",
				sap.firefly.QInARepository,
				{
					$statics : {
						setIntegerIfNotNull : function(structure, name, value) {
							if (value !== null) {
								structure.setIntegerByName(name, value
										.getIntegerValue());
							}
						}
					},
					importGenericMemberProperties : function(member, inaMember) {
						var inaVisibility;
						var inaPostAggregation;
						var postAggregationType;
						var inaPostAggregationDimensions;
						var size;
						var postDimIdx;
						if (inaMember
								.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_SHIFT)) {
							member
									.setNumericShift(inaMember
											.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_SHIFT));
						}
						if (inaMember
								.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_SCALE)) {
							member
									.setNumericScale(inaMember
											.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_SCALE));
						}
						if (inaMember
								.hasValueByName(sap.firefly.InAConstants.QY_NUMERIC_PRECISION)) {
							member
									.setNumericPrecision(inaMember
											.getIntegerByName(sap.firefly.InAConstants.QY_NUMERIC_PRECISION));
						}
						if (member.getQueryModel().supportsMemberVisibility()) {
							inaVisibility = inaMember
									.getStringByNameWithDefault(
											sap.firefly.InAConstants.QY_VISIBILITY,
											sap.firefly.InAConstants.VA_VISIBILITY_VISIBLE);
							member
									.setResultVisibility(sap.firefly.QInAConverter
											.lookupResultSetVisibility(inaVisibility));
						}
						inaPostAggregation = inaMember
								.getStringByName(sap.firefly.InAConstants.QY_POST_AGGREGATION);
						postAggregationType = sap.firefly.QInAConverter
								.lookupAggregationType(inaPostAggregation);
						member.setPostAggregationType(postAggregationType);
						if (inaMember
								.hasValueByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_IGNORE_HIERARCHY)) {
							member.setPostAggregationIgnoreHierarchy(true);
						}
						member.clearPostAggregationDimensions();
						inaPostAggregationDimensions = inaMember
								.getListByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_DIMENSIONS);
						if (inaPostAggregationDimensions !== null) {
							size = inaPostAggregationDimensions.size();
							for (postDimIdx = 0; postDimIdx < size; postDimIdx++) {
								member
										.addPostAggregationDimensionName(inaPostAggregationDimensions
												.getStringByIndex(postDimIdx));
							}
						}
					},
					exportGenericMemberProperties : function(member, inaMember) {
						var resultVisibility;
						var postAggregationType;
						var postAggregationDimensions;
						var inaPostAggregationDimensions;
						var iterator;
						sap.firefly.QInARepoMember.setIntegerIfNotNull(
								inaMember,
								sap.firefly.InAConstants.QY_NUMERIC_SHIFT,
								member.getNumericShift());
						sap.firefly.QInARepoMember.setIntegerIfNotNull(
								inaMember,
								sap.firefly.InAConstants.QY_NUMERIC_SCALE,
								member.getNumericScale());
						sap.firefly.QInARepoMember.setIntegerIfNotNull(
								inaMember,
								sap.firefly.InAConstants.QY_NUMERIC_PRECISION,
								member.getNumericPrecision());
						resultVisibility = member.getResultVisibility();
						if (resultVisibility === null) {
							resultVisibility = sap.firefly.ResultVisibility.VISIBLE;
						}
						inaMember
								.setStringByName(
										sap.firefly.InAConstants.QY_VISIBILITY,
										sap.firefly.QInAConverter
												.lookupResultSetVisibilityInA(resultVisibility));
						postAggregationType = member.getPostAggregationType();
						if (postAggregationType !== null) {
							inaMember
									.setStringByName(
											sap.firefly.InAConstants.QY_POST_AGGREGATION,
											sap.firefly.QInAConverter
													.lookupAggregationTypeInA(postAggregationType));
						}
						if (member.isPostAggregationIgnoringHierarchy()) {
							inaMember
									.setBooleanByName(
											sap.firefly.InAConstants.QY_POST_AGGREGATION_IGNORE_HIERARCHY,
											true);
						}
						postAggregationDimensions = member
								.getPostAggregationDimensions();
						if (postAggregationDimensions.hasElements()) {
							inaPostAggregationDimensions = inaMember
									.setNewListByName(sap.firefly.InAConstants.QY_POST_AGGREGATION_DIMENSIONS);
							iterator = postAggregationDimensions.getIterator();
							while (iterator.hasNext()) {
								inaPostAggregationDimensions
										.add(sap.firefly.PrString
												.createWithValue(iterator
														.next()));
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoMemberBasicMeasure",
				sap.firefly.QInARepository,
				{
					$statics : {
						fillValue : function(exporter, memberOperandElement,
								fieldValue, valueType, comparsionOperator) {
							memberOperandElement
									.setStringByName(
											sap.firefly.InAConstants.QY_COMPARISON,
											sap.firefly.QInAConverter
													.lookupComparisonInA(comparsionOperator));
							sap.firefly.QInAValueUtils
									.exportValue(exporter,
											sap.firefly.InAConstants.QY_VALUE,
											memberOperandElement, fieldValue,
											valueType);
						}
					},
					getComponentType : function() {
						return sap.firefly.MemberType.BASIC_MEASURE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = parentComponent;
						var newMemberName;
						var newMemberText;
						var keyField;
						var keyName;
						var textField;
						var textName;
						var memberOperand;
						var isFilterOnMeasures;
						var isFilterEqual;
						var member;
						var inaExceptionAggregationDimensions;
						var size;
						var idx;
						var exceptionAggregation;
						var inaAggregationDimension;
						if (dimension === null) {
							dimension = context
									.getDimensionAccessor()
									.getDimensionByName(
											inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_DIMENSION));
						}
						newMemberName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						newMemberText = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
						if ((newMemberName === null)
								&& (newMemberText === null)) {
							keyField = dimension.getKeyField();
							keyName = keyField.getName();
							newMemberName = inaStructure
									.getStringByName(keyName);
							textField = dimension.getTextField();
							textName = null;
							if (textField !== null) {
								textName = textField.getName();
							}
							newMemberText = inaStructure
									.getStringByName(textName);
						}
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(newMemberName)) {
							memberOperand = inaStructure
									.getStructureByName(sap.firefly.InAConstants.QY_MEMBER_OPERAND);
							if (memberOperand !== null) {
								isFilterOnMeasures = sap.firefly.XString
										.isEqual(
												memberOperand
														.getStringByName(sap.firefly.InAConstants.QY_ATTRIBUTE_NAME),
												sap.firefly.InAConstants.QY_MEASURES);
								isFilterEqual = sap.firefly.QInAConverter
										.lookupComparison(memberOperand
												.getStringByName(sap.firefly.InAConstants.QY_COMPARISON)) === sap.firefly.ComparisonOperator.EQUAL;
								if (isFilterOnMeasures && isFilterEqual) {
									newMemberName = memberOperand
											.getStringByName(sap.firefly.InAConstants.QY_VALUE);
								}
							}
						}
						member = modelComponent;
						if (member === null) {
							member = dimension
									.getStructureMember(newMemberName);
							if (member === null) {
								member = sap.firefly.QBasicMeasure
										._createBasicMeasure(context, dimension);
								member.setName(newMemberName);
								if ((newMemberText !== null)
										&& (member.getText() === null)) {
									member.setText(newMemberText);
								}
								member.initializeFieldValues();
							}
						} else {
							member.setDimension(dimension);
							member.setName(newMemberName);
							if ((newMemberText !== null)
									&& (member.getText() === null)) {
								member.setText(newMemberText);
							}
							member.initializeFieldValues();
						}
						if (dimension.getQueryModel()
								.supportsExceptionAggregationDimsFormulas()) {
							member.clearExceptionAggregationDimensions();
							member.setExceptionAggregationType(null);
							inaExceptionAggregationDimensions = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
							if (inaExceptionAggregationDimensions !== null) {
								size = inaExceptionAggregationDimensions.size();
								for (idx = 0; idx < size; idx++) {
									member
											.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions
													.getStringByIndex(idx));
								}
							}
							exceptionAggregation = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION);
							member
									.setExceptionAggregationType(sap.firefly.QInAConverter
											.lookupAggregationType(exceptionAggregation));
						} else {
							inaAggregationDimension = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION);
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(inaAggregationDimension)) {
								member
										.setAggregationDimensionName(inaAggregationDimension);
							}
						}
						sap.firefly.QInAMember.importQdMemberProperties(
								importer, member, inaStructure);
						importer.importExceptions(inaStructure, member);
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var basicMeasure = modelComponent;
						var dimension = basicMeasure.getDimension();
						var text;
						var memberOperandElement;
						var basicAggregationType;
						var basicAggregationDimensionName;
						var value;
						var measureSorting;
						if (dimension.getDimensionType() === sap.firefly.DimensionType.ACCOUNT) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_NAME,
									basicMeasure.getName());
							return inaStructure;
						}
						text = basicMeasure.getText();
						if (text !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_DESCRIPTION,
									text);
						}
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DIMENSION,
								dimension.getName());
						memberOperandElement = sap.firefly.PrStructure.create();
						memberOperandElement.setStringByName(
								sap.firefly.InAConstants.QY_ATTRIBUTE_NAME,
								sap.firefly.InAConstants.QY_MEASURES);
						inaStructure.setElementByName(
								sap.firefly.InAConstants.QY_MEMBER_OPERAND,
								memberOperandElement);
						basicAggregationType = basicMeasure
								.getAggregationType();
						if (basicAggregationType !== null) {
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_AGGREGATION,
									basicAggregationType.toString());
						}
						if (basicMeasure.getQueryModel()
								.supportsExceptionAggregationDimsFormulas() === false) {
							basicAggregationDimensionName = basicMeasure
									.getAggregationDimensionName();
							if (basicAggregationDimensionName !== null) {
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION,
												basicAggregationDimensionName);
							}
						}
						value = basicMeasure.getKeyFieldValue();
						sap.firefly.QInARepoMemberBasicMeasure.fillValue(
								exporter, memberOperandElement, value, value
										.getValueType(),
								sap.firefly.ComparisonOperator.EQUAL);
						if (exporter.m_supportsExtendedSort === false) {
							measureSorting = basicMeasure.getQueryModel()
									.getSortingManager().getMeasureSorting(
											basicMeasure, false);
							if (measureSorting !== null) {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_SORT_ORDER,
												sap.firefly.QInAConverter
														.lookupSortDirectionInA(measureSorting
																.getDirection()));
							} else {
								inaStructure
										.setIntegerByName(
												sap.firefly.InAConstants.QY_SORT_ORDER,
												sap.firefly.InAConstants.VA_SORTING_DEFAULT);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoMemberFormulaMeasure",
				sap.firefly.QInARepository,
				{
					$statics : {
						importQdFormula : function(importer, dimension,
								inaFormula, formulaItemx, context) {
							var inaFunction;
							var formulaItem;
							var functionName;
							var functionParameters;
							var newFormulaFunction;
							var paramSize;
							var paraIdx;
							var constPara;
							var formulaConstant;
							var value;
							var variableManager;
							var valueTypePara;
							var valueIsNull;
							var constUnit;
							var constCurrency;
							var memberPara;
							var formulaMember;
							var memberParaName;
							var attribute;
							var attributeName;
							var formulaAttribute;
							if (inaFormula === null) {
								return null;
							}
							inaFunction = inaFormula
									.getStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
							formulaItem = formulaItemx;
							if (inaFunction !== null) {
								functionName = inaFunction
										.getStringByName(sap.firefly.InAConstants.QY_NAME);
								functionParameters = inaFunction
										.getListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								newFormulaFunction = sap.firefly.QFactory2
										.newFormulaFunction(context);
								if (functionParameters !== null) {
									newFormulaFunction
											.setFunctionName(functionName);
									paramSize = functionParameters.size();
									for (paraIdx = 0; paraIdx < paramSize; paraIdx++) {
										sap.firefly.QInARepoMemberFormulaMeasure
												.importQdFormula(
														importer,
														dimension,
														functionParameters
																.getStructureByIndex(paraIdx),
														newFormulaFunction,
														context);
									}
								}
								newFormulaFunction
										.setSolveOrder(inaFormula
												.getIntegerByNameWithDefault(
														sap.firefly.InAConstants.QY_SOLVE_ORDER,
														0));
								if (formulaItem === null) {
									formulaItem = newFormulaFunction;
								} else {
									(formulaItem).add(newFormulaFunction);
								}
							} else {
								constPara = inaFormula
										.getStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
								if (constPara !== null) {
									formulaConstant = sap.firefly.QFactory2
											.newFormulaConstant(context);
									if (sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE,
													constPara
															.getStringByName(sap.firefly.InAConstants.QY_VALUE_IS))) {
										value = constPara
												.getStringByName(sap.firefly.InAConstants.QY_VALUE);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(value)) {
											variableManager = dimension
													.getQueryModel()
													.getVariableManager();
											formulaConstant
													.setVariable(variableManager
															.getVariables()
															.getByKey(value));
										}
										if (formulaItem === null) {
											formulaItem = formulaConstant;
										} else {
											(formulaItem).add(formulaConstant);
										}
									} else {
										valueTypePara = constPara
												.getStringByName(sap.firefly.InAConstants.QY_VALUE_TYPE);
										valueIsNull = (constPara
												.hasValueByName(sap.firefly.InAConstants.QY_VALUE) === false)
												|| (constPara
														.getElementByName(
																sap.firefly.InAConstants.QY_VALUE)
														.getType() === sap.firefly.PrElementType.THE_NULL);
										if (sap.firefly.XString
												.isEqual(
														valueTypePara,
														sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER)) {
											if (valueIsNull) {
												formulaConstant
														.setNullValue(sap.firefly.XValueType.DOUBLE);
											} else {
												formulaConstant
														.setDoubleValue(constPara
																.getDoubleByName(sap.firefly.InAConstants.QY_VALUE));
											}
										} else {
											if (sap.firefly.XString
													.isEqual(
															valueTypePara,
															sap.firefly.InAConstants.VA_VALUE_TYPE_STRING)) {
												if (valueIsNull) {
													formulaConstant
															.setNullValue(sap.firefly.XValueType.STRING);
												} else {
													formulaConstant
															.setStringValue(constPara
																	.getStringByName(sap.firefly.InAConstants.QY_VALUE));
												}
											} else {
												if (sap.firefly.XString
														.isEqual(
																valueTypePara,
																sap.firefly.InAConstants.VA_VALUE_TYPE_BOOL)) {
													if (valueIsNull) {
														formulaConstant
																.setNullValue(sap.firefly.XValueType.BOOLEAN);
													} else {
														formulaConstant
																.setBooleanValue(constPara
																		.getBooleanByName(sap.firefly.InAConstants.QY_VALUE));
													}
												} else {
													if (sap.firefly.XString
															.isEqual(
																	valueTypePara,
																	sap.firefly.InAConstants.VA_VALUE_TYPE_DATE_TIME)) {
														if (valueIsNull) {
															formulaConstant
																	.setNullValue(sap.firefly.XValueType.DATE_TIME);
														} else {
															formulaConstant
																	.setDateTimeValue(sap.firefly.XDateTime
																			.createDateTimeFromStringWithFlag(
																					constPara
																							.getStringByName(sap.firefly.InAConstants.QY_VALUE),
																					false));
														}
													} else {
														if (sap.firefly.XString
																.isEqual(
																		valueTypePara,
																		sap.firefly.InAConstants.VA_VALUE_TYPE_DATE)) {
															if (valueIsNull) {
																formulaConstant
																		.setNullValue(sap.firefly.XValueType.DATE);
															} else {
																formulaConstant
																		.setDateValue(sap.firefly.XDate
																				.createDateFromStringWithFlag(
																						constPara
																								.getStringByName(sap.firefly.InAConstants.QY_VALUE),
																						false));
															}
														} else {
															importer
																	.addError(
																			sap.firefly.ErrorCodes.INVALID_TOKEN,
																			"Constant value type is not supported");
															return null;
														}
													}
												}
											}
										}
										constUnit = constPara
												.getStringByName(sap.firefly.InAConstants.QY_UNIT);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(constUnit)) {
											formulaConstant.setUnit(constUnit);
										}
										constCurrency = constPara
												.getStringByName(sap.firefly.InAConstants.QY_CURRENCY);
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(constCurrency)) {
											formulaConstant
													.setCurrency(constCurrency);
										}
										if (formulaItem === null) {
											formulaItem = formulaConstant;
										} else {
											(formulaItem).add(formulaConstant);
										}
									}
								} else {
									memberPara = inaFormula
											.getStructureByName(sap.firefly.InAConstants.QY_MEMBER);
									if (memberPara !== null) {
										formulaMember = sap.firefly.QFactory2
												.newFormulaMember(context);
										memberParaName = memberPara
												.getStringByName(sap.firefly.InAConstants.QY_NAME);
										formulaMember
												.setMemberName(memberParaName);
										formulaMember
												.setDimensionName(memberPara
														.getStringByName(sap.firefly.InAConstants.QY_DIMENSION));
										if (formulaItem === null) {
											formulaItem = formulaMember;
										} else {
											(formulaItem).add(formulaMember);
										}
									} else {
										attribute = inaFormula
												.getStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_VALUE);
										if (attribute !== null) {
											attributeName = attribute
													.getStringByName(sap.firefly.InAConstants.QY_NAME);
											formulaAttribute = sap.firefly.QFactory2
													.newFormulaAttributeWithName(
															context,
															attributeName);
											if (formulaItem === null) {
												formulaItem = formulaAttribute;
											} else {
												(formulaItem)
														.add(formulaAttribute);
											}
										}
									}
								}
							}
							return formulaItem;
						},
						buildFormula : function(exporter, formulaMeasure,
								inaContainer) {
							var componentType;
							var fic;
							var constStructure;
							var ficUnit;
							var ficCurrency;
							var fio;
							var opStructure;
							var parameters;
							var fif;
							var funcStructure;
							var funcParameters;
							var functionSize;
							var i;
							var solveOrder;
							var fim;
							var memberStructure;
							var memberVariable;
							var fia;
							var inaAttributeValue;
							if (formulaMeasure !== null) {
								componentType = formulaMeasure
										.getComponentType();
								if (componentType === sap.firefly.OlapComponentType.FORMULA_CONSTANT) {
									fic = formulaMeasure;
									constStructure = inaContainer
											.setNewStructureByName(sap.firefly.InAConstants.QY_CONSTANT);
									ficUnit = fic.getUnit();
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(ficUnit)) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_UNIT,
														ficUnit);
									}
									ficCurrency = fic.getCurrency();
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(ficCurrency)) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_CURRENCY,
														ficCurrency);
									}
									sap.firefly.QInARepoMemberFormulaMeasure
											.setFormulaConstantValue(
													constStructure, fic);
								} else {
									if (componentType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
										fio = formulaMeasure;
										opStructure = inaContainer
												.setNewStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
										opStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_NAME,
														fio
																.getOperator()
																.getDisplayString());
										parameters = opStructure
												.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
										sap.firefly.QInARepoMemberFormulaMeasure
												.buildFormula(
														exporter,
														fio.getLeftSide(),
														parameters
																.addNewStructure());
										sap.firefly.QInARepoMemberFormulaMeasure
												.buildFormula(
														exporter,
														fio.getRightSide(),
														parameters
																.addNewStructure());
									} else {
										if (componentType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
											fif = formulaMeasure;
											funcStructure = inaContainer
													.setNewStructureByName(sap.firefly.InAConstants.QY_FUNCTION);
											funcStructure
													.setStringByName(
															sap.firefly.InAConstants.QY_NAME,
															fif
																	.getFunctionName());
											funcParameters = funcStructure
													.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
											functionSize = fif.size();
											for (i = 0; i < functionSize; i++) {
												sap.firefly.QInARepoMemberFormulaMeasure
														.buildFormula(
																exporter,
																fif.get(i),
																funcParameters
																		.addNewStructure());
											}
											solveOrder = fif.getSolveOrder();
											if (solveOrder !== 0) {
												inaContainer
														.setIntegerByName(
																sap.firefly.InAConstants.QY_SOLVE_ORDER,
																solveOrder);
											}
										} else {
											if (componentType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
												fim = formulaMeasure;
												memberStructure = inaContainer
														.setNewStructureByName(sap.firefly.InAConstants.QY_MEMBER);
												memberVariable = fim
														.getVariable();
												if (memberVariable !== null) {
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	memberVariable
																			.getName());
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME_IS,
																	sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE);
												} else {
													memberStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	fim
																			.getMemberName());
													memberStructure
															.setStringByNameNotNull(
																	sap.firefly.InAConstants.QY_DIMENSION,
																	fim
																			.getDimensionName());
												}
											} else {
												if (componentType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
													fia = formulaMeasure;
													inaAttributeValue = inaContainer
															.setNewStructureByName(sap.firefly.InAConstants.QY_ATTRIBUTE_VALUE);
													inaAttributeValue
															.setStringByName(
																	sap.firefly.InAConstants.QY_NAME,
																	fia
																			.getFieldName());
												}
											}
										}
									}
								}
							}
						},
						setFormulaConstantValue : function(constStructure, fic) {
							var valueIsNull = fic.getValue() === null;
							var variable = fic.getVariable();
							var valueType;
							var dateValue;
							var dateTimeValue;
							var timeSpanValue;
							if (valueIsNull && (variable === null)) {
								constStructure
										.setNullByName(sap.firefly.InAConstants.QY_VALUE);
							}
							valueType = fic.getValueType();
							if (valueType === sap.firefly.XValueType.INTEGER) {
								constStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_VALUE_TYPE,
												sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
								if (valueIsNull === false) {
									constStructure.setIntegerByName(
											sap.firefly.InAConstants.QY_VALUE,
											fic.getIntegerValue());
								}
							} else {
								if ((valueType === sap.firefly.XValueType.DOUBLE)
										|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
									constStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_VALUE_TYPE,
													sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
									if (valueIsNull === false) {
										constStructure
												.setDoubleByName(
														sap.firefly.InAConstants.QY_VALUE,
														fic.getDoubleValue());
									}
								} else {
									if (valueType === sap.firefly.XValueType.LONG) {
										constStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_VALUE_TYPE,
														sap.firefly.InAConstants.VA_VALUE_TYPE_NUMBER);
										if (valueIsNull === false) {
											constStructure
													.setLongByName(
															sap.firefly.InAConstants.QY_VALUE,
															fic.getLongValue());
										}
									} else {
										if (valueType === sap.firefly.XValueType.STRING) {
											constStructure
													.setStringByName(
															sap.firefly.InAConstants.QY_VALUE_TYPE,
															sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
											if (valueIsNull === false) {
												constStructure
														.setStringByName(
																sap.firefly.InAConstants.QY_VALUE,
																fic
																		.getStringValue());
											}
										} else {
											if (valueType === sap.firefly.XValueType.BOOLEAN) {
												constStructure
														.setStringByName(
																sap.firefly.InAConstants.QY_VALUE_TYPE,
																sap.firefly.InAConstants.VA_VALUE_TYPE_BOOL);
												if (valueIsNull === false) {
													constStructure
															.setBooleanByName(
																	sap.firefly.InAConstants.QY_VALUE,
																	fic
																			.getBooleanValue());
												}
											} else {
												if (valueType === sap.firefly.XValueType.DATE) {
													constStructure
															.setStringByName(
																	sap.firefly.InAConstants.QY_VALUE_TYPE,
																	sap.firefly.InAConstants.VA_VALUE_TYPE_DATE);
													if (valueIsNull === false) {
														dateValue = fic
																.getDateValue();
														constStructure
																.setStringByName(
																		sap.firefly.InAConstants.QY_VALUE,
																		dateValue
																				.toString());
													}
												} else {
													if (valueType === sap.firefly.XValueType.DATE_TIME) {
														constStructure
																.setStringByName(
																		sap.firefly.InAConstants.QY_VALUE_TYPE,
																		sap.firefly.InAConstants.VA_VALUE_TYPE_DATE_TIME);
														if (valueIsNull === false) {
															dateTimeValue = fic
																	.getDateTimeValue();
															constStructure
																	.setStringByName(
																			sap.firefly.InAConstants.QY_VALUE,
																			dateTimeValue
																					.toString());
														}
													} else {
														if (valueType
																.isSpatial()) {
															constStructure
																	.setStringByName(
																			sap.firefly.InAConstants.QY_VALUE_TYPE,
																			sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
															if (valueIsNull === false) {
																constStructure
																		.setStringByName(
																				sap.firefly.InAConstants.QY_VALUE,
																				fic
																						.getGeometry()
																						.toWKT());
															}
														} else {
															if (valueType === sap.firefly.XValueType.TIMESPAN) {
																constStructure
																		.setStringByName(
																				sap.firefly.InAConstants.QY_VALUE_TYPE,
																				sap.firefly.InAConstants.VA_VALUE_TYPE_STRING);
																if (valueIsNull === false) {
																	timeSpanValue = fic
																			.getTimeSpanValue();
																	constStructure
																			.setStringByName(
																					sap.firefly.InAConstants.QY_VALUE,
																					timeSpanValue
																							.toString());
																}
															} else {
																if (valueType === sap.firefly.XValueType.VARIABLE) {
																	if (variable !== null) {
																		constStructure
																				.setStringByName(
																						sap.firefly.InAConstants.QY_VALUE,
																						variable
																								.getName());
																	}
																	constStructure
																			.setStringByName(
																					sap.firefly.InAConstants.QY_VALUE_IS,
																					sap.firefly.InAConstants.VA_VALUE_TYPE_VARIABLE);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					getComponentType : function() {
						return sap.firefly.MemberType.FORMULA;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						var formulaMeasure = sap.firefly.QFormulaMeasure
								._createFormulaMeasure(context, context
										.getQueryModel(), null);
						formulaMeasure.setParent(parentComponent);
						return formulaMeasure;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = parentComponent;
						var queryModel = context.getQueryModel();
						var newMemberName;
						var newMemberText;
						var keyField;
						var keyName;
						var textField;
						var textName;
						var member;
						var inaFormula;
						var importFormula;
						var calculateBeforeAggregation;
						if (dimension === null) {
							dimension = queryModel.getMeasureDimension();
						}
						newMemberName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						newMemberText = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
						if ((newMemberName === null)
								&& (newMemberText === null)) {
							if (dimension !== null) {
								keyField = dimension.getKeyField();
								keyName = keyField.getName();
								newMemberName = inaStructure
										.getStringByName(keyName);
								textField = dimension.getTextField();
								textName = null;
								if (textField !== null) {
									textName = textField.getName();
								}
								newMemberText = inaStructure
										.getStringByName(textName);
							}
						}
						member = modelComponent;
						if (member === null) {
							member = sap.firefly.QFormulaMeasure
									._createFormulaMeasure(context, queryModel,
											dimension);
						} else {
							member.setDimension(dimension);
						}
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(newMemberName)
								&& sap.firefly.XStringUtils
										.isNullOrEmpty(newMemberText)) {
							member
									.setName(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_NAME));
							member
									.setText(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION));
						} else {
							member.setName(newMemberName);
							member.setText(newMemberText);
						}
						inaFormula = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_FORMULA);
						importFormula = sap.firefly.QInARepoMemberFormulaMeasure
								.importQdFormula(importer, dimension,
										inaFormula, null, context);
						sap.firefly.QInAMember.importQdMemberProperties(
								importer, member, inaStructure);
						importer.importExceptions(inaStructure, member);
						member.setFormula(importFormula);
						if (member.supportsCalculatedBeforeAggregation()) {
							calculateBeforeAggregation = sap.firefly.XString
									.isEqual(
											sap.firefly.InAConstants.VA_EXECUTION_STEP_CALCULATION_BEFORE_AGGREGATION,
											inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_EXECUTION_STEP));
							member
									.setIsCalculatedBeforeAggregation(calculateBeforeAggregation);
						}
						return member;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var formulaMeasure = modelComponent;
						var inaFormula;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								formulaMeasure.getName());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DESCRIPTION,
								formulaMeasure.getText());
						inaFormula = sap.firefly.PrStructure.create();
						sap.firefly.QInARepoMemberFormulaMeasure.buildFormula(
								exporter, formulaMeasure.getFormula(),
								inaFormula);
						inaStructure
								.setElementByName(
										sap.firefly.InAConstants.QY_FORMULA,
										inaFormula);
						if (formulaMeasure
								.supportsCalculatedBeforeAggregation()
								&& formulaMeasure
										.isCalculatedBeforeAggregation()) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_EXECUTION_STEP,
											sap.firefly.InAConstants.VA_EXECUTION_STEP_CALCULATION_BEFORE_AGGREGATION);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoMembersAll",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.MEMBERS;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var dimension = modelComponent;
						var inaMemberList;
						var structureLayout;
						var len;
						var iMember;
						var inaMember;
						var member;
						var name;
						var member2;
						if (dimension.supportsCustomMembers()) {
							dimension.removeCustomMembers();
						}
						inaMemberList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_MEMBERS_REPO);
						if (inaMemberList === null) {
							return null;
						}
						structureLayout = dimension.getStructureLayout();
						if (structureLayout !== null) {
							dimension.removeCustomMembers();
							structureLayout.clear();
							len = inaMemberList.size();
							for (iMember = 0; iMember < len; iMember++) {
								inaMember = inaMemberList
										.getStructureByIndex(iMember);
								member = importer.importStructureMember(
										dimension, inaMember, context);
								if (member !== null) {
									name = member.getName();
									member2 = dimension
											.getStructureMember(name);
									if (member2 !== null) {
										if (member2 !== member) {
											throw sap.firefly.XException
													.createIllegalStateException("Internal error: New member with same name not allowed");
										}
										structureLayout.removeElement(member2);
										structureLayout.add(member2);
									} else {
										dimension.addMeasure(member);
									}
								}
							}
						}
						return dimension;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimension = modelComponent;
						var allStructureMembers = dimension
								.getStructureLayout();
						var membersList;
						var len;
						var i;
						var structureMember;
						var inaMember;
						var type;
						if (allStructureMembers !== null) {
							if ((dimension.supportsBasicStructureMembers() === false)
									&& allStructureMembers.isEmpty()) {
								return null;
							}
							membersList = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_MEMBERS_REPO);
							len = allStructureMembers.size();
							for (i = 0; i < len; i++) {
								structureMember = allStructureMembers.get(i);
								inaMember = exporter
										.exportStructureMember(structureMember);
								type = structureMember.getMemberType();
								if ((type === sap.firefly.MemberType.RESTRICTED_MEASURE)
										|| (type === sap.firefly.MemberType.FORMULA)) {
									inaMember
											.setStringByName(
													sap.firefly.InAConstants.QY_MEMBER_TYPE,
													sap.firefly.QInAConverter
															.lookupMeasureStructureMemberTypeIna(type));
								}
								membersList.add(inaMember);
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoSort",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.SORT_MANAGER;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_SORT_REPO;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var inaList = inaStructure
								.getListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						var qSortingManager = modelComponent;
						var sortingOperations = qSortingManager
								.getSortingOperations();
						var sortIdx;
						var inaSort;
						var qSortingOp;
						sortingOperations.clear();
						if (inaList !== null) {
							for (sortIdx = 0; sortIdx < inaList.size(); sortIdx++) {
								inaSort = inaList.getStructureByIndex(sortIdx);
								qSortingOp = importer
										.importComponent(
												sap.firefly.OlapComponentType.GENERIC_SORTING,
												inaSort, null, qSortingManager,
												context);
								sortingOperations.add(qSortingOp);
							}
						}
						return qSortingManager;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qSortingManager = modelComponent;
						var inaSortOps = inaStructure
								.setNewListByName(sap.firefly.InAConstants.QY_ELEMENTS);
						var sortingOperations = qSortingManager
								.getSortingOperations();
						var i;
						var qSortingOp;
						var inaSortOp;
						for (i = 0; i < sortingOperations.size(); i++) {
							qSortingOp = sortingOperations.get(i);
							inaSortOp = exporter.exportComponent(null,
									qSortingOp, null, flags);
							inaSortOps.add(inaSortOp);
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoSortOperation",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.GENERIC_SORTING;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var sortingManager = parentComponent;
						var sortingOp = modelComponent;
						var queryModel = context.getQueryModel();
						var inaSortType = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_SORT_TYPE);
						var sortType = sap.firefly.QInAConverter
								.lookupSortType(inaSortType);
						var inaFieldName;
						var field;
						var inaCollator;
						var measureName;
						var measureStructure;
						var measure;
						var structureName;
						var structure;
						var inaPath;
						var path;
						var idxStruct;
						var pathElement;
						var inaFieldName2;
						var inaValue;
						var field2;
						var inaHierarchyName;
						var dimElement;
						var dimensionName;
						var dimension;
						var dimensionSorting;
						var inaDirection;
						var sortDirection;
						var x;
						var dimName;
						var dimension2;
						if (sortType === sap.firefly.SortType.FIELD) {
							inaFieldName = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
							if (inaFieldName !== null) {
								field = queryModel.getFieldByName(inaFieldName);
								if ((field !== null)
										&& sortingManager
												.supportsFieldSorting(field)) {
									sortingOp = sortingManager
											.newFieldSorting(field);
									if (sortingManager.getQueryModel()
											.supportsLocaleSorting()) {
										inaCollator = inaStructure
												.getStructureByName(sap.firefly.InAConstants.QY_COLLATOR);
										if (inaCollator !== null) {
											(sortingOp)
													.setIsCaseSensitive(inaCollator
															.getBooleanByNameWithDefault(
																	sap.firefly.InAConstants.QY_CASE_SENSITIVE,
																	false));
											(sortingOp)
													.setLocale(inaCollator
															.getStringByNameWithDefault(
																	sap.firefly.InAConstants.QY_LOCALE,
																	null));
										}
									}
								}
							}
						} else {
							if (sortType === sap.firefly.SortType.MEASURE) {
								measureName = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_MEASURE_NAME);
								if (measureName !== null) {
									measureStructure = queryModel
											.getMeasureDimension();
									measure = measureStructure
											.getStructureMember(measureName);
									if ((measure !== null)
											&& sortingManager
													.supportsMeasureSorting()) {
										sortingOp = sortingManager
												.newMeasureSorting(measure);
									}
									structureName = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_STRUCTURE_NAME);
									structure = queryModel
											.getNonMeasureDimension();
									if ((structureName !== null)
											&& (structure !== null)) {
										(sortingOp)
												.setStructure(structure
														.getStructureMember(structureName));
									}
								}
							} else {
								if ((sortType === sap.firefly.SortType.DATA_CELL_VALUE)
										|| ((sortType === sap.firefly.SortType.COMPLEX) && (sortingManager
												.supportsComplexSorting() || sortingManager
												.supportsDataCellSorting()))) {
									inaPath = inaStructure
											.getListByName(sap.firefly.InAConstants.QY_SORT_TUPLE);
									path = sap.firefly.XList.create();
									for (idxStruct = 0; idxStruct < inaPath
											.size(); idxStruct++) {
										pathElement = inaPath
												.getStructureByIndex(idxStruct);
										if (pathElement !== null) {
											inaFieldName2 = pathElement
													.getStringByName(sap.firefly.InAConstants.QY_FIELD_NAME);
											inaValue = pathElement
													.getStringByName(sap.firefly.InAConstants.QY_VALUE);
											if ((inaFieldName2 !== null)
													&& (inaValue !== null)) {
												field2 = queryModel
														.getFieldByName(inaFieldName2);
												if (field2 !== null) {
													inaHierarchyName = pathElement
															.getStringByName(sap.firefly.InAConstants.QY_HIERARCHY);
													dimElement = sap.firefly.QSelectValue
															._createDimensionElement2(
																	context,
																	field2,
																	inaHierarchyName,
																	inaValue);
													path.add(dimElement);
												} else {
													path = null;
													break;
												}
											} else {
												path = null;
												break;
											}
										} else {
											path = null;
											break;
										}
									}
									if (path !== null) {
										if (sortType === sap.firefly.SortType.DATA_CELL_VALUE) {
											sortingOp = sortingManager
													.newDataCellSorting(path);
										} else {
											if (sortType === sap.firefly.SortType.COMPLEX) {
												sortingOp = sortingManager
														.newComplexSorting(path);
											}
										}
									}
								} else {
									dimensionName = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_DIMENSION);
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(dimensionName)) {
										dimension = queryModel
												.getDimensionByName(dimensionName);
										if (sortingManager
												.supportsDimensionSorting(
														dimension, sortType)) {
											dimensionSorting = sortingManager
													.newDimensionSorting(dimension);
											sortingOp = dimensionSorting;
											if (sortType === sap.firefly.SortType.FILTER) {
												dimensionSorting
														.setSortByFilter();
											} else {
												if (sortType === sap.firefly.SortType.MEMBER_KEY) {
													dimensionSorting
															.setSortByKey();
												} else {
													if (sortType === sap.firefly.SortType.MEMBER_TEXT) {
														dimensionSorting
																.setSortByText();
													} else {
														if (sortType === sap.firefly.SortType.HIERARCHY) {
															dimensionSorting
																	.setSortByHierarchy();
														} else {
															sortingOp = null;
														}
													}
												}
											}
										}
									}
								}
							}
						}
						if (sortingOp !== null) {
							inaDirection = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_DIRECTION);
							if (inaDirection !== null) {
								sortDirection = sap.firefly.QInAConverter
										.lookupSortDirection2(inaDirection);
								if (sortDirection !== null) {
									sortingOp.setDirection(sortDirection);
								}
							}
							if ((sortingOp.supportsPreserveGrouping())
									&& (sortingOp.supportsBreakGrouping())) {
								x = inaStructure
										.getBooleanByNameWithDefault(
												sap.firefly.InAConstants.QY_PRESERVE_GROUPING,
												false);
								sortingOp.setPreserveGrouping(x);
							}
							if (sortingOp.supportsDimension()) {
								dimName = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_DIMENSION);
								if (dimName !== null) {
									dimension2 = queryModel
											.getDimensionByName(dimName);
									sortingOp.setDimension(dimension2);
								} else {
									sortingOp.setDimension(null);
								}
							}
						}
						return sortingOp;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var qSortingOp = modelComponent;
						var sortingType = qSortingOp.getSortingType();
						var inaSortType = sap.firefly.QInAConverter
								.lookupSortTypeInA(sortingType);
						var direction;
						var fieldSorting;
						var inaCollator;
						var measureSorting;
						var measureName;
						var structureMember;
						var qPathOperation;
						var inaPath;
						var elementPath;
						var size;
						var i;
						var dimElement;
						var inaPathElement;
						var selectHierarchyName;
						var dimension;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_SORT_TYPE,
								inaSortType);
						direction = qSortingOp.getDirection();
						if (direction !== sap.firefly.XSortDirection.DEFAULT_VALUE) {
							inaStructure
									.setStringByName(
											sap.firefly.InAConstants.QY_DIRECTION,
											sap.firefly.QInAConverter
													.lookupSortDirectionInA2(direction));
						}
						if ((qSortingOp.supportsPreserveGrouping())
								&& (qSortingOp.supportsBreakGrouping())) {
							inaStructure
									.setBooleanByName(
											sap.firefly.InAConstants.QY_PRESERVE_GROUPING,
											qSortingOp
													.isPreserveGroupingEnabled());
						}
						if (sortingType === sap.firefly.SortType.FIELD) {
							fieldSorting = qSortingOp;
							inaStructure.setStringByName(
									sap.firefly.InAConstants.QY_FIELD_NAME,
									fieldSorting.getField().getName());
							if (qSortingOp.getQueryModel()
									.supportsLocaleSorting()) {
								inaCollator = sap.firefly.PrStructure.create();
								inaCollator
										.setBooleanByName(
												sap.firefly.InAConstants.QY_CASE_SENSITIVE,
												fieldSorting.isCaseSensitive());
								inaCollator.setStringByName(
										sap.firefly.InAConstants.QY_LOCALE,
										fieldSorting.getLocale());
								inaStructure.setElementByName(
										sap.firefly.InAConstants.QY_COLLATOR,
										inaCollator);
							}
						} else {
							if (sortingType === sap.firefly.SortType.MEASURE) {
								measureSorting = qSortingOp;
								measureName = measureSorting.getMeasure()
										.getName();
								inaStructure
										.setStringByName(
												sap.firefly.InAConstants.QY_MEASURE_NAME,
												measureName);
								structureMember = measureSorting.getStructure();
								if (structureMember !== null) {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_STRUCTURE_NAME,
													structureMember.getName());
								}
							} else {
								if ((sortingType === sap.firefly.SortType.DATA_CELL_VALUE)
										|| (sortingType === sap.firefly.SortType.COMPLEX)) {
									qPathOperation = qSortingOp;
									inaPath = inaStructure
											.setNewListByName(sap.firefly.InAConstants.QY_SORT_TUPLE);
									elementPath = qPathOperation
											.getElementPath();
									size = elementPath.size();
									for (i = 0; i < size; i++) {
										dimElement = elementPath.get(i);
										inaPathElement = inaPath
												.addNewStructure();
										inaPathElement
												.setStringByName(
														sap.firefly.InAConstants.QY_FIELD_NAME,
														dimElement
																.getSelectField()
																.getName());
										inaPathElement
												.setStringByName(
														sap.firefly.InAConstants.QY_VALUE,
														dimElement
																.getSelectValue());
										selectHierarchyName = dimElement
												.getSelectHierarchyName();
										if (sap.firefly.XStringUtils
												.isNotNullAndNotEmpty(selectHierarchyName)) {
											inaPathElement
													.setStringByName(
															sap.firefly.InAConstants.QY_HIERARCHY,
															selectHierarchyName);
										}
									}
								}
							}
						}
						if (qSortingOp.supportsDimension()) {
							dimension = qSortingOp.getDimension();
							if (dimension !== null) {
								inaStructure.setStringByName(
										sap.firefly.InAConstants.QY_DIMENSION,
										dimension.getName());
							}
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoTotals",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.OlapComponentType.TOTALS;
					},
					getTagName : function() {
						return sap.firefly.InAConstants.QY_RESULT_STRUCTURE_REPO;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var rc = modelComponent;
						var rsAlignment = null;
						var inaAlignment;
						var inaResultStructure;
						var advancedResultStructure;
						var i;
						var inaElement;
						var inaResult;
						var result;
						var inaVisibility;
						var resultSetVisibility;
						var inaVisibility2;
						var inaVisibilitySettings;
						var k;
						var inaTriplet;
						var alignment;
						var element;
						var cvisibility;
						var visibility;
						if (rc.supportsTotals()) {
							if (rc.supportsResultAlignment()) {
								inaAlignment = inaStructure
										.getStringByName(sap.firefly.InAConstants.QY_RS_ALIGNMENT);
								if (sap.firefly.XString
										.isEqual(
												sap.firefly.InAConstants.VA_RS_ALIGNMENT_ON_DEFAULT,
												inaAlignment)) {
									rc
											.restoreTotalsAlignment(
													sap.firefly.RestoreAction.DEFAULT_VALUE,
													false);
								} else {
									rsAlignment = sap.firefly.QInAConverter
											.lookupAlignment(inaAlignment);
									rc.setResultAlignmentBase(rsAlignment,
											false);
								}
							}
							if (rsAlignment === sap.firefly.ResultAlignment.STRUCTURE) {
								inaResultStructure = inaStructure
										.getListByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE);
								if (inaResultStructure === null) {
									rc
											.restoreTotalsStructure(
													sap.firefly.RestoreAction.DEFAULT_VALUE,
													false);
								} else {
									advancedResultStructure = rc
											.getAdvancedResultStructure();
									advancedResultStructure.clear();
									for (i = 0; i < inaResultStructure.size(); i++) {
										inaElement = inaResultStructure
												.getStructureByIndex(i);
										inaResult = inaElement
												.getStringByName(sap.firefly.InAConstants.QY_RESULT);
										result = sap.firefly.QInAConverter
												.lookupResultStructureElement(inaResult);
										inaVisibility = inaElement
												.getStringByName(sap.firefly.InAConstants.QY_VISIBILITY);
										resultSetVisibility = sap.firefly.QInAConverter
												.lookupResultSetVisibility(inaVisibility);
										advancedResultStructure
												.addWithVisibility(result,
														resultSetVisibility);
									}
								}
							} else {
								if (rc.supportsResultVisibility()) {
									inaVisibility2 = inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_VISIBILITY);
									if (sap.firefly.XString
											.isEqual(
													sap.firefly.InAConstants.VA_VISIBILITY_ON_DEFAULT,
													inaVisibility2)) {
										rc
												.restoreTotalsVisibility(
														sap.firefly.RestoreAction.DEFAULT_VALUE,
														false);
									} else {
										inaVisibilitySettings = inaStructure
												.getListByName(sap.firefly.InAConstants.QY_VISIBILITY_SETTINGS);
										if (inaVisibilitySettings !== null) {
											rc.clearResultVisibilitySettings();
											for (k = 0; k < inaVisibilitySettings
													.size(); k++) {
												inaTriplet = inaVisibilitySettings
														.getStructureByIndex(k);
												alignment = sap.firefly.QInAConverter
														.lookupAlignment(inaTriplet
																.getStringByName(sap.firefly.InAConstants.QY_RS_ALIGNMENT));
												element = sap.firefly.QInAConverter
														.lookupResultStructureElement(inaTriplet
																.getStringByName(sap.firefly.InAConstants.QY_RESULT));
												cvisibility = sap.firefly.QInAConverter
														.lookupResultSetVisibility(inaTriplet
																.getStringByName(sap.firefly.InAConstants.QY_VISIBILITY));
												rc
														.setResultVisibilityByElementAndAlignment(
																alignment,
																element,
																cvisibility);
											}
										} else {
											visibility = sap.firefly.QInAConverter
													.lookupResultSetVisibility(inaVisibility2);
											rc.setResultVisibility(visibility);
										}
									}
								}
							}
						}
						return rc;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var rc = modelComponent;
						var resultAlignment;
						var structure;
						var resultStructure;
						var i;
						var item;
						var resultStructureLine;
						var element;
						var visibility;
						var inaVisibility;
						var settings;
						var inaVisibilitySettings;
						var triplet;
						var inaTriplet;
						if (rc.supportsTotals()) {
							resultAlignment = null;
							if (rc.supportsResultAlignment()) {
								if (rc.isTotalsAlignmentOnDefault() === false) {
									resultAlignment = rc.getResultAlignment();
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_RS_ALIGNMENT,
													sap.firefly.QInAConverter
															.lookupAlignmentInA(resultAlignment));
								} else {
									inaStructure
											.setStringByName(
													sap.firefly.InAConstants.QY_RS_ALIGNMENT,
													sap.firefly.InAConstants.VA_RS_ALIGNMENT_ON_DEFAULT);
								}
							}
							if (resultAlignment === sap.firefly.ResultAlignment.STRUCTURE) {
								structure = inaStructure
										.setNewListByName(sap.firefly.InAConstants.QY_RESULT_STRUCTURE);
								resultStructure = rc.getTotalsStructure();
								if (resultStructure !== null) {
									for (i = 0; i < resultStructure.size(); i++) {
										item = resultStructure.get(i);
										resultStructureLine = structure
												.addNewStructure();
										element = item
												.getResultStructureElement();
										resultStructureLine
												.setStringByName(
														sap.firefly.InAConstants.QY_RESULT,
														sap.firefly.QInAConverter
																.lookupResultStructureElementInA(element));
										visibility = item.getResultVisibility();
										resultStructureLine
												.setStringByName(
														sap.firefly.InAConstants.QY_VISIBILITY,
														sap.firefly.QInAConverter
																.lookupResultSetVisibilityInA(visibility));
									}
								}
							} else {
								if (rc.supportsResultVisibility()) {
									if (rc.isTotalsVisibilityOnDefault() === false) {
										inaVisibility = sap.firefly.QInAConverter
												.lookupResultSetVisibilityInA(rc
														.getResultVisibility());
										inaStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_VISIBILITY,
														inaVisibility);
										settings = rc
												.getResultVisibilitySettings();
										if (settings !== null) {
											inaVisibilitySettings = inaStructure
													.setNewListByName(sap.firefly.InAConstants.QY_VISIBILITY_SETTINGS);
											while (settings.hasNext()) {
												triplet = settings.next();
												inaTriplet = inaVisibilitySettings
														.addNewStructure();
												inaTriplet
														.setStringByName(
																sap.firefly.InAConstants.QY_RS_ALIGNMENT,
																sap.firefly.QInAConverter
																		.lookupAlignmentInA(triplet
																				.getAlignment()));
												inaTriplet
														.setStringByName(
																sap.firefly.InAConstants.QY_RESULT,
																sap.firefly.QInAConverter
																		.lookupResultStructureElementInA(triplet
																				.getElement()));
												inaTriplet
														.setStringByName(
																sap.firefly.InAConstants.QY_VISIBILITY,
																sap.firefly.QInAConverter
																		.lookupResultSetVisibilityInA(triplet
																				.getVisibility()));
											}
											settings.releaseObject();
										}
									} else {
										inaStructure
												.setStringByName(
														sap.firefly.InAConstants.QY_VISIBILITY,
														sap.firefly.InAConstants.VA_VISIBILITY_ON_DEFAULT);
									}
								}
							}
							return inaStructure;
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoVarDimMember",
				sap.firefly.QInARepository,
				{
					getComponentType : function() {
						return sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var memberVariable = modelComponent;
						var inaFilterElement = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
						var filterElement;
						var inaDefaultFilterElement;
						var defaultFilterElement;
						if (inaFilterElement !== null) {
							filterElement = importer.importComponent(null,
									inaFilterElement, null, memberVariable,
									context);
							memberVariable
									.setSelectionCartesianList(filterElement);
						} else {
							memberVariable.setSelectionCartesianList(null);
						}
						inaDefaultFilterElement = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_DEFAULT_SELECTION);
						if (inaDefaultFilterElement !== null) {
							defaultFilterElement = importer.importComponent(
									null, inaDefaultFilterElement, null,
									memberVariable, context);
							memberVariable
									.setDefaultSelectionCartesianList(defaultFilterElement);
						}
						return memberVariable;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var dimensionMemberVariable = modelComponent;
						var memberSelection;
						var defaultMemberSelection;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								dimensionMemberVariable.getName());
						if (dimensionMemberVariable.hasMemberSelection()) {
							memberSelection = dimensionMemberVariable
									.getMemberSelection();
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_SELECTION,
									exporter.exportComponent(null,
											memberSelection, null, flags));
						}
						if (dimensionMemberVariable.hasDefaultMemberSelection()) {
							defaultMemberSelection = dimensionMemberVariable
									.getDefaultMemberSelection();
							inaStructure
									.setElementByName(
											sap.firefly.InAConstants.QY_DEFAULT_SELECTION,
											exporter.exportComponent(null,
													defaultMemberSelection,
													null, flags));
						}
						return inaStructure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.ProviderInitProcedure",
				sap.firefly.XConstant,
				{
					$statics : {
						REQUEST_BY_MODEL : null,
						REQUEST_BY_STRUCTURE : null,
						SKIP : null,
						staticSetup : function() {
							sap.firefly.ProviderInitProcedure.REQUEST_BY_MODEL = sap.firefly.ProviderInitProcedure
									.create("RequestByModel");
							sap.firefly.ProviderInitProcedure.REQUEST_BY_STRUCTURE = sap.firefly.ProviderInitProcedure
									.create("RequestByStructure");
							sap.firefly.ProviderInitProcedure.SKIP = sap.firefly.ProviderInitProcedure
									.create("Skip");
						},
						create : function(name) {
							var newConstant = new sap.firefly.ProviderInitProcedure();
							newConstant.setName(name);
							return newConstant;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsCursorAxisTupleElementContent",
				sap.firefly.DfApplicationContext,
				{
					$statics : {
						create : function(application, dimension) {
							var object = new sap.firefly.RsCursorAxisTupleElementContent();
							object.setup(application, dimension);
							return object;
						}
					},
					m_dimension : null,
					m_dimensionMemberName : null,
					m_nameValueException : null,
					m_fieldList : null,
					m_currentAttributeMember : null,
					m_fieldIndex : 0,
					m_dimensionMemberType : null,
					m_drillState : null,
					m_displayLevel : 0,
					m_parentNodeIndex : 0,
					m_nodeId : null,
					m_exceptionName : null,
					m_alertLevel : 0,
					m_childCount : 0,
					setup : function(application, dimension) {
						this.setupApplicationContext(application);
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
						this.m_fieldIndex = -1;
						this.m_fieldList = sap.firefly.XList.create();
						this.m_dimensionMemberType = sap.firefly.MemberType.MEMBER;
						this.m_parentNodeIndex = -1;
					},
					releaseObject : function() {
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_dimensionMemberName = null;
						this.m_nameValueException = null;
						this.m_fieldList = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_fieldList);
						this.m_currentAttributeMember = null;
						this.m_dimensionMemberType = null;
						this.m_drillState = null;
						this.m_nodeId = null;
						this.m_exceptionName = null;
						sap.firefly.RsCursorAxisTupleElementContent.$superclass.releaseObject
								.call(this);
					},
					addFieldMetadata : function(field) {
						this.m_fieldList.add(sap.firefly.RsCursorFieldValue
								.create(field));
					},
					getDimensionAtCurrentPosition : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					getDimensionMemberNameValueException : function() {
						return this.m_nameValueException;
					},
					getDimensionMemberName : function() {
						return this.m_dimensionMemberName;
					},
					setDimensionMemberName : function(name) {
						this.m_dimensionMemberName = name;
					},
					setDimensionMemberNameValueException : function(
							valueException) {
						this.m_nameValueException = valueException;
					},
					setDimensionMemberType : function(type) {
						this.m_dimensionMemberType = type;
					},
					getDimensionMemberType : function() {
						return this.m_dimensionMemberType;
					},
					createDimensionMemberFromCurrentPosition : function() {
						var dimension = this.getDimensionAtCurrentPosition();
						var context;
						var dimensionMember;
						var size;
						var idxField;
						var cursorFieldValue;
						var fieldValue;
						var textField;
						var textFieldValue;
						if (dimension === null) {
							context = null;
						} else {
							context = dimension.getContext();
						}
						if ((dimension !== null)
								&& dimension.isMeasureStructure()) {
							dimensionMember = sap.firefly.QStructureMember
									.createStructureMember(dimension, context,
											sap.firefly.MemberType.MEASURE);
						} else {
							dimensionMember = sap.firefly.QDimensionMember
									.createDimensionMember(context, dimension);
						}
						dimensionMember.setName(this.m_dimensionMemberName);
						dimensionMember.setType(this.m_dimensionMemberType);
						dimensionMember
								.setDimensionMemberNameValueException(this.m_nameValueException);
						size = this.m_fieldList.size();
						for (idxField = 0; idxField < size; idxField++) {
							cursorFieldValue = this.m_fieldList.get(idxField);
							fieldValue = cursorFieldValue
									.createFieldValueFromCurrentPosition();
							fieldValue.setDimensionMember(dimensionMember);
							dimensionMember.addFieldValue(fieldValue);
						}
						if (dimension !== null) {
							textField = dimension.getTextField();
							if (textField !== null) {
								textFieldValue = dimensionMember
										.getFieldValue(textField);
								if (textFieldValue !== null) {
									dimensionMember.setText(textFieldValue
											.getFormattedValue());
								}
							}
						}
						return dimensionMember;
					},
					setFieldValueCursorBeforeStart : function() {
						this.m_fieldIndex = -1;
						this.m_currentAttributeMember = null;
					},
					hasNextFieldValue : function() {
						return this.m_fieldIndex < (this.m_fieldList.size() - 1);
					},
					nextFieldValue : function() {
						this.m_fieldIndex++;
						this.m_currentAttributeMember = this.m_fieldList
								.get(this.m_fieldIndex);
						return this.m_currentAttributeMember;
					},
					getFieldValue : function() {
						return this.m_currentAttributeMember;
					},
					setDrillState : function(drillState) {
						this.m_drillState = drillState;
					},
					setDisplayLevel : function(displayLevel) {
						this.m_displayLevel = displayLevel;
					},
					setParentNodeIndex : function(parentIndex) {
						this.m_parentNodeIndex = parentIndex;
					},
					getDrillState : function() {
						return this.m_drillState;
					},
					getDisplayLevel : function() {
						return this.m_displayLevel;
					},
					getNodeId : function() {
						return this.m_nodeId;
					},
					setNodeId : function(nodeId) {
						this.m_nodeId = nodeId;
					},
					getParentNodeIndex : function() {
						return this.m_parentNodeIndex;
					},
					getAlertLevel : function() {
						return this.m_alertLevel;
					},
					getExceptionName : function() {
						return this.m_exceptionName;
					},
					setExceptionName : function(exceptionName) {
						this.m_exceptionName = exceptionName;
					},
					setAlertLevel : function(alertLevel) {
						this.m_alertLevel = alertLevel;
					},
					setChildCount : function(childCount) {
						this.m_childCount = childCount;
					},
					getChildCount : function() {
						return this.m_childCount;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsPagingType",
				sap.firefly.XConstant,
				{
					$statics : {
						SINGLE_REQUEST : null,
						TWO_REQUESTS : null,
						MULTIPLE_REQUESTS : null,
						s_lookup : null,
						staticSetup : function() {
							sap.firefly.RsPagingType.s_lookup = sap.firefly.XHashMapByString
									.create();
							sap.firefly.RsPagingType.SINGLE_REQUEST = sap.firefly.RsPagingType
									.create("SingleRequest");
							sap.firefly.RsPagingType.TWO_REQUESTS = sap.firefly.RsPagingType
									.create("TwoRequests");
							sap.firefly.RsPagingType.MULTIPLE_REQUESTS = sap.firefly.RsPagingType
									.create("MultipleRequests");
						},
						create : function(name) {
							var newConstant = new sap.firefly.RsPagingType();
							newConstant.setName(name);
							sap.firefly.RsPagingType.s_lookup.put(name,
									newConstant);
							return newConstant;
						},
						lookupRsPagingType : function(name) {
							return sap.firefly.RsPagingType.s_lookup
									.getByKey(name);
						}
					}
				});
$Firefly.createClass("sap.firefly.DfRsAxisProvider",
		sap.firefly.DfApplicationContext, {
			m_cursorAxis : null,
			setCursorAxis : function(axis) {
				this.m_cursorAxis = sap.firefly.XWeakReferenceUtil
						.getWeakRef(axis);
			},
			releaseObject : function() {
				this.m_cursorAxis = sap.firefly.XObject
						.releaseIfNotNull(this.m_cursorAxis);
				sap.firefly.DfRsAxisProvider.$superclass.releaseObject
						.call(this);
			},
			getCursorAxis : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_cursorAxis);
			},
			getTuplesCountTotal : function() {
				return this.getTuplesCount();
			},
			getDataCount : function() {
			},
			getTupleElementsCount : function() {
			},
			getTuplesCount : function() {
			},
			notifyAxisCursorChange : function(arg1) {
			},
			notifySetAxisMetadata : function() {
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QVariableValue",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(variable) {
							var object = new sap.firefly.QVariableValue();
							object.setVariable(variable);
							return object;
						}
					},
					m_variable : null,
					releaseObject : function() {
						this.m_variable = sap.firefly.XObject
								.releaseIfNotNull(this.m_variable);
						sap.firefly.QVariableValue.$superclass.releaseObject
								.call(this);
					},
					getComponentType : function() {
						return this.getValueType();
					},
					getValueType : function() {
						return sap.firefly.XValueType.VARIABLE;
					},
					getVariable : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_variable);
					},
					setVariable : function(variable) {
						this.m_variable = sap.firefly.XWeakReferenceUtil
								.getWeakRef(variable);
					},
					resetValue : function(value) {
						var message;
						var variableValue;
						if (value === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The value must not be null!");
						}
						if (value.getValueType() !== sap.firefly.XValueType.VARIABLE) {
							message = sap.firefly.XStringBuffer.create();
							message
									.append("Wrong value type! Expected 'Variable' but got '");
							message.append(value.getValueType().getName());
							message.append("'.");
							throw sap.firefly.XException
									.createIllegalArgumentException(message
											.toString());
						}
						variableValue = value;
						this.setVariable(variableValue.getVariable());
					},
					clone : function() {
						var clone = sap.firefly.QVariableValue.create(this
								.getVariable());
						return clone;
					},
					isEqualTo : function(other) {
						var xOther;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						xOther = other;
						return this.getVariable() === xOther.getVariable();
					},
					getStringRepresentation : function() {
						return this.toString();
					},
					toString : function() {
						return this.m_variable.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogSpace",
				sap.firefly.XObject,
				{
					$statics : {
						s_factoryMap : null,
						staticSetup : function() {
							sap.firefly.OlapCatalogSpace.s_factoryMap = sap.firefly.XHashMapByString
									.create();
							sap.firefly.OlapCatalogSpace.s_factoryMap
									.put(
											sap.firefly.RuntimeComponentType.SYSTEM_DESCRIPTION
													.getName(),
											new sap.firefly.OlapCatalogProxySystem());
							sap.firefly.OlapCatalogSpace.s_factoryMap.put(
									sap.firefly.OlapComponentType.CATALOG_TYPE
											.getName(),
									new sap.firefly.OlapCatalogProxyType());
							sap.firefly.OlapCatalogSpace.s_factoryMap
									.put(
											sap.firefly.OlapComponentType.CATALOG_SCHEMA
													.getName(),
											new sap.firefly.OlapCatalogProxySchema());
							sap.firefly.OlapCatalogSpace.s_factoryMap
									.put(
											sap.firefly.OlapComponentType.CATALOG_PACKAGE
													.getName(),
											new sap.firefly.OlapCatalogProxyPackage());
							sap.firefly.OlapCatalogSpace.s_factoryMap
									.put(
											sap.firefly.OlapComponentType.CATALOG_OBJECT
													.getName(),
											new sap.firefly.OlapCatalogProxyQueryObj());
						},
						create : function(application) {
							var newObj = new sap.firefly.OlapCatalogSpace();
							newObj.m_children = sap.firefly.XList.create();
							newObj.m_application = application;
							return newObj;
						}
					},
					m_children : null,
					m_application : null,
					addFileNode : function(fileNode, name, text, type) {
						var proxy = this.newProxyNode(this, fileNode, null);
						if (name !== null) {
							proxy.setName(name);
						}
						if (text !== null) {
							proxy.setText(text);
						}
						if (type !== null) {
							proxy.setComponentType(type);
						}
						this.m_children.add(proxy);
					},
					addSystemLandscapeNode : function(name, text, splitByType) {
						var systemLandscape = this.m_application
								.getSystemLandscape();
						var groupBy = null;
						var proxy;
						if (splitByType) {
							groupBy = sap.firefly.ConnectionParameters.SYSTEM_TYPE;
						}
						proxy = this.newProxyNode(this, systemLandscape,
								groupBy);
						proxy.setName(name);
						proxy.setText(text);
						this.m_children.add(proxy);
					},
					newProxyNode : function(parent, element, groupByTag) {
						var componentType = element.getComponentType();
						var name = componentType.getName();
						var proxyFactory = sap.firefly.OlapCatalogSpace.s_factoryMap
								.getByKey(name);
						var proxy;
						if (proxyFactory !== null) {
							proxy = proxyFactory.newProxy(parent, element,
									groupByTag);
						} else {
							proxy = sap.firefly.OlapCatalogProxy.create(parent,
									element, groupByTag);
						}
						return proxy;
					},
					hasChildren : function() {
						return this.m_children.size() > 0;
					},
					getChildSetState : function() {
						return sap.firefly.ChildSetState.COMPLETE;
					},
					getChildElements : function() {
						return this.m_children;
					},
					getName : function() {
						return "Root";
					},
					getText : function() {
						return "Root";
					},
					isNode : function() {
						return true;
					},
					isLeaf : function() {
						return false;
					},
					getOlapEnv : function() {
						return this.getApplication().getOlapEnvironment();
					},
					getApplication : function() {
						return this.m_application;
					},
					getSession : function() {
						return this.m_application.getSession();
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.CATALOG_SPACE;
					},
					getTagValue : function(tagName) {
						return null;
					},
					getContentElement : function() {
						return this;
					},
					getContentConstant : function() {
						return null;
					},
					processChildFetch : function(syncType, listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getParent : function() {
						return null;
					},
					getCatalogSpace : function() {
						return this;
					},
					getSystemDescription : function() {
						return null;
					},
					getOlapCatalogManager : function() {
						return null;
					},
					getMetaObjectType : function() {
						return null;
					},
					getSchema : function() {
						return null;
					},
					getOriginElement : function() {
						return null;
					},
					getPackage : function() {
						return null;
					},
					getObjectName : function() {
						return null;
					},
					getQueryManager : function() {
						return null;
					},
					getDataSource : function() {
						return null;
					},
					getContext : function() {
						return null;
					}
				});
$Firefly.createClass("sap.firefly.DfQContext", sap.firefly.XObject,
		{
			m_context : null,
			setupContext : function(context) {
				this.setContext(context);
			},
			releaseObject : function() {
				this.m_context = sap.firefly.XObject
						.releaseIfNotNull(this.m_context);
				sap.firefly.DfQContext.$superclass.releaseObject.call(this);
			},
			getComponentType : function() {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			},
			setContext : function(context) {
				if (context !== null) {
					this.m_context = sap.firefly.XWeakReferenceUtil
							.getWeakRef(context);
				}
			},
			getContext : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_context);
			},
			getOriginContext : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_context);
			},
			getSession : function() {
				return this.getApplication().getSession();
			},
			getApplication : function() {
				return this.getOlapEnv().getApplication();
			},
			getOlapEnv : function() {
				var context = this.getOriginContext();
				if ((context !== null) && (context !== this)) {
					return context.getOlapEnv();
				}
				return null;
			},
			getQueryManagerBase : function() {
				return this.getQueryManager();
			},
			getQueryManager : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getQueryManager();
				}
				return null;
			},
			getQueryModel : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getQueryModel();
				}
				return null;
			},
			getQueryModelBase : function() {
				return this.getQueryModel();
			},
			getVariableContainer : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getVariableContainer();
				}
				return null;
			},
			getDimensionAccessor : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getDimensionAccessor();
				}
				return null;
			},
			getFieldAccessorSingle : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getFieldAccessorSingle();
				}
				return null;
			},
			getModelCapabilities : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getModelCapabilities();
				}
				return null;
			},
			getDrillManager : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getDrillManager();
				}
				return null;
			},
			getDataSource : function() {
				var context = this.getOriginContext();
				if (context !== null) {
					return context.getDataSource();
				}
				return null;
			}
		});
$Firefly.createClass("sap.firefly.OlapEnvArea", sap.firefly.DfNameTextObject, {
	$statics : {
		createArea : function(olapEnvironment) {
			var newObj = new sap.firefly.OlapEnvArea();
			newObj.setupArea(olapEnvironment);
			return newObj;
		}
	},
	m_olapEnvironment : null,
	m_varProcessor : null,
	m_queryManagers : null,
	setupArea : function(olapEnvironment) {
		this.m_olapEnvironment = sap.firefly.XWeakReferenceUtil
				.getWeakRef(olapEnvironment);
		this.m_queryManagers = sap.firefly.XListOfNameObject.create();
		this.m_varProcessor = sap.firefly.OlapEnvVarProcessor.create(this);
	},
	releaseObject : function() {
		var olapEnvironment = this.getOlapEnvironment2();
		var i;
		var queryManager;
		olapEnvironment.unregisterArea(this);
		if (this.m_queryManagers !== null) {
			for (i = 0; i < this.m_queryManagers.size(); i++) {
				queryManager = this.m_queryManagers.get(i);
				if (queryManager.isReleased() === false) {
					queryManager.releaseObject();
				}
			}
			this.m_queryManagers.releaseObject();
			this.m_queryManagers = null;
		}
		this.m_varProcessor = sap.firefly.XObject
				.releaseIfNotNull(this.m_varProcessor);
		this.m_olapEnvironment = null;
		sap.firefly.OlapEnvArea.$superclass.releaseObject.call(this);
	},
	getOlapEnvironment2 : function() {
		return sap.firefly.XWeakReferenceUtil
				.getHardRef(this.m_olapEnvironment);
	},
	getApplication : function() {
		return this.getOlapEnvironment2().getApplication();
	},
	getOlapEnv : function() {
		return this.getOlapEnvironment2().getOlapEnv();
	},
	getSession : function() {
		return this.getOlapEnvironment2().getSession();
	},
	getVariableProcessor : function() {
		return this.m_varProcessor;
	},
	getAllAreaQueryManager : function() {
		return this.m_queryManagers;
	},
	getQueryManagerByName : function(name) {
		return this.m_queryManagers.getByKey(name);
	},
	registerQueryManager : function(queryManager) {
		this.m_queryManagers.add(queryManager);
	},
	unregisterQueryManager : function(queryManager) {
		this.m_queryManagers.removeElement(queryManager);
	}
});
$Firefly
		.createClass(
				"sap.firefly.RsConvenienceCommands",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(resultset) {
							var cc = new sap.firefly.RsConvenienceCommands();
							cc.setup(resultset);
							return cc;
						}
					},
					m_resultset : null,
					setup : function(resultset) {
						this.setResultSet(resultset);
					},
					releaseObject : function() {
						this.m_resultset = null;
						sap.firefly.RsConvenienceCommands.$superclass.releaseObject
								.call(this);
					},
					getResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultset);
					},
					setResultSet : function(resultSet) {
						this.m_resultset = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultSet);
					},
					getQueryModel : function() {
						return this.getResultSet().getQueryModel();
					},
					getSearchResultSetAsStringList : function() {
						var listString = sap.firefly.XList.create();
						var cursorResultset = this.getResultSet()
								.getCursorResultSet();
						var rsRowsAxis = cursorResultset.getCursorRowsAxis();
						var innerList;
						var memberContent;
						var member;
						rsRowsAxis.setTupleCursorBeforeStart();
						rsRowsAxis.setGlobalFieldCursorBeforeStart();
						while (rsRowsAxis.hasNextTuple()) {
							rsRowsAxis.nextTuple();
							innerList = sap.firefly.XListOfString.create();
							listString.add(innerList);
							while (rsRowsAxis.hasNextGlobalFieldValue()) {
								memberContent = rsRowsAxis
										.nextGlobalFieldValue();
								member = this
										.getAttributeStringAsStringValue(memberContent);
								innerList.add(member);
							}
						}
						return listString;
					},
					getResultSetAsTreeKeyValueList : function() {
						var model = this.getQueryModel();
						var list;
						var resultSet;
						var cursorResultset;
						var measuresAxis;
						var rsRowsAxis;
						var rsColAxis;
						var yPosition;
						var xPosition;
						var mainKVPair;
						var previousKVPair;
						var att;
						var mainMember;
						var colAttribute;
						var member;
						var kValuePair;
						var dataCell;
						var doubleVal;
						if (model.getRowsAxis().getDimensionCount() !== 1) {
							throw sap.firefly.XException
									.createIllegalStateException("Only one dimension on rows axis needed for this method");
						}
						list = sap.firefly.XList.create();
						resultSet = this.getResultSet();
						cursorResultset = this.getResultSet()
								.getCursorResultSet();
						measuresAxis = cursorResultset.getCursorColumnsAxis();
						measuresAxis.setTupleCursorBeforeStart();
						rsRowsAxis = cursorResultset.getCursorRowsAxis();
						rsRowsAxis.setTupleCursorBeforeStart();
						rsRowsAxis.setGlobalFieldCursorBeforeStart();
						rsColAxis = cursorResultset.getCursorColumnsAxis();
						rsColAxis.setTupleCursorBeforeStart();
						rsColAxis.setGlobalFieldCursorBeforeStart();
						yPosition = 0;
						xPosition = 0;
						mainKVPair = null;
						previousKVPair = null;
						while (rsRowsAxis.hasNextTuple()) {
							rsRowsAxis.nextTuple();
							att = rsRowsAxis.nextGlobalFieldValue();
							mainMember = this
									.getAttributeStringAsStringValue(att);
							mainKVPair = sap.firefly.XNameObjectPair.create();
							mainKVPair.setName(mainMember);
							previousKVPair = mainKVPair;
							while (rsColAxis.hasNextTuple()) {
								rsColAxis.nextTuple();
								while (rsColAxis.hasNextGlobalFieldValue()) {
									colAttribute = rsColAxis
											.nextGlobalFieldValue();
									member = this
											.getAttributeStringAsStringValue(colAttribute);
									kValuePair = sap.firefly.XNameObjectPair
											.create();
									kValuePair.setName(member);
									previousKVPair.setObject(kValuePair);
									previousKVPair = kValuePair;
								}
								dataCell = resultSet.getDataCell(xPosition,
										yPosition);
								doubleVal = this.getDataCellValue(dataCell);
								previousKVPair
										.setValueType(sap.firefly.XValueType.DOUBLE);
								previousKVPair.setObject(doubleVal);
								xPosition = xPosition + 1;
							}
							list.add(mainKVPair);
							yPosition = yPosition + 1;
							xPosition = 0;
							rsColAxis.setTupleCursorBeforeStart();
						}
						return list;
					},
					getResultSetAsPlainKeyValueList : function() {
						var model = this.getQueryModel();
						var list;
						var resultSet;
						var cursorResultset;
						var measuresAxis;
						var numberMeasures;
						var rsRowsAxis;
						var yPosition;
						var xPosition;
						var maxXPosition;
						var mainKVPair;
						var previousKVPair;
						var attributeMember;
						var member;
						var kValuePair;
						var dataCell;
						var doubleVal;
						var valueList;
						var i;
						var dataCell2;
						var doubleVal2;
						if (!model.getColumnsAxis().getDimensionByIndex(0)
								.isMeasureStructure()
								&& (model.getColumnsAxis().getDimensionCount() === 1)) {
							throw sap.firefly.XException
									.createIllegalStateException("Only measure structure allowed on columns axis for this method");
						}
						if (model.getRowsAxis().getDimensionCount() < 1) {
							throw sap.firefly.XException
									.createIllegalStateException("At least one dimension on rows axis needed for this method");
						}
						list = sap.firefly.XList.create();
						resultSet = this.getResultSet();
						cursorResultset = resultSet.getCursorResultSet();
						measuresAxis = cursorResultset.getCursorColumnsAxis();
						measuresAxis.setTupleCursorBeforeStart();
						numberMeasures = measuresAxis.getDataCount();
						rsRowsAxis = cursorResultset.getCursorRowsAxis();
						rsRowsAxis.setTupleCursorBeforeStart();
						rsRowsAxis.setGlobalFieldCursorBeforeStart();
						yPosition = 0;
						xPosition = 0;
						maxXPosition = rsRowsAxis.getGlobalFieldValueCount();
						mainKVPair = null;
						previousKVPair = null;
						while (rsRowsAxis.hasNextTuple()) {
							rsRowsAxis.nextTuple();
							xPosition = 0;
							while (rsRowsAxis.hasNextGlobalFieldValue()) {
								attributeMember = rsRowsAxis
										.nextGlobalFieldValue();
								member = this
										.getAttributeStringAsStringValue(attributeMember);
								kValuePair = sap.firefly.XNameObjectPair
										.create();
								kValuePair.setName(member);
								if (xPosition === 0) {
									mainKVPair = kValuePair;
								}
								if ((xPosition !== 0)
										&& (previousKVPair !== null)) {
									previousKVPair.setObject(kValuePair);
									previousKVPair
											.setValueType(sap.firefly.XValueType.KEY_VALUE);
								}
								if (xPosition === (maxXPosition - 1)) {
									if (numberMeasures === 1) {
										dataCell = resultSet.getDataCell(0,
												yPosition);
										doubleVal = this
												.getDataCellValue(dataCell);
										kValuePair
												.setValueType(sap.firefly.XValueType.DOUBLE);
										kValuePair.setObject(doubleVal);
									} else {
										valueList = sap.firefly.XList.create();
										for (i = 0; i < numberMeasures; i++) {
											dataCell2 = resultSet.getDataCell(
													i, yPosition);
											doubleVal2 = this
													.getDataCellValue(dataCell2);
											valueList.add(doubleVal2);
										}
										kValuePair
												.setValueType(sap.firefly.XValueType.LIST);
										kValuePair.setObject(valueList);
									}
									list.add(mainKVPair);
								}
								previousKVPair = kValuePair;
								xPosition = xPosition + 1;
							}
							yPosition = yPosition + 1;
						}
						return list;
					},
					getSuggestionResultsAsKeyValueList : function() {
						var list = sap.firefly.XList.create();
						var resultSet = this.getResultSet();
						var cursorResultset = resultSet.getCursorResultSet();
						var rsColAxis = cursorResultset.getCursorColumnsAxis();
						var position;
						var value;
						var attributeMember;
						var kValuePair;
						var dataCell;
						var doubleVal;
						rsColAxis.setTupleCursorBeforeStart();
						rsColAxis.setGlobalFieldCursorBeforeStart();
						while (rsColAxis.hasNextTuple()) {
							position = 0;
							rsColAxis.nextTuple();
							while (rsColAxis.hasNextGlobalFieldValue()) {
								value = null;
								attributeMember = rsColAxis
										.nextGlobalFieldValue();
								value = this
										.getAttributeStringAsStringValue(attributeMember);
								kValuePair = sap.firefly.XNameObjectPair
										.create();
								kValuePair.setName(value);
								dataCell = resultSet.getDataCell(0, position);
								doubleVal = this.getDataCellValue(dataCell);
								kValuePair
										.setValueType(sap.firefly.XValueType.DOUBLE);
								kValuePair.setObject(doubleVal);
								list.add(kValuePair);
								position = position + 1;
							}
						}
						return list;
					},
					getAttributeStringAsStringValue : function(att) {
						var value = null;
						var valueType = att.getValueType();
						var intvalue;
						var doubleValue;
						var dateValue;
						if (valueType === sap.firefly.XValueType.INTEGER) {
							intvalue = att.getIntegerValue();
							value = sap.firefly.XInteger
									.convertIntegerToString(intvalue);
						} else {
							if (valueType === sap.firefly.XValueType.LONG) {
								value = att.getFormattedValue();
							} else {
								if (valueType === sap.firefly.XValueType.DOUBLE) {
									doubleValue = att.getDoubleValue();
									value = sap.firefly.XDouble
											.convertDoubleToString(doubleValue);
								} else {
									if (valueType === sap.firefly.XValueType.STRING) {
										value = att.getStringValue();
									} else {
										if (valueType === sap.firefly.XValueType.DATE) {
											dateValue = att.getDateValue();
											value = dateValue.toIsoFormat();
										} else {
											value = att.getFormattedValue();
										}
									}
								}
							}
						}
						return value;
					},
					getListOfKVPairsForDimension : function(dim, dimList,
							pointer) {
						var returnList = sap.firefly.XList.create();
						var dimMemberPair = this.keyValuePairInListForKey(
								dimList, dim);
						var indexOfDim = dimList.getIndex(dimMemberPair);
						var resultSet = this.getResultSet();
						var memberList = dimMemberPair.getObject();
						var j;
						var member;
						var kValuePair;
						var dataCell;
						var doubleVal;
						var nextDimMemberPair;
						var nextDim;
						var listOfKVPairsForDimension;
						for (j = 0; j < memberList.size(); j++) {
							member = memberList.get(j);
							kValuePair = sap.firefly.XNameObjectPair.create();
							kValuePair.setName(member);
							if (indexOfDim === (dimList.size() - 1)) {
								dataCell = resultSet.getDataCell(0, pointer
										.getIntegerValue());
								pointer.setIntegerValue(pointer
										.getIntegerValue() + 1);
								doubleVal = this.getDataCellValue(dataCell);
								kValuePair
										.setValueType(sap.firefly.XValueType.DOUBLE);
								kValuePair.setObject(doubleVal);
							} else {
								nextDimMemberPair = dimList.get(indexOfDim + 1);
								nextDim = nextDimMemberPair.getName();
								listOfKVPairsForDimension = this
										.getListOfKVPairsForDimension(nextDim,
												dimList, pointer);
								kValuePair.setObject(listOfKVPairsForDimension);
								kValuePair
										.setValueType(sap.firefly.XValueType.LIST);
							}
							returnList.add(kValuePair);
						}
						return returnList;
					},
					getDataCellValue : function(dataCell) {
						var doubleVal = sap.firefly.XDoubleValue.create(0);
						var valueException = dataCell.getValueException();
						if (valueException === sap.firefly.ValueException.NORMAL) {
							doubleVal.setDoubleValue(dataCell.getDoubleValue());
						}
						return doubleVal;
					},
					getMembersForEachDimensionForAxis : function(axis) {
						var list = sap.firefly.XList.create();
						var accessor = axis.createCursorAccessor();
						var attributeMember;
						var member;
						var dimName;
						var currentKeyValuePair;
						var keyValuePair;
						var memberListInitial;
						var memberList;
						accessor.setTupleCursorBeforeStart();
						while (accessor.hasNextTuple()) {
							accessor.nextTuple();
							while (accessor.hasNextGlobalFieldValue()) {
								attributeMember = accessor
										.nextGlobalFieldValue();
								member = accessor.getFormattedValue();
								dimName = attributeMember.getField()
										.getDimension().getName();
								currentKeyValuePair = this
										.keyValuePairInListForKey(list, dimName);
								if (currentKeyValuePair === null) {
									keyValuePair = sap.firefly.XNameObjectPair
											.create();
									memberListInitial = sap.firefly.XListOfString
											.create();
									keyValuePair.setNameAndObject(dimName,
											memberListInitial);
									list.add(keyValuePair);
									currentKeyValuePair = keyValuePair;
								}
								memberList = currentKeyValuePair.getObject();
								if (!memberList.contains(member)) {
									memberList.add(member);
								}
							}
						}
						return list;
					},
					keyValuePairInListForKey : function(list, key) {
						var it = list.getIterator();
						var keyValuePair;
						while (it.hasNext()) {
							keyValuePair = it.next();
							if (sap.firefly.XString.isEqual(keyValuePair
									.getName(), key)) {
								it.releaseObject();
								return keyValuePair;
							}
						}
						it.releaseObject();
						return null;
					},
					containsKeyValueListKey : function(list, key) {
						return this.keyValuePairInListForKey(list, key) !== null;
					},
					getSession : function() {
						return this.getApplication().getSession();
					},
					getApplication : function() {
						return this.getQueryModel().getApplication();
					},
					getSimpleResultSetAsJson : function() {
						var json = sap.firefly.XStringBuffer.create();
						var resultSet;
						var cursorResultSet;
						var rowTuples;
						var colTuples;
						var dataCells;
						json.append("{");
						resultSet = this.getResultSet();
						cursorResultSet = resultSet.getCursorResultSet();
						rowTuples = this.buildAxisTupleJson(cursorResultSet
								.getCursorRowsAxis());
						json.append('"rowTupleIds":');
						json.append(rowTuples.toString());
						colTuples = this.buildAxisTupleJson(cursorResultSet
								.getCursorColumnsAxis());
						json.append(', "colTupleIds":');
						json.append(colTuples.toString());
						json.append(', "dataCells":');
						dataCells = this.buildDataCellJson(resultSet);
						json.append(dataCells.toString());
						json.append("}");
						return json.toString();
					},
					buildDataCellJson : function(resultSet) {
						var dataCells = sap.firefly.XListOfString.create();
						var row;
						var col;
						var dataCellJson;
						var dataCell;
						for (row = 0; row < resultSet.getDataRows(); row++) {
							for (col = 0; col < resultSet.getDataColumns(); col++) {
								dataCellJson = sap.firefly.XStringBuffer
										.create();
								dataCellJson.append('{"row":').appendInt(row);
								dataCellJson.append(', "col":').appendInt(col);
								dataCell = resultSet.getDataCell(col, row);
								dataCellJson.append(', "formattedValue":"')
										.append(dataCell.getFormattedValue())
										.append('"');
								dataCellJson.append("}");
								dataCells.add(dataCellJson.toString());
								dataCellJson.releaseObject();
							}
						}
						return dataCells;
					},
					buildAxisTupleJson : function(axis) {
						var axisTuples;
						var tupleJson;
						var first;
						var tupleElement;
						axis.setTupleCursorBeforeStart();
						axis.setTupleElementCursorBeforeStart();
						axisTuples = sap.firefly.XListOfString.create();
						while (axis.hasNextTuple()) {
							tupleJson = sap.firefly.XStringBuffer.create();
							tupleJson.append('{"memberNames":[');
							axis.nextTuple();
							first = true;
							while (axis.hasNextTupleElement()) {
								if (first === false) {
									tupleJson.append(",");
								}
								tupleElement = axis.nextTupleElement();
								tupleJson.append('"');
								tupleJson.append(tupleElement
										.getDimensionMemberName());
								tupleJson.append('"');
								first = false;
							}
							tupleJson.append("]}");
							axisTuples.add(tupleJson.toString());
							tupleJson.releaseObject();
						}
						return axisTuples;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAExport",
				sap.firefly.QInA,
				{
					exportComponent : function(componentType, modelComponent,
							inaParentStructure, flags) {
						var olapComponentType = componentType;
						var inaComponent;
						var inaCloneRoot;
						var inaMetadataElement;
						var inaModelElement;
						if ((olapComponentType === null)
								&& (modelComponent !== null)) {
							olapComponentType = modelComponent
									.getOlapComponentType();
						}
						if (olapComponentType === null) {
							this.addError(0,
									"No component type given for export");
							return null;
						}
						if (this.m_mode === sap.firefly.QModelFormat.INA_CLONE) {
							inaCloneRoot = inaParentStructure;
							if (inaCloneRoot === null) {
								inaCloneRoot = sap.firefly.PrStructure.create();
							}
							this.m_mode = sap.firefly.QModelFormat.INA_METADATA_CORE;
							inaComponent = this.lookupInAComponent(
									olapComponentType, null);
							if (inaComponent === null) {
								return null;
							}
							inaMetadataElement = inaComponent.exportComponent(
									this, modelComponent, inaParentStructure,
									flags);
							if (inaMetadataElement !== null) {
								inaCloneRoot.setElementByName(
										sap.firefly.InAConstants.QY_METADATA,
										inaMetadataElement);
							}
							this.m_mode = sap.firefly.QModelFormat.INA_REPOSITORY;
							inaComponent = this.lookupInAComponent(
									olapComponentType, null);
							if (inaComponent === null) {
								return null;
							}
							inaModelElement = inaComponent.exportComponent(
									this, modelComponent, inaParentStructure,
									flags);
							if (inaModelElement !== null) {
								inaCloneRoot.setElementByName(
										sap.firefly.InAConstants.QY_RUNTIME,
										inaModelElement);
							}
							this.m_mode = sap.firefly.QModelFormat.INA_CLONE;
							return inaCloneRoot;
						}
						inaComponent = this.lookupInAComponent(
								olapComponentType, null);
						if (inaComponent === null) {
							return null;
						}
						return inaComponent.exportComponent(this,
								modelComponent, inaParentStructure, flags);
					},
					exportQueryModel : function(queryModel, withVariables,
							withDataSource) {
						var flags = sap.firefly.QImExFlag.DEFAULT_ALL;
						if (withDataSource === false) {
							flags = sap.firefly.XMath.binaryXOr(flags,
									sap.firefly.QImExFlag.DATASOURCE);
						}
						if (withVariables === false) {
							flags = sap.firefly.XMath.binaryXOr(flags,
									sap.firefly.QImExFlag.VARIABLES);
						}
						return this.exportComponent(null, queryModel, null,
								flags);
					},
					exportQuerySettings : function(inaStructure, queryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.QUERY_SETTINGS,
								queryModel, inaStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportTotals : function(inaStructure, rc) {
						this
								.exportComponent(
										sap.firefly.OlapComponentType.TOTALS,
										rc, inaStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportAttribute : function(qAttribute) {
						var element = this.exportComponent(
								sap.firefly.OlapComponentType.ATTRIBUTE,
								qAttribute, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
						return element;
					},
					exportAxesSettings : function(inaStructure, queryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.AXES_SETTINGS,
								queryModel, inaStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportAxis : function(inaStructure, axis) {
						return this
								.exportComponent(
										sap.firefly.OlapComponentType.AXIS,
										axis, inaStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDataCell : function(inaQueryModel, queryDataCell) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.DATA_CELL,
								queryDataCell, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDataCells : function(inaQueryModel, queryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.DATA_CELLS,
								queryModel, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDrillPathElement : function(element, isDrillContext) {
						var flags = sap.firefly.QImExFlag.DEFAULT_ALL;
						if (isDrillContext) {
							flags = sap.firefly.XMath.binaryXOr(flags,
									sap.firefly.QImExFlag.DRILL_CONTEXT);
						}
						return this.exportComponent(
								sap.firefly.MemberType.DRILL_PATH_ELEMENT,
								element, null, flags);
					},
					exportDrillOperation : function(operation) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.DRILL_OPERATION,
								operation, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDrillManager : function(drillManager, inaQueryModel) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.DRILL_MANAGER,
								drillManager, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportStructureDimension : function(structureDimension) {
						return this.exportComponent(null, structureDimension,
								null, sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportVariables : function(variableContainer,
							parentStructure) {
						return this.exportComponent(null, variableContainer,
								parentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportVariableContainer : function(variableContainer,
							parentStructure) {
						this
								.exportComponent(
										sap.firefly.OlapComponentType.VARIABLE_CONTAINER,
										variableContainer, parentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportVariableList : function(variableContainer) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.VARIABLE_LIST,
								variableContainer, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDataSource : function(datasource, withRunAsUser) {
						var flags = sap.firefly.QImExFlag.DEFAULT_ALL;
						if (withRunAsUser) {
							flags = sap.firefly.XMath.binaryXOr(flags,
									sap.firefly.QImExFlag.RUN_AS_USER);
						}
						return this.exportComponent(null, datasource, null,
								flags);
					},
					exportSortingManager : function(qSortingManager,
							inaQueryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.SORT_MANAGER,
								qSortingManager, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportCondition : function(condition) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.CONDITION,
								condition, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportMembers : function(dimension, inaParentStructure) {
						var orderedStructureMemberNames;
						var orderedNamesList;
						var i;
						this.exportComponent(
								sap.firefly.OlapComponentType.MEMBERS,
								dimension, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
						if (this.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							orderedStructureMemberNames = (dimension)
									.getOrderedStructureMemberNames();
							if (orderedStructureMemberNames !== null) {
								orderedNamesList = inaParentStructure
										.setNewListByName(sap.firefly.InAConstants.QY_ORDERED_STRUCTURE_MEMBER_NAMES);
								for (i = 0; i < orderedStructureMemberNames
										.size(); i++) {
									orderedNamesList
											.addString(orderedStructureMemberNames
													.get(i));
								}
							}
						}
					},
					exportConditionThreshold : function(conditionThreshold) {
						return this
								.exportComponent(
										sap.firefly.OlapComponentType.CONDITIONS_THRESHOLD,
										conditionThreshold, null,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportSimpleTypeVariable : function(variable,
							inaParentStructure) {
						return this.exportComponent(
								sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE,
								variable, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDimensionMemberVariable : function(
							dimensionMemberVariable, inaParentStructure) {
						return this
								.exportComponent(
										sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE,
										dimensionMemberVariable,
										inaParentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportOptionListVariable : function(variable, inaStructure) {
						return this.exportComponent(
								sap.firefly.VariableType.OPTION_LIST_VARIABLE,
								variable, inaStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportHierarchyNodeVariable : function(variable,
							inaStructure) {
						return this
								.exportComponent(
										sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE,
										variable, inaStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportRestrictedMeasure : function(restrictedMeasure,
							inaParentStructure) {
						return this.exportComponent(
								sap.firefly.MemberType.RESTRICTED_MEASURE,
								restrictedMeasure, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportBasicMeasure : function(basicMeasure, inaMember) {
						return this.exportComponent(
								sap.firefly.MemberType.BASIC_MEASURE,
								basicMeasure, inaMember,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFormulaMeasure : function(formulaMeasure, inaMember) {
						return this.exportComponent(
								sap.firefly.MemberType.FORMULA, formulaMeasure,
								inaMember, sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterTuple : function(filterTuple) {
						return this.exportComponent(
								sap.firefly.FilterComponentType.TUPLE,
								filterTuple, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterElement : function(filterElement) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.FILTER_ELEMENT,
								filterElement, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterAlgebra : function(qLogicalContainer,
							inaParentStructure) {
						return this
								.exportComponent(
										sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA,
										qLogicalContainer, inaParentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportStructureMember : function(member) {
						return this.exportComponent(
								sap.firefly.MemberType.ABSTRACT_MEMBER, member,
								null, sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportCartesianList : function(inaParentStructure,
							cartesianList) {
						return this.exportComponent(
								sap.firefly.FilterComponentType.CARTESIAN_LIST,
								cartesianList, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterExpression : function(qFilterExpression) {
						return this
								.exportComponent(
										sap.firefly.OlapComponentType.FILTER_EXPRESSION,
										qFilterExpression, null,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFixedFilter : function(filter, inaQueryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.FILTER_FIXED,
								filter, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDynamicFilter : function(filter, inaQueryModel) {
						this.exportComponent(
								sap.firefly.OlapComponentType.FILTER_DYNAMIC,
								filter, inaQueryModel,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportVisibilityFilter : function(filter, inaQueryModel) {
						this
								.exportComponent(
										sap.firefly.OlapComponentType.FILTER_VISIBILITY,
										filter, inaQueryModel,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilter : function(filter, inaParentStructure) {
						this.exportComponent(
								sap.firefly.OlapComponentType.SELECTOR, filter,
								inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterOperation : function(inaParentStructure,
							filterOperation) {
						return this.exportComponent(
								sap.firefly.FilterComponentType.OPERATION,
								filterOperation, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportCellValueOperand : function(cellValueOperand) {
						return this
								.exportComponent(
										sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND,
										cellValueOperand, null,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterGeo : function(qCoreOperation,
							inaParentStructure) {
						return this.exportComponent(
								sap.firefly.FilterComponentType.SPATIAL_FILTER,
								qCoreOperation, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterMemberOperand : function(qCoreOperation,
							inaParent) {
						return this.exportComponent(
								sap.firefly.FilterComponentType.MEMBER_OPERAND,
								qCoreOperation, inaParent,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportFilterCartesianProduct : function(inaParentStructure,
							qCartesianProduct) {
						return this
								.exportComponent(
										sap.firefly.FilterComponentType.CARTESIAN_PRODUCT,
										qCartesianProduct, inaParentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportConditionManager : function(conditionManager,
							inaParentStructure) {
						this
								.exportComponent(
										sap.firefly.OlapComponentType.CONDITIONS_MANAGER,
										conditionManager, inaParentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDimension : function(dimension) {
						return this
								.exportComponent(
										sap.firefly.OlapComponentType.ABSTRACT_DIMENSION,
										dimension, null,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportCalculatedDimension : function(dimension) {
						return this.exportComponent(
								sap.firefly.DimensionType.CALCULATED_DIMENSION,
								dimension, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportVariable : function(variable, inaStructure) {
						return this.exportComponent(variable.getVariableType(),
								variable, inaStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportHierarchy : function(dimension, inaParentStructure) {
						this.exportComponent(
								sap.firefly.OlapComponentType.HIERARCHY,
								dimension, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportDimensions : function(query, inaParentStructure) {
						this.exportComponent(
								sap.firefly.OlapComponentType.DIMENSIONS,
								query, inaParentStructure,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportExceptions : function(inaParentStructure,
							structureMember) {
						this
								.exportComponent(
										sap.firefly.OlapComponentType.EXCEPTION_MANAGER,
										structureMember, inaParentStructure,
										sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					exportPreQuery : function(query) {
						return this.exportComponent(
								sap.firefly.OlapComponentType.QUERY_MODEL,
								query, null, sap.firefly.QImExFlag.DEFAULT_ALL);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInAImport",
				sap.firefly.QInA,
				{
					importComponent : function(componentType, inaElement,
							modelComponent, parentComponent, context) {
						var component;
						if (modelComponent !== null) {
							if ((this.m_mode === sap.firefly.QModelFormat.INA_METADATA)
									|| (this.m_mode === sap.firefly.QModelFormat.INA_CLONE)
									|| (this.m_mode === sap.firefly.QModelFormat.INA_METADATA_CORE)) {
								(modelComponent).stopEventing();
							} else {
								modelComponent.queueEventing();
							}
						}
						component = this.innerImportComponent(componentType,
								inaElement, modelComponent, parentComponent,
								context);
						if (modelComponent !== null) {
							modelComponent.resumeEventing();
						}
						return component;
					},
					innerImportComponent : function(componentType, inaElement,
							modelComponent, parentComponent, context) {
						var olapComponentType = componentType;
						var inaStructure;
						var cType;
						var componentModel;
						var importedModelComponent;
						var inaClone;
						var inaMetadataElement;
						var inaModelElement;
						if ((olapComponentType === null)
								&& (modelComponent !== null)) {
							olapComponentType = modelComponent
									.getOlapComponentType();
						}
						if ((olapComponentType === null)
								&& (inaElement !== null)
								&& (inaElement.isStructure())) {
							inaStructure = inaElement;
							cType = inaStructure
									.getStringByName(sap.firefly.InAConstants.QY_CTYPE);
							if (cType !== null) {
								olapComponentType = sap.firefly.QInAConverter
										.lookupComponentType(cType);
							}
						}
						if (olapComponentType === null) {
							this
									.addError(0,
											"Cannot find olap component type for import");
							return modelComponent;
						}
						importedModelComponent = modelComponent;
						if (this.m_mode === sap.firefly.QModelFormat.INA_METADATA) {
							this.m_mode = sap.firefly.QModelFormat.INA_METADATA_CORE;
							componentModel = this.lookupInAComponent(
									olapComponentType, inaElement);
							if (componentModel === null) {
								return modelComponent;
							}
							importedModelComponent = componentModel
									.importComponent(this, inaElement,
											importedModelComponent,
											parentComponent, context);
							this.m_mode = sap.firefly.QModelFormat.INA_DATA;
							componentModel = this.lookupInAComponent(
									olapComponentType, inaElement);
							if (componentModel === null) {
								return modelComponent;
							}
							importedModelComponent = componentModel
									.importComponent(this, inaElement,
											importedModelComponent,
											parentComponent, context);
							this.m_mode = sap.firefly.QModelFormat.INA_METADATA;
						} else {
							if (this.m_mode === sap.firefly.QModelFormat.INA_CLONE) {
								inaClone = inaElement;
								this.m_mode = sap.firefly.QModelFormat.INA_METADATA_CORE;
								inaMetadataElement = inaClone
										.getElementByName(sap.firefly.InAConstants.QY_METADATA);
								componentModel = this.lookupInAComponent(
										olapComponentType, inaMetadataElement);
								if (componentModel === null) {
									return modelComponent;
								}
								importedModelComponent = componentModel
										.importComponent(this,
												inaMetadataElement,
												importedModelComponent,
												parentComponent, context);
								this.m_mode = sap.firefly.QModelFormat.INA_REPOSITORY;
								inaModelElement = inaClone
										.getElementByName(sap.firefly.InAConstants.QY_RUNTIME);
								componentModel = this.lookupInAComponent(
										olapComponentType, inaModelElement);
								if (componentModel === null) {
									return modelComponent;
								}
								importedModelComponent = componentModel
										.importComponent(this, inaModelElement,
												importedModelComponent,
												parentComponent, context);
								this.m_mode = sap.firefly.QModelFormat.INA_CLONE;
							} else {
								componentModel = this.lookupInAComponent(
										olapComponentType, inaElement);
								if (componentModel === null) {
									return modelComponent;
								}
								importedModelComponent = componentModel
										.importComponent(this, inaElement,
												importedModelComponent,
												parentComponent, context);
							}
						}
						return importedModelComponent;
					},
					importQueryModel : function(inaQueryModel, queryModel) {
						this.importComponent(
								sap.firefly.OlapComponentType.QUERY_MODEL,
								inaQueryModel, queryModel, null, queryModel);
						if ((this.m_mode === sap.firefly.QModelFormat.INA_METADATA)
								|| (this.m_mode === sap.firefly.QModelFormat.INA_METADATA_CORE)) {
							queryModel
									.setServerBaseSerialization(inaQueryModel);
							queryModel
									.setServerBaseSerializationFormat(sap.firefly.QModelFormat.INA_METADATA);
						}
					},
					importQuerySettings : function(inaStructure, queryModel) {
						this.importComponent(
								sap.firefly.OlapComponentType.QUERY_SETTINGS,
								inaStructure, null, null, queryModel);
					},
					importDataSource : function(inaStructure) {
						return this.importComponent(
								sap.firefly.OlapComponentType.DATA_SOURCE,
								inaStructure, null, null, null);
					},
					importTotals : function(inaStructure, rc, context) {
						this.importComponent(
								sap.firefly.OlapComponentType.TOTALS,
								inaStructure, rc, null, context);
					},
					importAttribute : function(inaAttribute, dimension, context) {
						this.importComponent(
								sap.firefly.OlapComponentType.ATTRIBUTE,
								inaAttribute, null, dimension, context);
					},
					importAxesSettings : function(inaStructure, queryModel) {
						this.importComponent(
								sap.firefly.OlapComponentType.AXES_SETTINGS,
								inaStructure, queryModel, null, queryModel);
					},
					importAxis : function(inaStructure, axis, context) {
						return this.importComponent(
								sap.firefly.OlapComponentType.AXIS,
								inaStructure, axis, null, context);
					},
					importSortingManager : function(inaDefinition,
							qSortingManager, context) {
						this.importComponent(
								sap.firefly.OlapComponentType.SORT_MANAGER,
								inaDefinition, qSortingManager, null, context);
					},
					importHierarchy : function(dimension, inaHierarchy) {
						this.importComponent(
								sap.firefly.OlapComponentType.HIERARCHY,
								inaHierarchy, dimension, null, dimension
										.getContext());
					},
					importExceptions : function(inaStructure, member) {
						this
								.importComponent(
										sap.firefly.OlapComponentType.EXCEPTION_MANAGER,
										inaStructure, member, null, null);
					},
					importFixedFilter : function(inaElement, filterComponent,
							context) {
						this.importComponent(
								sap.firefly.OlapComponentType.FILTER_FIXED,
								inaElement, null, filterComponent, context);
					},
					importDynamicFilter : function(inaElement, filterComponent,
							context) {
						this.importComponent(
								sap.firefly.OlapComponentType.FILTER_DYNAMIC,
								inaElement, null, filterComponent, context);
					},
					importVisibilityFilter : function(inaElement,
							filterComponent, context) {
						this
								.importComponent(
										sap.firefly.OlapComponentType.FILTER_VISIBILITY,
										inaElement, null, filterComponent,
										context);
					},
					importFilterElement : function(inaFilterElement,
							filterElementExt, filterExpression, context) {
						return this.importComponent(
								sap.firefly.OlapComponentType.FILTER_ELEMENT,
								inaFilterElement, filterElementExt,
								filterExpression, context);
					},
					importFilterAlgebra : function(filterExpression,
							inaParentStructure, context) {
						return this
								.importComponent(
										sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA,
										inaParentStructure, null,
										filterExpression, context);
					},
					importCartesianList : function(inaCartesianList,
							cartesianListExt, filterExpression, context) {
						return this.importComponent(
								sap.firefly.FilterComponentType.CARTESIAN_LIST,
								inaCartesianList, cartesianListExt,
								filterExpression, context);
					},
					importFilterExpression : function(qDefaultExpression,
							inaExpression, parent, context) {
						return this
								.importComponent(
										sap.firefly.OlapComponentType.FILTER_EXPRESSION,
										inaExpression, qDefaultExpression,
										parent, context);
					},
					importFilter : function(inaDefinition, filter, context) {
						this.importComponent(
								sap.firefly.OlapComponentType.SELECTOR,
								inaDefinition, filter, null, context);
					},
					importFilterOperation : function(inaOperation,
							cartesianList, context) {
						return this.importComponent(
								sap.firefly.FilterComponentType.OPERATION,
								inaOperation, null, cartesianList, context);
					},
					importFilterCellValueOperand : function(inaStructure,
							context) {
						return this
								.importComponent(
										sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND,
										inaStructure, null, null, context);
					},
					importFilterGeo : function(filterExpression, inaGeoOperand,
							context) {
						return this.importComponent(
								sap.firefly.FilterComponentType.SPATIAL_FILTER,
								inaGeoOperand, null, filterExpression, context);
					},
					importFilterMemberOperand : function(container, inaParent,
							context) {
						return this.importComponent(
								sap.firefly.FilterComponentType.MEMBER_OPERAND,
								inaParent, null, container, context);
					},
					importFilterCartesianProduct : function(filterExpression,
							inaCartesianProduct, context) {
						return this
								.importComponent(
										sap.firefly.FilterComponentType.CARTESIAN_PRODUCT,
										inaCartesianProduct, null,
										filterExpression, context);
					},
					importDrillManager : function(inaQueryModel, drillManager,
							context) {
						this.importComponent(
								sap.firefly.OlapComponentType.DRILL_MANAGER,
								inaQueryModel, drillManager, null, context);
					},
					importDrillPathElement : function(inaDrillMember,
							drillManager, context) {
						return this.importComponent(
								sap.firefly.MemberType.DRILL_PATH_ELEMENT,
								inaDrillMember, null, drillManager, context);
					},
					importDrillOperation : function(inaHierarchyNavigation,
							drillManager, context) {
						return this.importComponent(
								sap.firefly.OlapComponentType.DRILL_OPERATION,
								inaHierarchyNavigation, null, drillManager,
								context);
					},
					importVariableContainer : function(inaElement,
							variableContainer, context) {
						this
								.importComponent(
										sap.firefly.OlapComponentType.VARIABLE_CONTAINER,
										inaElement, variableContainer, null,
										context);
					},
					importVariables : function(variables, variableContainer) {
						this
								.importComponent(
										sap.firefly.OlapComponentType.VARIABLE_CONTAINER,
										variables, variableContainer, null,
										null);
					},
					importVariableList : function(variables, variableContainer) {
						this.importComponent(
								sap.firefly.OlapComponentType.VARIABLE_LIST,
								variables, variableContainer, null, null);
					},
					importSimpleTypeVariable : function(inaStructure,
							simpleTypeVariable, context) {
						this
								.importComponent(
										sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE,
										inaStructure, simpleTypeVariable, null,
										context);
					},
					importDimensionMemberVariable : function(inaVariable,
							memberVariable, variableContainer, context) {
						return this
								.importComponent(
										sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE,
										inaVariable, memberVariable,
										variableContainer, context);
					},
					importOptionListVariable : function(inaVariable,
							optionListVariable, context) {
						return this.importComponent(
								sap.firefly.VariableType.OPTION_LIST_VARIABLE,
								inaVariable, optionListVariable, null, context);
					},
					importHierarchyNodeVariable : function(inaStructure,
							nodeVariable) {
						this
								.importComponent(
										sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE,
										inaStructure, nodeVariable, null, null);
					},
					importConditionManager : function(inAModel,
							conditionManager, context) {
						this
								.importComponent(
										sap.firefly.OlapComponentType.CONDITIONS_MANAGER,
										inAModel, conditionManager, null,
										context);
					},
					importCondition : function(queryModelBase, inaCondition,
							condition) {
						return this.importComponent(
								sap.firefly.OlapComponentType.CONDITION,
								inaCondition, condition, null, queryModelBase);
					},
					importConditionThreshold : function(queryModel,
							inaSingleThreshold, conditionThreshold) {
						return this
								.importComponent(
										sap.firefly.OlapComponentType.CONDITIONS_THRESHOLD,
										inaSingleThreshold, conditionThreshold,
										null, queryModel);
					},
					importDataCell : function(inaQDataCell, queryModel) {
						return this.importComponent(
								sap.firefly.OlapComponentType.DATA_CELL,
								inaQDataCell, null, null, queryModel);
					},
					importDataCells : function(inaQueryModel, queryModel) {
						this.importComponent(
								sap.firefly.OlapComponentType.DATA_CELLS,
								inaQueryModel, null, null, queryModel);
					},
					importMembers : function(inaDimension, dimension, context) {
						var orderedNamesList;
						var orderedStructureMemberNames;
						var orderedNameIndex;
						var orderedNameString;
						this.importComponent(
								sap.firefly.OlapComponentType.MEMBERS,
								inaDimension, dimension, null, context);
						if (this.m_mode
								.isTypeOf(sap.firefly.QModelFormat.INA_REPOSITORY)) {
							orderedNamesList = sap.firefly.PrUtils
									.getListProperty(
											inaDimension,
											sap.firefly.InAConstants.QY_ORDERED_STRUCTURE_MEMBER_NAMES);
							if (orderedNamesList !== null) {
								orderedStructureMemberNames = sap.firefly.XListOfString
										.create();
								for (orderedNameIndex = 0; orderedNameIndex < sap.firefly.PrUtils
										.getListSize(orderedNamesList, 0); orderedNameIndex++) {
									orderedNameString = sap.firefly.PrUtils
											.getStringElement(orderedNamesList,
													orderedNameIndex);
									if (orderedNameString === null) {
										throw sap.firefly.XException
												.createIllegalStateException("illegal state");
									}
									orderedStructureMemberNames
											.add(orderedNameString
													.getStringValue());
								}
								(dimension)
										.reOrderStructureMembers(orderedStructureMemberNames);
							}
						}
					},
					importRestrictedMeasure : function(inaMember, dimension,
							context) {
						return this.importComponent(
								sap.firefly.MemberType.RESTRICTED_MEASURE,
								inaMember, null, dimension, context);
					},
					importBasicMeasure : function(inaMember, qStructure,
							context) {
						return this.importComponent(
								sap.firefly.MemberType.BASIC_MEASURE,
								inaMember, null, qStructure, context);
					},
					importFormulaMeasure : function(inaMember, dimension,
							queryModel) {
						return this.importComponent(
								sap.firefly.MemberType.FORMULA, inaMember,
								null, dimension, queryModel);
					},
					importStructureMember : function(dimension, inaMember,
							context) {
						return this.importComponent(
								sap.firefly.MemberType.ABSTRACT_MEMBER,
								inaMember, null, dimension, context);
					},
					importDimensions : function(inaQueryModel, queryModel,
							context) {
						this.importComponent(
								sap.firefly.OlapComponentType.DIMENSIONS,
								inaQueryModel, queryModel, null, context);
					},
					importDimension : function(inaDimension, context) {
						return this
								.importComponent(
										sap.firefly.OlapComponentType.ABSTRACT_DIMENSION,
										inaDimension, null, null, context);
					},
					importCalculatedDimension : function(inaDimension, context) {
						return this.importComponent(
								sap.firefly.DimensionType.CALCULATED_DIMENSION,
								inaDimension, null, null, context);
					},
					importVariable : function(inaStructure, variableContext) {
						return this.importComponent(
								sap.firefly.VariableType.ANY_VARIABLE,
								inaStructure, null, variableContext,
								variableContext);
					},
					importBasicQueryModelCapabilities : function(queryModel) {
						this.importComponent(
								sap.firefly.OlapComponentType.QUERY_MODEL,
								null, queryModel, null, queryModel);
					},
					importPreQuery : function(inaPreQuery, preQuery) {
						this.importQueryModel(inaPreQuery, preQuery);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QInARepoMemberRestricted",
				sap.firefly.QInARepoMember,
				{
					getComponentType : function() {
						return sap.firefly.MemberType.RESTRICTED_MEASURE;
					},
					newModelComponent : function(application, parentComponent,
							context) {
						var newMember = sap.firefly.QRestrictedMeasure
								._createRestrictedMeasure(context, null);
						newMember.setParent(parentComponent);
						return newMember;
					},
					importComponentWithStructure : function(importer,
							inaStructure, modelComponent, parentComponent,
							context) {
						var restrictedMeasure = modelComponent;
						var dimension = parentComponent;
						var newMemberName = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_NAME);
						var newMemberText = inaStructure
								.getStringByName(sap.firefly.InAConstants.QY_DESCRIPTION);
						var inaExceptionAggregationDimensions;
						var idx;
						var dimName;
						var filter;
						var filterElement;
						var inaFilterElement;
						if (restrictedMeasure === null) {
							restrictedMeasure = dimension
									.addNewRestrictedMeasure(newMemberName,
											newMemberText);
						} else {
							restrictedMeasure.setDimension(dimension);
							restrictedMeasure.setName(newMemberName);
							restrictedMeasure.setText(newMemberText);
						}
						restrictedMeasure
								.setAggregationType(sap.firefly.QInAConverter
										.lookupAggregationType(inaStructure
												.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION)));
						if (restrictedMeasure
								.supportsExceptionAggregationDimsFormulas()) {
							restrictedMeasure
									.setExceptionAggregationType(sap.firefly.QInAConverter
											.lookupAggregationType(inaStructure
													.getStringByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION)));
							restrictedMeasure
									.clearExceptionAggregationDimensions();
							inaExceptionAggregationDimensions = inaStructure
									.getListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
							if (inaExceptionAggregationDimensions !== null) {
								for (idx = 0; idx < inaExceptionAggregationDimensions
										.size(); idx++) {
									dimName = inaExceptionAggregationDimensions
											.getStringByIndex(idx);
									restrictedMeasure
											.addExceptionAggregationDimensionName(dimName);
								}
							}
						} else {
							restrictedMeasure
									.setAggregationDimensionName(inaStructure
											.getStringByName(sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION));
						}
						this.importGenericMemberProperties(restrictedMeasure,
								inaStructure);
						filter = restrictedMeasure.getFilter();
						filterElement = null;
						inaFilterElement = inaStructure
								.getStructureByName(sap.firefly.InAConstants.QY_SELECTION);
						if (inaFilterElement !== null) {
							filterElement = importer.importComponent(null,
									inaFilterElement, null, filter, context);
						}
						filter.setComplexSelection(filterElement);
						return restrictedMeasure;
					},
					exportComponentWithStructure : function(exporter,
							modelComponent, inaStructure, flags) {
						var restrictedMeasure = modelComponent;
						var restrictedAggregationType;
						var inaAggType;
						var inaExceptionAggregationDimensions;
						var exceptionAggregationDimensions;
						var i;
						var aggregationDimensionName;
						var filterRoot;
						var inaElement;
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_NAME,
								restrictedMeasure.getName());
						inaStructure.setStringByName(
								sap.firefly.InAConstants.QY_DESCRIPTION,
								restrictedMeasure.getText());
						restrictedAggregationType = restrictedMeasure
								.getAggregationType();
						if (restrictedAggregationType !== null) {
							inaAggType = sap.firefly.QInAConverter
									.lookupAggregationTypeInA(restrictedAggregationType);
							inaStructure.setStringByNameNotNull(
									sap.firefly.InAConstants.QY_AGGREGATION,
									inaAggType);
						}
						if (restrictedMeasure
								.supportsExceptionAggregationDimsFormulas()) {
							inaExceptionAggregationDimensions = inaStructure
									.setNewListByName(sap.firefly.InAConstants.QY_EXCEPTION_AGGREGATION_DIMENSIONS);
							exceptionAggregationDimensions = restrictedMeasure
									.getExceptionAggregationDimensions();
							for (i = 0; i < exceptionAggregationDimensions
									.size(); i++) {
								inaExceptionAggregationDimensions
										.addString(exceptionAggregationDimensions
												.get(i));
							}
						} else {
							aggregationDimensionName = restrictedMeasure
									.getAggregationDimensionName();
							inaStructure
									.setStringByNameNotNull(
											sap.firefly.InAConstants.QY_AGGREGATION_DIMENSION,
											aggregationDimensionName);
						}
						this.exportGenericMemberProperties(restrictedMeasure,
								inaStructure);
						filterRoot = restrictedMeasure.getFilter()
								.getFilterRootElement();
						if (filterRoot !== null) {
							inaElement = exporter.exportComponent(null,
									filterRoot, null, flags);
							inaStructure.setElementByName(
									sap.firefly.InAConstants.QY_SELECTION,
									inaElement);
						}
						return inaStructure;
					}
				});
$Firefly.createClass("sap.firefly.QInARepoVarHierNode",
		sap.firefly.QInARepoVarDimMember, {
			getComponentType : function() {
				return sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.ResultSet",
				sap.firefly.DfApplicationContext,
				{
					$statics : {
						create : function(resultSetContainer, cursor) {
							var resultSet = new sap.firefly.ResultSet();
							resultSet.setup(resultSetContainer, cursor);
							return resultSet;
						}
					},
					m_resultSetContainer : null,
					m_queryModel : null,
					m_state : null,
					m_convenienceCommands : null,
					m_dataColumns : 0,
					m_dataRows : 0,
					m_cursorResultSet : null,
					m_columnsAxis : null,
					m_rowsAxis : null,
					m_dataCells : null,
					setup : function(resultSetContainer, cursor) {
						this.setupApplicationContext(resultSetContainer
								.getApplication());
						this.setResultSetContainer(resultSetContainer);
						this.m_queryModel = sap.firefly.XWeakReferenceUtil
								.getWeakRef(cursor.getQueryModel());
						this.m_cursorResultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef(cursor);
						this.m_columnsAxis = sap.firefly.RsAxis.create(this,
								sap.firefly.AxisType.COLUMNS, cursor
										.getCursorColumnsAxis());
						this.m_rowsAxis = sap.firefly.RsAxis.create(this,
								sap.firefly.AxisType.ROWS, cursor
										.getCursorRowsAxis());
						this.m_state = cursor.getState();
						if (this.m_state === sap.firefly.ResultSetState.DATA_AVAILABLE) {
							this.m_dataColumns = cursor.getDataColumns();
							this.m_dataRows = cursor.getDataRows();
						} else {
							this.m_dataColumns = -1;
							this.m_dataRows = -1;
						}
					},
					releaseObject : function() {
						var size;
						var i;
						var iRsDataCell;
						this.m_resultSetContainer = null;
						this.m_queryModel = null;
						this.m_state = sap.firefly.ResultSetState.TERMINATED;
						this.m_convenienceCommands = sap.firefly.XObject
								.releaseIfNotNull(this.m_convenienceCommands);
						this.m_dataColumns = -1;
						this.m_dataRows = -1;
						if (this.m_dataCells !== null) {
							size = this.m_dataCells.size();
							for (i = 0; i < size; i++) {
								iRsDataCell = this.m_dataCells.get(i);
								if (iRsDataCell !== null) {
									iRsDataCell.releaseObject();
								}
							}
							this.m_dataCells = sap.firefly.XObject
									.releaseIfNotNull(this.m_dataCells);
						}
						this.m_columnsAxis = sap.firefly.XObject
								.releaseIfNotNull(this.m_columnsAxis);
						this.m_rowsAxis = sap.firefly.XObject
								.releaseIfNotNull(this.m_rowsAxis);
						this.m_cursorResultSet = null;
						sap.firefly.ResultSet.$superclass.releaseObject
								.call(this);
					},
					isActive : function() {
						return this.getResultSetContainer() !== null;
					},
					setResultSetContainer : function(resultSetContainer) {
						this.m_resultSetContainer = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultSetContainer);
					},
					getResultSetContainer : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultSetContainer);
					},
					getQueryManager : function() {
						return this.getResultSetContainer().getQueryManager();
					},
					getQueryModel : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryModel);
					},
					getConvenienceCommands : function() {
						if (this.m_convenienceCommands === null) {
							this.m_convenienceCommands = sap.firefly.RsConvenienceCommands
									.create(this);
						}
						return this.m_convenienceCommands;
					},
					getDataColumns : function() {
						return this.m_dataColumns;
					},
					getDataRows : function() {
						return this.m_dataRows;
					},
					getAvailableDataCellCount : function() {
						if (this.m_state === sap.firefly.ResultSetState.DATA_AVAILABLE) {
							return this.m_dataColumns * this.m_dataRows;
						}
						return -1;
					},
					getState : function() {
						return this.m_state;
					},
					getRowsAxis : function() {
						return this.m_rowsAxis;
					},
					getColumnsAxis : function() {
						return this.m_columnsAxis;
					},
					getAxis : function(axis) {
						if (axis === sap.firefly.AxisType.ROWS) {
							return this.m_rowsAxis;
						}
						return this.m_columnsAxis;
					},
					setupDataCells : function() {
						var size = this.m_dataColumns * this.m_dataRows;
						var index;
						var cursorResultSet;
						var y;
						var x;
						this.m_dataCells = sap.firefly.XArray.create(size);
						index = 0;
						cursorResultSet = this.getCursorResultSet();
						for (y = 0; y < this.m_dataRows; y++) {
							for (x = 0; x < this.m_dataColumns; x++) {
								this.m_dataCells.set(index,
										sap.firefly.RsDataCell.createCopy(this,
												cursorResultSet.getDataCell(x,
														y)));
								index++;
							}
						}
					},
					getDataCell : function(column, row) {
						if ((column < 0) || (column > this.m_dataColumns)) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3(
													"Column index is invalid, valid indices are [0, ",
													sap.firefly.XIntegerValue
															.create(
																	this.m_dataColumns)
															.toString(), "]"));
						}
						if ((row < 0) || (row > this.m_dataRows)) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3(
													"Row index is invalid, valid indices are [0, ",
													sap.firefly.XIntegerValue
															.create(
																	this.m_dataRows)
															.toString(), "]"));
						}
						if (this.m_dataCells === null) {
							this.setupDataCells();
						}
						return this.m_dataCells.get(column
								+ (row * this.m_dataColumns));
					},
					getDataCellByTuples : function(columnTuple, rowTuple) {
						return this.getDataCell(columnTuple.getAxisIndex(),
								rowTuple.getAxisIndex());
					},
					isValid : function() {
						return this.getCursorResultSet().isValid();
					},
					hasErrors : function() {
						return this.getCursorResultSet().hasErrors();
					},
					getNumberOfErrors : function() {
						return this.getCursorResultSet().getNumberOfErrors();
					},
					hasSeverity : function(severity) {
						return this.getCursorResultSet().hasSeverity(severity);
					},
					getNumberOfSeverity : function(severity) {
						return this.getCursorResultSet().getNumberOfSeverity(
								severity);
					},
					getFirstWithSeverity : function(severity) {
						return this.getCursorResultSet().getFirstWithSeverity(
								severity);
					},
					getErrors : function() {
						return this.getCursorResultSet().getErrors();
					},
					getWarnings : function() {
						return this.getCursorResultSet().getWarnings();
					},
					getInfos : function() {
						return this.getCursorResultSet().getInfos();
					},
					getSemanticalErrors : function() {
						return this.getCursorResultSet().getSemanticalErrors();
					},
					getMessages : function() {
						return this.getCursorResultSet().getMessages();
					},
					getFirstError : function() {
						return this.getCursorResultSet().getFirstError();
					},
					getSummary : function() {
						return this.getCursorResultSet().getSummary();
					},
					isDataEntryEnabled : function() {
						return this.getCursorResultSet().isDataEntryEnabled();
					},
					getInputReadinessStates : function() {
						return this.getCursorResultSet()
								.getInputReadinessStates();
					},
					getInputReadinessStateByIndex : function(index) {
						var cursorResultSet = this.getCursorResultSet();
						return cursorResultSet
								.getInputReadinessStateByIndex(index);
					},
					getRootProfileNode : function() {
						return this.getCursorResultSet().getRootProfileNode();
					},
					isNewLinePossible : function() {
						if (this.isDataEntryEnabled() === false) {
							return false;
						}
						return this.getDataEntryMask().hasElements();
					},
					getCursorResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cursorResultSet);
					},
					getDataEntryMask : function() {
						return this.getCursorResultSet().getDataEntryMask();
					},
					getResultSetType : function() {
						return sap.firefly.ResultSetType.CLASSIC;
					},
					getRsQueryModelDef : function() {
						return this.getCursorResultSet().getRsQueryModelDef();
					},
					resetNewValues : function() {
						var i;
						var dataCell;
						if (this.m_dataCells !== null) {
							for (i = 0; i < this.m_dataCells.size(); i++) {
								dataCell = this.m_dataCells.get(i);
								dataCell.resetAllChanges();
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsCursorFieldValue",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(field) {
							var object = new sap.firefly.RsCursorFieldValue();
							object.setup(field);
							return object;
						}
					},
					m_field : null,
					m_formattedValue : null,
					m_errorValue : null,
					m_dateValue : null,
					m_timeValue : null,
					m_dateTimeValue : null,
					m_timespanValue : null,
					m_stringValue : null,
					m_intValue : null,
					m_longValue : null,
					m_doubleValue : null,
					m_booleanValue : null,
					m_propertiesValue : null,
					m_structureValue : null,
					m_structureListValue : null,
					m_lineStringValue : null,
					m_multiLineStringValue : null,
					m_polygonValue : null,
					m_multiPolygonValue : null,
					m_pointValue : null,
					m_multiPointValue : null,
					m_currentValue : null,
					m_valueException : null,
					setup : function(field) {
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					releaseObject : function() {
						this.m_field = null;
						this.m_intValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_intValue);
						this.m_longValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_longValue);
						this.m_doubleValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_doubleValue);
						this.m_booleanValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_booleanValue);
						this.m_timeValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_timeValue);
						this.m_stringValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_stringValue);
						this.m_formattedValue = null;
						this.m_valueException = null;
						this.m_currentValue = null;
						this.m_dateValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_dateValue);
						this.m_errorValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_errorValue);
						this.m_dateTimeValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_dateTimeValue);
						this.m_timespanValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_timespanValue);
						this.m_propertiesValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_propertiesValue);
						this.m_structureValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_structureValue);
						this.m_lineStringValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_lineStringValue);
						this.m_multiLineStringValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_multiLineStringValue);
						this.m_polygonValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_polygonValue);
						this.m_multiPolygonValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_multiPolygonValue);
						this.m_pointValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_pointValue);
						this.m_multiPointValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_multiPointValue);
						sap.firefly.RsCursorFieldValue.$superclass.releaseObject
								.call(this);
					},
					getFormattedValue : function() {
						return this.m_formattedValue;
					},
					setFormattedValue : function(formattedValue) {
						this.m_formattedValue = formattedValue;
					},
					getDateValue : function() {
						return this.m_dateValue;
					},
					setCurrentValue : function(currentValue) {
						this.m_currentValue = sap.firefly.XWeakReferenceUtil
								.getWeakRef(currentValue);
					},
					setDateValue : function(dateValue) {
						this.m_dateValue = dateValue;
						this.setCurrentValue(dateValue);
					},
					setTimeValue : function(timeValue) {
						this.m_timeValue = timeValue;
						this.setCurrentValue(this.m_timeValue);
					},
					getTimeValue : function() {
						return this.m_timeValue;
					},
					setDateTimeValue : function(dateTimeValue) {
						this.m_dateTimeValue = dateTimeValue;
						this.setCurrentValue(this.m_dateTimeValue);
					},
					getDateTimeValue : function() {
						return this.m_dateTimeValue;
					},
					getStringValue : function() {
						return this.getValue().toString();
					},
					setStringValue : function(stringValue) {
						if (this.m_stringValue === null) {
							this.m_stringValue = sap.firefly.XStringValue
									.create(stringValue);
						} else {
							this.m_stringValue.setStringValue(stringValue);
						}
						this.setCurrentValue(this.m_stringValue);
					},
					getIntegerValue : function() {
						if (this.m_intValue === null) {
							return 0;
						}
						return this.m_intValue.getIntegerValue();
					},
					setIntegerValue : function(integerValue) {
						if (this.m_intValue === null) {
							this.m_intValue = sap.firefly.XIntegerValue
									.create(integerValue);
						} else {
							this.m_intValue.setIntegerValue(integerValue);
						}
						this.setCurrentValue(this.m_intValue);
					},
					getLongValue : function() {
						if (this.m_longValue === null) {
							return 0;
						}
						return this.m_longValue.getLongValue();
					},
					setLongValue : function(longValue) {
						if (this.m_longValue === null) {
							this.m_longValue = sap.firefly.XLongValue
									.create(longValue);
						} else {
							this.m_longValue.setLongValue(longValue);
						}
						this.setCurrentValue(this.m_longValue);
					},
					getDoubleValue : function() {
						if (this.m_doubleValue === null) {
							return 0;
						}
						return this.m_doubleValue.getDoubleValue();
					},
					setDoubleValue : function(doubleValue) {
						if (this.m_doubleValue === null) {
							this.m_doubleValue = sap.firefly.XDoubleValue
									.create(doubleValue);
						} else {
							this.m_doubleValue.setDoubleValue(doubleValue);
						}
						this.setCurrentValue(this.m_doubleValue);
					},
					getBooleanValue : function() {
						if (this.m_booleanValue === null) {
							return false;
						}
						return this.m_booleanValue.getBooleanValue();
					},
					setBooleanValue : function(booleanValue) {
						if (this.m_booleanValue === null) {
							this.m_booleanValue = sap.firefly.XBooleanValue
									.create(booleanValue);
						} else {
							this.m_booleanValue.setBooleanValue(booleanValue);
						}
						this.setCurrentValue(this.m_booleanValue);
					},
					getGeometry : function() {
						return this.getValue();
					},
					getPolygonValue : function() {
						return this.m_polygonValue;
					},
					setPolygonValue : function(value) {
						this.m_polygonValue = value;
						this.setCurrentValue(this.m_polygonValue);
					},
					getPointValue : function() {
						return this.m_pointValue;
					},
					setPointValue : function(value) {
						this.m_pointValue = value;
						this.setCurrentValue(this.m_pointValue);
					},
					getTimeSpanValue : function() {
						return this.m_timespanValue;
					},
					setTimeSpanValue : function(value) {
						this.m_timespanValue = value;
						this.setCurrentValue(this.m_timespanValue);
					},
					getPropertiesValue : function() {
						return this.m_propertiesValue;
					},
					setPropertiesValue : function(properties) {
						this.m_propertiesValue = properties;
						this.setCurrentValue(this.m_propertiesValue);
					},
					getStructureValue : function() {
						return this.m_structureValue;
					},
					getStructureListValue : function() {
						return this.m_structureListValue;
					},
					setStructureValue : function(value) {
						this.m_structureValue = value;
						this.setCurrentValue(this.m_structureValue);
					},
					setStructureListValue : function(value) {
						this.m_structureListValue = value;
						this.setCurrentValue(this.m_structureListValue);
					},
					getErrorValue : function() {
						return this.m_errorValue;
					},
					setErrorValue : function(value) {
						this.m_errorValue = value;
						this.setCurrentValue(this.m_errorValue);
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					getValueType : function() {
						return this.getField().getValueType();
					},
					createFieldValueFromCurrentPosition : function() {
						var field = this.getField();
						var fieldValue = sap.firefly.QFieldValue.create(field
								.getContext(), field, null);
						var copy;
						if (this.m_currentValue !== null) {
							copy = this.getValue().clone();
							fieldValue.setValue(copy);
							fieldValue.setFormattedValue(this.m_formattedValue);
						}
						fieldValue.setValueException(this.m_valueException);
						return fieldValue;
					},
					getValue : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_currentValue);
					},
					copyFrom : function(source) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDimensionMember : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPolygonValue : function() {
						return this.m_multiPolygonValue;
					},
					setMultiPolygonValue : function(value) {
						this.m_multiPolygonValue = value;
						this.setCurrentValue(this.m_multiPolygonValue);
					},
					getLineStringValue : function() {
						return this.m_lineStringValue;
					},
					setLineStringValue : function(value) {
						this.m_lineStringValue = value;
						this.setCurrentValue(this.m_lineStringValue);
					},
					getMultiLineStringValue : function() {
						return this.m_multiLineStringValue;
					},
					setMultiLineStringValue : function(value) {
						this.m_multiLineStringValue = value;
						this.setCurrentValue(this.m_multiLineStringValue);
					},
					getNullValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setNullValue : function(nullValueType) {
						this.setCurrentValue(sap.firefly.XValueAccess
								.createWithType(nullValueType).getValue());
					},
					getValueException : function() {
						return this.m_valueException;
					},
					setValueException : function(valueException) {
						this.m_valueException = valueException;
					},
					getMultiPointValue : function() {
						return this.m_multiPointValue;
					},
					setMultiPointValue : function(value) {
						this.m_multiPointValue = value;
						this.setCurrentValue(this.m_multiPointValue);
					},
					hasValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					parseStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setXValue : function(value) {
						this.copyFrom(sap.firefly.XValueAccess
								.createWithValue(value));
					}
				});
$Firefly.createClass("sap.firefly.RsDefQueryModel", sap.firefly.XObject, {
	$statics : {
		create : function(queryModel, dimension) {
			var object = new sap.firefly.RsDefQueryModel();
			object.setup(queryModel, dimension);
			return object;
		}
	},
	m_queryModel : null,
	m_rows : null,
	m_cols : null,
	setup : function(queryModel, dimension) {
		this.m_queryModel = sap.firefly.XWeakReferenceUtil
				.getWeakRef(queryModel);
		if (queryModel === null) {
			this.m_rows = sap.firefly.RsDefAxis.create(
					sap.firefly.AxisType.ROWS, null, false);
			this.m_cols = sap.firefly.RsDefAxis.create(
					sap.firefly.AxisType.COLUMNS, null, false);
		} else {
			if (dimension === null) {
				this.m_rows = sap.firefly.RsDefAxis.create(
						sap.firefly.AxisType.ROWS, queryModel.getRowsAxis(),
						true);
				this.m_cols = sap.firefly.RsDefAxis.create(
						sap.firefly.AxisType.COLUMNS, queryModel
								.getColumnsAxis(), true);
			} else {
				this.m_rows = sap.firefly.RsDefAxis.create(
						sap.firefly.AxisType.ROWS, queryModel.getRowsAxis(),
						false);
				this.m_cols = sap.firefly.RsDefAxis.create(
						sap.firefly.AxisType.COLUMNS, queryModel
								.getColumnsAxis(), false);
				this.m_rows.addDimension(dimension);
			}
		}
	},
	releaseObject : function() {
		this.m_queryModel = null;
		if (this.m_cols !== null) {
			this.m_cols.releaseObject();
			this.m_cols = null;
		}
		if (this.m_rows !== null) {
			this.m_rows.releaseObject();
			this.m_rows = null;
		}
		sap.firefly.RsDefQueryModel.$superclass.releaseObject.call(this);
	},
	getComponentType : function() {
		return null;
	},
	getRowsAxisDef : function() {
		return this.m_rows;
	},
	getColumnsAxisDef : function() {
		return this.m_cols;
	},
	getAxisDef : function(axis) {
		if (axis === sap.firefly.AxisType.ROWS) {
			return this.m_rows;
		}
		return this.m_cols;
	},
	getOffsetRows : function() {
		return 0;
	},
	getOffsetColumns : function() {
		return 0;
	},
	getMaxRows : function() {
		return 0;
	},
	getMaxColumns : function() {
		return 0;
	},
	getExecuteRequestOnOldResultSet : function() {
		return false;
	},
	hasMoreColumnRecordsAvailable : function() {
		return false;
	},
	hasMoreRowRecordsAvailable : function() {
		return false;
	},
	getMaxResultRecords : function() {
		return 0;
	},
	getResultSetPersistanceSchema : function() {
		return null;
	},
	getResultSetPersistanceTable : function() {
		return null;
	},
	getResultSetPersistanceIdentifier : function() {
		return null;
	},
	isResultSetPersistanceEnabled : function() {
		return false;
	},
	isResultSetTransportEnabled : function() {
		return true;
	},
	getContext : function() {
		return this;
	},
	getVariableContainer : function() {
		return null;
	},
	getDimensionAccessor : function() {
		return null;
	},
	getDrillManager : function() {
		return null;
	},
	getFieldAccessorSingle : function() {
		return null;
	},
	getApplication : function() {
		return this.getQueryModel().getApplication();
	},
	getSession : function() {
		return this.getApplication().getSession();
	},
	getQueryModel : function() {
		return sap.firefly.XWeakReferenceUtil.getHardRef(this.m_queryModel);
	},
	getQueryManager : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getModelCapabilities : function() {
		return this.getQueryModel().getModelCapabilities();
	},
	getOlapEnv : function() {
		return this.getApplication().getOlapEnvironment();
	},
	getDataSource : function() {
		return this.getQueryModel().getDataSource();
	}
});
$Firefly.createClass("sap.firefly.QOlapSyncAction", sap.firefly.SyncAction, {
	releaseObject : function() {
		sap.firefly.QOlapSyncAction.$superclass.releaseObject.call(this);
	},
	getComponentType : function() {
		return sap.firefly.XComponentType._ACTION;
	},
	getApplication : function() {
		return this.getActionContext().getApplication();
	},
	getOlapEnv : function() {
		return this.getActionContext().getOlapEnv();
	},
	getContext : function() {
		return this.getActionContext().getContext();
	},
	getQueryManager : function() {
		return this.getContext().getQueryManager();
	},
	getQueryManagerBase : function() {
		return this.getContext().getQueryManager();
	},
	getQueryModel : function() {
		return this.getContext().getQueryModel();
	},
	getDataSource : function() {
		return this.getContext().getDataSource();
	},
	getQueryModelBase : function() {
		return this.getContext().getQueryModel();
	},
	getVariableContainer : function() {
		return this.getContext().getVariableContainer();
	},
	getDimensionAccessor : function() {
		return this.getContext().getDimensionAccessor();
	},
	getFieldAccessorSingle : function() {
		return this.getContext().getFieldAccessorSingle();
	},
	getModelCapabilities : function() {
		return this.getContext().getModelCapabilities();
	},
	getDrillManager : function() {
		return this.getContext().getDrillManager();
	},
	queueEventing : function() {
	},
	stopEventing : function() {
	},
	isEventingStopped : function() {
		return false;
	},
	resumeEventing : function() {
	}
});
$Firefly.createClass("sap.firefly.OlapEnvironment", sap.firefly.XObject, {
	$statics : {
		create : function(application) {
			var newObj = new sap.firefly.OlapEnvironment();
			newObj.setupEnv(application);
			return newObj;
		}
	},
	m_application : null,
	m_defaultArea : null,
	m_areas : null,
	m_isCmdTracing : false,
	m_variables : null,
	m_traceOffset : 0,
	m_traces : null,
	setupEnv : function(application) {
		this.setApplication(application);
		this.m_areas = sap.firefly.XListOfNameObject.create();
	},
	releaseObject : function() {
		var i;
		if (this.m_areas !== null) {
			for (i = 0; i < this.m_areas.size(); i++) {
				this.m_areas.get(i).releaseObject();
			}
			this.m_areas.releaseObject();
			this.m_areas = null;
		}
		this.m_defaultArea = null;
		this.m_application = null;
		sap.firefly.OlapEnvironment.$superclass.releaseObject.call(this);
	},
	getComponentType : function() {
		return sap.firefly.OlapComponentType.OLAP_ENVIRONMENT;
	},
	getArea : function(name) {
		return this.m_areas.getByKey(name);
	},
	newArea : function(name, text, isDefault) {
		var area = sap.firefly.OlapEnvArea.createArea(this);
		area.setName(name);
		area.setText(text);
		this.m_areas.add(area);
		if (isDefault) {
			this.m_defaultArea = area;
		}
		return area;
	},
	setDefaultArea : function(name) {
		var area = this.getArea(name);
		this.m_defaultArea = area;
		return area;
	},
	getAllAreas : function() {
		return this.m_areas;
	},
	unregisterArea : function(area) {
		this.m_areas.removeElement(area);
		if (this.m_defaultArea === area) {
			this.m_defaultArea = null;
		}
	},
	getDefaultArea : function() {
		if (this.m_defaultArea === null) {
			if (this.m_areas.size() > 0) {
				this.m_defaultArea = this.m_areas.get(0);
			} else {
				this.newArea("defaultArea", "Default Area", true);
			}
		}
		return this.m_defaultArea;
	},
	getAllAreaQueryManager : function() {
		return this.getDefaultArea().getAllAreaQueryManager();
	},
	getQueryManagerByName : function(name) {
		return this.getDefaultArea().getQueryManagerByName(name);
	},
	getName : function() {
		return this.getDefaultArea().getName();
	},
	getText : function() {
		return this.getDefaultArea().getText();
	},
	getVariableProcessor : function() {
		return this.getDefaultArea().getVariableProcessor();
	},
	getOlapEnvironment2 : function() {
		return this;
	},
	getOlapEnv : function() {
		return this;
	},
	getOlapEnvironment : function() {
		return this;
	},
	getMemoryManager : function() {
		return this.getSession().getMemoryManager();
	},
	addWarning : function(warning) {
		this.getSession().addMessage(warning);
	},
	addMessage : function(message) {
		this.getSession().addMessage(message);
	},
	getNextSid : function() {
		return this.getSession().getNextSid();
	},
	getAppSessionId : function() {
		return this.getSession().getAppSessionId();
	},
	setAppSessionId : function(appSessionId) {
		this.getSession().setAppSessionId(appSessionId);
	},
	getSessionSingletons : function() {
		return this.getSession().getSessionSingletons();
	},
	setDefaultSyncType : function(syncType) {
		this.getSession().setDefaultSyncType(syncType);
	},
	getDefaultSyncType : function() {
		return this.getSession().getDefaultSyncType();
	},
	getListenerProcessor : function() {
		return this.getSession().getListenerProcessor();
	},
	setListenerProcessor : function(processor) {
		this.getSession().setListenerProcessor(processor);
	},
	getVersion : function() {
		return this.getSession().getVersion();
	},
	getWorkingTaskManager : function() {
		return this.getSession().getWorkingTaskManager();
	},
	getApplicationName : function() {
		return this.getApplication().getApplicationName();
	},
	getErrorManager : function() {
		return this.getApplication().getErrorManager();
	},
	getSystemLandscape : function() {
		return this.getApplication().getSystemLandscape();
	},
	getConnectionPool : function() {
		return this.getApplication().getConnectionPool();
	},
	createFileObject : function(path) {
		return this.getApplication().createFileObject(path);
	},
	getUiManager : function() {
		return this.getApplication().getUiManager();
	},
	getServices : function(serviceType) {
		return this.getApplication().getServices(serviceType);
	},
	createNextInstanceId : function() {
		return this.getApplication().createNextInstanceId();
	},
	setStructureCacheEntry : function(key, entry) {
		this.getApplication().setStructureCacheEntry(key, entry);
	},
	deleteStructureCacheEntry : function(key) {
		this.getApplication().deleteStructureCacheEntry(key);
	},
	getStructureCacheEntry : function(key) {
		return this.getApplication().getStructureCacheEntry(key);
	},
	getDataProviders : function() {
		return this.getApplication().getDataProviders();
	},
	writelog : function(logline) {
		this.getApplication().writelog(logline);
	},
	setApplicationName : function(name) {
		this.getApplicationBase().setApplicationName(name);
	},
	setErrorManager : function(errorManager) {
		this.getApplicationBase().setErrorManager(errorManager);
	},
	setLandscape : function(systemLandscape) {
		this.getApplicationBase().setLandscape(systemLandscape);
	},
	registerService : function(service) {
		this.getApplicationBase().registerService(service);
	},
	unregisterService : function(service) {
		this.getApplicationBase().unregisterService(service);
	},
	registerDataProvider : function(dataProvider) {
		this.getApplicationBase().registerDataProvider(dataProvider);
	},
	unregisterDataProvider : function(dataProvider) {
		this.getApplicationBase().unregisterDataProvider(dataProvider);
	},
	setLogger : function(logger) {
		this.getApplicationBase().setLogger(logger);
	},
	_setExtendedContext : function(context) {
		this.getApplicationBase()._setExtendedContext(context);
	},
	_getExtendedContext : function() {
		return this.getApplicationBase()._getExtendedContext();
	},
	isSapStatisticsEnabled : function() {
		return this.getApplication().isSapStatisticsEnabled();
	},
	setSapStatisticsEnabled : function(enabled) {
		this.getApplicationBase().setSapStatisticsEnabled(enabled);
	},
	setTracing : function(enableTracing) {
		if (this.m_isCmdTracing !== enableTracing) {
			this.m_isCmdTracing = enableTracing;
			if (enableTracing) {
				this.m_traces = sap.firefly.XList.create();
				this.m_traceOffset = 0;
			} else {
				this.m_traces = sap.firefly.XObject
						.releaseIfNotNull(this.m_traces);
			}
		}
	},
	isTracing : function() {
		return this.m_traces !== null;
	},
	getTracingLog : function() {
		var buffer = sap.firefly.XStringBuffer.create();
		var i;
		var cmd;
		if (this.m_traces !== null) {
			for (i = 0; i < this.m_traces.size(); i++) {
				cmd = this.m_traces.get(i);
				buffer.append(cmd.toString());
				buffer.appendNewLine();
			}
		} else {
			buffer.append("[Tracing not enabled]");
		}
		return buffer.toString();
	},
	setReplacementVariables : function(variables, varPrefix, varPostfix,
			lookupNamespace) {
		this.m_variables = variables;
	},
	replaceVariable : function(name) {
		if (this.m_variables === null) {
			return name;
		}
		return this.m_variables.getStringByNameWithDefault(name, name);
	},
	addTraceEntry : function(entry) {
		if (this.m_traces !== null) {
			this.m_traces.add(entry);
		}
	},
	getTraceChunk : function() {
		var chunk = this.m_traces;
		if (this.m_traces !== null) {
			this.m_traceOffset = this.m_traceOffset + this.m_traces.size();
			this.m_traces = sap.firefly.XList.create();
		}
		return chunk;
	},
	getTraceOffset : function() {
		return this.m_traceOffset;
	},
	selectCmds : function(olapObject) {
		var cmds = sap.firefly.QConvenienceCmdsSpace.create(this);
		cmds.addElement(olapObject);
		return cmds;
	},
	select : function(sigSelExpression) {
		var set = sap.firefly.QConvenienceCmdsSpace.createBySelection(this,
				sigSelExpression);
		return set;
	},
	getSession : function() {
		return this.getApplication().getSession();
	},
	getApplication : function() {
		return sap.firefly.XWeakReferenceUtil.getHardRef(this.m_application);
	},
	getApplicationBase : function() {
		return sap.firefly.XWeakReferenceUtil.getHardRef(this.m_application);
	},
	setApplication : function(application) {
		this.m_application = sap.firefly.XWeakReferenceUtil
				.getWeakRef(application);
	},
	getContext : function() {
		return this;
	},
	getQueryModel : function() {
		return null;
	},
	getVariableContainer : function() {
		return null;
	},
	getDimensionAccessor : function() {
		return null;
	},
	getQueryModelBase : function() {
		return null;
	},
	getQueryManager : function() {
		return null;
	},
	getFieldAccessorSingle : function() {
		return null;
	},
	getModelCapabilities : function() {
		return null;
	},
	getDrillManager : function() {
		return null;
	},
	setContext : function(context) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	toString : function() {
		if (this.m_application === null) {
			return "";
		}
		return this.m_application.toString();
	},
	getDataSource : function() {
		return null;
	}
});
$Firefly
		.createClass(
				"sap.firefly.RsAxis",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(resultset, axisType, cursor) {
							var object = new sap.firefly.RsAxis();
							object.setup(resultset, axisType, cursor);
							return object;
						}
					},
					m_resultset : null,
					m_axisType : null,
					m_dataCount : 0,
					m_tuplesCount : 0,
					m_tuplesCountTotal : 0,
					m_tupleElementCount : 0,
					m_cursor : null,
					m_tuples : null,
					m_indexLookupViaName : null,
					m_indexLookupViaType : null,
					m_rsDimensions : null,
					m_dimensionsList : null,
					setup : function(resultset, axisType, cursor) {
						var size;
						var i;
						var axisBase;
						var size2;
						var k;
						this.setResultSet(resultset);
						this.m_axisType = axisType;
						this.m_cursor = sap.firefly.XWeakReferenceUtil
								.getWeakRef(cursor);
						this.m_rsDimensions = cursor.getRsDimensions();
						this.m_dimensionsList = sap.firefly.XListWeakRef
								.create();
						if (cursor.supportsLayoutFromResultset()) {
							size = this.m_rsDimensions.size();
							for (i = 0; i < size; i++) {
								this.m_dimensionsList.add(this.m_rsDimensions
										.get(i).getDimension());
							}
						} else {
							axisBase = resultset.getQueryModel().getAxis(
									axisType);
							size2 = axisBase.size();
							for (k = 0; k < size2; k++) {
								this.m_dimensionsList.add(axisBase.get(k));
							}
						}
						this.m_tupleElementCount = cursor
								.getTupleElementsCount();
						this.m_tuplesCount = cursor.getTuplesCount();
						this.m_tuplesCountTotal = cursor.getTuplesCountTotal();
						this.m_dataCount = cursor.getDataCount();
					},
					releaseObject : function() {
						this.m_tuples = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_tuples);
						this.m_indexLookupViaName = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_indexLookupViaName);
						this.m_indexLookupViaType = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_indexLookupViaType);
						this.m_dimensionsList = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimensionsList);
						this.m_resultset = null;
						this.m_axisType = null;
						this.m_cursor = null;
						this.m_dataCount = -1;
						this.m_tuplesCount = -1;
						this.m_tuplesCountTotal = -1;
						this.m_tupleElementCount = -1;
						sap.firefly.RsAxis.$superclass.releaseObject.call(this);
					},
					getDimensions : function() {
						return this.m_dimensionsList;
					},
					createCursorAccessor : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cursor);
					},
					getDataCount : function() {
						return this.m_dataCount;
					},
					getTuplesCount : function() {
						return this.m_tuplesCount;
					},
					getTuplesCountTotal : function() {
						return this.m_tuplesCountTotal;
					},
					getTupleElementsCount : function() {
						return this.m_tupleElementCount;
					},
					getTupleByIndex : function(index) {
						this.setupStorage();
						return this.m_tuples.get(index);
					},
					getAllMembers : function(dimension) {
						var memberMap = this.setupStorage();
						var selectName;
						var dimensionSize;
						var idxDimension;
						var name;
						var ixMapByString;
						var iterator;
						var list;
						var list2;
						var tupleSize;
						var idxTuple;
						if (memberMap !== null) {
							selectName = dimension.getName();
							dimensionSize = this.m_dimensionsList.size();
							for (idxDimension = 0; idxDimension < dimensionSize; idxDimension++) {
								name = this.m_dimensionsList.get(idxDimension)
										.getName();
								if (sap.firefly.XString.isEqual(selectName,
										name)) {
									ixMapByString = memberMap.get(idxDimension);
									iterator = ixMapByString.getIterator();
									list = sap.firefly.XList.create();
									while (iterator.hasNext()) {
										list.add(iterator.next());
									}
									iterator.releaseObject();
									return list;
								}
							}
						} else {
							if (this.m_tuples !== null) {
								list2 = sap.firefly.XList.create();
								tupleSize = this.m_tuples.size();
								for (idxTuple = 0; idxTuple < tupleSize; idxTuple++) {
									list2.add(this.m_tuples.get(idxTuple)
											.getElementByDimension(dimension)
											.getDimensionMember());
								}
								return list2;
							}
						}
						return null;
					},
					getTuplesIterator : function() {
						this.setupStorage();
						return this.m_tuples.getIterator();
					},
					setupStorage : function() {
						var memberMap = null;
						var cursor;
						var dimensionsOnAxis;
						var dimIndex;
						var dimMemberMap;
						var elements;
						var positionOnAxis;
						var axisTuple;
						var tupleElementPosition;
						var dimensionMemberKey;
						var currentMemberType;
						var isResultMember;
						var lastTupleElement;
						var lastDimensionMember;
						var lastDimMemberName;
						var isNewMemberName;
						var lastDimMemberType;
						var isNewMemberType;
						var allResponseMembers;
						var dimensionMember;
						var nodeId;
						var tupleElement;
						var k;
						if (this.m_tuples === null) {
							if (this.m_tuples === null) {
								this.m_tuples = sap.firefly.XList.create();
							}
							cursor = this.createCursorAccessor();
							cursor.setTupleCursorBeforeStart();
							dimensionsOnAxis = cursor.getTupleElementsCount();
							memberMap = sap.firefly.XArray
									.create(dimensionsOnAxis);
							for (dimIndex = 0; dimIndex < dimensionsOnAxis; dimIndex++) {
								dimMemberMap = sap.firefly.XLinkedHashMapByString
										.create();
								memberMap.set(dimIndex, dimMemberMap);
							}
							elements = sap.firefly.XArray
									.create(dimensionsOnAxis);
							for (positionOnAxis = 0; cursor.hasNextTuple(); positionOnAxis++) {
								cursor.nextTuple();
								axisTuple = sap.firefly.RsAxisTuple.create(
										this, positionOnAxis);
								for (tupleElementPosition = 0; cursor
										.hasNextTupleElement(); tupleElementPosition++) {
									cursor.nextTupleElement();
									if (cursor
											.getDimensionMemberNameValueException() === sap.firefly.ValueException.NULL_VALUE) {
										dimensionMemberKey = "$$NullKey$$";
									} else {
										dimensionMemberKey = cursor
												.getDimensionMemberName();
									}
									currentMemberType = cursor
											.getDimensionMemberType();
									isResultMember = ((currentMemberType === sap.firefly.MemberType.RESULT)
											|| (currentMemberType === sap.firefly.MemberType.CONDITION_OTHERS_RESULT) || (currentMemberType === sap.firefly.MemberType.CONDITION_RESULT));
									lastTupleElement = elements
											.get(tupleElementPosition);
									if (lastTupleElement !== null) {
										lastDimensionMember = lastTupleElement
												.getDimensionMember();
										lastDimMemberName = lastDimensionMember
												.getName();
										isNewMemberName = sap.firefly.XString
												.isEqual(dimensionMemberKey,
														lastDimMemberName) === false;
										lastDimMemberType = lastDimensionMember
												.getMemberType();
										isNewMemberType = lastDimMemberType !== currentMemberType;
										if (isNewMemberName
												|| isNewMemberType
												|| (lastDimensionMember
														.getDimensionMemberNameValueException() === sap.firefly.ValueException.NULL_VALUE)) {
											lastTupleElement = null;
										}
										if (isNewMemberType
												&& (isNewMemberName === false)
												&& isResultMember) {
											dimensionMemberKey = currentMemberType
													.getName();
										}
									} else {
										if (isResultMember) {
											dimensionMemberKey = currentMemberType
													.getName();
										}
									}
									if (lastTupleElement === null) {
										allResponseMembers = memberMap
												.get(tupleElementPosition);
										dimensionMember = allResponseMembers
												.getByKey(dimensionMemberKey);
										if (dimensionMember === null) {
											dimensionMember = cursor
													.createDimensionMemberFromCurrentPosition();
											allResponseMembers.put(
													dimensionMemberKey,
													dimensionMember);
										}
										nodeId = cursor.getNodeId();
										if (currentMemberType
												.isTypeOf(sap.firefly.MemberType.RESULT)
												&& sap.firefly.XStringUtils
														.isNullOrEmpty(nodeId)) {
											nodeId = cursor
													.getDimensionMemberName();
										}
										tupleElement = sap.firefly.RsAxisTupleElement
												.create(
														this,
														nodeId,
														dimensionMember,
														tupleElementPosition,
														cursor.getDrillState(),
														cursor
																.getDisplayLevel(),
														cursor.getChildCount());
										tupleElement.setFirstTuple(axisTuple);
										tupleElement.setExceptionName(cursor
												.getExceptionName());
										tupleElement.setAlertLevel(cursor
												.getAlertLevel());
										elements.set(tupleElementPosition,
												tupleElement);
										for (k = tupleElementPosition + 1; k < dimensionsOnAxis; k++) {
											elements.set(k, null);
										}
									}
								}
								axisTuple.setTupleElements(elements
										.createArrayCopy());
								this.m_tuples.add(axisTuple);
							}
							this.setParentNodes();
						}
						return memberMap;
					},
					setParentNodes : function() {
						var cursor = this.createCursorAccessor();
						var idxTuple;
						var idxTupleElement;
						var parentIndex;
						var tupleElement;
						cursor.setTupleCursorToIndex(0);
						cursor.setTupleCursorBeforeStart();
						for (idxTuple = 0; cursor.hasNextTuple(); idxTuple++) {
							cursor.nextTuple();
							for (idxTupleElement = 0; cursor
									.hasNextTupleElement(); idxTupleElement++) {
								cursor.nextTupleElement();
								parentIndex = cursor.getParentNodeIndex();
								if (parentIndex > -1) {
									tupleElement = this.m_tuples.get(idxTuple)
											.getElementByIndex(idxTupleElement);
									tupleElement
											.setParentNode(this.m_tuples.get(
													parentIndex)
													.getElementByIndex(
															idxTupleElement));
								}
							}
						}
					},
					getQueryAxis : function() {
						return this.getQueryModel().getAxis(this.m_axisType);
					},
					getOtherRsAxis : function() {
						if (this.m_axisType === sap.firefly.AxisType.COLUMNS) {
							return this.getResultSet().getAxis(
									sap.firefly.AxisType.ROWS);
						}
						return this.getResultSet().getAxis(
								sap.firefly.AxisType.COLUMNS);
					},
					getResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultset);
					},
					setResultSet : function(resultSet) {
						this.m_resultset = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultSet);
					},
					getQueryModel : function() {
						return this.getResultSet().getQueryModel();
					},
					getEffectiveFields : function() {
						return this.getQueryAxis().getEffectiveFields();
					},
					getType : function() {
						return this.m_axisType;
					},
					getDimensionPresentationKey : function(dimensionName,
							presentationType) {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append("[");
						buffer.append(dimensionName);
						buffer.append("].[");
						buffer.append(presentationType.getName());
						buffer.append("]");
						return buffer.toString();
					},
					getDimensionFieldKey : function(dimensionName, fieldName) {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append("[");
						buffer.append(dimensionName);
						buffer.append("].[");
						buffer.append(fieldName);
						buffer.append("]");
						return buffer.toString();
					},
					buildFieldIndex : function(buildByPresentation) {
						var queryAxis;
						var dimCount;
						var indexPos;
						var idxDim;
						var dim;
						var resultSetAttributes;
						var attCount;
						var idxField;
						var attribute;
						var newKey;
						if (buildByPresentation) {
							this.m_indexLookupViaType = sap.firefly.XHashMapByString
									.create();
						} else {
							this.m_indexLookupViaName = sap.firefly.XHashMapByString
									.create();
						}
						queryAxis = this.getQueryAxis();
						dimCount = queryAxis.size();
						indexPos = 0;
						for (idxDim = 0; idxDim < dimCount; idxDim++) {
							dim = queryAxis.get(idxDim);
							resultSetAttributes = dim.getResultSetFields();
							attCount = resultSetAttributes.size();
							for (idxField = 0; idxField < attCount; idxField++) {
								attribute = resultSetAttributes.get(idxField);
								if (buildByPresentation) {
									newKey = this.getDimensionPresentationKey(
											dim.getName(), attribute
													.getPresentationType());
									this.m_indexLookupViaType.put(newKey,
											sap.firefly.XIntegerValue
													.create(indexPos));
								} else {
									newKey = this.getDimensionFieldKey(dim
											.getName(), attribute.getName());
									this.m_indexLookupViaName.put(newKey,
											sap.firefly.XIntegerValue
													.create(indexPos));
								}
								indexPos++;
							}
						}
					},
					getFieldIndexViaPresentation : function(dimensionName,
							presentationType) {
						var someKey;
						var indexObj;
						if (this.m_indexLookupViaType === null) {
							this.buildFieldIndex(true);
						}
						someKey = this.getDimensionPresentationKey(
								dimensionName, presentationType);
						indexObj = this.m_indexLookupViaType.getByKey(someKey);
						if (indexObj === null) {
							return -1;
						}
						return indexObj.getIntegerValue();
					},
					getFieldIndex : function(dimensionName, fieldName) {
						var someKey;
						var indexObj;
						if (this.m_indexLookupViaName === null) {
							this.buildFieldIndex(false);
						}
						someKey = this.getDimensionFieldKey(dimensionName,
								fieldName);
						indexObj = this.m_indexLookupViaName.getByKey(someKey);
						if (indexObj === null) {
							return -1;
						}
						return indexObj.getIntegerValue();
					},
					getSession : function() {
						return this.getApplication();
					},
					getApplication : function() {
						return null;
					},
					getRsDimensions : function() {
						return this.m_rsDimensions;
					},
					setDrillState : function(tupleIndex, elementIndex,
							drillState) {
						var tuple = this.getTupleByIndex(tupleIndex);
						var element = tuple.getElementByIndex(elementIndex);
						element.setNextDrillState(drillState);
					},
					getDrillPath : function(tupleIndex, elementIndex) {
						var tuple = this.getTupleByIndex(tupleIndex);
						var element = tuple.getElementByIndex(elementIndex);
						return element.getDrillPath();
					},
					toString : function() {
						return this.getType().toString();
					},
					getRsAxisDef : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsDataCell",
				sap.firefly.XObject,
				{
					$statics : {
						createDefault : function(cursorResultSet) {
							var cell = new sap.firefly.RsDataCell();
							cell.setupDefault(cursorResultSet);
							return cell;
						},
						createCopy : function(classicResultSet, origin) {
							var cell = new sap.firefly.RsDataCell();
							cell.setupCopy(classicResultSet, origin);
							return cell;
						}
					},
					m_classicResultSet : null,
					m_cursorResultSet : null,
					m_queryDataCell : null,
					m_column : 0,
					m_row : 0,
					m_decimalPlaces : 0,
					m_scalingFactor : 0,
					m_inputReadinessIndex : 0,
					m_formattedValue : null,
					m_formatString : null,
					m_xvalue : null,
					m_valueType : null,
					m_valueException : null,
					m_planningCommandIds : null,
					m_currencyUnit : null,
					m_thresholds : null,
					m_exceptionSettings : null,
					m_exceptionPriorities : null,
					m_maxAlertLevel : null,
					m_maxAlertLevelName : null,
					m_dataEntry : null,
					m_dataEntryEnabled : false,
					m_originalValueLock : false,
					setupDefault : function(cursorResultSet) {
						this.m_cursorResultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef(cursorResultSet);
						this.m_currencyUnit = sap.firefly.RsCursorCurrencyUnit
								.createCurrencyUnit();
						this.m_maxAlertLevel = sap.firefly.AlertLevel.NORMAL;
						this.m_queryDataCell = null;
						this.m_valueType = sap.firefly.XValueType.DOUBLE;
						this.m_column = -1;
						this.m_row = -1;
					},
					setupCopy : function(classicResultSet, origin) {
						var originPlanningCommandIds;
						var readinessState;
						this.m_classicResultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef(classicResultSet);
						this.m_cursorResultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef((origin).getCursorResultSet());
						if (origin.getXValue() !== null) {
							this.m_xvalue = origin.getXValue().clone();
						}
						if (origin.getAlertThresholds() !== null) {
							this.m_thresholds = origin.getAlertThresholds()
									.createListCopy();
						}
						this.m_column = origin.getColumn();
						this.m_row = origin.getRow();
						this.m_maxAlertLevel = origin.getMaxAlertLevel();
						this
								.setExceptionSettings(origin
										.getExceptionSettings());
						this.setExceptionPriorities(origin
								.getExceptionPriorities());
						this.m_maxAlertLevelName = origin
								.getMaxAlertLevelName();
						this.m_valueType = origin.getValueType();
						this.m_queryDataCell = sap.firefly.XWeakReferenceUtil
								.getWeakRef(origin.getDataCell());
						this.m_formattedValue = origin.getFormattedValue();
						this.m_formatString = origin.getFormatString();
						this.m_valueException = origin.getValueException();
						this.m_dataEntryEnabled = origin.isDataEntryEnabled();
						this.m_originalValueLock = origin
								.getOriginalValueLock();
						this.m_currencyUnit = sap.firefly.RsCursorCurrencyUnit
								.createCopy(origin.getCurrencyUnit());
						this.m_decimalPlaces = origin.getDecimalPlaces();
						this.m_scalingFactor = origin.getScalingFactor();
						originPlanningCommandIds = origin
								.getPlanningCommandIds();
						if (originPlanningCommandIds !== null) {
							this.m_planningCommandIds = sap.firefly.XListOfString
									.createFromReadOnlyList(originPlanningCommandIds);
						}
						readinessState = origin.getInputReadinessState();
						if (readinessState !== null) {
							this.m_inputReadinessIndex = readinessState
									.getIndex();
						}
					},
					forceNewValue : function(forceNewValue) {
						var dataEntry = this.getDataEntry(true);
						if (dataEntry === null) {
							return;
						}
						dataEntry.forceNewValue(forceNewValue);
					},
					getAlertThresholds : function() {
						if (this.m_thresholds !== null) {
							this.m_thresholds = sap.firefly.XList.create();
						}
						return this.m_thresholds;
					},
					getBooleanValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.BOOLEAN);
							return (this.m_xvalue).getBooleanValue();
						}
						return dataEntry.getBooleanValue();
					},
					getColumn : function() {
						return this.m_column;
					},
					getComponentType : function() {
						return sap.firefly.OlapComponentType.RD_DATA_CELL;
					},
					getCurrencyUnit : function() {
						return this.m_currencyUnit;
					},
					getCurrencyUnitBase : function() {
						return this.m_currencyUnit;
					},
					getResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_classicResultSet);
					},
					getResultSetContainer : function() {
						var cursorResultSet = this.getCursorResultSet();
						var classicResultSet;
						if (cursorResultSet !== null) {
							return cursorResultSet.getResultSetContainer();
						}
						classicResultSet = this.getResultSet();
						if (classicResultSet !== null) {
							return classicResultSet.getResultSetContainer();
						}
						return null;
					},
					getCursorResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cursorResultSet);
					},
					getDataCell : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryDataCell);
					},
					getDataCellEntryDescription : function() {
						var entryCollection = this
								.getDataEntryCollectionInternal();
						if (entryCollection === null) {
							return null;
						}
						return entryCollection.getDataCellEntryDescription();
					},
					getDataEntry : function(createNew) {
						return this.getDataEntryCheckEnabled(createNew, true);
					},
					getDataEntryCheckEnabledWithAssert : function(createNew) {
						var dataEntry = this.getDataEntryCheckEnabled(
								createNew, true);
						if (dataEntry === null) {
							throw sap.firefly.XException
									.createIllegalStateException("DataCell is not inputEnabled");
						}
						return dataEntry;
					},
					getDataEntryCheckEnabled : function(createNew,
							checkDataEntryEnabled) {
						if (checkDataEntryEnabled && !this.isDataEntryEnabled()) {
							return null;
						}
						if (this.m_dataEntry === null) {
							this.m_dataEntry = this
									.getDataEntryInternal(createNew);
						}
						return this.m_dataEntry;
					},
					getDataEntryCollectionInternal : function() {
						var resultSetContainer = this.getResultSetContainer();
						if (resultSetContainer === null) {
							return null;
						}
						return resultSetContainer.getDataEntryCollection();
					},
					getDataEntryInternal : function(createNew) {
						var dataEntryCollection = this
								.getDataEntryCollectionInternal();
						if (dataEntryCollection === null) {
							return null;
						}
						if (createNew) {
							return dataEntryCollection.getDataEntry(
									this.m_column, this.m_row, this);
						}
						return dataEntryCollection.getDataEntryIfExisting(
								this.m_column, this.m_row, this);
					},
					getDate : function() {
						return this.getDateValue();
					},
					getDateTimeValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.DATE_TIME);
							return this.m_xvalue;
						}
						return dataEntry.getDateTimeValue();
					},
					getDateValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.DATE);
							return this.m_xvalue;
						}
						return dataEntry.getDateValue();
					},
					getDecimalPlaces : function() {
						return this.m_decimalPlaces;
					},
					getDoubleValue : function() {
						var dataEntry;
						var valueType;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							if (this.m_xvalue === null) {
								return 0;
							}
							valueType = this.m_xvalue.getValueType();
							if (!valueType.isNumber()) {
								throw sap.firefly.XException
										.createUnsupportedOperationException();
							}
							return (this.m_xvalue).getDoubleValue();
						}
						return dataEntry.getDoubleValue();
					},
					getExceptionPriorities : function() {
						return this.m_exceptionPriorities;
					},
					getExceptionSettingPriorityByName : function(
							exceptionSettingName) {
						return this.m_exceptionPriorities
								.getByKey(exceptionSettingName);
					},
					getExceptionSettings : function() {
						return this.m_exceptionSettings;
					},
					getExceptionSettingValueByName : function(
							exceptionSettingName) {
						if (this.m_exceptionSettings === null) {
							return null;
						}
						return this.m_exceptionSettings
								.getByKey(exceptionSettingName);
					},
					getFormatString : function() {
						return this.m_formatString;
					},
					getFormattedValue : function() {
						return this.m_formattedValue;
					},
					getInputReadinessState : function() {
						var cursorResultSet;
						if (!this.getQueryModel().getQueryManager()
								.supportsInputReadinessStates()) {
							return null;
						}
						cursorResultSet = this.getCursorResultSet();
						if (cursorResultSet === null) {
							return null;
						}
						return cursorResultSet
								.getInputReadinessStateByIndex(this.m_inputReadinessIndex);
					},
					getIntegerValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.INTEGER);
							return (this.m_xvalue).getIntegerValue();
						}
						return dataEntry.getIntegerValue();
					},
					getLongValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.LONG);
							return (this.m_xvalue).getLongValue();
						}
						return dataEntry.getLongValue();
					},
					getMaxAlertLevel : function() {
						return this.m_maxAlertLevel;
					},
					getMaxAlertLevelName : function() {
						return this.m_maxAlertLevelName;
					},
					getNewValueExternal : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return this.getStringValue();
						}
						return dataEntry.getNewValueExternal();
					},
					getOriginalValueLock : function() {
						return this.m_originalValueLock;
					},
					getPlanningCommand : function() {
						var dataEntry = this.getDataEntryCheckEnabled(false,
								false);
						if (dataEntry === null) {
							return null;
						}
						return dataEntry.getPlanningCommand();
					},
					getPlanningCommandIds : function() {
						if ((this.m_planningCommandIds === null)
								|| this.m_planningCommandIds.isEmpty()) {
							return null;
						}
						return this.m_planningCommandIds;
					},
					getPlanningCommandIdsBase : function() {
						if (this.m_planningCommandIds === null) {
							this.m_planningCommandIds = sap.firefly.XListOfString
									.create();
						}
						return this.m_planningCommandIds;
					},
					getPriority : function() {
						var dataEntry = this.getDataEntryCheckEnabled(false,
								false);
						if (dataEntry === null) {
							return 0;
						}
						return dataEntry.getPriority();
					},
					getProcessingOrder : function() {
						var dataEntry = this.getDataEntryCheckEnabled(false,
								false);
						if (dataEntry === null) {
							return 0;
						}
						return dataEntry.getProcessingOrder();
					},
					getQueryModel : function() {
						var cursorResultSet = this.getCursorResultSet();
						var classicResultSet;
						if (cursorResultSet !== null) {
							return cursorResultSet.getQueryModel();
						}
						classicResultSet = this.getResultSet();
						if (classicResultSet !== null) {
							return classicResultSet.getQueryModel();
						}
						return null;
					},
					getRow : function() {
						return this.m_row;
					},
					getScalingFactor : function() {
						return this.m_scalingFactor;
					},
					getStringRepresentation : function() {
						if (this.m_xvalue === null) {
							return null;
						}
						return this.getXValue().getStringRepresentation();
					},
					getStringValue : function() {
						var dataEntry;
						var sv;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.STRING);
							sv = this.m_xvalue;
							return sv.getStringValue();
						}
						return dataEntry.getStringValue();
					},
					getTimeSpan : function() {
						return this.getTimeSpanValue().getTimeSpan();
					},
					getTimeSpanValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.TIMESPAN);
							return this.m_xvalue;
						}
						return dataEntry.getTimeSpanValue();
					},
					getTimeValue : function() {
						var dataEntry;
						this.assertValueException();
						dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							this.assertType(sap.firefly.XValueType.TIME);
							return this.m_xvalue;
						}
						return dataEntry.getDateTimeValue();
					},
					getValue : function() {
						return this.getDoubleValue();
					},
					getValueException : function() {
						return this.m_valueException;
					},
					getValueType : function() {
						return this.m_valueType;
					},
					getXValue : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return this.m_xvalue;
						}
						return dataEntry.getXValue();
					},
					isDataEntryEnabled : function() {
						var queryManager = this.getQueryModel()
								.getQueryManager();
						var inputState;
						if (queryManager.supportsInputReadinessStates()) {
							inputState = this.getInputReadinessState();
							if (inputState === null) {
								return false;
							}
							if (queryManager.isPublicVersionEditPossible()
									&& inputState
											.hasSingleInputReadinessType(sap.firefly.InputReadinessType.PUBLIC_VERSION)) {
								return true;
							}
							return inputState.isInputEnabled();
						}
						return this.m_dataEntryEnabled;
					},
					isNewValueForced : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return false;
						}
						return dataEntry.isNewValueForced();
					},
					isValueChanged : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return false;
						}
						return dataEntry.isValueChanged();
					},
					isValueLockChanged : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return false;
						}
						return dataEntry.isValueLockChanged();
					},
					isValueLocked : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return this.getOriginalValueLock();
						}
						return dataEntry.isValueLocked();
					},
					releaseObject : function() {
						this.m_dataEntry = sap.firefly.XObject
								.releaseIfNotNull(this.m_dataEntry);
						this.m_cursorResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_cursorResultSet);
						this.m_classicResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_classicResultSet);
						this.m_xvalue = sap.firefly.XObject
								.releaseIfNotNull(this.m_xvalue);
						this.m_currencyUnit = sap.firefly.XObject
								.releaseIfNotNull(this.m_currencyUnit);
						this.m_exceptionSettings = sap.firefly.XObject
								.releaseIfNotNull(this.m_exceptionSettings);
						this.m_exceptionPriorities = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_exceptionPriorities);
						this.m_planningCommandIds = sap.firefly.XObject
								.releaseIfNotNull(this.m_planningCommandIds);
						this.m_thresholds = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_thresholds);
						this.m_queryDataCell = sap.firefly.XObject
								.releaseIfNotNull(this.m_queryDataCell);
						this.m_valueType = null;
						this.m_formatString = null;
						this.m_maxAlertLevel = null;
						this.m_maxAlertLevelName = null;
						this.m_valueException = null;
						this.m_formattedValue = null;
						sap.firefly.RsDataCell.$superclass.releaseObject
								.call(this);
					},
					reset : function() {
						this.m_dataEntry = null;
						this.getCurrencyUnitBase().reset();
					},
					resetAllChanges : function() {
						if (this.m_dataEntry !== null) {
							this.m_dataEntry.resetAllChanges();
							this.m_dataEntry = null;
						}
					},
					resetNewValue : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return;
						}
						dataEntry.resetNewValue();
					},
					resetValueLock : function() {
						var dataEntry = this.getDataEntry(false);
						if (dataEntry === null) {
							return;
						}
						dataEntry.resetValueLock();
					},
					setBooleanValue : function(booleanValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setBooleanValue(booleanValue);
						this
								.setValueException(sap.firefly.ValueException.NORMAL);
					},
					setColumn : function(column) {
						this.m_column = column;
					},
					setDataCellEntryDescription : function(description) {
						var entryCollection = this
								.getDataEntryCollectionInternal();
						if (entryCollection !== null) {
							entryCollection
									.setDataCellEntryDescription(description);
						}
					},
					setDataEntryEnabled : function(dataEntryEnabled) {
						this.m_dataEntryEnabled = dataEntryEnabled;
					},
					setDateTimeValue : function(dateTimeValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setDateTimeValue(dateTimeValue);
						if (dateTimeValue === null) {
							this
									.setValueException(sap.firefly.ValueException.NULL_VALUE);
						} else {
							this
									.setValueException(sap.firefly.ValueException.NORMAL);
						}
					},
					setDateValue : function(dateValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setDateValue(dateValue);
						if (dateValue === null) {
							this
									.setValueException(sap.firefly.ValueException.NULL_VALUE);
						} else {
							this
									.setValueException(sap.firefly.ValueException.NORMAL);
						}
					},
					setDecimalPlaces : function(decimalPlaces) {
						this.m_decimalPlaces = decimalPlaces;
					},
					setDoubleValue : function(doubleValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setDoubleValue(doubleValue);
						this
								.setValueException(sap.firefly.ValueException.NORMAL);
					},
					setExceptionPriorities : function(exceptionPriorities) {
						if (exceptionPriorities === null) {
							this.m_exceptionPriorities = null;
						} else {
							this.m_exceptionPriorities = exceptionPriorities
									.createMapByStringCopy();
						}
					},
					setExceptionSettings : function(exceptionSettings) {
						if (exceptionSettings === null) {
							this.m_exceptionSettings = null;
						} else {
							this.m_exceptionSettings = exceptionSettings
									.createMapOfStringByStringCopy();
						}
					},
					setFormatString : function(formatString) {
						this.m_formatString = formatString;
					},
					setFormattedValue : function(value) {
						this.m_formattedValue = value;
					},
					setInitialValue : function(value) {
						this.m_xvalue = value;
					},
					setInputReadinessIndex : function(index) {
						this.m_inputReadinessIndex = index;
					},
					setIntegerValue : function(integerValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setIntegerValue(integerValue);
						this
								.setValueException(sap.firefly.ValueException.NORMAL);
					},
					setLongValue : function(longValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setLongValue(longValue);
						this
								.setValueException(sap.firefly.ValueException.NORMAL);
					},
					setMaxAlertLevel : function(alertLevel) {
						this.m_maxAlertLevel = alertLevel;
					},
					setMaxAlertLevelName : function(name) {
						this.m_maxAlertLevelName = name;
					},
					setNewValueExternal : function(valueExternal) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setNewValueExternal(valueExternal);
					},
					setOriginalValueLock : function(valueLock) {
						this.m_originalValueLock = valueLock;
					},
					setPlanningCommand : function(planningCommand) {
						var existingDataEntry;
						var checkDataEntryEnabled;
						var commandType;
						var planningAction;
						var actionForQueryIdentifier;
						var planningActionType;
						var planningCommandIds;
						var planningCommandId;
						var dataEntry;
						if (planningCommand === null) {
							existingDataEntry = this.getDataEntry(false);
							if (existingDataEntry !== null) {
								existingDataEntry.setPlanningCommand(null);
							}
							return;
						}
						checkDataEntryEnabled = true;
						commandType = planningCommand.getCommandType();
						if (commandType === sap.firefly.PlanningCommandType.PLANNING_ACTION) {
							planningAction = planningCommand;
							actionForQueryIdentifier = planningAction
									.getActionForQueryIdentifier();
							planningActionType = actionForQueryIdentifier
									.getActionType();
							if (planningActionType === sap.firefly.PlanningActionType.QUERY_SINGLE) {
								checkDataEntryEnabled = false;
							} else {
								if (planningActionType === sap.firefly.PlanningActionType.DATA_ENTRY) {
									planningCommandIds = this
											.getPlanningCommandIds();
									if (planningCommandIds === null) {
										return;
									}
									planningCommandId = actionForQueryIdentifier
											.getActionId();
									if (!planningCommandIds
											.contains(planningCommandId)) {
										return;
									}
								}
							}
						}
						dataEntry = this.getDataEntryCheckEnabled(true,
								checkDataEntryEnabled);
						dataEntry.setPlanningCommand(planningCommand);
					},
					setPriority : function(priority) {
						var dataEntry = this.getDataEntryCheckEnabled(true,
								false);
						dataEntry.setPriority(priority);
					},
					setProcessingOrder : function(processingOrder) {
						var dataEntry = this.getDataEntryCheckEnabled(true,
								false);
						dataEntry.setProcessingOrder(processingOrder);
					},
					setQueryDataCellReference : function(reference) {
						var queryModel = this.getQueryModel();
						var queryDataCell;
						if (queryModel !== null) {
							queryDataCell = queryModel
									.getQueryDataCell(reference);
							this.m_queryDataCell = sap.firefly.XWeakReferenceUtil
									.getWeakRef(queryDataCell);
						}
					},
					setRoundedValue : function(value) {
						this.setDoubleValue(value);
					},
					setRow : function(row) {
						this.m_row = row;
					},
					setScalingFactor : function(scalingFactor) {
						this.m_scalingFactor = scalingFactor;
					},
					setStringValue : function(stringValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setStringValue(stringValue);
						if (stringValue === null) {
							this
									.setValueException(sap.firefly.ValueException.NULL_VALUE);
						} else {
							this
									.setValueException(sap.firefly.ValueException.NORMAL);
						}
					},
					setTimeSpanValue : function(value) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setTimeSpanValue(value);
						if (value === null) {
							this
									.setValueException(sap.firefly.ValueException.NULL_VALUE);
						} else {
							this
									.setValueException(sap.firefly.ValueException.NORMAL);
						}
					},
					setTimeValue : function(timeValue) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setTimeValue(timeValue);
						if (timeValue === null) {
							this
									.setValueException(sap.firefly.ValueException.NULL_VALUE);
						} else {
							this
									.setValueException(sap.firefly.ValueException.NORMAL);
						}
					},
					setValueException : function(valueException) {
						this.m_valueException = valueException;
					},
					setValueLock : function(lock) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setValueLock(lock);
					},
					setValueType : function(valueType) {
						this.m_valueType = valueType;
					},
					setXValue : function(value) {
						var dataEntry = this
								.getDataEntryCheckEnabledWithAssert(true);
						dataEntry.setXValue(value);
					},
					assertType : function(valueType) {
						if ((this.m_xvalue !== null)
								&& (this.m_xvalue.getValueType() !== valueType)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					assertValueException : function() {
						if ((this.getValueException() === sap.firefly.ValueException.UNDEFINED)
								|| (this.getValueException() === sap.firefly.ValueException.NULL_VALUE)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					getProcessingType : function() {
						var dataEntry = this.getDataEntryCheckEnabled(false,
								false);
						if (dataEntry === null) {
							return null;
						}
						return dataEntry.getProcessingType();
					},
					setProcessingType : function(dataEntryProcessingType) {
						var dataEntry = this.getDataEntryCheckEnabled(true,
								false);
						dataEntry.setProcessingType(dataEntryProcessingType);
					},
					getSession : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getApplication : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					resetValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					toString : function() {
						if (this.m_formattedValue === null) {
							return "DataCell";
						}
						return this.m_formattedValue;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningService",
				sap.firefly.DfService,
				{
					$statics : {
						CLAZZ : null,
						s_capabilitiesProviderFactory : null,
						staticSetup : function() {
							sap.firefly.PlanningService.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningService);
						}
					},
					m_planningContext : null,
					m_initialized : false,
					m_capabilitiesProvider : null,
					getInaCapabilities : function() {
						return this.m_capabilitiesProvider;
					},
					isInitialized : function() {
						return this.m_initialized;
					},
					releaseObject : function() {
						this.releasePlanningContext();
						this.m_capabilitiesProvider = null;
						sap.firefly.PlanningService.$superclass.releaseObject
								.call(this);
					},
					isServiceConfigMatching : function(serviceConfig,
							connection, messages) {
						var serviceConfigPlanning = serviceConfig;
						var systemDescription = serviceConfigPlanning
								.getSystemDescription();
						var systemType = systemDescription.getSystemType();
						var systemName;
						var properties;
						var application;
						var dataArea;
						var environment;
						var model;
						var cellLocking;
						var dataAreaState;
						var planningServices;
						var otherPlanningService;
						var planningSchema;
						var planningModel;
						var planningServices2;
						var otherPlanningService2;
						if (systemType === null) {
							messages.addErrorExt(
									sap.firefly.OriginLayer.DRIVER,
									sap.firefly.ErrorCodes.INVALID_SYSTEM,
									"illegal system type", null);
							return false;
						}
						systemName = systemDescription.getName();
						properties = serviceConfigPlanning.getProperties();
						application = serviceConfigPlanning.getApplication();
						if (systemType.isTypeOf(sap.firefly.SystemType.BW)) {
							dataArea = properties.getStringByNameWithDefault(
									sap.firefly.PlanningConstants.DATA_AREA,
									null);
							if (dataArea === null) {
								dataArea = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
							}
							environment = properties
									.getStringByNameWithDefault(
											sap.firefly.PlanningConstants.ENVIRONMENT,
											null);
							model = properties.getStringByNameWithDefault(
									sap.firefly.PlanningConstants.MODEL, null);
							cellLocking = sap.firefly.CellLockingType
									.lookupWithDefault(
											properties
													.getStringByNameWithDefault(
															sap.firefly.PlanningConstants.CELL_LOCKING,
															null),
											sap.firefly.CellLockingType.DEFAULT_SETTING_BACKEND);
							dataAreaState = sap.firefly.DataAreaState
									.getDataAreaStateByPlanningService(this);
							if (dataAreaState === null) {
								dataAreaState = sap.firefly.DataAreaState
										.createDataAreaState(application,
												systemName, dataArea,
												environment, model, cellLocking);
								if (dataAreaState === null) {
									messages
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													"illegal data area",
													properties);
									return false;
								}
							} else {
								if (dataAreaState.isEqualSettings(environment,
										model, cellLocking) === false) {
									messages
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													"data area with different settings already existing",
													properties);
									return false;
								}
							}
							planningServices = sap.firefly.DataAreaUtil
									.getPlanningServices(application,
											systemName, dataArea);
							if (planningServices !== null) {
								if (planningServices.size() !== 1) {
									messages
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													"More than one planning service",
													properties);
									return false;
								}
								otherPlanningService = planningServices.get(0);
								if (otherPlanningService !== this) {
									messages
											.addErrorExt(
													sap.firefly.OriginLayer.DRIVER,
													sap.firefly.ErrorCodes.INVALID_STATE,
													"Illegal context of data area",
													properties);
									return false;
								}
							}
						} else {
							if (systemType === sap.firefly.SystemType.HANA) {
								planningSchema = serviceConfigPlanning
										.getProperties()
										.getStringByNameWithDefault(
												sap.firefly.PlanningConstants.PLANNING_SCHEMA,
												null);
								planningModel = serviceConfigPlanning
										.getProperties()
										.getStringByNameWithDefault(
												sap.firefly.PlanningConstants.PLANNING_MODEL,
												null);
								planningServices2 = sap.firefly.PlanningModelUtil
										.getPlanningServices(application,
												systemName, planningSchema,
												planningModel);
								if (planningServices2 !== null) {
									if (planningServices2.size() !== 1) {
										messages
												.addErrorExt(
														sap.firefly.OriginLayer.DRIVER,
														sap.firefly.ErrorCodes.INVALID_STATE,
														"More than one planning service",
														properties);
										return false;
									}
									otherPlanningService2 = planningServices2
											.get(0);
									if (otherPlanningService2 !== this) {
										messages
												.addErrorExt(
														sap.firefly.OriginLayer.DRIVER,
														sap.firefly.ErrorCodes.INVALID_STATE,
														"Illegal context of planning model",
														null);
										return false;
									}
								}
							} else {
								messages.addErrorExt(
										sap.firefly.OriginLayer.DRIVER,
										sap.firefly.ErrorCodes.INVALID_SYSTEM,
										"illegal system type", systemType);
								return false;
							}
						}
						return true;
					},
					getPlanningServiceConfig : function() {
						return this.getServiceConfig();
					},
					processSynchronization : function(syncType) {
						if (this.m_initialized) {
							return false;
						}
						this.initializeContext(syncType);
						return true;
					},
					getPlanningContext : function() {
						this.initializeContext(sap.firefly.SyncType.BLOCKING);
						return this.m_planningContext;
					},
					initializeContext : function(syncType) {
						var serviceConfig;
						var properties;
						var systemDescription;
						var systemType;
						var dataArea;
						var planningModel;
						var ignoreUndesiredSharedVerions;
						if (this.m_initialized) {
							return;
						}
						this.m_capabilitiesProvider = sap.firefly.PlanningService.s_capabilitiesProviderFactory
								.create(
										this.getConnection()
												.getServerMetadata(),
										sap.firefly.ProviderType.PLANNING_COMMAND);
						serviceConfig = this.getPlanningServiceConfig();
						properties = serviceConfig.getProperties();
						systemDescription = serviceConfig
								.getSystemDescription();
						systemType = systemDescription.getSystemType();
						if (systemType.isTypeOf(sap.firefly.SystemType.BW)) {
							dataArea = sap.firefly.DataArea.create();
							dataArea.setPlanningService(this);
							dataArea
									.setDataArea(properties
											.getStringByNameWithDefault(
													sap.firefly.PlanningConstants.DATA_AREA,
													sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT));
							dataArea
									.setEnvironment(properties
											.getStringByName(sap.firefly.PlanningConstants.ENVIRONMENT));
							dataArea
									.setModel(properties
											.getStringByName(sap.firefly.PlanningConstants.MODEL));
							dataArea
									.setCellLockingType(sap.firefly.CellLockingType
											.lookupWithDefault(
													properties
															.getStringByName(sap.firefly.PlanningConstants.CELL_LOCKING),
													sap.firefly.CellLockingType.DEFAULT_SETTING_BACKEND));
							this._setInitialized(dataArea);
						}
						if (systemType === sap.firefly.SystemType.HANA) {
							planningModel = sap.firefly.PlanningModel.create();
							planningModel.setPlanningService(this);
							planningModel
									.setPlanningModelSchema(properties
											.getStringByName(sap.firefly.PlanningConstants.PLANNING_SCHEMA));
							planningModel
									.setPlanningModelName(properties
											.getStringByName(sap.firefly.PlanningConstants.PLANNING_MODEL));
							planningModel
									.setPlanningModelBehaviour(sap.firefly.PlanningModelBehaviour
											.lookupWithDefault(
													properties
															.getStringByName(sap.firefly.PlanningConstants.PLANNING_MODEL_BEHAVIOUR),
													sap.firefly.PlanningModelBehaviour.STANDARD));
							ignoreUndesiredSharedVerions = properties
									.getBooleanByNameWithDefault(
											sap.firefly.PlanningConstants.WITH_IGNORE_UNDESIRED_SHARED_VERSIONS,
											false);
							if (ignoreUndesiredSharedVerions) {
								planningModel
										.setBackendUserName(properties
												.getStringByNameWithDefault(
														sap.firefly.PlanningConstants.BACKEND_USER_NAME,
														systemDescription
																.getUser()));
							} else {
								planningModel
										.setBackendUserName(properties
												.getStringByNameWithDefault(
														sap.firefly.PlanningConstants.BACKEND_USER_NAME,
														null));
							}
							planningModel
									.setWithIgnoreUndesiredSharedVersions(ignoreUndesiredSharedVerions);
							planningModel
									.setWithSharedVersions(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_SHARED_VERSIONS,
													false));
							planningModel
									.setWithBackupTimestamp(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_BACKUP_TIMESTAMP,
													false));
							planningModel
									.setWithFastActionParameters(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_FAST_ACTION_PARAMETERS,
													false));
							planningModel
									.setWithFastPrivilegeInitialization(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_FAST_PRIVILEGE_INITIALIZATION,
													false));
							planningModel
									.setWithUndoRedoStack(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_UNDO_REDO_STACK,
													false));
							planningModel
									.setWithActionState(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_ACTION_STATE,
													false));
							planningModel
									.setWithStrictErrorHandling(properties
											.getBooleanByNameWithDefault(
													sap.firefly.PlanningConstants.WITH_STRICT_ERROR_HANDLING,
													false));
							planningModel
									.setPersistenceType(sap.firefly.PlanningPersistenceType
											.lookupWithDefault(
													properties
															.getStringByNameWithDefault(
																	sap.firefly.PlanningConstants.PERSISTENCE_TYPE,
																	null),
													sap.firefly.PlanningPersistenceType.DEFAULT));
							planningModel.initializePlanningModel(syncType);
						}
					},
					_setInitialized : function(planningContext) {
						if (this.m_initialized) {
							throw sap.firefly.XException
									.createInitializationException();
						}
						this.m_initialized = true;
						this.m_planningContext = planningContext;
						this.setData(this);
						this.setSyncState(sap.firefly.SyncState.IN_SYNC);
					},
					processCommandBlocking : function(planningCommand) {
						return planningCommand.processCommand(
								sap.firefly.SyncType.BLOCKING, null, null);
					},
					processCommand : function(synchronizationType,
							planningCommand, callback, customIdentifier) {
						return planningCommand
								.processCommand(synchronizationType, callback,
										customIdentifier);
					},
					supportsPlanningCapability : function(capabilityName) {
						var application;
						var systemDescription;
						var connectionContainer;
						var serverMetadata;
						var capabilityContainer;
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(capabilityName)) {
							return false;
						}
						application = this.getApplication();
						if (application === null) {
							return false;
						}
						systemDescription = this.getServiceConfig()
								.getSystemDescription();
						if (systemDescription === null) {
							return false;
						}
						connectionContainer = this.getConnection();
						if (connectionContainer === null) {
							return false;
						}
						serverMetadata = connectionContainer
								.getServerMetadata();
						if (serverMetadata === null) {
							return false;
						}
						capabilityContainer = serverMetadata
								.getMetadataForService(sap.firefly.ServerService.PLANNING);
						if (capabilityContainer === null) {
							return false;
						}
						return capabilityContainer.containsKey(capabilityName);
					},
					releasePlanningContext : function() {
						this.m_initialized = false;
						if (this.m_planningContext !== null) {
							this.m_planningContext.releaseObject();
							this.m_planningContext = null;
						}
					},
					getOlapEnv : function() {
						return this.getApplication().getOlapEnvironment();
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						var planningServiceConfig = this
								.getPlanningServiceConfig();
						if (planningServiceConfig !== null) {
							sb.append(planningServiceConfig.toString());
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCatalogManager",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						CN_OBJECT_NAME : "ObjectName",
						CN_BASE_DATA_SOURCE : "BaseDataSource",
						CN_PLANNING_TYPE : "PlanningType",
						CN_PLANNING_FUNCTION_TYPE : "PlanningFunctionType",
						T_PLANNING_FUNCTION : "PlanningFunction",
						T_PLANNING_SEQUENCE : "PlanningSequence",
						create : function(queryManager) {
							var object = new sap.firefly.PlanningCatalogManager();
							object.setupCatalogManager(queryManager);
							return object;
						}
					},
					m_searchOnPlanningFunctions : false,
					m_searchOnPlanningSequences : false,
					m_textFilter : null,
					m_isSearchOnText : false,
					m_isSearchOnName : false,
					setupCatalogManager : function(queryManager) {
						this.setupSynchronizingObject(queryManager);
						this.m_isSearchOnText = false;
						this.m_isSearchOnName = false;
						this.m_searchOnPlanningFunctions = true;
						this.m_searchOnPlanningSequences = false;
					},
					releaseObject : function() {
						this.m_textFilter = null;
						sap.firefly.PlanningCatalogManager.$superclass.releaseObject
								.call(this);
					},
					getComponentName : function() {
						return "PlanningCatalogManager";
					},
					setSearchOnText : function(enableSearchOnText) {
						this.m_isSearchOnText = enableSearchOnText;
						this.m_isSearchOnName = !this.m_isSearchOnText;
						this.resetSyncState();
					},
					setSearchOnName : function(enableSearchOnName) {
						this.m_isSearchOnName = enableSearchOnName;
						this.m_isSearchOnText = !this.m_isSearchOnName;
						this.resetSyncState();
					},
					isSearchOnText : function() {
						return this.m_isSearchOnText;
					},
					isSearchOnName : function() {
						return this.m_isSearchOnName;
					},
					setSearchFilter : function(filter) {
						this.m_textFilter = filter;
						this.resetSyncState();
					},
					getSearchFilter : function() {
						return this.m_textFilter;
					},
					setSearchOnPlanningFunctions : function(searchOn) {
						this.m_searchOnPlanningFunctions = searchOn;
					},
					isSearchOnPlanningFunctions : function() {
						return this.m_searchOnPlanningFunctions;
					},
					setSearchOnPlanningSequences : function(searchOn) {
						this.m_searchOnPlanningSequences = searchOn;
					},
					isSearchOnPlanningSequences : function() {
						return this.m_searchOnPlanningSequences;
					},
					processGetResult : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onPlanningCatalogResult(extResult, data,
								customIdentifier);
					},
					processSynchronization : function(syncType) {
						var queryModel = this.getQueryManager().getQueryModel();
						var convenienceCommands = queryModel
								.getConvenienceCommands();
						var textFilter;
						var searchOnCount;
						convenienceCommands.resetToDefault();
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addAllFieldsToResultSet(sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.PlanningCatalogManager.CN_BASE_DATA_SOURCE,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addAllFieldsToResultSet(sap.firefly.PlanningCatalogManager.CN_BASE_DATA_SOURCE);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addAllFieldsToResultSet(sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.PlanningCatalogManager.CN_PLANNING_FUNCTION_TYPE,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addAllFieldsToResultSet(sap.firefly.PlanningCatalogManager.CN_PLANNING_FUNCTION_TYPE);
						textFilter = this.getSearchFilter();
						if ((textFilter !== null)
								&& (sap.firefly.XString.size(textFilter) > 0)) {
							if (this.isSearchOnName()) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME,
												sap.firefly.PresentationType.KEY,
												textFilter,
												sap.firefly.ComparisonOperator.MATCH);
							}
							if (this.isSearchOnText()) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.PlanningCatalogManager.CN_OBJECT_NAME,
												sap.firefly.PresentationType.TEXT,
												textFilter,
												sap.firefly.ComparisonOperator.MATCH);
							}
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE);
						searchOnCount = 0;
						if (this.isSearchOnPlanningFunctions()) {
							searchOnCount++;
						}
						if (this.isSearchOnPlanningSequences()) {
							searchOnCount++;
						}
						if (searchOnCount === 1) {
							if (this.isSearchOnPlanningFunctions()) {
								convenienceCommands
										.addSingleMemberFilterByDimensionName(
												sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE,
												sap.firefly.PlanningCatalogManager.T_PLANNING_FUNCTION,
												sap.firefly.ComparisonOperator.EQUAL);
							}
							if (this.isSearchOnPlanningSequences()) {
								convenienceCommands
										.addSingleMemberFilterByDimensionName(
												sap.firefly.PlanningCatalogManager.CN_PLANNING_TYPE,
												sap.firefly.PlanningCatalogManager.T_PLANNING_SEQUENCE,
												sap.firefly.ComparisonOperator.EQUAL);
							}
						}
						this.getQueryManager().processQueryExecution(syncType,
								this, null);
						return true;
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						var classicResultSet;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							classicResultSet = resultSetContainer
									.getClassicResultSet();
							this.setData(sap.firefly.PlanningCatalogResult
									.create(classicResultSet, this));
						}
						this.endSync();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCatalogService",
				sap.firefly.DfService,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningCatalogService.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningCatalogService);
						}
					},
					m_catalogManager : null,
					releaseObject : function() {
						this.m_catalogManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogManager);
						sap.firefly.PlanningCatalogService.$superclass.releaseObject
								.call(this);
					},
					getCatalogManager : function() {
						return this.m_catalogManager;
					},
					processSynchronization : function(syncType) {
						var config = this.getServiceConfig();
						var queryServiceConfig = sap.firefly.QueryServiceConfig
								.create(this.getApplication());
						var identifier;
						queryServiceConfig
								.setSystemName(config.getSystemName());
						identifier = sap.firefly.QFactory2.newDataSource();
						identifier
								.setType(sap.firefly.MetaObjectType.CATALOG_VIEW);
						identifier.setName("$$DataSource$$");
						queryServiceConfig.setDataSource(identifier);
						queryServiceConfig
								.setProviderType(sap.firefly.ProviderType.PLANNING);
						queryServiceConfig.setConnectionContainer(this
								.getConnection());
						queryServiceConfig.processQueryManagerCreation(
								syncType, this, null);
						return true;
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							this.m_catalogManager = sap.firefly.PlanningCatalogManager
									.create(queryManager);
						}
						this.endSync();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCatalogServiceConfig",
				sap.firefly.DfServiceConfig,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningCatalogServiceConfig.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningCatalogServiceConfig);
						}
					},
					processPlanningCatalogManagerCreation : function(syncType,
							listener, customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onPlanningCatalogManagerCreated(extResult,
								data, customIdentifier);
					},
					setDataFromService : function(service) {
						this.setData(service.getCatalogManager());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCatalogManager",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						M_DEBUG_MODE : false,
						create : function(service) {
							var object = new sap.firefly.PlanningModelCatalogManager();
							var systemName = service.getServiceConfig()
									.getSystemName();
							object.setupPlanningModelCatalogManager(service
									.getOlapEnv(), systemName);
							return object;
						}
					},
					m_systemName : null,
					releaseObject : function() {
						var data = this.getData();
						if (data !== null) {
							data.releaseObject();
						}
						this.m_systemName = null;
						sap.firefly.PlanningModelCatalogManager.$superclass.releaseObject
								.call(this);
					},
					setupPlanningModelCatalogManager : function(context,
							systemName) {
						this.setupSynchronizingObject(context);
						this.m_systemName = systemName;
					},
					getComponentName : function() {
						return "PlanningCatalogManager";
					},
					processGetResult : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					processSynchronization : function(syncType) {
						var connectionPool = this.getApplication()
								.getConnectionPool();
						var connection = connectionPool
								.getConnection(this.m_systemName);
						var systemDescription = connection
								.getSystemDescription();
						var systemType = systemDescription.getSystemType();
						var ocpFunction;
						var request;
						var requestStructure;
						if (systemType !== sap.firefly.SystemType.HANA) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal system type");
						}
						ocpFunction = connection
								.newRpcFunction(sap.firefly.ConnectionConstants
										.getInAPath(systemType));
						request = ocpFunction.getRequest();
						requestStructure = this.serializeToJson();
						request.setRequestStructure(requestStructure);
						ocpFunction.processFunctionExecution(syncType, this,
								null);
						return true;
					},
					onFunctionExecuted : function(extResult, response,
							customIdentifier) {
						var sentStr;
						var catalogResult;
						var rootStructure;
						var responseStructure;
						var messageManager;
						this.addAllMessages(extResult);
						if (extResult.hasErrors()
								&& sap.firefly.PlanningModelCatalogManager.M_DEBUG_MODE) {
							sentStr = sap.firefly.XStringBuffer.create();
							sentStr.append("Planning: received response");
							sentStr.appendNewLine();
							sentStr.append(extResult.getSummary());
							sap.firefly.XLogger.println(sentStr.toString());
						}
						if (extResult.isValid()) {
							catalogResult = new sap.firefly.PlanningModelCatalogResult();
							rootStructure = response.getRootElement();
							responseStructure = sap.firefly.PrStructure
									.createDeepCopy(rootStructure);
							messageManager = sap.firefly.MessageManager
									.createMessageManager();
							catalogResult.processResponseStructure(
									responseStructure, messageManager);
							this.setData(catalogResult);
						}
						this.endSync();
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onPlanningModelCatalogResult(extResult, data,
								customIdentifier);
					},
					serializeToJson : function() {
						var request = sap.firefly.PrStructure.create();
						var planningStructure = request
								.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						planningStructure.setStringByName(
								sap.firefly.InAConstants.LC_COMMAND,
								sap.firefly.InAConstants.VC_COMMAND_GET_MODELS);
						return request;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCatalogService",
				sap.firefly.DfService,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningModelCatalogService.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningModelCatalogService);
						}
					},
					m_catalogManager : null,
					releaseObject : function() {
						this.m_catalogManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogManager);
						sap.firefly.PlanningModelCatalogService.$superclass.releaseObject
								.call(this);
					},
					isServiceConfigMatching : function(serviceConfig,
							connection, messages) {
						var systemDescription = serviceConfig
								.getSystemDescription();
						var systemType = systemDescription.getSystemType();
						if (systemType === null) {
							this.addError(
									sap.firefly.ErrorCodes.INVALID_SYSTEM,
									"illegal system type");
							return false;
						}
						if (systemType !== sap.firefly.SystemType.HANA) {
							this.addErrorExt(sap.firefly.OriginLayer.DRIVER,
									sap.firefly.ErrorCodes.INVALID_SYSTEM,
									"illegal system type", systemType);
							return false;
						}
						return true;
					},
					getCatalogManager : function() {
						return this.m_catalogManager;
					},
					processSynchronization : function(syncType) {
						this.m_catalogManager = sap.firefly.PlanningModelCatalogManager
								.create(this);
						return false;
					},
					getOlapEnv : function() {
						return this.getApplication().getOlapEnvironment();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCatalogServiceConfig",
				sap.firefly.DfServiceConfig,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningModelCatalogServiceConfig.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningModelCatalogServiceConfig);
						}
					},
					processPlanningModelCatalogManagerCreation : function(
							syncType, listener, customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onPlanningModelCatalogManagerCreated(
								extResult, data, customIdentifier);
					},
					setDataFromService : function(service) {
						this.setData(service.getCatalogManager());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogManager2",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						CN_TYPE : "Type",
						CN_SCHEMA : "SchemaName",
						CN_PACKAGE : "PackageName",
						CN_OBJECT : "ObjectName",
						CN_OBJECT_IS_PLANQUERY : "ObjectName.IS_PLANQUERY",
						CN_OBJECT_MDX_FLAG : "ObjectName.MDX_FLAG",
						CN_BASEDATASOURCE : "BaseDataSource",
						CN_BASEDATASOURCE_SCHEMANAME : "BaseDataSourceSchemaName",
						CN_BASEDATASOURCE_PACKAGENAME : "BaseDataSourcePackageName",
						CN_BASEDATASOURCE_OBJECTNAME : "BaseDataSourceObjectName",
						CN_BASEDATASOURCE_TYPE : "BaseDataSourceType",
						CN_PLANNING_MODEL_NAME : "ModelName",
						CN_PLANNING_MODEL_SCHEMA_NAME : "ModelSchemaName",
						CN_DATA_CATEGORY : "DataCategory",
						CN_INTERNAL_TYPE : "InternalType",
						create : function(queryManager) {
							var object = new sap.firefly.OlapCatalogManager2();
							object.setupCatalogManager(queryManager);
							return object;
						}
					},
					m_catalogResult : null,
					m_type : null,
					m_isSearchOnName : false,
					m_isSearchOnText : false,
					m_isSearchOnSchema : false,
					m_isSearchOnPackage : false,
					m_isTransientInfoProvidersIncluded : false,
					m_withOtherFiltersPackage : null,
					m_packageComparisonOperator : null,
					m_baseDataSourceFilterList : null,
					m_internalTypeIncludeList : null,
					m_internalTypeExcludeList : null,
					m_textFilter : null,
					m_baseDataSourceFilter : null,
					m_categoryFilter : null,
					m_packageFilter : null,
					m_baseDataSourceTypeFilter : null,
					m_planQueryFilter : null,
					releaseObject : function() {
						this.m_type = null;
						this.m_textFilter = null;
						this.m_categoryFilter = null;
						this.m_packageFilter = null;
						this.m_baseDataSourceFilter = null;
						this.m_baseDataSourceFilterList = sap.firefly.XObject
								.releaseIfNotNull(this.m_baseDataSourceFilterList);
						this.m_internalTypeIncludeList = sap.firefly.XObject
								.releaseIfNotNull(this.m_internalTypeIncludeList);
						this.m_internalTypeExcludeList = sap.firefly.XObject
								.releaseIfNotNull(this.m_internalTypeExcludeList);
						this.m_baseDataSourceTypeFilter = null;
						this.m_planQueryFilter = null;
						this.m_catalogResult = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogResult);
						this.m_withOtherFiltersPackage = null;
						this.m_packageComparisonOperator = null;
						sap.firefly.OlapCatalogManager2.$superclass.releaseObject
								.call(this);
					},
					setupCatalogManager : function(queryManager) {
						this.setupSynchronizingObject(queryManager);
						this.m_planQueryFilter = sap.firefly.TriStateBool._DEFAULT;
						this.m_isTransientInfoProvidersIncluded = true;
					},
					clearSearchFlags : function() {
						this.m_isSearchOnName = false;
						this.m_isSearchOnText = false;
						this.m_isSearchOnSchema = false;
						this.m_isSearchOnPackage = false;
					},
					getComponentName : function() {
						return "OlapCatalogManager";
					},
					processGetResult : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					getAllTypes : function() {
						return this.getAllMember(
								sap.firefly.OlapComponentType.CATALOG_TYPE,
								sap.firefly.OlapCatalogManager2.CN_TYPE, null,
								null, null);
					},
					getAllSchemas : function(type) {
						return this.getAllMember(
								sap.firefly.OlapComponentType.CATALOG_SCHEMA,
								sap.firefly.OlapCatalogManager2.CN_SCHEMA,
								type, null, null);
					},
					getAllPackages : function(type, schema) {
						return this.getAllMember(
								sap.firefly.OlapComponentType.CATALOG_PACKAGE,
								sap.firefly.OlapCatalogManager2.CN_PACKAGE,
								type, schema, null);
					},
					getAllObjects : function(type, schema, packageName) {
						return this.getAllMember(
								sap.firefly.OlapComponentType.CATALOG_OBJECT,
								sap.firefly.OlapCatalogManager2.CN_OBJECT,
								type, schema, packageName);
					},
					getAllMember : function(componentType, dimensionName,
							metaObjectType, schema, packageName) {
						var queryModel = this.getQueryManager().getQueryModel();
						var convenienceCommands = queryModel
								.getConvenienceCommands();
						var extResult;
						var packages;
						var packageDim;
						var packageNameField;
						var packageTextField;
						var rs;
						var rowsAxis;
						var tuplesCount;
						var i;
						var tuple;
						var theName;
						var theText;
						convenienceCommands.resetToDefault();
						if (metaObjectType !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.OlapCatalogManager2.CN_TYPE,
											metaObjectType.getCamelCaseName(),
											sap.firefly.ComparisonOperator.EQUAL);
						}
						if (schema !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.OlapCatalogManager2.CN_SCHEMA,
											schema,
											sap.firefly.ComparisonOperator.EQUAL);
						}
						if (packageName !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.OlapCatalogManager2.CN_PACKAGE,
											packageName,
											sap.firefly.ComparisonOperator.EQUAL);
						}
						convenienceCommands
								.clearAxis(sap.firefly.AxisType.ROWS);
						convenienceCommands.moveDimensionToAxisByIndex(
								dimensionName, sap.firefly.AxisType.ROWS, 0);
						convenienceCommands
								.addFieldByTypeToResultSet(dimensionName,
										sap.firefly.PresentationType.KEY);
						convenienceCommands.addFieldByTypeToResultSet(
								dimensionName,
								sap.firefly.PresentationType.TEXT);
						extResult = this.getQueryManager()
								.processQueryExecution(
										sap.firefly.SyncType.BLOCKING, null,
										null);
						packages = sap.firefly.XList.create();
						if (extResult.isValid()) {
							packageDim = queryModel
									.getDimensionByName(dimensionName);
							packageNameField = packageDim.getKeyField();
							packageTextField = packageDim.getTextField();
							rs = extResult.getData().getClassicResultSet();
							rowsAxis = rs.getRowsAxis();
							tuplesCount = rowsAxis.getTuplesCount();
							for (i = 0; i < tuplesCount; i++) {
								tuple = rowsAxis.getTupleByIndex(i);
								theName = tuple
										.getStringValueByField(packageNameField);
								theText = theName;
								if (packageTextField !== null) {
									theText = tuple
											.getStringValueByField(packageTextField);
								}
								packages.add(sap.firefly.XHierarchyElement
										.createHierarchyElement(componentType,
												theName, theText));
							}
						}
						return sap.firefly.ExtResult
								.create(packages, extResult);
					},
					processSynchronization : function(syncType) {
						var dimList = sap.firefly.XListOfString.create();
						var queryManager;
						var queryModel;
						var cmds;
						var i;
						var dim;
						dimList.add(sap.firefly.OlapCatalogManager2.CN_TYPE);
						dimList.add(sap.firefly.OlapCatalogManager2.CN_SCHEMA);
						dimList.add(sap.firefly.OlapCatalogManager2.CN_PACKAGE);
						dimList.add(sap.firefly.OlapCatalogManager2.CN_OBJECT);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE);
						queryManager = this.getQueryManager();
						queryModel = queryManager.getQueryModel();
						if (queryModel.getSupportsMetadataDataCategory()) {
							dimList
									.add(sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY);
						}
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_SCHEMANAME);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_PACKAGENAME);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_OBJECTNAME);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_NAME);
						dimList
								.add(sap.firefly.OlapCatalogManager2.CN_PLANNING_MODEL_SCHEMA_NAME);
						cmds = queryModel.getConvenienceCommands();
						cmds.resetToDefault();
						cmds.clearAxis(sap.firefly.AxisType.ROWS);
						for (i = 0; i < dimList.size(); i++) {
							dim = dimList.get(i);
							if (queryModel.getDimensionByName(dim) !== null) {
								cmds.moveDimensionToAxis(dim,
										sap.firefly.AxisType.ROWS);
								cmds.addFieldByTypeToResultSet(dim,
										sap.firefly.PresentationType.KEY);
								cmds.addFieldByTypeToResultSet(dim,
										sap.firefly.PresentationType.TEXT);
							}
						}
						cmds
								.addFieldToResultSet(
										sap.firefly.OlapCatalogManager2.CN_OBJECT,
										sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY);
						cmds
								.addFieldToResultSet(
										sap.firefly.OlapCatalogManager2.CN_OBJECT,
										sap.firefly.OlapCatalogManager2.CN_OBJECT_MDX_FLAG);
						if (this.supportsCombinedSearch()) {
							this.setupFilterComplex();
						} else {
							this.setupFilterSimple();
						}
						queryManager
								.processQueryExecution(syncType, this, null);
						return true;
					},
					supportsCombinedSearch : function() {
						var queryManager = this.getQueryManager();
						if (queryManager === null) {
							return false;
						}
						return queryManager.getSystemDescription()
								.getSystemType() === sap.firefly.SystemType.HANA;
					},
					setupFilterComplex : function() {
						var queryModel = this.getQueryManager().getQueryModel();
						var rootFilterAnd = sap.firefly.QFactory2
								.newFilterAnd(queryModel);
						var selectedType = this.getSelectedType();
						var textFilter;
						var mainOrFilter;
						var mainOrRootFilter;
						var baseDataSourceOperator;
						var i;
						var baseDataSourceElement;
						var baseDataSourceFilterOr;
						var j;
						var internalTypeIncludeOperator;
						var k;
						var internalTypeIncludeElement;
						var internalTypeIncludeFilterOr;
						var l;
						var internalTypeExcludeOperator;
						var m;
						var internalTypeExcludeElement;
						var internalTypeExcludeFilterAnd;
						var n;
						if ((selectedType !== null)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_TYPE) !== null)) {
							this.createAndAddFilterOp(selectedType
									.getCamelCaseName(), rootFilterAnd,
									sap.firefly.ComparisonOperator.EQUAL,
									sap.firefly.OlapCatalogManager2.CN_TYPE,
									sap.firefly.PresentationType.KEY);
						}
						textFilter = this.getSearchFilter();
						mainOrFilter = sap.firefly.QFactory2
								.newFilterOr(rootFilterAnd);
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(textFilter)) {
							if (this.isSearchOnName()
									&& (queryModel
											.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT) !== null)) {
								this
										.createAndAddFilterOp(
												textFilter,
												mainOrFilter,
												sap.firefly.ComparisonOperator.MATCH,
												sap.firefly.OlapCatalogManager2.CN_OBJECT,
												sap.firefly.PresentationType.KEY);
							}
							if (this.isSearchOnText()
									&& (queryModel
											.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT) !== null)) {
								this
										.createAndAddFilterOp(
												textFilter,
												mainOrFilter,
												sap.firefly.ComparisonOperator.MATCH,
												sap.firefly.OlapCatalogManager2.CN_OBJECT,
												sap.firefly.PresentationType.TEXT);
							}
							if (this.isSearchOnSchema()
									&& (queryModel
											.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_SCHEMA) !== null)) {
								this
										.createAndAddFilterOp(
												textFilter,
												mainOrFilter,
												sap.firefly.ComparisonOperator.MATCH,
												sap.firefly.OlapCatalogManager2.CN_SCHEMA,
												sap.firefly.PresentationType.KEY);
							}
						}
						if (this.isSearchOnPackage()
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_PACKAGE) !== null)) {
							if (this.m_withOtherFiltersPackage === sap.firefly.LogicalBoolOperator.OR) {
								mainOrRootFilter = mainOrFilter;
							} else {
								mainOrRootFilter = rootFilterAnd;
							}
							this.createAndAddFilterOp(this.m_packageFilter,
									mainOrRootFilter,
									this.determineComparisonOperator(
											this.m_packageComparisonOperator,
											this.m_packageFilter),
									sap.firefly.OlapCatalogManager2.CN_PACKAGE,
									sap.firefly.PresentationType.KEY);
						}
						if (mainOrFilter.hasElements()) {
							rootFilterAnd.add(mainOrFilter);
						}
						if (queryModel.getSupportsMetadataDataCategory()
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(this.m_categoryFilter)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY) !== null)) {
							this
									.createAndAddFilterOp(
											this.m_categoryFilter,
											rootFilterAnd,
											sap.firefly.ComparisonOperator.MATCH,
											sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY,
											sap.firefly.PresentationType.KEY);
						}
						if ((this.m_baseDataSourceFilter !== null)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE) !== null)) {
							this
									.createAndAddFilterOp(
											this.m_baseDataSourceFilter,
											rootFilterAnd,
											sap.firefly.ComparisonOperator.MATCH,
											sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE,
											sap.firefly.PresentationType.KEY);
						}
						if (sap.firefly.XCollectionUtils
								.hasElements(this.m_baseDataSourceFilterList)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE) !== null)) {
							baseDataSourceOperator = sap.firefly.ComparisonOperator.EQUAL;
							for (i = 0; i < this.m_baseDataSourceFilterList
									.size(); i++) {
								baseDataSourceElement = this.m_baseDataSourceFilterList
										.get(i);
								if (sap.firefly.XString.containsString(
										baseDataSourceElement, "*")) {
									baseDataSourceOperator = sap.firefly.ComparisonOperator.MATCH;
									break;
								}
							}
							baseDataSourceFilterOr = sap.firefly.QFactory2
									.newFilterOr(rootFilterAnd);
							for (j = 0; j < this.m_baseDataSourceFilterList
									.size(); j++) {
								this
										.createAndAddFilterOp(
												this.m_baseDataSourceFilterList
														.get(j),
												baseDataSourceFilterOr,
												baseDataSourceOperator,
												sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE,
												sap.firefly.PresentationType.KEY);
							}
							if (baseDataSourceFilterOr.hasElements()) {
								rootFilterAnd.add(baseDataSourceFilterOr);
							}
						}
						if ((this.m_baseDataSourceTypeFilter !== null)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE) !== null)) {
							this
									.createAndAddFilterOp(
											sap.firefly.XString
													.convertToUpperCase(this.m_baseDataSourceTypeFilter
															.getName()),
											rootFilterAnd,
											sap.firefly.ComparisonOperator.EQUAL,
											null, null);
						}
						if (sap.firefly.XCollectionUtils
								.hasElements(this.m_internalTypeIncludeList)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE) !== null)) {
							internalTypeIncludeOperator = sap.firefly.ComparisonOperator.EQUAL;
							for (k = 0; k < this.m_internalTypeIncludeList
									.size(); k++) {
								internalTypeIncludeElement = this.m_internalTypeIncludeList
										.get(k);
								if (sap.firefly.XString.containsString(
										internalTypeIncludeElement, "*")) {
									internalTypeIncludeOperator = sap.firefly.ComparisonOperator.MATCH;
									break;
								}
							}
							internalTypeIncludeFilterOr = sap.firefly.QFactory2
									.newFilterOr(rootFilterAnd);
							for (l = 0; l < this.m_internalTypeIncludeList
									.size(); l++) {
								this
										.createAndAddFilterOp(
												this.m_internalTypeIncludeList
														.get(l),
												internalTypeIncludeFilterOr,
												internalTypeIncludeOperator,
												sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE,
												sap.firefly.PresentationType.KEY);
							}
							if (internalTypeIncludeFilterOr.hasElements()) {
								rootFilterAnd.add(internalTypeIncludeFilterOr);
							}
						}
						if (sap.firefly.XCollectionUtils
								.hasElements(this.m_internalTypeExcludeList)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE) !== null)) {
							internalTypeExcludeOperator = sap.firefly.ComparisonOperator.NOT_EQUAL;
							for (m = 0; m < this.m_internalTypeExcludeList
									.size(); m++) {
								internalTypeExcludeElement = this.m_internalTypeExcludeList
										.get(m);
								if (sap.firefly.XString.containsString(
										internalTypeExcludeElement, "*")) {
									internalTypeExcludeOperator = sap.firefly.ComparisonOperator.NOT_MATCH;
									break;
								}
							}
							internalTypeExcludeFilterAnd = sap.firefly.QFactory2
									.newFilterAnd(rootFilterAnd);
							for (n = 0; n < this.m_internalTypeExcludeList
									.size(); n++) {
								this
										.createAndAddFilterOp(
												this.m_internalTypeExcludeList
														.get(n),
												internalTypeExcludeFilterAnd,
												internalTypeExcludeOperator,
												sap.firefly.OlapCatalogManager2.CN_INTERNAL_TYPE,
												sap.firefly.PresentationType.KEY);
							}
							if (internalTypeExcludeFilterAnd.hasElements()) {
								rootFilterAnd.add(internalTypeExcludeFilterAnd);
							}
						}
						if ((this.m_planQueryFilter !== sap.firefly.TriStateBool._DEFAULT)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY) !== null)) {
							if (this.m_planQueryFilter !== sap.firefly.TriStateBool._TRUE) {
								this
										.createAndAddFilterOp(
												"true",
												rootFilterAnd,
												sap.firefly.ComparisonOperator.MATCH,
												sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY,
												sap.firefly.PresentationType.KEY);
							} else {
								if (this.m_planQueryFilter !== sap.firefly.TriStateBool._FALSE) {
									this
											.createAndAddFilterOp(
													"false",
													rootFilterAnd,
													sap.firefly.ComparisonOperator.MATCH,
													sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY,
													sap.firefly.PresentationType.KEY);
								}
							}
						}
						if (rootFilterAnd.hasElements()) {
							queryModel.getSelector()
									.getSelectionStateContainer()
									.setComplexSelection(rootFilterAnd);
						}
					},
					createAndAddFilterOp : function(textFilter,
							mainOrRootFilter, comparisonOperator, objectType,
							pType) {
						var queryModel = this.getQueryManager().getQueryModel();
						var selectionStateContainer = queryModel.getSelector()
								.getSelectionStateContainer();
						var filterName = sap.firefly.QFactory2
								.newFilterOperation(selectionStateContainer);
						var dimensionByNameCNObject;
						var fieldByType;
						filterName.setComparisonOperator(comparisonOperator);
						if (objectType !== null) {
							dimensionByNameCNObject = queryModel
									.getDimensionByName(objectType);
							fieldByType = dimensionByNameCNObject
									.getFirstFieldByType(pType);
							filterName.setField(fieldByType);
						}
						filterName.getLow().setStringValue(textFilter);
						mainOrRootFilter.add(filterName);
					},
					determineComparisonOperator : function(op, text) {
						if (op !== null) {
							return op;
						}
						if (sap.firefly.XString.containsString(text, "*")) {
							return sap.firefly.ComparisonOperator.MATCH;
						}
						return sap.firefly.ComparisonOperator.EQUAL;
					},
					setupFilterSimple : function() {
						var queryModel = this.getQueryManager().getQueryModel();
						var convenienceCommands = queryModel
								.getConvenienceCommands();
						var selectedType = this.getSelectedType();
						var textFilter;
						var packageFilter;
						var baseDataSourceOperator;
						var k;
						var baseDataSourceElement;
						var i;
						if ((selectedType !== null)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_TYPE) !== null)) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.OlapCatalogManager2.CN_TYPE,
											selectedType.getCamelCaseName(),
											sap.firefly.ComparisonOperator.EQUAL);
						}
						textFilter = this.getSearchFilter();
						if ((sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(textFilter))
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT) !== null)) {
							if (this.isSearchOnName()) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_OBJECT,
												sap.firefly.PresentationType.KEY,
												textFilter,
												sap.firefly.ComparisonOperator.MATCH);
							} else {
								if (this.isSearchOnText()) {
									convenienceCommands
											.addStringFilterByPresentation(
													sap.firefly.OlapCatalogManager2.CN_OBJECT,
													sap.firefly.PresentationType.TEXT,
													textFilter,
													sap.firefly.ComparisonOperator.MATCH);
								}
							}
						}
						packageFilter = this.getPackageFilter();
						if ((sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(packageFilter))
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_PACKAGE) !== null)) {
							if (this.isSearchOnPackage()) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_PACKAGE,
												sap.firefly.PresentationType.KEY,
												packageFilter,
												sap.firefly.ComparisonOperator.EQUAL);
							}
						}
						if (queryModel.getSupportsMetadataDataCategory()
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(this.m_categoryFilter)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY) !== null)) {
							convenienceCommands
									.addStringFilterByPresentation(
											sap.firefly.OlapCatalogManager2.CN_DATA_CATEGORY,
											sap.firefly.PresentationType.KEY,
											this.m_categoryFilter,
											sap.firefly.ComparisonOperator.MATCH);
						}
						if ((queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE) !== null)) {
							if (this.m_baseDataSourceFilter !== null) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE,
												sap.firefly.PresentationType.KEY,
												this.m_baseDataSourceFilter,
												sap.firefly.ComparisonOperator.MATCH);
							}
						}
						if (sap.firefly.XCollectionUtils
								.hasElements(this.m_baseDataSourceFilterList)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE) !== null)) {
							baseDataSourceOperator = sap.firefly.ComparisonOperator.EQUAL;
							for (k = 0; k < this.m_baseDataSourceFilterList
									.size(); k++) {
								baseDataSourceElement = this.m_baseDataSourceFilterList
										.get(k);
								if (sap.firefly.XString.containsString(
										baseDataSourceElement, "*")) {
									baseDataSourceOperator = sap.firefly.ComparisonOperator.MATCH;
									break;
								}
							}
							for (i = 0; i < this.m_baseDataSourceFilterList
									.size(); i++) {
								convenienceCommands
										.addSingleMemberFilterByDimensionName(
												sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE,
												this.m_baseDataSourceFilterList
														.get(i),
												baseDataSourceOperator);
							}
						}
						if (queryModel
								.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE) !== null) {
							if (this.m_baseDataSourceTypeFilter !== null) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE,
												sap.firefly.PresentationType.KEY,
												this.m_baseDataSourceTypeFilter
														.getName(),
												sap.firefly.ComparisonOperator.EQUAL);
							}
							if (this.m_isTransientInfoProvidersIncluded === false) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_BASEDATASOURCE_TYPE,
												sap.firefly.PresentationType.KEY,
												"TRPR",
												sap.firefly.ComparisonOperator.NOT_EQUAL);
							}
						}
						if ((this.m_planQueryFilter !== sap.firefly.TriStateBool._DEFAULT)
								&& (queryModel
										.getDimensionByName(sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY) !== null)) {
							if (this.m_planQueryFilter !== sap.firefly.TriStateBool._TRUE) {
								convenienceCommands
										.addStringFilterByPresentation(
												sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY,
												sap.firefly.PresentationType.KEY,
												"true",
												sap.firefly.ComparisonOperator.MATCH);
							} else {
								if (this.m_planQueryFilter !== sap.firefly.TriStateBool._FALSE) {
									convenienceCommands
											.addStringFilterByPresentation(
													sap.firefly.OlapCatalogManager2.CN_OBJECT_IS_PLANQUERY,
													sap.firefly.PresentationType.KEY,
													"false",
													sap.firefly.ComparisonOperator.MATCH);
								}
							}
						}
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onOlapCatalogResult(extResult, data,
								customIdentifier);
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						var classicResultSet;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							classicResultSet = resultSetContainer
									.getClassicResultSet();
							this.m_catalogResult = sap.firefly.OlapCatalogResult
									.create(classicResultSet);
							this.setData(this.m_catalogResult);
						}
						this.endSync();
					},
					setSearchOnText : function(enableSearchOnText) {
						if (this.m_isSearchOnText !== enableSearchOnText) {
							if (this.supportsCombinedSearch() === false) {
								this.clearSearchFlags();
								this.m_isSearchOnName = !enableSearchOnText;
							}
							this.m_isSearchOnText = enableSearchOnText;
							this.resetSyncState();
						}
					},
					isSearchOnText : function() {
						return this.m_isSearchOnText;
					},
					setSearchOnName : function(enableSearchOnName) {
						if (this.m_isSearchOnName !== enableSearchOnName) {
							if (this.supportsCombinedSearch() === false) {
								this.clearSearchFlags();
								this.m_isSearchOnText = !enableSearchOnName;
							}
							this.m_isSearchOnName = enableSearchOnName;
							this.resetSyncState();
						}
					},
					isSearchOnName : function() {
						return this.m_isSearchOnName;
					},
					setSearchOnSchema : function(enableSearchOnSchema) {
						if (this.m_isSearchOnSchema !== enableSearchOnSchema) {
							if (this.supportsCombinedSearch() === false) {
								return;
							}
							this.m_isSearchOnSchema = enableSearchOnSchema;
							this.resetSyncState();
						}
					},
					isSearchOnSchema : function() {
						return this.m_isSearchOnSchema;
					},
					setSearchOnPackage : function(enableSearchOnPackage) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setSearchOnPackageExt : function(enableSearchOnPackage,
							text, presentationSelect, withOtherFilters, op) {
						if (withOtherFilters === sap.firefly.LogicalBoolOperator.NOT) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Only AND or OR are allowed.");
						}
						if (this.m_isSearchOnPackage !== enableSearchOnPackage) {
							if (this.supportsCombinedSearch() === false) {
								this.clearSearchFlags();
							}
							this.m_isSearchOnPackage = enableSearchOnPackage;
							this.m_packageFilter = text;
							this.m_packageComparisonOperator = op;
							this.m_withOtherFiltersPackage = withOtherFilters;
							this.resetSyncState();
						}
						return null;
					},
					getPackageFilter : function() {
						return this.m_packageFilter;
					},
					isSearchOnPackage : function() {
						return this.m_isSearchOnPackage;
					},
					setSelectedType : function(type) {
						this.m_type = type;
						this.resetSyncState();
					},
					getSelectedType : function() {
						return this.m_type;
					},
					setSearchFilter : function(filter) {
						this.m_textFilter = filter;
						this.resetSyncState();
					},
					getSearchFilter : function() {
						return this.m_textFilter;
					},
					setResultOffset : function(offset) {
						this.getQueryManager().setOffsetRows(offset);
						this.resetSyncState();
					},
					getResultOffset : function() {
						return this.getQueryManager().getOffsetRows();
					},
					setResultMaxSize : function(maxSize) {
						this.getQueryManager().setMaxRows(maxSize);
						this.resetSyncState();
					},
					getResultMaxSize : function() {
						return this.getQueryManager().getMaxRows();
					},
					setPlanQueryFilter : function(filter) {
						this.m_planQueryFilter = filter;
					},
					getPlanQueryFilter : function() {
						return this.m_planQueryFilter;
					},
					getBaseDataSourceFilter : function() {
						return this.m_baseDataSourceFilter;
					},
					setBaseDataSourceFilter : function(baseDataSourceFilter) {
						if (baseDataSourceFilter === null) {
							this.m_baseDataSourceFilter = null;
						} else {
							this.setBaseDataSourceFilterList(null);
							this.m_baseDataSourceFilter = baseDataSourceFilter;
						}
						this.resetSyncState();
					},
					setBaseDataSourceFilterList : function(
							baseDataSourceFilterList) {
						if (baseDataSourceFilterList === null) {
							this.m_baseDataSourceFilterList = sap.firefly.XObject
									.releaseIfNotNull(this.m_baseDataSourceFilterList);
						} else {
							this.setBaseDataSourceFilter(null);
							this.m_baseDataSourceFilterList = sap.firefly.XListOfString
									.createFromReadOnlyList(baseDataSourceFilterList);
						}
						this.resetSyncState();
					},
					getBaseDataSourceFilterList : function() {
						return this.m_baseDataSourceFilterList;
					},
					getBaseDataSourceTypeFilter : function() {
						return this.m_baseDataSourceTypeFilter;
					},
					setBaseDataSourceTypeFilter : function(
							baseDataSourceTypeFilter) {
						this.m_baseDataSourceTypeFilter = baseDataSourceTypeFilter;
						this.resetSyncState();
					},
					setInternalTypeIncludeList : function(
							internalTypeIncludeList) {
						if (sap.firefly.XCollectionUtils
								.hasElements(internalTypeIncludeList)) {
							this.m_internalTypeIncludeList = sap.firefly.XListOfString
									.createFromReadOnlyList(internalTypeIncludeList);
						} else {
							this.m_internalTypeIncludeList = sap.firefly.XObject
									.releaseIfNotNull(this.m_internalTypeIncludeList);
						}
						this.resetSyncState();
					},
					getInternalTypeIncludeList : function() {
						return this.m_internalTypeIncludeList;
					},
					setInternalTypeExcludeList : function(
							internalTypeExcludeList) {
						if (sap.firefly.XCollectionUtils
								.hasElements(internalTypeExcludeList)) {
							this.m_internalTypeExcludeList = sap.firefly.XListOfString
									.createFromReadOnlyList(internalTypeExcludeList);
						} else {
							this.m_internalTypeExcludeList = sap.firefly.XObject
									.releaseIfNotNull(this.m_internalTypeExcludeList);
						}
						this.resetSyncState();
					},
					getInternalTypeExcludeList : function() {
						return this.m_internalTypeExcludeList;
					},
					setDataCategoryFilter : function(dataCategory) {
						if (this.getQueryManager().getQueryModel()
								.getSupportsMetadataDataCategory() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						this.m_categoryFilter = dataCategory;
						this.resetSyncState();
					},
					getDataCategoryFilter : function() {
						return this.m_categoryFilter;
					},
					isTransientInfoProvidersIncluded : function() {
						return this.m_isTransientInfoProvidersIncluded;
					},
					setTransientInfoProvidersIncluded : function(isIncluded) {
						this.m_isTransientInfoProvidersIncluded = isIncluded;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogService",
				sap.firefly.DfService,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.OlapCatalogService.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.OlapCatalogService);
						}
					},
					m_catalogManager : null,
					getCatalogManager : function() {
						return this.m_catalogManager;
					},
					releaseObject : function() {
						this.m_catalogManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogManager);
						sap.firefly.OlapCatalogService.$superclass.releaseObject
								.call(this);
					},
					processSynchronization : function(syncType) {
						var config = this.getServiceConfig();
						var queryServiceConfig = sap.firefly.QueryServiceConfig
								.create(this.getApplication());
						var identifier;
						queryServiceConfig
								.setSystemName(config.getSystemName());
						identifier = sap.firefly.QFactory2.newDataSource();
						identifier
								.setType(sap.firefly.MetaObjectType.CATALOG_VIEW);
						identifier.setObjectName("$$DataSource$$");
						queryServiceConfig.setDataSource(identifier);
						queryServiceConfig
								.setProviderType(sap.firefly.ProviderType.ANALYTICS);
						queryServiceConfig.setConnectionContainer(this
								.getConnection());
						queryServiceConfig.processQueryManagerCreation(
								syncType, this, null);
						return true;
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							this.m_catalogManager = sap.firefly.OlapCatalogManager2
									.create(queryManager);
						}
						this.endSync();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogProxy",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						create : function(parent, element, groupByTag) {
							var newObj = new sap.firefly.OlapCatalogProxy();
							newObj.setupProxy(parent, element, groupByTag);
							return newObj;
						}
					},
					m_originElement : null,
					m_children : null,
					m_groupBy : null,
					m_name : null,
					m_text : null,
					m_type : null,
					m_childSetState : null,
					setupProxy : function(parent, element, groupByTag) {
						var node;
						var originChildren;
						this.setupSynchronizingObject(parent);
						this.m_originElement = element;
						this.m_groupBy = groupByTag;
						this.m_childSetState = sap.firefly.ChildSetState.NONE;
						if (element !== null) {
							this.setName(element.getName());
							this.setText(element.getText());
							this.setComponentType(element.getComponentType());
							if (element.isNode()) {
								node = element;
								this.m_childSetState = node.getChildSetState();
								if (this.m_childSetState === sap.firefly.ChildSetState.COMPLETE) {
									originChildren = node.getChildElements();
									this.fillChildren(originChildren);
								}
							}
						}
					},
					releaseObject : function() {
						this.m_name = null;
						this.m_text = null;
						this.m_originElement = null;
						this.m_children = null;
						this.m_groupBy = null;
						this.m_type = null;
						this.m_childSetState = null;
						sap.firefly.OlapCatalogProxy.$superclass.releaseObject
								.call(this);
					},
					newProxyNode : function(parent, element, groupByTag) {
						return this.getCatalogSpace().newProxyNode(parent,
								element, groupByTag);
					},
					getComponentType : function() {
						return this.m_type;
					},
					setComponentType : function(type) {
						if (type === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Type is null");
						}
						this.m_type = type;
					},
					isLeaf : function() {
						return !this.isNode();
					},
					isNode : function() {
						return this.m_originElement.isNode();
					},
					getTagValue : function(tagName) {
						return this.m_originElement.getTagValue(tagName);
					},
					getName : function() {
						return this.m_name;
					},
					setName : function(name) {
						this.m_name = name;
					},
					getText : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append("[");
						buffer.append(this.getComponentType().getName());
						buffer.append("] ");
						buffer.append(this.m_text);
						return buffer.toString();
					},
					setText : function(text) {
						this.m_text = text;
					},
					getContentElement : function() {
						return this.m_originElement.getContentElement();
					},
					getContentConstant : function() {
						return null;
					},
					getChildSetState : function() {
						return this.m_childSetState;
					},
					hasChildren : function() {
						if (this.m_childSetState === sap.firefly.ChildSetState.COMPLETE) {
							return this.m_children.size() > 0;
						}
						return false;
					},
					getChildElements : function() {
						if (this.isNode()) {
							if (this.m_childSetState === sap.firefly.ChildSetState.INITIAL) {
								this.processSyncAction(
										sap.firefly.SyncType.BLOCKING, null,
										null);
							}
						}
						return this.m_children;
					},
					processChildFetch : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					processSynchronization : function(syncType) {
						var node;
						var children;
						if (this.m_originElement.isNode()) {
							node = this.m_originElement;
							if (node.getChildSetState() === sap.firefly.ChildSetState.COMPLETE) {
								children = node.getChildElements();
								this.fillChildren(children);
							} else {
								node.processChildFetch(syncType, this, null);
								return true;
							}
						}
						return false;
					},
					onChildFetched : function(extResult, result,
							fetchedChildren, customIdentifier) {
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							this.fillChildren(fetchedChildren);
						}
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						var children = null;
						if (data !== null) {
							children = data.getChildren();
						}
						listener.onChildFetched(extResult, data, children,
								customIdentifier);
					},
					fillChildren : function(originChildren) {
						var newChildren;
						var i;
						var element;
						var proxy;
						var subnodes;
						var j;
						var element2;
						var category;
						var list;
						var iterator;
						var key;
						var groupByNode;
						var list2;
						var k;
						var element3;
						var newProxyNode;
						var comparator;
						if (originChildren !== null) {
							newChildren = sap.firefly.XList.create();
							if (this.m_groupBy === null) {
								for (i = 0; i < originChildren.size(); i++) {
									element = originChildren.get(i);
									proxy = this.newProxyNode(this, element,
											null);
									newChildren.add(proxy);
								}
							} else {
								subnodes = sap.firefly.XHashMapByString
										.create();
								for (j = 0; j < originChildren.size(); j++) {
									element2 = originChildren.get(j);
									category = element2
											.getTagValue(this.m_groupBy);
									if (sap.firefly.XStringUtils
											.isNotNullAndNotEmpty(category)) {
										list = subnodes.getByKey(category);
										if (list === null) {
											list = sap.firefly.XList.create();
											subnodes.put(category, list);
										}
										list.add(element2);
									}
								}
								iterator = subnodes.getKeysAsIteratorOfString();
								while (iterator.hasNext()) {
									key = iterator.next();
									groupByNode = sap.firefly.OlapCatalogProxyGroup
											.createGroup(this);
									groupByNode.setName(key);
									groupByNode.setText(key);
									newChildren.add(groupByNode);
									list2 = subnodes.getByKey(key);
									for (k = 0; k < list2.size(); k++) {
										element3 = list2.get(k);
										newProxyNode = this.newProxyNode(this,
												element3, null);
										groupByNode.add(newProxyNode);
									}
									groupByNode.sort();
								}
							}
							comparator = sap.firefly.XHierarchyComparator
									.create();
							newChildren.sortByComparator(comparator);
							this.m_children = newChildren;
							this.m_childSetState = sap.firefly.ChildSetState.COMPLETE;
							this.setData(sap.firefly.XHierarchyResult.create(
									this, this.m_children));
						}
					},
					getOriginElement : function() {
						return this.m_originElement;
					},
					getCatalogSpace : function() {
						return this.getParent().getCatalogSpace();
					},
					getSystemDescription : function() {
						return this.getParent().getSystemDescription();
					},
					getOlapCatalogManager : function() {
						return this.getParent().getOlapCatalogManager();
					},
					getMetaObjectType : function() {
						return this.getParent().getMetaObjectType();
					},
					getSchema : function() {
						return this.getParent().getSchema();
					},
					getPackage : function() {
						return this.getParent().getPackage();
					},
					getParent : function() {
						return this.getActionContext();
					},
					getObjectName : function() {
						return this.getParent().getObjectName();
					},
					getDataSource : function() {
						return this.getParent().getDataSource();
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append(this.m_type.getName());
						buffer.append(": ");
						buffer.append(this.m_name);
						buffer.append(" (");
						buffer.append(this.m_text);
						buffer.append(")");
						return buffer.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QModelComponent",
				sap.firefly.DfQContext,
				{
					m_name : null,
					m_text : null,
					m_tagging : null,
					m_primaryParent : null,
					m_secondaryParents : null,
					m_protocolExtension : null,
					m_isProtocolExtensionReplacing : false,
					m_modCounter : 0,
					m_changedListeners : null,
					m_deserializeListeners : null,
					m_state : null,
					m_deltaStack : null,
					m_currentDeltaPhase : null,
					m_changedNodes : null,
					m_isInRaiseEvents : false,
					m_notificationListener : null,
					copyModelComponent : function(origin) {
						this.m_name = origin.m_name;
						this.m_text = origin.m_text;
						if (origin.m_tagging !== null) {
							this.m_tagging = origin.m_tagging
									.createMapOfStringByStringCopy();
						}
					},
					setupModelComponent : function(context, parentNode) {
						var theContext = context;
						if ((theContext === null) && (parentNode !== null)) {
							theContext = parentNode.getContext();
						}
						this.setupContext(theContext);
						this.m_primaryParent = sap.firefly.XWeakReferenceUtil
								.getWeakRef(parentNode);
						this.m_state = sap.firefly.QDeltaChangeState.UNCHANGED;
						this.m_isInRaiseEvents = false;
					},
					releaseObject : function() {
						this.m_name = null;
						this.m_text = null;
						this.m_state = null;
						this.m_modCounter = 0;
						this.m_primaryParent = null;
						this.m_changedListeners = sap.firefly.XObject
								.releaseIfNotNull(this.m_changedListeners);
						this.m_deserializeListeners = sap.firefly.XObject
								.releaseIfNotNull(this.m_deserializeListeners);
						this.m_secondaryParents = sap.firefly.XObject
								.releaseIfNotNull(this.m_secondaryParents);
						if (this.m_changedNodes !== null) {
							this.m_changedNodes.clear();
						}
						this.m_tagging = sap.firefly.XObject
								.releaseIfNotNull(this.m_tagging);
						this.m_protocolExtension = sap.firefly.XObject
								.releaseIfNotNull(this.m_protocolExtension);
						this.m_notificationListener = null;
						sap.firefly.QModelComponent.$superclass.releaseObject
								.call(this);
					},
					getComponentType : function() {
						return this.getOlapComponentType();
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.OLAP;
					},
					isRoot : function() {
						return this.m_primaryParent === null;
					},
					getParent : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_primaryParent);
					},
					getParentComponent : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_primaryParent);
					},
					setParent : function(parent) {
						var context;
						this.m_primaryParent = sap.firefly.XWeakReferenceUtil
								.getWeakRef(parent);
						context = this.getContext();
						if ((parent !== null) && (context === null)) {
							context = parent.getContext();
							this.setContext(context);
						}
					},
					addSecondaryParent : function(parent) {
						if (parent === this) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The parent cannot be set to itself");
						}
						if (this.m_secondaryParents === null) {
							this.m_secondaryParents = sap.firefly.XListWeakRef
									.create();
						}
						this.m_secondaryParents.add(parent);
					},
					removeSecondaryParent : function(parent) {
						var parentsSize;
						var i;
						if (this.m_secondaryParents !== null) {
							parentsSize = this.m_secondaryParents.size();
							for (i = 0; i < parentsSize; i++) {
								if (this.m_secondaryParents.get(i) === parent) {
									this.m_secondaryParents.removeAt(i);
									break;
								}
							}
						}
					},
					getName : function() {
						return this.m_name;
					},
					setName : function(name) {
						this.m_name = name;
					},
					getText : function() {
						return this.m_text;
					},
					setText : function(text) {
						this.m_text = text;
					},
					isComponentNode : function() {
						return false;
					},
					getComponentProperties : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getChildren : function() {
						return this.getChildrenIterator();
					},
					getChildrenIterator : function() {
						var namedChildren = this.getNamedChildren();
						var indexedChildren = this.getIndexedChildren();
						var all;
						var keysAsReadOnlyListOfString;
						var keys;
						var size;
						var i;
						if ((indexedChildren !== null)
								&& (namedChildren === null)) {
							return indexedChildren;
						}
						all = sap.firefly.XList.create();
						if (namedChildren !== null) {
							keysAsReadOnlyListOfString = namedChildren
									.getKeysAsReadOnlyListOfString();
							keys = sap.firefly.XListOfString
									.createFromReadOnlyList(keysAsReadOnlyListOfString);
							keys
									.sortByDirection(sap.firefly.XSortDirection.ASCENDING);
							size = keys.size();
							for (i = 0; i < size; i++) {
								all.add(namedChildren.getByKey(keys.get(i)));
							}
						}
						if (indexedChildren !== null) {
							while (indexedChildren.hasNext()) {
								all.add(indexedChildren.next());
							}
						}
						return all.getIterator();
					},
					getNamedChildren : function() {
						return null;
					},
					getIndexedChildren : function() {
						return null;
					},
					configureProperties : function(properties) {
						properties.addProperty(sap.firefly.OlapProperty.NAME,
								sap.firefly.XValueType.STRING);
						properties.addProperty(sap.firefly.OlapProperty.TEXT,
								sap.firefly.XValueType.STRING);
					},
					getPropertyStringValue : function(type) {
						if (type === sap.firefly.OlapProperty.NAME) {
							return this.getName();
						}
						if (type === sap.firefly.OlapProperty.TEXT) {
							return this.getText();
						}
						return null;
					},
					setPropertyStringValue : function(type, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPropertyConstantValue : function(type) {
						return null;
					},
					setPropertyConstantValue : function(type, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setProtocolExtension : function(element, replace) {
						this.m_protocolExtension = sap.firefly.XJson
								.extractJsonContent(element);
						this.m_isProtocolExtensionReplacing = replace;
					},
					getProtocolExtension : function() {
						return this.m_protocolExtension;
					},
					isProtocolExtensionReplacing : function() {
						return this.m_isProtocolExtensionReplacing;
					},
					assertValueType : function(value, valueType) {
						if ((value !== null)
								&& (value.getValueType() !== valueType)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					getTagging : function() {
						if (this.m_tagging === null) {
							this.m_tagging = sap.firefly.XHashMapOfStringByString
									.create();
						}
						return this.m_tagging;
					},
					setTagging : function(tagging) {
						this.m_tagging = tagging;
					},
					registerDeserializeListener : function(listener,
							customIdentifier) {
						if (this.m_deserializeListeners === null) {
							this.m_deserializeListeners = sap.firefly.XList
									.create();
						}
						this.unregisterDeserializeListener(listener);
						this.m_deserializeListeners
								.add(sap.firefly.QDeserializeListenerPair
										.create(listener, customIdentifier));
					},
					unregisterDeserializeListener : function(listener) {
						var listenerIndex = this
								.getDeserializeListenerIndex(listener);
						var removeAt;
						if (listenerIndex !== -1) {
							removeAt = this.m_deserializeListeners
									.removeAt(listenerIndex);
							removeAt.releaseObject();
						}
					},
					getDeserializeListenerIndex : function(listener) {
						var listenerSize;
						var i;
						var pair;
						var myListener;
						if (this.m_deserializeListeners !== null) {
							listenerSize = this.m_deserializeListeners.size();
							for (i = 0; i < listenerSize; i++) {
								pair = this.m_deserializeListeners.get(i);
								myListener = pair.getListener();
								if (myListener === listener) {
									return i;
								}
							}
						}
						return -1;
					},
					serializeToElement : function(modelFormat, capabilities) {
						var exporter;
						if (modelFormat === sap.firefly.QModelFormat.INA_DATA) {
							exporter = sap.firefly.QInAExportFactory.create(
									this.getApplication(), modelFormat,
									capabilities,
									sap.firefly.QContextType.RESULT_SET);
						} else {
							exporter = sap.firefly.QInAExportFactory.create(
									this.getApplication(), modelFormat,
									capabilities, null);
						}
						return exporter.exportComponent(null, this, null,
								sap.firefly.QImExFlag.DEFAULT_ALL);
					},
					serializeToFormat : function(modelFormat) {
						return this.serialize(modelFormat, null);
					},
					serialize : function(modelFormat, capabilities) {
						var serialization = this.serializeToElement(
								modelFormat, capabilities);
						if (serialization === null) {
							return null;
						}
						if (modelFormat === sap.firefly.QModelFormat.TEXT) {
							return sap.firefly.PrToString.serialize(
									serialization, true, true, 4);
						}
						return sap.firefly.PrToString.serialize(serialization,
								true, false, 0);
					},
					raiseDeserializeEvent : function(currentState) {
						var listenerSize;
						var idxListener;
						var pair;
						var listener;
						if (this.m_deserializeListeners !== null) {
							listenerSize = this.m_deserializeListeners.size();
							for (idxListener = 0; idxListener < listenerSize; idxListener++) {
								pair = this.m_deserializeListeners
										.get(idxListener);
								listener = pair.getListener();
								if (listener !== null) {
									listener.onModelComponentDeserialize(this,
											currentState, pair
													.getCustomIdentifier());
								}
							}
						}
					},
					deserialize : function(modelFormat, expression) {
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var element = jsonParser.parse(expression);
						var extResult = this.deserializeInternal(this, null,
								modelFormat, element);
						return extResult.getData();
					},
					deserializeExt : function(modelFormat, expression) {
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var element = jsonParser.parse(expression);
						if (jsonParser.hasErrors()) {
							return sap.firefly.ExtResult.create(null,
									jsonParser);
						}
						return this.deserializeInternal(this, null,
								modelFormat, element);
					},
					deserializeFromElementExt : function(modelFormat, element) {
						return this.deserializeInternal(this, null,
								modelFormat, element);
					},
					deserializeNewComponentExt : function(componentType,
							modelFormat, expression) {
						var jsonParser = sap.firefly.JsonParserFactory
								.newInstance();
						var element = jsonParser.parse(expression);
						if (jsonParser.hasErrors()) {
							return sap.firefly.ExtResult.create(null,
									jsonParser);
						}
						return this.deserializeInternal(null, componentType,
								modelFormat, element);
					},
					deserializeNewComponentFromElementExt : function(
							componentType, modelFormat, element) {
						return this.deserializeInternal(this, componentType,
								modelFormat, element);
					},
					deserializeInternal : function(modelComponent,
							componentType, modelFormat, element) {
						var importer = sap.firefly.QInAImportFactory.create(
								this.getApplication(), modelFormat, null);
						var theElement;
						var context;
						var resultComponent;
						if (element === null) {
							if (importer === null) {
								return sap.firefly.ExtResult.create(null,
										sap.firefly.MessageManager
												.createMessageManager());
							}
							return sap.firefly.ExtResult.create(null, importer);
						}
						theElement = element;
						this.raiseDeserializeEvent(theElement);
						context = this.getContext();
						resultComponent = importer.importComponent(
								componentType, theElement, modelComponent,
								null, context);
						return sap.firefly.ExtResult.create(resultComponent,
								importer);
					},
					getModCounter : function() {
						return this.m_modCounter;
					},
					queueEventing : function() {
						this
								.setDeltaPhase(sap.firefly.QDeltaOperationPhase.QUEUE);
					},
					stopEventing : function() {
						this
								.setDeltaPhase(sap.firefly.QDeltaOperationPhase.STOP);
					},
					resumeEventing : function() {
						this
								.setDeltaPhase(sap.firefly.QDeltaOperationPhase.RESUME);
					},
					isEventingStopped : function() {
						var parentDeltaNode = this.getParentComponent();
						if (parentDeltaNode === null) {
							return this.m_currentDeltaPhase === sap.firefly.QDeltaOperationPhase.STOP;
						}
						return parentDeltaNode.isEventingStopped();
					},
					setDeltaPhase : function(phase) {
						var parentDeltaNode = this.getParentComponent();
						var oldPhase;
						var stackSize;
						var i;
						if (parentDeltaNode === null) {
							if (this.m_deltaStack === null) {
								this.m_deltaStack = sap.firefly.XList.create();
							}
							if (phase === sap.firefly.QDeltaOperationPhase.QUEUE) {
								this.m_deltaStack
										.add(sap.firefly.QDeltaOperationPhase.QUEUE);
							} else {
								if (phase === sap.firefly.QDeltaOperationPhase.STOP) {
									this.m_deltaStack
											.add(sap.firefly.QDeltaOperationPhase.STOP);
								} else {
									if (phase === sap.firefly.QDeltaOperationPhase.RESUME) {
										this.m_deltaStack
												.removeAt(this.m_deltaStack
														.size() - 1);
									}
								}
							}
							oldPhase = this.m_currentDeltaPhase;
							this.m_currentDeltaPhase = null;
							stackSize = this.m_deltaStack.size();
							for (i = 0; (i < stackSize)
									&& (this.m_currentDeltaPhase !== sap.firefly.QDeltaOperationPhase.STOP); i++) {
								this.m_currentDeltaPhase = this.m_deltaStack
										.get(i);
							}
							if ((oldPhase === sap.firefly.QDeltaOperationPhase.QUEUE)
									&& (this.m_currentDeltaPhase === null)) {
								this.raiseEvents();
							}
						} else {
							parentDeltaNode.setDeltaPhase(phase);
						}
					},
					getNotificationListener : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_notificationListener);
					},
					setNotificationListener : function(owner) {
						this.m_notificationListener = sap.firefly.XWeakReferenceUtil
								.getWeakRef(owner);
					},
					onModelChangeBeforeBroadcast : function(changedNodes) {
						var owner = this.getNotificationListener();
						if (owner !== null) {
							owner
									.onModelChange(sap.firefly.QDeltaBroadcastPhase.BEFORE_EVENTS_BROADCAST);
						}
					},
					onModelChangeAfterBroadcast : function(changedNodes) {
						var owner = this.getNotificationListener();
						if (owner !== null) {
							owner
									.onModelChange(sap.firefly.QDeltaBroadcastPhase.AFTER_EVENTS_BROADCAST);
						}
					},
					getDeltaChangeState : function() {
						return this.m_state;
					},
					resetChangeState : function() {
						var nodeSize;
						var i;
						var node;
						if ((this.m_primaryParent === null)
								&& (this.m_changedNodes !== null)) {
							nodeSize = this.m_changedNodes.size();
							for (i = 0; i < nodeSize; i++) {
								node = this.m_changedNodes.get(i);
								if ((node !== this)
										&& (node.isRoot() === false)) {
									node.resetChangeState();
								}
							}
							this.m_changedNodes.clear();
						}
						this.m_state = sap.firefly.QDeltaChangeState.UNCHANGED;
					},
					notifyChildAttached : function(child) {
						if (child !== null) {
							(child).setParent(this);
						}
						this.notifyNodeChanged();
					},
					notifyNodeChanged : function() {
						var deltaChange;
						var parentDeltaNode;
						var parentSize;
						var i;
						var current;
						if (this.isEventingStopped() === false) {
							if (this.m_state === sap.firefly.QDeltaChangeState.UNCHANGED) {
								this.m_state = sap.firefly.QDeltaChangeState.NODE_CHANGED;
								this.m_modCounter++;
							} else {
								if (this.m_state === sap.firefly.QDeltaChangeState.CHILDREN_CHANGED) {
									this.m_state = sap.firefly.QDeltaChangeState.NODE_AND_CHILDREN_CHANGED;
									this.m_modCounter++;
								}
							}
							deltaChange = sap.firefly.XList.create();
							deltaChange.add(this);
							parentDeltaNode = this.getParentComponent();
							if (parentDeltaNode !== null) {
								parentDeltaNode.notifyChildChanged(deltaChange);
							}
							if (this.m_secondaryParents !== null) {
								parentSize = this.m_secondaryParents.size();
								for (i = 0; i < parentSize; i++) {
									current = this.m_secondaryParents.get(i);
									if (current !== null) {
										current.notifyChildChanged(deltaChange);
									}
								}
							}
							if (this.m_primaryParent === null) {
								if (this.changedNodesContains(this) === false) {
									this.m_changedNodes.add(this);
								}
								this.raiseEvents();
							}
						}
					},
					changedNodesContains : function(node) {
						var size;
						var i;
						if (this.m_changedNodes === null) {
							this.m_changedNodes = sap.firefly.XList.create();
							return false;
						}
						size = this.m_changedNodes.size();
						for (i = 0; i < size; i++) {
							if (this.m_changedNodes.get(i) === node) {
								return true;
							}
						}
						return false;
					},
					notifyChildChanged : function(changedNodes) {
						var primaryParent;
						var parentSize;
						var i;
						var secondaryParent;
						var nodeSize;
						var j;
						var node;
						if (this.isEventingStopped() === false) {
							if (this.m_state === sap.firefly.QDeltaChangeState.UNCHANGED) {
								this.m_state = sap.firefly.QDeltaChangeState.CHILDREN_CHANGED;
								this.m_modCounter++;
							} else {
								if (this.m_state === sap.firefly.QDeltaChangeState.NODE_CHANGED) {
									this.m_state = sap.firefly.QDeltaChangeState.NODE_AND_CHILDREN_CHANGED;
									this.m_modCounter++;
								}
							}
							changedNodes.add(this);
							primaryParent = this.getParentComponent();
							if (primaryParent !== null) {
								primaryParent.notifyChildChanged(changedNodes);
							}
							if (this.m_secondaryParents !== null) {
								parentSize = this.m_secondaryParents.size();
								for (i = 0; i < parentSize; i++) {
									secondaryParent = this.m_secondaryParents
											.get(i);
									if (secondaryParent !== null) {
										secondaryParent
												.notifyChildChanged(changedNodes);
									}
								}
							}
							if (this.m_primaryParent === null) {
								nodeSize = changedNodes.size();
								for (j = 0; j < nodeSize; j++) {
									node = changedNodes.get(j);
									if (this.changedNodesContains(node) === false) {
										this.m_changedNodes.add(node);
									}
								}
								this.raiseEvents();
							}
						}
					},
					raiseEvents : function() {
						var nodeSize;
						var idxNode;
						var node;
						var listeners;
						var listenerSize;
						var idxListener;
						var pair;
						var listener;
						if ((this.m_currentDeltaPhase === null)
								&& (this.m_isInRaiseEvents === false)
								&& (this.m_changedNodes !== null)) {
							this.m_isInRaiseEvents = true;
							this
									.onModelChangeBeforeBroadcast(this.m_changedNodes);
							nodeSize = this.m_changedNodes.size();
							for (idxNode = 0; idxNode < nodeSize; idxNode++) {
								node = this.m_changedNodes.get(idxNode);
								listeners = node.getChangedListeners();
								if (listeners !== null) {
									listenerSize = listeners.size();
									for (idxListener = 0; idxListener < listenerSize; idxListener++) {
										pair = listeners.get(idxListener);
										listener = pair.getListener();
										if (listener !== null) {
											listener.onModelComponentChanged(
													node,
													pair.getCustomIdentifier());
										}
									}
								}
							}
							this
									.onModelChangeAfterBroadcast(this.m_changedNodes);
							this.resetChangeState();
							this.m_isInRaiseEvents = false;
						}
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						if (this.m_changedListeners === null) {
							this.m_changedListeners = sap.firefly.XList
									.create();
						}
						this.unregisterChangedListener(listener);
						this.m_changedListeners
								.add(sap.firefly.QChangedListenerPair.create(
										listener, customIdentifier));
						return null;
					},
					unregisterChangedListener : function(listener) {
						var listenerIndex = this.getListenerIndex(listener);
						var removeAt;
						if (listenerIndex !== -1) {
							removeAt = this.m_changedListeners
									.removeAt(listenerIndex);
							removeAt.releaseObject();
						}
						return null;
					},
					getListenerIndex : function(listener) {
						var listenerSize;
						var i;
						if (this.m_changedListeners !== null) {
							listenerSize = this.m_changedListeners.size();
							for (i = 0; i < listenerSize; i++) {
								if (this.m_changedListeners.get(i)
										.getListener() === listener) {
									return i;
								}
							}
						}
						return -1;
					},
					getChangedListeners : function() {
						if (this.m_changedListeners === null) {
							this.m_changedListeners = sap.firefly.XList
									.create();
						}
						return this.m_changedListeners;
					},
					getTagValue : function(tagName) {
						return null;
					},
					getContentElement : function() {
						return this;
					},
					getContentConstant : function() {
						return null;
					},
					isLeaf : function() {
						return !this.isNode();
					},
					isNode : function() {
						return false;
					},
					mergeDeepRecursive : function(settings, other) {
					},
					clone : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					cloneOlapComponent : function(context, parent) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					toString : function() {
						var exporter = sap.firefly.QInAExportFactory.create(
								this.getApplication(),
								sap.firefly.QModelFormat.INA_CLONE, null, null);
						var element = exporter.exportComponent(null, this,
								null, sap.firefly.QImExFlag.DEFAULT_ALL);
						if (element === null) {
							return "[Exporter not available]";
						}
						return sap.firefly.PrToString.serialize(element, true,
								true, 4);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapEnvVarAction",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						createAndRunDefinition : function(parent, syncType,
								listener, customIdentifier, variableVariant) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject.m_activeVariant = variableVariant;
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.CHANGEABLE_REINIT);
							return newObject;
						},
						createAndRunSubmit : function(parent, syncType,
								listener, customIdentifier) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.PROCESSING_SUBMIT);
							return newObject;
						},
						createAndRunCancel : function(parent, syncType,
								listener, customIdentifier) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.PROCESSING_CANCEL);
							return newObject;
						},
						createAndRunCheck : function(parent, syncType,
								listener, customIdentifier) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.PROCESSING_CHECK);
							return newObject;
						},
						createAndRunReInitAfterSubmit : function(parent,
								syncType, listener, customIdentifier) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.PROCESSING_REINIT);
							return newObject;
						},
						createAndRunSetGetValues : function(parent, syncType,
								listener, customIdentifier) {
							var newObject = new sap.firefly.OlapEnvVarAction();
							newObject
									.setupVarActionAndRun(
											syncType,
											parent,
											listener,
											customIdentifier,
											sap.firefly.VariableProcessorState.PROCESSING_UPDATE_VALUES);
							return newObject;
						}
					},
					m_actionState : null,
					m_finishedCount : 0,
					m_affectedVarProcessors : null,
					m_activeVariant : null,
					releaseObject : function() {
						this.m_actionState = null;
						this.m_affectedVarProcessors = sap.firefly.XObject
								.releaseIfNotNull(this.m_affectedVarProcessors);
						this.m_activeVariant = null;
						sap.firefly.OlapEnvVarAction.$superclass.releaseObject
								.call(this);
					},
					setupVarActionAndRun : function(syncType, context,
							listener, customIdentifier, state) {
						this.m_actionState = state;
						sap.firefly.OlapEnvVarAction.$superclass.setupActionAndRun
								.call(this, syncType, context, listener,
										customIdentifier);
					},
					processSynchronization : function(syncType) {
						var varProc;
						var oldState;
						var activeSyncType;
						var i;
						var variableProcessor;
						this.setData(this);
						varProc = this.getActionContext();
						oldState = varProc.getVariableProcessorState();
						varProc.setVariableProcessorState(this.m_actionState);
						if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_SUBMIT) {
							varProc.syncMasterSlaves();
							this.m_affectedVarProcessors = varProc
									.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.CHANGEABLE_STATEFUL);
						} else {
							if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_CANCEL) {
								this.m_affectedVarProcessors = varProc
										.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.CHANGEABLE_STATEFUL);
							} else {
								if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_CHECK) {
									varProc.syncMasterSlaves();
									this.m_affectedVarProcessors = varProc
											.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.CHANGEABLE_STATEFUL);
								} else {
									if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_UPDATE_VALUES) {
										varProc.syncMasterSlaves();
										this.m_affectedVarProcessors = varProc
												.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.CHANGEABLE_STATEFUL);
									} else {
										if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_REINIT) {
											this.m_affectedVarProcessors = varProc
													.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.SUBMITTED);
										} else {
											if (this.m_actionState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT) {
												this.m_affectedVarProcessors = varProc
														.getSelectedVariableProcessors(sap.firefly.VariableProcessorState.CHANGEABLE_STATEFUL);
											}
										}
									}
								}
							}
						}
						if (this.m_affectedVarProcessors.isEmpty()) {
							varProc.setVariableProcessorState(oldState);
							this
									.addWarning(
											sap.firefly.ErrorCodes.NO_VARIABLE_PROCESSOR_AFFECTED,
											"No affected variable processor was found.");
							return false;
						}
						activeSyncType = this.getActiveSyncType();
						for (i = 0; i < this.m_affectedVarProcessors.size(); i++) {
							variableProcessor = this.m_affectedVarProcessors
									.get(i);
							if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_SUBMIT) {
								variableProcessor.submitVariables(
										activeSyncType, this, null);
							} else {
								if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_CANCEL) {
									variableProcessor.cancelReInitVariables(
											activeSyncType, this, null);
								} else {
									if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_CHECK) {
										variableProcessor.checkVariables(
												activeSyncType, this, null);
									} else {
										if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_UPDATE_VALUES) {
											variableProcessor
													.transferVariables(
															activeSyncType,
															this, null);
										} else {
											if (this.m_actionState === sap.firefly.VariableProcessorState.PROCESSING_REINIT) {
												variableProcessor
														.reInitVariablesAfterSubmit(
																activeSyncType,
																this, null);
											} else {
												if (this.m_actionState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT) {
													variableProcessor
															.activateVariableVariant(
																	this.m_activeVariant
																			.clone(),
																	activeSyncType,
																	this, null);
												}
											}
										}
									}
								}
							}
						}
						return true;
					},
					onVariableProcessorExecuted : function(extResult, result,
							customIdentifier) {
						var varProc;
						this.addAllMessages(extResult);
						this.m_finishedCount++;
						if (this.m_finishedCount === this.m_affectedVarProcessors
								.size()) {
							varProc = this.getActionContext();
							varProc.setVariableProcessorState(null);
							this.endSync();
						}
					},
					isSuccessfullyProcessed : function() {
						return (this.getSyncState() === sap.firefly.SyncState.IN_SYNC)
								&& this.isValid();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapEnvVarProcessor",
				sap.firefly.XObject,
				{
					$statics : {
						create : function(olapEnvArea) {
							var newObj = new sap.firefly.OlapEnvVarProcessor();
							newObj.setupProcessor(olapEnvArea);
							return newObj;
						}
					},
					m_olapEnvArea : null,
					m_state : null,
					m_selectionMap : null,
					setupProcessor : function(olapEnvArea) {
						this.m_olapEnvArea = sap.firefly.XWeakReferenceUtil
								.getWeakRef(olapEnvArea);
						this.m_selectionMap = sap.firefly.XHashMapOfStringByString
								.create();
					},
					releaseObject : function() {
						this.m_olapEnvArea = null;
						this.m_state = null;
						this.m_selectionMap = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionMap);
						sap.firefly.OlapEnvVarProcessor.$superclass.releaseObject
								.call(this);
					},
					supportsCheckVariables : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							if (variableProcessor.supportsCheckVariables()) {
								return true;
							}
						}
						return false;
					},
					supportsReInitVariables : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							if (variableProcessor.supportsReInitVariables()) {
								return true;
							}
						}
						return false;
					},
					supportsDirectVariableTransfer : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							if (variableProcessor.supportsReInitVariables() === false) {
								return false;
							}
						}
						return true;
					},
					getVariableMode : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							if (variableProcessor.getVariableMode() === sap.firefly.VariableMode.SUBMIT_AND_REINIT) {
								return sap.firefly.VariableMode.SUBMIT_AND_REINIT;
							}
						}
						return sap.firefly.VariableMode.DIRECT_VALUE_TRANSFER;
					},
					hasMandatoryVariables : function() {
						var variables = this.getVariables();
						var i;
						for (i = 0; i < variables.size(); i++) {
							if (variables.get(i).isMandatory()) {
								return true;
							}
						}
						return false;
					},
					hasVariables : function() {
						return this.getVariables().hasElements();
					},
					getInputEnabledVariable : function(name) {
						return this.getInputEnabledVariables().getByKey(name);
					},
					getInputEnabledVariables : function() {
						var inputEnabledVariables = sap.firefly.XListOfNameObject
								.create();
						var variables = this.getVariables();
						var i;
						var variable;
						for (i = 0; i < variables.size(); i++) {
							variable = variables.get(i);
							if (variable.isInputEnabled()) {
								inputEnabledVariables.add(variable);
							}
						}
						return inputEnabledVariables;
					},
					getHierarchyNodeVariable : function(name) {
						var variable = this.getVariables().getByKey(name);
						if (variable
								.getVariableType()
								.isTypeOf(
										sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE)) {
							return variable;
						}
						return null;
					},
					getHierarchyNameVariable : function(name) {
						var variable = this.getVariables().getByKey(name);
						if (variable
								.getVariableType()
								.isTypeOf(
										sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE)) {
							return variable;
						}
						return null;
					},
					syncMasterSlaves : function() {
						var mergedVariables = this.getMergedVariables();
						var i;
						for (i = 0; i < mergedVariables.size(); i++) {
							mergedVariables.get(i).syncMasterSlaves();
						}
					},
					getVariables : function() {
						var variables = sap.firefly.XListOfNameObject.create();
						var mergedVariables = this.getMergedVariables();
						var i;
						for (i = 0; i < mergedVariables.size(); i++) {
							variables.add(mergedVariables.get(i)
									.getMasterVariable());
						}
						return variables;
					},
					getVariable : function(name) {
						var mergedVariables = this.getMergedVariables();
						return mergedVariables.getByKey(name)
								.getMasterVariable();
					},
					getMergedVariables : function() {
						var mergedVariables = sap.firefly.XListOfNameObject
								.create();
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						var variableContainer;
						var contVariables;
						var j;
						var variable;
						var key;
						var mergedVar;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							variableContainer = variableProcessor
									.getVariableContainer();
							contVariables = variableContainer.getVariables();
							for (j = 0; j < contVariables.size(); j++) {
								variable = contVariables.get(j);
								key = this.createMergeVarKey(queryManager,
										variable);
								mergedVar = mergedVariables.getByKey(key);
								if (mergedVar === null) {
									mergedVariables
											.add(sap.firefly.OlapEnvVariable
													.create(key, variable));
								} else {
									mergedVar.addSlave(variable);
								}
							}
						}
						return mergedVariables;
					},
					createMergeVarKey : function(queryManager, variable) {
						var buffer = sap.firefly.XStringBuffer.create();
						var dataSource;
						buffer.append(queryManager.getSystemDescription()
								.getName());
						buffer.append("~");
						dataSource = queryManager.getDataSource();
						buffer.append(dataSource.getFullQualifiedName());
						buffer.append("~");
						buffer.append(variable.getName());
						return buffer.toString();
					},
					getDimensionAccessor : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDrillManager : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					submitVariables : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.OlapEnvVarAction.createAndRunSubmit(
								this, syncType, listener, customIdentifier);
					},
					reInitVariablesAfterSubmit : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.OlapEnvVarAction
								.createAndRunReInitAfterSubmit(this, syncType,
										listener, customIdentifier);
					},
					cancelReInitVariables : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.OlapEnvVarAction.createAndRunCancel(
								this, syncType, listener, customIdentifier);
					},
					transferVariables : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.OlapEnvVarAction
								.createAndRunSetGetValues(this, syncType,
										listener, customIdentifier);
					},
					checkVariables : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.OlapEnvVarAction.createAndRunCheck(
								this, syncType, listener, customIdentifier);
					},
					transferVariablesByVariable : function(variable, syncType,
							listener, customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDirectVariableTransferEnabled : function(
							directVariableTransfer) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isDirectVariableTransferEnabled : function() {
						return this.getVariableProcessorState() === sap.firefly.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER;
					},
					isSubmitted : function() {
						return this.getVariableProcessorState() === sap.firefly.VariableProcessorState.SUBMITTED;
					},
					getVariableProcessorState : function() {
						var variableProcessorState;
						var queryManagerList;
						var i;
						var queryManager;
						var variableProcessor;
						var currentState;
						var newState;
						if (this.m_state !== null) {
							return this.m_state;
						}
						variableProcessorState = null;
						queryManagerList = this.getTaggedQueryManagers();
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							currentState = variableProcessor
									.getVariableProcessorState();
							if (variableProcessorState === null) {
								variableProcessorState = currentState;
							} else {
								if (variableProcessorState !== currentState) {
									newState = null;
									if (variableProcessorState
											.isTypeOf(sap.firefly.VariableProcessorState.PROCESSING)) {
										newState = sap.firefly.VariableProcessorState.PROCESSING;
									} else {
										if (variableProcessorState
												.isTypeOf(sap.firefly.VariableProcessorState.CHANGEABLE)) {
											if (currentState === sap.firefly.VariableProcessorState.SUBMITTED) {
												newState = sap.firefly.VariableProcessorState.SUBMITTED;
											} else {
												if (currentState
														.isTypeOf(sap.firefly.VariableProcessorState.CHANGEABLE)) {
													if ((currentState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT)
															|| (variableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT)) {
														newState = sap.firefly.VariableProcessorState.CHANGEABLE_REINIT;
													} else {
														newState = sap.firefly.VariableProcessorState.CHANGEABLE;
													}
												}
											}
										} else {
											if (variableProcessorState === sap.firefly.VariableProcessorState.SUBMITTED) {
												if (currentState
														.isTypeOf(sap.firefly.VariableProcessorState.CHANGEABLE)) {
													newState = sap.firefly.VariableProcessorState.SUBMITTED;
												}
											}
										}
									}
									if (newState === null) {
										newState = sap.firefly.VariableProcessorState.MIXED;
									}
									variableProcessorState = newState;
								}
							}
						}
						return variableProcessorState;
					},
					setVariableProcessorState : function(state) {
						this.m_state = state;
					},
					registerVariableProcessorStateChangedListener : function(
							listener, customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterVariableProcessorStateChangedListener : function(
							listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getOlapEnvArea : function() {
						var oEnvArea = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_olapEnvArea);
						return oEnvArea;
					},
					getApplication : function() {
						return this.getOlapEnvArea().getApplication();
					},
					getOlapEnv : function() {
						return this.getOlapEnvArea().getOlapEnv();
					},
					getSession : function() {
						return this.getOlapEnvArea().getSession();
					},
					getSelectionTagging : function() {
						return this.m_selectionMap;
					},
					getSelectedVariableProcessors : function(targetState) {
						var varProcessorList = sap.firefly.XList.create();
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						var variableProcessorState;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							if (variableProcessor.hasVariables()) {
								if (targetState === null) {
									varProcessorList.add(variableProcessor);
								} else {
									variableProcessorState = variableProcessor
											.getVariableProcessorState();
									if (variableProcessorState
											.isTypeOf(targetState)) {
										varProcessorList.add(variableProcessor);
									}
								}
							}
						}
						return varProcessorList;
					},
					getTaggedQueryManagers : function() {
						var queryManagerList = this.getOlapEnvArea()
								.getAllAreaQueryManager();
						var selection;
						var i;
						var queryManager;
						var checkTagging;
						var iterator;
						var ok;
						var key;
						var value;
						var checkValue;
						if (this.m_selectionMap.isEmpty()) {
							return queryManagerList;
						}
						selection = sap.firefly.XList.create();
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							checkTagging = queryManager.getTagging();
							iterator = this.m_selectionMap
									.getKeysAsIteratorOfString();
							ok = true;
							while (iterator.hasNext()) {
								key = iterator.next();
								value = this.m_selectionMap.getByKey(key);
								checkValue = checkTagging.getByKey(key);
								if (sap.firefly.XString.isEqual(value,
										checkValue) === false) {
									ok = false;
									break;
								}
							}
							if (ok) {
								selection.add(queryManager);
							}
						}
						return selection;
					},
					getVariableContainer : function() {
						return this;
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterChangedListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					registerDeserializeListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterDeserializeListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getOlapComponentType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isComponentNode : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getChildren : function() {
						return this.getChildrenIterator();
					},
					getChildrenIterator : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getNamedChildren : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getIndexedChildren : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getComponentProperties : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					serialize : function(modelFormat, capabilities) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					serializeToFormat : function(modelFormat) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					serializeToElement : function(modelFormat, capabilities) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					deserialize : function(modelFormat, expression) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					deserializeExt : function(modelFormat, expression) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					deserializeFromElementExt : function(modelFormat, element) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					deserializeNewComponentExt : function(componentType,
							modelFormat, expression) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					deserializeNewComponentFromElementExt : function(
							componentType, modelFormat, element) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setProtocolExtension : function(element, replace) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getProtocolExtension : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isProtocolExtensionReplacing : function() {
						return false;
					},
					getTagging : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isEventingStopped : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					stopEventing : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						var variableContainer;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							variableContainer = variableProcessor
									.getVariableContainer();
							variableContainer.stopEventing();
						}
					},
					queueEventing : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						var variableContainer;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							variableContainer = variableProcessor
									.getVariableContainer();
							variableContainer.queueEventing();
						}
					},
					resumeEventing : function() {
						var queryManagerList = this.getTaggedQueryManagers();
						var i;
						var queryManager;
						var variableProcessor;
						var variableContainer;
						for (i = 0; i < queryManagerList.size(); i++) {
							queryManager = queryManagerList.get(i);
							variableProcessor = queryManager
									.getVariableProcessor();
							variableContainer = variableProcessor
									.getVariableContainer();
							variableContainer.resumeEventing();
						}
					},
					getComponentType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getName : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getText : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getContext : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldAccessorSingle : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getQueryModel : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getQueryManager : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getModelCapabilities : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isSubmitNeeded : function() {
						return this.getVariableProcessorState()
								.isSubmitNeeded();
					},
					isReinitNeeded : function() {
						return this.getVariableProcessorState()
								.isReinitNeeded();
					},
					isCancelNeeded : function() {
						return this.getVariableProcessorState()
								.isCancelNeeded();
					},
					getTagValue : function(tagName) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getContentElement : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getContentConstant : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isNode : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isLeaf : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					activateVariableVariant : function(variableVariant,
							syncType, listener, customIdentifier) {
						return sap.firefly.OlapEnvVarAction
								.createAndRunDefinition(this, syncType,
										listener, customIdentifier,
										variableVariant);
					},
					cloneOlapComponent : function(context, parent) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getParent : function() {
						return null;
					},
					getDataSource : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.HierarchyCatalogManager",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						BW_D_NAME : "Name",
						BW_A_NAME_KEY : "Name.KEY",
						BW_D_TEXT : "Text",
						BW_A_TEXT_SHORT_TEXT : "Text.SHORT_TEXT",
						BW_A_TEXT_MEDIUM_TEXT : "Text.MEDIUM_TEXT",
						BW_A_TEXT_LONG_TEXT : "Text.LONG_TEXT",
						BW_D_VERSION : "Version",
						BW_A_VERSION_DISPLAY_KEY : "Version.DISPLAY_KEY",
						BW_A_VERSION_KEY : "Version.KEY",
						BW_A_VERSION_LONG_TEXT : "Version.LONG_TEXT",
						BW_D_DATE_TO : "DateTo",
						BW_A_DATE_TO_KEY : "DateTo.KEY",
						BW_D_DATE_FROM : "DateFrom",
						BW_A_DATE_FROM_KEY : "DateFrom.KEY",
						BW_D_OWNER : "Owner",
						BW_A_OWNER_KEY : "Owner.KEY",
						BW_D_HIEID : "HieID",
						BW_A_HIEID_KEY : "HieID.KEY",
						BW_D_HIETYPE : "HieType",
						BW_A_HIETYPE_KEY : "HieType.KEY",
						BW_D_OBJVERS : "ObjVers",
						BW_A_OBJVERS_KEY : "ObjVers.KEY",
						BW_D_IS_REMOTE : "Is_Remote_Hier",
						BW_A_IS_REMOTE_KEY : "Is_Remote_Hier.KEY",
						HANA_D_DIMENSION : "Dimension",
						HANA_D_NAME : "Name",
						HANA_D_DESCRIPTION : "Description",
						HANA_D_VERSION : "Version",
						HANA_D_DATE_TO : "DateTo",
						HANA_D_TYPE : "Type",
						HANA_D_SCHEMA_NAME : "SchemaName",
						HANA_D_PACKAGE_NAME : "PackageName",
						HANA_D_OBJECT_NAME : "ObjectName",
						create : function(queryManager, dataSource,
								dimensionName) {
							var object = new sap.firefly.HierarchyCatalogManager();
							object.setupCatalogManager(queryManager,
									dataSource, dimensionName);
							return object;
						}
					},
					m_dataSource : null,
					m_dimensionName : null,
					m_singleSelectionHierarchyObjectVersion : null,
					m_singleSelectionOperatorHierarchyObjectVersion : null,
					m_singleSelectionVersionName : null,
					m_singleSelectionOperatorVersionName : null,
					m_singleSelectionHierarchyName : null,
					m_singleSelectionOperatorHierarchyName : null,
					m_singleSelectionHierarchyDate : null,
					m_enableSingleSelectionHierarchyDate : false,
					m_catalogResult : null,
					setupCatalogManager : function(queryManager, dataSource,
							dimensionName) {
						this.setupSynchronizingObject(queryManager);
						this.m_dataSource = dataSource;
						this.m_dimensionName = dimensionName;
					},
					releaseObject : function() {
						this.m_dataSource = null;
						this.m_dimensionName = null;
						this.m_catalogResult = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogResult);
						this.m_singleSelectionHierarchyDate = sap.firefly.XObject
								.releaseIfNotNull(this.m_singleSelectionHierarchyDate);
						this.m_singleSelectionHierarchyName = null;
						this.m_singleSelectionHierarchyObjectVersion = null;
						this.m_singleSelectionOperatorHierarchyObjectVersion = null;
						this.m_singleSelectionOperatorVersionName = null;
						this.m_singleSelectionVersionName = null;
						sap.firefly.HierarchyCatalogManager.$superclass.releaseObject
								.call(this);
					},
					getComponentName : function() {
						return "HierarchyCatalogManager";
					},
					processGetResult : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onHierarchyCatalogResult(extResult, data,
								customIdentifier);
					},
					processSynchronization : function(syncType) {
						var queryManager = this.getQueryManager();
						var queryModel = queryManager.getQueryModel();
						var convenienceCommands = queryModel
								.getConvenienceCommands();
						var systemDescription;
						convenienceCommands.resetToDefault();
						systemDescription = queryManager.getSystemDescription();
						if (systemDescription.getSystemType() === sap.firefly.SystemType.HANA) {
							this.processHana(convenienceCommands);
						} else {
							this.processBW(convenienceCommands);
						}
						queryManager
								.processQueryExecution(syncType, this, null);
						return true;
					},
					processHana : function(convenienceCommands) {
						var dataSource;
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.HANA_D_DIMENSION,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.HANA_D_NAME,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.HANA_D_DESCRIPTION,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.HANA_D_VERSION,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.HANA_D_DATE_TO,
										sap.firefly.AxisType.ROWS);
						dataSource = this.m_dataSource;
						convenienceCommands
								.addSimpleSingleMemberFilter(
										sap.firefly.HierarchyCatalogManager.HANA_D_TYPE,
										dataSource.getType().getCamelCaseName());
						convenienceCommands
								.addSimpleSingleMemberFilter(
										sap.firefly.HierarchyCatalogManager.HANA_D_SCHEMA_NAME,
										dataSource.getSchemaName());
						convenienceCommands
								.addSimpleSingleMemberFilter(
										sap.firefly.HierarchyCatalogManager.HANA_D_PACKAGE_NAME,
										dataSource.getPackageName());
						convenienceCommands
								.addSimpleSingleMemberFilter(
										sap.firefly.HierarchyCatalogManager.HANA_D_OBJECT_NAME,
										dataSource.getObjectName());
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(this.m_dimensionName)) {
							convenienceCommands
									.addSimpleSingleMemberFilter(
											sap.firefly.HierarchyCatalogManager.HANA_D_DIMENSION,
											this.m_dimensionName);
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.HANA_D_NAME);
						if (this.m_singleSelectionOperatorHierarchyName !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.HANA_D_NAME,
											this.m_singleSelectionHierarchyName,
											this.m_singleSelectionOperatorHierarchyName);
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.HANA_D_VERSION);
						if (this.m_singleSelectionOperatorVersionName !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.HANA_D_VERSION,
											this.m_singleSelectionVersionName,
											this.m_singleSelectionOperatorVersionName);
						}
					},
					processBW : function(convenienceCommands) {
						var textDimension;
						var dateFromDimension;
						var ownerDimension;
						var idDimension;
						var objVersDimension;
						var remoteDimension;
						var hierarchyDate;
						convenienceCommands.moveDimensionToAxis(
								sap.firefly.HierarchyCatalogManager.BW_D_NAME,
								sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addFieldToResultSet(
										sap.firefly.HierarchyCatalogManager.BW_D_NAME,
										sap.firefly.HierarchyCatalogManager.BW_A_NAME_KEY);
						textDimension = convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
										sap.firefly.AxisType.ROWS);
						if (textDimension
								.getFieldByName(sap.firefly.HierarchyCatalogManager.BW_A_TEXT_SHORT_TEXT) !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_SHORT_TEXT);
						}
						if (textDimension
								.getFieldByName(sap.firefly.HierarchyCatalogManager.BW_A_TEXT_MEDIUM_TEXT) !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_MEDIUM_TEXT);
						}
						if (textDimension
								.getFieldByName(sap.firefly.HierarchyCatalogManager.BW_A_TEXT_LONG_TEXT) !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_TEXT,
											sap.firefly.HierarchyCatalogManager.BW_A_TEXT_LONG_TEXT);
						}
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addFieldToResultSet(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION,
										sap.firefly.HierarchyCatalogManager.BW_A_VERSION_KEY);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addFieldToResultSet(
										sap.firefly.HierarchyCatalogManager.BW_D_VERSION,
										sap.firefly.HierarchyCatalogManager.BW_A_VERSION_LONG_TEXT);
						convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_DATE_TO,
										sap.firefly.AxisType.ROWS);
						convenienceCommands
								.addFieldToResultSet(
										sap.firefly.HierarchyCatalogManager.BW_D_DATE_TO,
										sap.firefly.HierarchyCatalogManager.BW_A_DATE_TO_KEY);
						dateFromDimension = convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM,
										sap.firefly.AxisType.ROWS);
						if (dateFromDimension !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM,
											sap.firefly.HierarchyCatalogManager.BW_A_DATE_FROM_KEY);
						}
						ownerDimension = convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_OWNER,
										sap.firefly.AxisType.ROWS);
						if (ownerDimension !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_OWNER,
											sap.firefly.HierarchyCatalogManager.BW_A_OWNER_KEY);
						}
						idDimension = convenienceCommands.moveDimensionToAxis(
								sap.firefly.HierarchyCatalogManager.BW_D_HIEID,
								sap.firefly.AxisType.ROWS);
						if (idDimension !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_HIEID,
											sap.firefly.HierarchyCatalogManager.BW_A_HIEID_KEY);
						}
						objVersDimension = convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS,
										sap.firefly.AxisType.ROWS);
						if (objVersDimension !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS,
											sap.firefly.HierarchyCatalogManager.BW_A_OBJVERS_KEY);
						}
						remoteDimension = convenienceCommands
								.moveDimensionToAxis(
										sap.firefly.HierarchyCatalogManager.BW_D_IS_REMOTE,
										sap.firefly.AxisType.ROWS);
						if (remoteDimension !== null) {
							convenienceCommands
									.addFieldToResultSet(
											sap.firefly.HierarchyCatalogManager.BW_D_IS_REMOTE,
											sap.firefly.HierarchyCatalogManager.BW_A_IS_REMOTE_KEY);
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.BW_D_NAME);
						if (this.m_singleSelectionOperatorHierarchyName !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.BW_D_NAME,
											this.m_singleSelectionHierarchyName,
											this.m_singleSelectionOperatorHierarchyName);
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.BW_D_VERSION);
						if (this.m_singleSelectionOperatorVersionName !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.BW_D_VERSION,
											this.m_singleSelectionVersionName,
											this.m_singleSelectionOperatorVersionName);
						}
						convenienceCommands
								.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS);
						if (this.m_singleSelectionOperatorHierarchyObjectVersion !== null) {
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.BW_D_OBJVERS,
											this.m_singleSelectionHierarchyObjectVersion,
											this.m_singleSelectionOperatorHierarchyObjectVersion);
						}
						if ((this.m_singleSelectionHierarchyDate !== null)
								&& this.m_enableSingleSelectionHierarchyDate) {
							hierarchyDate = this.m_singleSelectionHierarchyDate
									.toSAPFormat();
							convenienceCommands
									.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM);
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.BW_D_DATE_FROM,
											hierarchyDate,
											sap.firefly.ComparisonOperator.LESS_EQUAL);
							convenienceCommands
									.clearFiltersByDimensionName(sap.firefly.HierarchyCatalogManager.BW_D_DATE_TO);
							convenienceCommands
									.addSingleMemberFilterByDimensionName(
											sap.firefly.HierarchyCatalogManager.BW_D_DATE_TO,
											hierarchyDate,
											sap.firefly.ComparisonOperator.GREATER_EQUAL);
						}
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						var classicResultSet;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							classicResultSet = resultSetContainer
									.getClassicResultSet();
							this.m_catalogResult = sap.firefly.HierarchyCatalogResult
									.create(classicResultSet,
											this.m_dimensionName);
							this.setData(this.m_catalogResult);
						}
						this.endSync();
					},
					setSingleSelectionHierarchyName : function(hierarchyName,
							enable) {
						if (enable) {
							this.setSingleSelectionWithOperatorHierarchyName(
									hierarchyName,
									sap.firefly.ComparisonOperator.EQUAL);
						} else {
							this.setSingleSelectionWithOperatorHierarchyName(
									hierarchyName, null);
						}
					},
					assertComparisonOperator : function(comparisonOperator) {
						if ((comparisonOperator !== null)
								&& (comparisonOperator !== sap.firefly.ComparisonOperator.EQUAL)
								&& (comparisonOperator !== sap.firefly.ComparisonOperator.MATCH)) {
							throw sap.firefly.XException
									.createRuntimeException("illegal comparison operator");
						}
					},
					setSingleSelectionWithOperatorHierarchyName : function(
							hierarchyName, comparisonOperator) {
						this.assertComparisonOperator(comparisonOperator);
						this.m_singleSelectionOperatorHierarchyName = comparisonOperator;
						this.m_singleSelectionHierarchyName = hierarchyName;
						this.resetSyncState();
					},
					getSingleSelectionOperatorHierarchyName : function() {
						return this.m_singleSelectionOperatorHierarchyName;
					},
					getSingleSelectionHierarchyName : function() {
						return this.m_singleSelectionHierarchyName;
					},
					isSingleSelectionHierarchyNameEnabled : function() {
						return (this.m_singleSelectionOperatorHierarchyName !== null);
					},
					setSingleSelectionVersionName : function(versionName,
							enable) {
						if (enable) {
							this.setSingleSelectionWithOperatorVersionName(
									versionName,
									sap.firefly.ComparisonOperator.EQUAL);
						} else {
							this.setSingleSelectionWithOperatorVersionName(
									versionName, null);
						}
					},
					setSingleSelectionWithOperatorVersionName : function(
							versionName, comparisonOperator) {
						this.assertComparisonOperator(comparisonOperator);
						this.m_singleSelectionOperatorVersionName = comparisonOperator;
						this.m_singleSelectionVersionName = versionName;
						this.resetSyncState();
					},
					getSingleSelectionOperatorVersionName : function() {
						return this.m_singleSelectionOperatorVersionName;
					},
					getSingleSelectionVersionName : function() {
						return this.m_singleSelectionVersionName;
					},
					isSingleSelectionVersionNameEnabled : function() {
						return (this.m_singleSelectionOperatorVersionName !== null);
					},
					setSingleSelectionHierarchyObjectVersion : function(
							objectVersion, enable) {
						if (enable) {
							this
									.setSingleSelectionWithOperatorHierarchyObjectVersion(
											objectVersion,
											sap.firefly.ComparisonOperator.EQUAL);
						} else {
							this
									.setSingleSelectionWithOperatorHierarchyObjectVersion(
											objectVersion, null);
						}
					},
					setSingleSelectionWithOperatorHierarchyObjectVersion : function(
							objectVersion, comparisonOperator) {
						this.assertComparisonOperator(comparisonOperator);
						this.m_singleSelectionOperatorHierarchyObjectVersion = comparisonOperator;
						this.m_singleSelectionHierarchyObjectVersion = objectVersion;
						this.resetSyncState();
					},
					getSingleSelectionOperatorHierarchyObjectVersion : function() {
						return this.m_singleSelectionOperatorHierarchyObjectVersion;
					},
					getSingleSelectionHierarchyObjectVersion : function() {
						return this.m_singleSelectionHierarchyObjectVersion;
					},
					isSingleSelectionHierarchyObjectVersionEnabled : function() {
						return (this.m_singleSelectionOperatorHierarchyObjectVersion !== null);
					},
					setSingleSelectionHierarchyDate : function(date, enable) {
						if (date === null) {
							this.m_singleSelectionHierarchyDate = sap.firefly.XObject
									.releaseIfNotNull(this.m_singleSelectionHierarchyDate);
						} else {
							if (this.m_singleSelectionHierarchyDate === null) {
								this.m_singleSelectionHierarchyDate = sap.firefly.XDate
										.createDateWithValues(date.getYear(),
												date.getMonthOfYear(), date
														.getDayOfMonth());
							} else {
								this.m_singleSelectionHierarchyDate
										.resetValue(date);
							}
						}
						this.resetSyncState();
						this.m_enableSingleSelectionHierarchyDate = enable;
					},
					getSingleSelectionHierarchyDate : function() {
						return this.m_singleSelectionHierarchyDate;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.HierarchyCatalogService",
				sap.firefly.DfService,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.HierarchyCatalogService.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.HierarchyCatalogService);
						}
					},
					m_catalogManager : null,
					m_dataSource : null,
					m_dimensionName : null,
					releaseObject : function() {
						this.m_catalogManager = sap.firefly.XObject
								.releaseIfNotNull(this.m_catalogManager);
						this.m_dataSource = null;
						this.m_dimensionName = null;
						sap.firefly.HierarchyCatalogService.$superclass.releaseObject
								.call(this);
					},
					isServiceConfigMatching : function(serviceConfig,
							connection, messages) {
						var systemDescription = serviceConfig
								.getSystemDescription();
						if (sap.firefly.HierarchyCatalogUtil
								.isHierarchyCatalogSupported(systemDescription) === false) {
							return false;
						}
						return sap.firefly.HierarchyCatalogService.$superclass.isServiceConfigMatching
								.call(this, serviceConfig, connection, messages);
					},
					getCatalogManager : function() {
						return this.m_catalogManager;
					},
					processSynchronization : function(syncType) {
						var config = this.getServiceConfig();
						var systemDescription = config.getSystemDescription();
						if (systemDescription.getSystemType() === sap.firefly.SystemType.HANA) {
							this.processHana(syncType, config);
						} else {
							this.processBW(syncType, config);
						}
						return true;
					},
					processHana : function(syncType, config) {
						var queryServiceConfig;
						this.m_dataSource = sap.firefly.QFactory2
								.newDataSource();
						this.m_dataSource.setFullQualifiedName(config
								.getDataSourceName());
						this.m_dimensionName = config.getDimensionName();
						queryServiceConfig = sap.firefly.QueryServiceConfig
								.createWithDataSourceName(
										this.getApplication(), config
												.getSystemName(),
										"view:[][][$$HierarchyName$$]");
						queryServiceConfig.setConnectionContainer(this
								.getConnection());
						queryServiceConfig.processQueryManagerCreation(
								syncType, this, null);
					},
					processBW : function(syncType, config) {
						var queryServiceConfig;
						var identifier;
						this.m_dimensionName = config.getDimensionName();
						queryServiceConfig = sap.firefly.QueryServiceConfig
								.createWithDataSource(this.getApplication(),
										config.getSystemName(), null);
						identifier = sap.firefly.QFactory2.newDataSource();
						identifier
								.setType(sap.firefly.MetaObjectType.HIERARCHY);
						identifier.setName(config.getDimensionName());
						identifier.setEnvironmentName(config
								.getEnvironmentName());
						queryServiceConfig.setDataSource(identifier);
						queryServiceConfig.setConnectionContainer(this
								.getConnection());
						queryServiceConfig.processQueryManagerCreation(
								syncType, this, null);
					},
					onQueryManagerCreated : function(extResult, queryManager,
							customIdentifier) {
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							this.m_catalogManager = sap.firefly.HierarchyCatalogManager
									.create(queryManager, this.m_dataSource,
											this.m_dimensionName);
						}
						this.m_dataSource = null;
						this.m_dimensionName = null;
						this.endSync();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.HierarchyCatalogServiceConfig",
				sap.firefly.DfServiceConfig,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.HierarchyCatalogServiceConfig.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.HierarchyCatalogServiceConfig);
						}
					},
					m_dataSourceName : null,
					m_dimensionName : null,
					m_invalidDimension : false,
					m_environmentName : null,
					releaseObject : function() {
						this.m_dataSourceName = null;
						this.m_dimensionName = null;
						this.m_environmentName = null;
						sap.firefly.HierarchyCatalogServiceConfig.$superclass.releaseObject
								.call(this);
					},
					setDataSourceName : function(dataSourceName) {
						this.m_dataSourceName = dataSourceName;
					},
					getDataSourceName : function() {
						return this.m_dataSourceName;
					},
					setDimensionName : function(dimensionName) {
						this.m_dimensionName = dimensionName;
					},
					getDimensionName : function() {
						return this.m_dimensionName;
					},
					setEnvironmentName : function(environmentName) {
						this.m_environmentName = environmentName;
					},
					getEnvironmentName : function() {
						return this.m_environmentName;
					},
					processHierarchyCatalogManagerCreation : function(syncType,
							listener, customIdentifier) {
						if (this.m_invalidDimension) {
							return sap.firefly.ExtResult
									.createWithMessage(sap.firefly.XMessage
											.createMessage(
													sap.firefly.OriginLayer.SERVER,
													sap.firefly.Severity.WARNING,
													sap.firefly.ErrorCodes.INVALID_DIMENSION,
													sap.firefly.XStringUtils
															.concatenate3(
																	"Hierarchy Catalog is not supported for the dimensions '",
																	this.m_dimensionName,
																	"'!"),
													null, false, null));
						}
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onHierarchyCatalogManagerCreated(extResult,
								data, customIdentifier);
					},
					setDataFromService : function(service) {
						this.setData(service.getCatalogManager());
					},
					setDimension : function(dimension) {
						if (dimension !== null) {
							this.m_invalidDimension = (dimension
									.getDimensionType() === sap.firefly.DimensionType.SECONDARY_STRUCTURE)
									|| (dimension.getDimensionType() === sap.firefly.DimensionType.MEASURE_STRUCTURE);
							this.m_dimensionName = dimension.getName();
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QmShutdownAction",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						createAndRun : function(syncType, listener,
								customIdentifier, parent) {
							var newObject = new sap.firefly.QmShutdownAction();
							newObject.setupActionAndRun(syncType, parent,
									listener, customIdentifier);
							return newObject;
						}
					},
					m_providerShutdownAction : null,
					releaseObject : function() {
						this.m_providerShutdownAction = null;
						sap.firefly.QmShutdownAction.$superclass.releaseObject
								.call(this);
					},
					getComponentName : function() {
						return "QmShutdownAction3";
					},
					processSynchronization : function(syncType) {
						var parent = this.getActionContext();
						if (parent !== null) {
							if (parent.getLifeCycleState() !== sap.firefly.LifeCycleState.ACTIVE) {
								this
										.addError(
												sap.firefly.ErrorCodes.INVALID_STATE,
												"Query Manager cannot be shutdown, it is not in active state");
								return false;
							}
							parent
									.setLifeCycleState(sap.firefly.LifeCycleState.SHUTTING_DOWN);
							this.m_providerShutdownAction = (parent)
									.processProviderShutdown(syncType, this,
											null);
							return true;
						}
						return false;
					},
					onProviderShutdown : function(extResult, queryProvider,
							customIdentifier) {
						var parent;
						this.addAllMessages(extResult);
						parent = this.getActionContext();
						if (parent !== null) {
							parent
									.setLifeCycleState(sap.firefly.LifeCycleState.TERMINATED);
						}
						this.setData(parent);
						this.endSync();
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onQueryManagerRelease(extResult, data,
								customIdentifier);
					},
					cancelSynchronization : function() {
						sap.firefly.QmShutdownAction.$superclass.cancelSynchronization
								.call(this);
						this.m_providerShutdownAction.cancelSynchronization();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsAxisTupleElement",
				sap.firefly.DfApplicationContext,
				{
					$statics : {
						create : function(axis, name, member,
								tupleElementPosition, drillState, displayLevel,
								childCount) {
							var object = new sap.firefly.RsAxisTupleElement();
							object.setup(axis, name, member,
									tupleElementPosition, drillState,
									displayLevel, childCount);
							return object;
						}
					},
					m_axis : null,
					m_firstTuple : null,
					m_parentNode : null,
					m_member : null,
					m_tupleElementPosition : 0,
					m_displayLevel : 0,
					m_drillState : null,
					m_name : null,
					m_exceptionName : null,
					m_alertLevel : 0,
					m_osid : null,
					m_childCount : 0,
					releaseObject : function() {
						this.m_axis = null;
						this.m_firstTuple = null;
						this.m_parentNode = null;
						this.m_member = null;
						this.m_drillState = null;
						this.m_name = null;
						this.m_exceptionName = null;
						sap.firefly.RsAxisTupleElement.$superclass.releaseObject
								.call(this);
					},
					isEqualTo : function(other) {
						var otherTuple;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						otherTuple = other;
						if (sap.firefly.XString.isEqual(this.m_name, otherTuple
								.getName()) === false) {
							return false;
						}
						if (this.m_displayLevel !== otherTuple
								.getDisplayLevel()) {
							return false;
						}
						if (this.m_drillState.isEqualTo(otherTuple
								.getDrillState()) === false) {
							return false;
						}
						return this.m_member.isEqualTo(otherTuple
								.getDimensionMember());
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append(this.m_name);
						buffer.append(":\t");
						buffer.append(this.m_member.toString());
						return buffer.toString();
					},
					compareTo : function(objectToCompare) {
						var otherTuple;
						var compare;
						if (objectToCompare === null) {
							return -1;
						}
						if (objectToCompare === this) {
							return 0;
						}
						otherTuple = objectToCompare;
						compare = sap.firefly.XString.compare(this.m_name,
								otherTuple.getName());
						if (compare === 0) {
							compare = this.m_member.compareTo(otherTuple
									.getDimensionMember());
						}
						return compare;
					},
					setup : function(axis, name, member, tupleElementPosition,
							drillState, displayLevel, childCount) {
						if (axis !== null) {
							sap.firefly.RsAxisTupleElement.$superclass.setupApplicationContext
									.call(this, axis.getApplication());
						}
						this.m_axis = sap.firefly.XWeakReferenceUtil
								.getWeakRef(axis);
						this.m_member = member;
						this.m_tupleElementPosition = tupleElementPosition;
						if (drillState === null) {
							this.m_drillState = sap.firefly.DrillState.LEAF;
						} else {
							this.m_drillState = drillState;
						}
						this.m_displayLevel = displayLevel;
						this.m_name = name;
						this.m_childCount = childCount;
					},
					getAxis : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_axis);
					},
					getDimensionMember : function() {
						return this.m_member;
					},
					getDimension : function() {
						return this.m_member.getDimension();
					},
					getQueryModel : function() {
						return this.getAxis().getQueryModel();
					},
					getIndexOnAxis : function() {
						return this.m_member.getDimension().getIndexOnAxis();
					},
					getDisplayLevel : function() {
						return this.m_displayLevel;
					},
					getDrillState : function() {
						return this.m_drillState;
					},
					setNextDrillState : function(drillState) {
						var drillPath = this.getDrillPath();
						var drillManager = this.getQueryModel()
								.getDrillManager();
						return drillManager
								.setDrillState(drillPath, drillState);
					},
					getDrillPath : function() {
						var drillPath = sap.firefly.XList.create();
						var firstTuple = this.getFirstTuple();
						var i;
						var tupleElement;
						var dimension;
						var dimensionMember;
						var keyFieldValue;
						var value;
						var systemType;
						var field;
						var fieldName;
						var element;
						for (i = 0; i <= this.m_tupleElementPosition; i++) {
							tupleElement = firstTuple.getElementByIndex(i);
							dimension = tupleElement.getDimension();
							dimensionMember = tupleElement.getDimensionMember();
							keyFieldValue = dimensionMember.getKeyFieldValue();
							systemType = this.getQueryModel().getQueryManager()
									.getSystemDescription().getSystemType();
							if (systemType.isTypeOf(sap.firefly.SystemType.BW)) {
								if (keyFieldValue.getValueType() === sap.firefly.XValueType.DATE) {
									value = keyFieldValue.getDateValue()
											.toSAPFormat();
								} else {
									if (keyFieldValue.getValueType() === sap.firefly.XValueType.DATE_TIME) {
										value = keyFieldValue
												.getDateTimeValue()
												.toSAPFormat();
									} else {
										if (keyFieldValue.getValueType() === sap.firefly.XValueType.TIME) {
											value = keyFieldValue
													.getTimeValue()
													.toSAPFormat();
										} else {
											value = keyFieldValue
													.getStringValue();
										}
									}
								}
							} else {
								value = keyFieldValue.getStringValue();
							}
							field = keyFieldValue.getField();
							fieldName = field.getName();
							element = sap.firefly.QDrillPathElement
									._create(null);
							element.setDimension(dimension);
							element.setName(value);
							element.setFieldName(fieldName);
							drillPath.add(element);
						}
						return drillPath;
					},
					getFirstTuple : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_firstTuple);
					},
					setFirstTuple : function(tuple) {
						this.m_firstTuple = sap.firefly.XWeakReferenceUtil
								.getWeakRef(tuple);
					},
					getParentNode : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_parentNode);
					},
					setParentNode : function(parentNode) {
						this.m_parentNode = sap.firefly.XWeakReferenceUtil
								.getWeakRef(parentNode);
					},
					getName : function() {
						return this.m_name;
					},
					getExceptionName : function() {
						return this.m_exceptionName;
					},
					setExceptionName : function(exceptionName) {
						this.m_exceptionName = exceptionName;
					},
					getAlertLevel : function() {
						return this.m_alertLevel;
					},
					setAlertLevel : function(alertLevel) {
						this.m_alertLevel = alertLevel;
					},
					getComponentType : function() {
						return this.getMemberType();
					},
					getOlapComponentType : function() {
						return this.getMemberType();
					},
					getType : function() {
						return this.getMemberType();
					},
					getMemberType : function() {
						if (this.m_drillState !== null) {
							return sap.firefly.MemberType.TUPLE_ELEMENT_AS_NODE;
						}
						return sap.firefly.MemberType.TUPLE_ELEMENT_AS_MEMBER;
					},
					getSelectableElement : function() {
						return this.m_member;
					},
					isLeaf : function() {
						return this.getMemberType().isLeaf();
					},
					isNode : function() {
						return this.getMemberType().isNode();
					},
					getOsid : function() {
						var buffer;
						if (this.m_osid === null) {
							buffer = sap.firefly.XStringBuffer.create();
							buffer.append(this.getName());
							buffer.append("_");
							buffer.appendInt(this.m_member.getSession()
									.getNextSid());
							this.m_osid = buffer.toString();
						}
						return this.m_osid;
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterChangedListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getChildCount : function() {
						return this.m_childCount;
					},
					cloneOlapComponent : function(context, parent) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					queueEventing : function() {
					},
					stopEventing : function() {
					},
					isEventingStopped : function() {
						return false;
					},
					resumeEventing : function() {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsCursorAxis",
				sap.firefly.DfOlapEnvContext,
				{
					$statics : {
						create : function(cursorResultSet, provider, rsDefAxis) {
							var object = new sap.firefly.RsCursorAxis();
							object.setup(cursorResultSet, provider, rsDefAxis);
							return object;
						}
					},
					m_provider : null,
					m_cursorResultSet : null,
					m_model : null,
					m_tupleIndex : 0,
					m_tuplesCountTotal : 0,
					m_currentTupleElement : null,
					m_tupleElementIndex : 0,
					m_tupleElementCount : 0,
					m_tupleElements : null,
					m_currentCursorFieldValue : null,
					m_globalFieldValueCount : 0,
					m_globalFieldIndex : 0,
					m_currentMetadataTupleElement : null,
					m_dimensions : null,
					m_currentRsDimension : null,
					m_isSelfContaining : false,
					m_pagingMax : 0,
					m_rsDefAxis : null,
					m_exceptionName : null,
					m_alertLevel : 0,
					setup : function(cursorResultSet, provider, rsDefAxis) {
						this.setupOlapApplicationContext(cursorResultSet
								.getOlapEnv());
						this.m_rsDefAxis = sap.firefly.XWeakReferenceUtil
								.getWeakRef(rsDefAxis);
						this.m_provider = sap.firefly.XWeakReferenceUtil
								.getWeakRef(provider);
						provider.setCursorAxis(this);
						this.m_tuplesCountTotal = provider
								.getTuplesCountTotal();
						this.m_tupleIndex = -1;
						this.m_pagingMax = provider.getTuplesCount();
						this.m_tupleElementCount = provider
								.getTupleElementsCount();
						this.m_tupleElementIndex = -1;
						this.m_cursorResultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef(cursorResultSet);
						this.setQueryModel(cursorResultSet.getQueryModel());
						this.m_tupleElements = sap.firefly.XListWeakRef
								.create();
						this.m_globalFieldValueCount = 0;
						this.m_globalFieldIndex = -1;
						this.m_dimensions = sap.firefly.XList.create();
						provider.notifySetAxisMetadata();
					},
					getTupleCursorIndex : function() {
						return this.m_tupleIndex;
					},
					releaseObject : function() {
						this.m_tupleElements = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_tupleElements);
						this.m_currentCursorFieldValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_currentCursorFieldValue);
						this.m_currentMetadataTupleElement = sap.firefly.XObject
								.releaseIfNotNull(this.m_currentMetadataTupleElement);
						this.m_currentRsDimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_currentRsDimension);
						this.m_dimensions = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_dimensions);
						this.m_currentTupleElement = sap.firefly.XObject
								.releaseIfNotNull(this.m_currentTupleElement);
						this.m_rsDefAxis = sap.firefly.XObject
								.releaseIfNotNull(this.m_rsDefAxis);
						this.m_exceptionName = null;
						this.m_model = sap.firefly.XObject
								.releaseIfNotNull(this.m_model);
						this.m_cursorResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_cursorResultSet);
						this.m_provider = sap.firefly.XObject
								.releaseIfNotNull(this.m_provider);
						sap.firefly.RsCursorAxis.$superclass.releaseObject
								.call(this);
					},
					getDimensions : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getCursorResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cursorResultSet);
					},
					getDataCount : function() {
						return this.getProvider().getDataCount();
					},
					getQueryModel : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_model);
					},
					setQueryModel : function(model) {
						this.m_model = sap.firefly.XWeakReferenceUtil
								.getWeakRef(model);
					},
					startAddMetadata : function(dimensionsSize) {
						this.m_tupleElements = sap.firefly.XList.create();
						this.m_globalFieldValueCount = 0;
						this.m_dimensions = sap.firefly.XList.create();
					},
					addNextTupleElementMetadata : function(index, dimensionName) {
						var queryModel = this.getQueryModel();
						var dimension = null;
						var tupleElement;
						var rsDimensions;
						var rsDimension;
						var rsName;
						if (queryModel !== null) {
							dimension = queryModel
									.getDimensionByName(dimensionName);
							if (dimension === null) {
								dimension = queryModel.getMeasureDimension();
							}
						}
						tupleElement = sap.firefly.RsCursorAxisTupleElementContent
								.create(this.getApplication(), dimension);
						this.m_tupleElements.add(tupleElement);
						this.m_currentMetadataTupleElement = tupleElement;
						this.m_currentRsDimension = sap.firefly.RsDefDimension
								.create(dimension);
						this.m_dimensions.add(this.m_currentRsDimension);
						rsDimensions = this.getRsAxisDef().getRsDimensions();
						if ((rsDimensions !== null)
								&& (rsDimensions.size() > index)) {
							rsDimension = rsDimensions.get(index);
							rsName = rsDimension.getDimension().getName();
							if (sap.firefly.XString.isEqual(dimensionName,
									rsName) === false) {
								throw sap.firefly.XException
										.createRuntimeException("Dimension names do not match between query and result");
							}
						}
					},
					addNextFieldMetadata : function(fieldName, isVisible) {
						var dimension = this.m_currentMetadataTupleElement
								.getDimensionAtCurrentPosition();
						var field;
						var context;
						if (dimension !== null) {
							field = dimension.getFieldByName(fieldName);
							if (field === null) {
								throw sap.firefly.XException
										.createIllegalStateException(sap.firefly.XString
												.concatenate2(
														"Unknown field: ",
														fieldName));
							}
						} else {
							context = this.getOlapEnv().getContext();
							field = sap.firefly.QField._createField(context,
									null, null);
							field.setName(fieldName);
						}
						this.m_currentMetadataTupleElement
								.addFieldMetadata(field);
						this.m_globalFieldValueCount++;
						this.m_currentRsDimension.addField(field);
						if (isVisible) {
							this.m_currentRsDimension.addVisibleField(field);
						}
					},
					endAddMetadata : function() {
						this.m_currentMetadataTupleElement = null;
						this.m_currentRsDimension = null;
					},
					getRsDimensions : function() {
						return this.m_dimensions;
					},
					getTuplesCount : function() {
						return this.getProvider().getTuplesCount();
					},
					getTuplesCountTotal : function() {
						return this.m_tuplesCountTotal;
					},
					setTupleCursorBeforeStart : function() {
						this.m_tupleIndex = -1;
						this.setGlobalFieldCursorBeforeStart();
					},
					hasNextTuple : function() {
						return this.m_tupleIndex < ((this.m_pagingMax) - 1);
					},
					getProvider : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_provider);
					},
					nextTuple : function() {
						this.m_tupleIndex++;
						this.setGlobalFieldCursorBeforeStart();
						this.getProvider().notifyAxisCursorChange(
								this.m_tupleIndex);
						this.setGlobalFieldCursorBeforeStart();
					},
					setTupleCursorToIndex : function(index) {
						this.m_tupleIndex = index;
						this.setGlobalFieldCursorBeforeStart();
						this.getProvider().notifyAxisCursorChange(
								this.m_tupleIndex);
						this.setGlobalFieldCursorBeforeStart();
					},
					getTupleElementsCount : function() {
						return this.m_tupleElementCount;
					},
					setTupleElementCursorBeforeStart : function() {
						this.m_tupleElementIndex = -1;
						this.m_currentTupleElement = null;
						this.setFieldValueCursorBeforeStart();
					},
					hasNextTupleElement : function() {
						return this.m_tupleElementIndex < (this.m_tupleElementCount - 1);
					},
					setCurrentTupleElement : function() {
						var newCurrent = this.m_tupleElements
								.get(this.m_tupleElementIndex);
						this.m_currentTupleElement = sap.firefly.XWeakReferenceUtil
								.getWeakRef(newCurrent);
						return newCurrent;
					},
					getCurrentTupleElement : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_currentTupleElement);
					},
					nextTupleElement : function() {
						this.m_tupleElementIndex++;
						this.setCurrentTupleElement()
								.setFieldValueCursorBeforeStart();
						return this.getCurrentTupleElement();
					},
					setFieldValueCursorBeforeStart : function() {
						if (this.m_currentTupleElement !== null) {
							this.getCurrentTupleElement()
									.setFieldValueCursorBeforeStart();
						}
						this.m_currentCursorFieldValue = null;
					},
					hasNextFieldValue : function() {
						if (this.m_currentTupleElement === null) {
							return false;
						}
						return this.getCurrentTupleElement()
								.hasNextFieldValue();
					},
					nextFieldValue : function() {
						if (this.m_currentTupleElement !== null) {
							this.m_currentCursorFieldValue = this
									.getCurrentTupleElement().nextFieldValue();
						}
						return this.m_currentCursorFieldValue;
					},
					getEffectiveFields : function() {
						return this.getQueryAxis().getEffectiveFields();
					},
					setGlobalFieldCursorBeforeStart : function() {
						this.m_globalFieldIndex = -1;
						this.setTupleElementCursorBeforeStart();
					},
					getGlobalFieldValueCount : function() {
						return this.m_globalFieldValueCount;
					},
					hasNextGlobalFieldValue : function() {
						return this.m_globalFieldIndex < (this.m_globalFieldValueCount - 1);
					},
					nextGlobalFieldValue : function() {
						if (this.hasNextFieldValue() === false) {
							if (this.hasNextTupleElement() === false) {
								throw sap.firefly.XException
										.createIllegalStateException("No more tuple elements");
							}
							this.nextTupleElement();
						}
						this.m_globalFieldIndex++;
						return this.nextFieldValue();
					},
					getDateValue : function() {
						return this.m_currentCursorFieldValue.getDateValue();
					},
					setDateValue : function(dateValue) {
						this.m_currentCursorFieldValue.setDateValue(dateValue);
					},
					setTimeValue : function(timeValue) {
						this.m_currentCursorFieldValue.setTimeValue(timeValue);
					},
					getTimeValue : function() {
						return this.m_currentCursorFieldValue.getTimeValue();
					},
					getDateTimeValue : function() {
						return this.m_currentCursorFieldValue
								.getDateTimeValue();
					},
					setDateTimeValue : function(dateTimeValue) {
						this.m_currentCursorFieldValue
								.setDateTimeValue(dateTimeValue);
					},
					getStringValue : function() {
						return this.m_currentCursorFieldValue.getStringValue();
					},
					setStringValue : function(stringValue) {
						this.m_currentCursorFieldValue
								.setStringValue(stringValue);
					},
					getIntegerValue : function() {
						return this.m_currentCursorFieldValue.getIntegerValue();
					},
					setIntegerValue : function(integerValue) {
						this.m_currentCursorFieldValue
								.setIntegerValue(integerValue);
					},
					getLongValue : function() {
						return this.m_currentCursorFieldValue.getLongValue();
					},
					setLongValue : function(longValue) {
						this.m_currentCursorFieldValue.setLongValue(longValue);
					},
					getDoubleValue : function() {
						return this.m_currentCursorFieldValue.getDoubleValue();
					},
					setDoubleValue : function(doubleValue) {
						this.m_currentCursorFieldValue
								.setDoubleValue(doubleValue);
					},
					getGeometry : function() {
						return this.m_currentCursorFieldValue.getGeometry();
					},
					getPolygonValue : function() {
						return this.m_currentCursorFieldValue.getPolygonValue();
					},
					setPolygonValue : function(value) {
						this.m_currentCursorFieldValue.setPolygonValue(value);
					},
					getPointValue : function() {
						return this.m_currentCursorFieldValue.getPointValue();
					},
					setPointValue : function(value) {
						this.m_currentCursorFieldValue.setPointValue(value);
					},
					getTimeSpanValue : function() {
						return this.m_currentCursorFieldValue
								.getTimeSpanValue();
					},
					setTimeSpanValue : function(value) {
						this.m_currentCursorFieldValue.setTimeSpanValue(value);
					},
					getFormattedValue : function() {
						return this.m_currentCursorFieldValue
								.getFormattedValue();
					},
					setFormattedValue : function(formattedValue) {
						this.m_currentCursorFieldValue
								.setFormattedValue(formattedValue);
					},
					getPropertiesValue : function() {
						return this.m_currentCursorFieldValue
								.getPropertiesValue();
					},
					setPropertiesValue : function(properties) {
						this.m_currentCursorFieldValue
								.setPropertiesValue(properties);
					},
					getStructureValue : function() {
						return this.m_currentCursorFieldValue
								.getStructureValue();
					},
					getStructureListValue : function() {
						return this.m_currentCursorFieldValue
								.getStructureListValue();
					},
					setStructureValue : function(value) {
						this.m_currentCursorFieldValue.setStructureValue(value);
					},
					setStructureListValue : function(value) {
						this.m_currentCursorFieldValue
								.setStructureListValue(value);
					},
					getErrorValue : function() {
						return this.m_currentCursorFieldValue.getErrorValue();
					},
					setErrorValue : function(value) {
						this.m_currentCursorFieldValue.setErrorValue(value);
					},
					getValueType : function() {
						return this.m_currentCursorFieldValue.getField()
								.getValueType();
					},
					getValue : function() {
						return this.m_currentCursorFieldValue.getValue();
					},
					setBooleanValue : function(booleanValue) {
						this.m_currentCursorFieldValue
								.setBooleanValue(booleanValue);
					},
					getBooleanValue : function() {
						return this.m_currentCursorFieldValue.getBooleanValue();
					},
					getField : function() {
						return this.m_currentCursorFieldValue.getField();
					},
					createFieldValueFromCurrentPosition : function() {
						return this.m_currentCursorFieldValue
								.createFieldValueFromCurrentPosition();
					},
					getFieldValue : function() {
						return this.m_currentCursorFieldValue;
					},
					getDimensionAtCurrentPosition : function() {
						return this.getCurrentTupleElement()
								.getDimensionAtCurrentPosition();
					},
					setDrillState : function(drillState) {
						this.getCurrentTupleElement().setDrillState(drillState);
					},
					setDisplayLevel : function(displayLevel) {
						this.getCurrentTupleElement().setDisplayLevel(
								displayLevel);
					},
					getDrillState : function() {
						return this.getCurrentTupleElement().getDrillState();
					},
					getDisplayLevel : function() {
						return this.getCurrentTupleElement().getDisplayLevel();
					},
					setNodeId : function(nodeId) {
						this.getCurrentTupleElement().setNodeId(nodeId);
					},
					getNodeId : function() {
						return this.getCurrentTupleElement().getNodeId();
					},
					getDimensionMemberName : function() {
						return this.getCurrentTupleElement()
								.getDimensionMemberName();
					},
					setDimensionMemberName : function(name) {
						this.getCurrentTupleElement().setDimensionMemberName(
								name);
					},
					setDimensionMemberType : function(type) {
						this.getCurrentTupleElement().setDimensionMemberType(
								type);
					},
					getDimensionMemberType : function() {
						return this.getCurrentTupleElement()
								.getDimensionMemberType();
					},
					createDimensionMemberFromCurrentPosition : function() {
						return this.getCurrentTupleElement()
								.createDimensionMemberFromCurrentPosition();
					},
					setParentNodeIndex : function(parentIndex) {
						this.getCurrentTupleElement().setParentNodeIndex(
								parentIndex);
					},
					getParentNodeIndex : function() {
						return this.getCurrentTupleElement()
								.getParentNodeIndex();
					},
					supportsLayoutFromResultset : function() {
						return this.m_isSelfContaining;
					},
					setSupportsLayoutFromResultset : function(
							supportsLayoutFromResultset) {
						this.m_isSelfContaining = supportsLayoutFromResultset;
					},
					copyFrom : function(source) {
					},
					getDimensionMember : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPolygonValue : function() {
						return this.m_currentCursorFieldValue
								.getMultiPolygonValue();
					},
					setMultiPolygonValue : function(value) {
						this.m_currentCursorFieldValue
								.setMultiPolygonValue(value);
					},
					getLineStringValue : function() {
						return this.m_currentCursorFieldValue
								.getLineStringValue();
					},
					setLineStringValue : function(value) {
						this.m_currentCursorFieldValue
								.setLineStringValue(value);
					},
					getMultiLineStringValue : function() {
						return this.m_currentCursorFieldValue
								.getMultiLineStringValue();
					},
					setMultiLineStringValue : function(value) {
						this.m_currentCursorFieldValue
								.setMultiLineStringValue(value);
					},
					getNullValue : function() {
						return this.m_currentCursorFieldValue.getNullValue();
					},
					setNullValue : function(nullValueType) {
						this.m_currentCursorFieldValue
								.setNullValue(nullValueType);
					},
					getValueException : function() {
						return this.m_currentCursorFieldValue
								.getValueException();
					},
					setValueException : function(valueException) {
						this.m_currentCursorFieldValue
								.setValueException(valueException);
					},
					getDimensionMemberNameValueException : function() {
						return this.getCurrentTupleElement()
								.getDimensionMemberNameValueException();
					},
					setDimensionMemberNameValueException : function(
							valueException) {
						this.getCurrentTupleElement()
								.setDimensionMemberNameValueException(
										valueException);
					},
					getType : function() {
						return this.getRsAxisDef().getType();
					},
					getQueryAxis : function() {
						return this.getRsAxisDef().getQueryAxis();
					},
					getRsAxisDef : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_rsDefAxis);
					},
					getMultiPointValue : function() {
						return this.m_currentCursorFieldValue
								.getMultiPointValue();
					},
					setMultiPointValue : function(value) {
						this.m_currentCursorFieldValue
								.setMultiPointValue(value);
					},
					getAlertLevel : function() {
						return this.m_alertLevel;
					},
					getExceptionName : function() {
						return this.m_exceptionName;
					},
					setExceptionName : function(exceptionName) {
						this.m_exceptionName = exceptionName;
					},
					setAlertLevel : function(alertLevel) {
						this.m_alertLevel = alertLevel;
					},
					hasValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					parseStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setXValue : function(value) {
						this.copyFrom(sap.firefly.XValueAccess
								.createWithValue(value));
					},
					setChildCount : function(childCount) {
						this.getCurrentTupleElement().setChildCount(childCount);
					},
					getChildCount : function() {
						return this.getCurrentTupleElement().getChildCount();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.RsCursorResultSet",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						create : function(resultSetManager, providerFactory,
								request, rsDefQueryModel) {
							var resultSet = new sap.firefly.RsCursorResultSet();
							resultSet.setupResultSet(resultSetManager,
									providerFactory, request, rsDefQueryModel);
							return resultSet;
						}
					},
					m_resultsetContainer : null,
					m_providerFactory : null,
					m_provider : null,
					m_dataCellProvider : null,
					m_dataCell : null,
					m_currentColumn : 0,
					m_currentRow : 0,
					m_rowsAxis : null,
					m_columnAxis : null,
					m_state : null,
					m_dataColumns : 0,
					m_dataRows : 0,
					m_availableDataCellCount : 0,
					m_dataEntryEnabled : false,
					m_inputReadinessStates : null,
					m_dataEntryMask : null,
					m_request : null,
					m_rsDefQueryModel : null,
					setupResultSet : function(resultSetContainer,
							providerFactory, request, rsDefQueryModel) {
						this.setupSynchronizingObject(resultSetContainer
								.getQueryManager());
						this.setResultSetContainer(resultSetContainer);
						this.m_rsDefQueryModel = sap.firefly.XWeakReferenceUtil
								.getWeakRef(rsDefQueryModel);
						this.m_providerFactory = sap.firefly.XWeakReferenceUtil
								.getWeakRef(providerFactory);
						this.m_currentRow = -1;
						this.m_currentColumn = -1;
						this.m_dataColumns = -1;
						this.m_dataRows = -1;
						this.m_request = sap.firefly.XWeakReferenceUtil
								.getWeakRef(request);
						this.m_state = sap.firefly.ResultSetState.INITIAL;
					},
					releaseObject : function() {
						this.m_provider = sap.firefly.XObject
								.releaseIfNotNull(this.m_provider);
						this.m_request = sap.firefly.XObject
								.releaseIfNotNull(this.m_request);
						this.m_rsDefQueryModel = sap.firefly.XObject
								.releaseIfNotNull(this.m_rsDefQueryModel);
						this.m_resultsetContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultsetContainer);
						this.m_providerFactory = sap.firefly.XObject
								.releaseIfNotNull(this.m_providerFactory);
						this.m_dataCellProvider = sap.firefly.XObject
								.releaseIfNotNull(this.m_dataCellProvider);
						this.m_dataCell = sap.firefly.XObject
								.releaseIfNotNull(this.m_dataCell);
						this.m_currentRow = -1;
						this.m_currentColumn = -1;
						this.m_columnAxis = sap.firefly.XObject
								.releaseIfNotNull(this.m_columnAxis);
						this.m_rowsAxis = sap.firefly.XObject
								.releaseIfNotNull(this.m_rowsAxis);
						this.m_inputReadinessStates = sap.firefly.XObject
								.releaseIfNotNull(this.m_inputReadinessStates);
						this.m_availableDataCellCount = 0;
						this.m_dataColumns = 0;
						this.m_dataRows = 0;
						this.m_dataEntryMask = null;
						this.m_state = null;
						sap.firefly.RsCursorResultSet.$superclass.releaseObject
								.call(this);
					},
					getComponentName : function() {
						return "RsCursorResultSet";
					},
					isActive : function() {
						return this.m_resultsetContainer !== null;
					},
					processResultSetFetch : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					getProviderFactory : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_providerFactory);
					},
					getRequest : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_request);
					},
					processSynchronization : function(syncType) {
						var syncAction;
						if (this.m_request === null) {
							this.m_provider = this
									.getProviderFactory()
									.createResultSetProvider(
											sap.firefly.ProviderInitProcedure.REQUEST_BY_MODEL,
											null);
						} else {
							this.m_provider = this
									.getProviderFactory()
									.createResultSetProvider(
											sap.firefly.ProviderInitProcedure.REQUEST_BY_STRUCTURE,
											this.getRequest());
						}
						this.m_provider.setResultSet(this);
						syncAction = this.m_provider.processResultSet(syncType,
								this, null);
						this.setSyncChild(syncAction);
						return true;
					},
					onProviderFetch : function(extResult, resultset,
							customIdentifier) {
						var dataCellProvider;
						var rsQueryModelDef;
						this.addAllMessages(extResult);
						if (extResult.hasErrors()) {
							this.m_state = sap.firefly.ResultSetState.DATA_ACCESS_PROBLEMS;
						} else {
							dataCellProvider = this.m_provider
									.getDataCellProvider();
							this.m_dataCellProvider = sap.firefly.XWeakReferenceUtil
									.getWeakRef(dataCellProvider);
							this.m_dataColumns = dataCellProvider
									.getAvailableDataCellColumns();
							this.m_dataRows = dataCellProvider
									.getAvailableDataCellRows();
							this.m_availableDataCellCount = dataCellProvider
									.getAvailableDataCellCount();
							this.m_dataCell = sap.firefly.RsDataCell
									.createDefault(this);
							rsQueryModelDef = this.getRsQueryModelDef();
							this.m_columnAxis = sap.firefly.RsCursorAxis
									.create(this, this.m_provider
											.getColumnAxisProvider(),
											rsQueryModelDef.getColumnsAxisDef());
							this.m_rowsAxis = sap.firefly.RsCursorAxis.create(
									this,
									this.m_provider.getRowsAxisProvider(),
									rsQueryModelDef.getRowsAxisDef());
						}
						this.endSync();
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onResultSetFetch(extResult, data,
								customIdentifier);
					},
					getDataCellProvider : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dataCellProvider);
					},
					getDataCell : function(column, row) {
						if ((column !== this.m_currentColumn)
								|| (row !== this.m_currentRow)) {
							if ((column < 0) || (column > this.m_dataColumns)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"Column index is invalid, valid indices are [0, ",
														sap.firefly.XIntegerValue
																.create(
																		this.m_dataColumns)
																.toString(),
														"]"));
							}
							if ((row < 0) || (row > this.m_dataRows)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"Row index is invalid, valid indices are [0, ",
														sap.firefly.XIntegerValue
																.create(
																		this.m_dataRows)
																.toString(),
														"]"));
							}
							this.getDataCellProvider().notifyCursorChange(
									this.m_dataCell, column, row);
							this.m_currentColumn = column;
							this.m_currentRow = row;
						}
						return this.m_dataCell;
					},
					getDataColumns : function() {
						return this.m_dataColumns;
					},
					getDataRows : function() {
						return this.m_dataRows;
					},
					getAvailableDataCellCount : function() {
						return this.m_availableDataCellCount;
					},
					getState : function() {
						return this.m_state;
					},
					setState : function(state) {
						this.m_state = state;
					},
					getCursorRowsAxis : function() {
						return this.getCursorAxis(sap.firefly.AxisType.ROWS);
					},
					getCursorColumnsAxis : function() {
						return this.getCursorAxis(sap.firefly.AxisType.COLUMNS);
					},
					getCursorAxis : function(axis) {
						if (axis === sap.firefly.AxisType.COLUMNS) {
							return this.m_columnAxis;
						}
						return this.m_rowsAxis;
					},
					getResultSetContainer : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultsetContainer);
					},
					setResultSetContainer : function(resultsetContainer) {
						this.m_resultsetContainer = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultsetContainer);
					},
					isNewLinePossible : function() {
						var mask = this.getDataEntryMask();
						if (mask === null) {
							return false;
						}
						return mask.size() > 0;
					},
					getResultSetType : function() {
						return sap.firefly.ResultSetType.CURSOR;
					},
					getRsQueryModelDef : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_rsDefQueryModel);
					},
					setDataEntryMask : function(dataEntryMask) {
						this.m_dataEntryMask = dataEntryMask;
					},
					getDataEntryMask : function() {
						if (this.m_dataEntryMask === null) {
							return null;
						}
						return this.m_dataEntryMask.createListOfStringCopy();
					},
					isDataEntryEnabled : function() {
						return this.m_dataEntryEnabled;
					},
					setDataEntryEnabled : function(dataEntryEnabled) {
						this.m_dataEntryEnabled = dataEntryEnabled;
					},
					getInputReadinessStates : function() {
						return this.m_inputReadinessStates;
					},
					getInputReadinessStateByIndex : function(index) {
						if (this.m_inputReadinessStates === null) {
							return null;
						}
						return this.m_inputReadinessStates.get(index);
					},
					setInputReadinessStates : function(states) {
						this.m_inputReadinessStates = states;
					},
					resetNewValues : function() {
						if (this.m_dataCell !== null) {
							this.m_dataCell.resetAllChanges();
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.ResultSetContainer",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						MAX_RECORDS_DEFAULT : -1,
						create : function(manager, template) {
							var query = new sap.firefly.ResultSetContainer();
							query.setupContainer(manager, null, null, null,
									template);
							return query;
						},
						createWithRequest : function(queryManagerBase,
								resultSetProviderFactory, request,
								rsDefQueryModel) {
							var query = new sap.firefly.ResultSetContainer();
							query.setupContainer(queryManagerBase,
									resultSetProviderFactory, request,
									rsDefQueryModel, null);
							return query;
						}
					},
					m_resultSetProviderFactory : null,
					m_request : null,
					m_classicResultSet : null,
					m_cursorResultSet : null,
					m_cursorResultSetInSync : null,
					m_offsetRows : 0,
					m_offsetColumns : 0,
					m_maxRows : 0,
					m_maxColumns : 0,
					m_maxResultRecords : 0,
					m_resultSetPersistanceSchema : null,
					m_resultSetPersistanceTable : null,
					m_resultSetPersistanceIdentifier : null,
					m_resultSetPersistanceEnabled : false,
					m_dataRefreshEnabled : null,
					m_executeRequestOnOldResultSet : false,
					m_isResultSetTransportEnabled : false,
					m_dataEntryCollection : null,
					m_resultSetId : null,
					m_resultSetIdSet : false,
					m_rsDefQueryModel : null,
					setupContainer : function(queryManager,
							resultSetProviderFactory, request, rsDefQueryModel,
							template) {
						sap.firefly.ResultSetContainer.$superclass.setupSynchronizingObject
								.call(this, queryManager);
						this.m_rsDefQueryModel = rsDefQueryModel;
						if (template === null) {
							this.m_offsetRows = 0;
							this.m_offsetColumns = 0;
							this.m_maxRows = -1;
							this.m_maxColumns = -1;
							this.m_maxResultRecords = sap.firefly.ResultSetContainer.MAX_RECORDS_DEFAULT;
							this.m_isResultSetTransportEnabled = true;
							this.m_dataRefreshEnabled = sap.firefly.ActionChoice.OFF;
						} else {
							this.m_offsetRows = template.getOffsetRows();
							this.m_offsetColumns = template.getOffsetColumns();
							this.m_maxRows = template.getMaxRows();
							this.m_maxColumns = template.getMaxColumns();
							this.m_maxResultRecords = template
									.getMaxResultRecords();
							this.m_isResultSetTransportEnabled = template
									.isResultSetTransportEnabled();
							this.m_resultSetPersistanceTable = template
									.getResultSetPersistanceTable();
							this.m_resultSetPersistanceIdentifier = template
									.getResultSetPersistanceIdentifier();
							this.m_resultSetPersistanceSchema = template
									.getResultSetPersistanceSchema();
							this.m_resultSetPersistanceEnabled = template
									.isResultSetPersistanceEnabled();
							this.m_executeRequestOnOldResultSet = template
									.getExecuteRequestOnOldResultSet();
							this.m_dataRefreshEnabled = template
									.getDataRefreshEnabled();
							if (this.m_dataRefreshEnabled === sap.firefly.ActionChoice.ONCE) {
								this.m_dataRefreshEnabled = sap.firefly.ActionChoice.OFF;
							}
						}
						this.m_resultSetProviderFactory = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultSetProviderFactory);
						this.m_request = sap.firefly.XWeakReferenceUtil
								.getWeakRef(request);
					},
					getComponentName : function() {
						return "ResultSetContainer";
					},
					getComponentType : function() {
						return null;
					},
					releaseObject : function() {
						this.m_resultSetId = null;
						this.m_resultSetPersistanceTable = null;
						this.m_resultSetPersistanceSchema = null;
						this.m_resultSetPersistanceIdentifier = null;
						this.m_request = sap.firefly.XObject
								.releaseIfNotNull(this.m_request);
						this.m_resultSetProviderFactory = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultSetProviderFactory);
						this.m_cursorResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_cursorResultSet);
						this.m_cursorResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_cursorResultSet);
						this.m_cursorResultSetInSync = sap.firefly.XObject
								.releaseIfNotNull(this.m_cursorResultSetInSync);
						this.m_classicResultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_classicResultSet);
						this.m_dataEntryCollection = sap.firefly.XObject
								.releaseIfNotNull(this.m_dataEntryCollection);
						sap.firefly.ResultSetContainer.$superclass.releaseObject
								.call(this);
					},
					cancelSynchronization : function() {
						var activeSyncType;
						var queryManagerBase;
						var lifeCycleState;
						if (this.getSyncState() !== sap.firefly.SyncState.PROCESSING) {
							throw sap.firefly.XException
									.createRuntimeException("Cannot cancel action that is not processing");
						}
						activeSyncType = this.getActiveSyncType();
						queryManagerBase = this.getQueryManagerBase();
						sap.firefly.ResultSetContainer.$superclass.cancelSynchronization
								.call(this);
						if (queryManagerBase !== null) {
							lifeCycleState = queryManagerBase
									.getLifeCycleState();
							if (lifeCycleState === sap.firefly.LifeCycleState.ACTIVE) {
								(queryManagerBase)
										.processProviderCancelThreads(
												activeSyncType, null, null);
							}
						}
					},
					processExecution : function(syncType, listener,
							customIdentifier) {
						var preQueries;
						if (!this.executeRemoteQueries(this.getQueryModel(),
								syncType)) {
							return this;
						}
						preQueries = this.getPreQueries();
						if (sap.firefly.XCollectionUtils
								.hasElements(preQueries)) {
							return this.executePreQueries(syncType, listener,
									customIdentifier, preQueries);
						}
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					executePreQueries : function(syncType, listener,
							customIdentifier, preQueries) {
						var size = preQueries.size();
						var connectionPool = this.getApplication()
								.getConnectionPool();
						var systemName = this.getQueryManager()
								.getSystemDescription().getName();
						var implicitBatchStarted = false;
						var i;
						var preQueryPair;
						var preQueryManager;
						var tmpResultSetTransportEnabled;
						var processSyncAction;
						if (connectionPool.isBatchModeEnabled(systemName) === false) {
							connectionPool.enableBatchMode(systemName);
							implicitBatchStarted = true;
						}
						for (i = 0; i < size; i++) {
							preQueryPair = preQueries.get(i);
							preQueryManager = preQueryPair.getObject()
									.getQueryManager();
							tmpResultSetTransportEnabled = preQueryManager
									.isResultSetTransportEnabled();
							preQueryManager.setResultSetTransportEnabled(false);
							preQueryManager.setPreQueryName(preQueryPair
									.getName());
							preQueryManager.processQueryExecution(
									sap.firefly.SyncType.NON_BLOCKING, null,
									null);
							preQueryManager
									.setResultSetTransportEnabled(tmpResultSetTransportEnabled);
							preQueryManager.setPreQueryName(null);
						}
						processSyncAction = this.processSyncAction(
								sap.firefly.SyncType.NON_BLOCKING, listener,
								customIdentifier);
						if (implicitBatchStarted
								&& (this.getQueryManagerBase()
										.getPreQueryName() === null)) {
							connectionPool.disableBatchMode(syncType,
									systemName);
						}
						return processSyncAction;
					},
					executeRemoteQueries : function(queryModel, syncType) {
						var sources;
						var source;
						var model;
						var queryManager;
						if (queryModel.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING) {
							sources = queryModel.getBlendingSources()
									.getIterator();
							while (sources.hasNext()) {
								source = sources.next();
								model = source.getQueryModel();
								queryManager = model.getQueryManager();
								if (!this.executeRemoteQueries(model, syncType)) {
									return false;
								}
								if (source.isRemoteSource()) {
									queryManager.processQueryExecution(
											syncType, this, null);
									if (this.hasErrors()) {
										return false;
									}
								}
							}
						}
						return true;
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						this.addAllMessages(extResult);
					},
					getPreQueries : function() {
						var queryModel = this.getQueryModel();
						var preQueries;
						var sourcesIterator;
						var source;
						var sourceModel;
						if (this.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING) {
							preQueries = sap.firefly.XList.create();
							sourcesIterator = queryModel.getBlendingSources()
									.getIterator();
							while (sourcesIterator.hasNext()) {
								source = sourcesIterator.next();
								sourceModel = source.getQueryModel();
								if ((sourceModel !== null)
										&& (source.isRemoteSource() === false)) {
									preQueries.addAll(sourceModel
											.getPreQueries());
								}
							}
							return preQueries;
						}
						return queryModel.getPreQueries();
					},
					processQueryExecution : function(syncType, listener,
							customIdentifier) {
						return this.processExecution(syncType, listener,
								customIdentifier);
					},
					getRequest : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_request);
					},
					processSynchronization : function(syncType) {
						var resultSetProviderFactory = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultSetProviderFactory);
						var queryModel;
						if (resultSetProviderFactory === null) {
							resultSetProviderFactory = this
									.getQueryManagerBase()
									.getResultSetProviderFactory();
						}
						queryModel = this.getQueryModel();
						if (this.m_rsDefQueryModel === null) {
							this.m_rsDefQueryModel = sap.firefly.RsDefQueryModel
									.create(queryModel, null);
						}
						this.m_cursorResultSet = sap.firefly.RsCursorResultSet
								.create(this, resultSetProviderFactory, this
										.getRequest(), this.m_rsDefQueryModel);
						this.setSyncChild(this.m_cursorResultSet);
						this.m_cursorResultSet.processResultSetFetch(syncType,
								this, null);
						return true;
					},
					onResultSetFetch : function(extResult, resultset,
							customIdentifier) {
						this.addAllMessages(extResult);
						this.setDataEntryCollection(null);
						if (extResult.isValid()) {
							this.m_cursorResultSetInSync = sap.firefly.XWeakReferenceUtil
									.getWeakRef(this.m_cursorResultSet);
							this.setData(this);
						} else {
							this.m_cursorResultSetInSync = null;
						}
						this.endSync();
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onQueryExecuted(extResult, data,
								customIdentifier);
					},
					getClassicResultSet : function() {
						var rs;
						if (this.m_classicResultSet === null) {
							rs = this.getCursorResultSet();
							if (rs !== null) {
								this.m_classicResultSet = sap.firefly.ResultSet
										.create(this, rs);
							}
						}
						return this.m_classicResultSet;
					},
					isClassicResultSetAvailable : function() {
						return this.m_classicResultSet !== null;
					},
					getCursorResultSet : function() {
						var syncState;
						if (this.m_cursorResultSetInSync === null) {
							syncState = this.getSyncState();
							if (syncState === sap.firefly.SyncState.PROCESSING) {
								throw sap.firefly.XException
										.createIllegalStateException("Cannot retrieve the resultset while processing");
							} else {
								if (syncState === sap.firefly.SyncState.OUT_OF_SYNC) {
									this.processQueryExecution(
											sap.firefly.SyncType.BLOCKING,
											null, null);
								}
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cursorResultSetInSync);
					},
					isCursorResultSetAvailable : function() {
						return this.m_cursorResultSetInSync !== null;
					},
					setOffsetRows : function(offset) {
						this.m_offsetRows = offset;
						return null;
					},
					setOffsetColumns : function(offset) {
						this.m_offsetColumns = offset;
						return null;
					},
					getOffsetRows : function() {
						return this.m_offsetRows;
					},
					getOffsetColumns : function() {
						return this.m_offsetColumns;
					},
					setMaxRows : function(max) {
						this.m_maxRows = max;
						return null;
					},
					setMaxColumns : function(max) {
						this.m_maxColumns = max;
						return null;
					},
					getMaxRows : function() {
						return this.m_maxRows;
					},
					getMaxColumns : function() {
						return this.m_maxColumns;
					},
					getExecuteRequestOnOldResultSet : function() {
						return this.m_executeRequestOnOldResultSet;
					},
					setExecuteRequestOnOldResultSet : function(
							executeRequestOnOldResultSet) {
						this.m_executeRequestOnOldResultSet = executeRequestOnOldResultSet;
						return null;
					},
					getDataEntryCollection : function() {
						if (this.m_dataEntryCollection === null) {
							this.m_dataEntryCollection = sap.firefly.RsDataEntryCollection
									.create(this);
						}
						return this.m_dataEntryCollection;
					},
					setDataEntryCollection : function(dataEntryCollection) {
						this.m_dataEntryCollection = dataEntryCollection;
					},
					resetDataEntryCollection : function() {
						if (this.m_cursorResultSet !== null) {
							this.m_cursorResultSet.resetNewValues();
						}
						if (this.m_classicResultSet !== null) {
							this.m_classicResultSet.resetNewValues();
						}
						if (this.m_dataEntryCollection !== null) {
							this.m_dataEntryCollection.clear();
						}
					},
					getId : function() {
						if (this.m_resultSetIdSet === false) {
							this.setId(sap.firefly.XGuid.getGuid());
						}
						return this.m_resultSetId;
					},
					setId : function(identifier) {
						this.m_resultSetId = identifier;
						this.m_resultSetIdSet = true;
					},
					getResultSetSyncState : function() {
						return this.getSyncState();
					},
					getResultSetMessages : function() {
						return this;
					},
					getResultSetManager : function() {
						return this.getActionContext();
					},
					getResultSetManagerBase : function() {
						return this.getActionContext();
					},
					hasMoreColumnRecordsAvailable : function() {
						var currentMaxTuple = (this.m_offsetColumns + this.m_maxColumns);
						var cursorColumnsAxis;
						if (currentMaxTuple === -1) {
							return false;
						}
						cursorColumnsAxis = this.m_cursorResultSet
								.getCursorColumnsAxis();
						return currentMaxTuple < cursorColumnsAxis
								.getTuplesCountTotal();
					},
					hasMoreRowRecordsAvailable : function() {
						var currentMaxTuple = (this.m_offsetRows + this.m_maxRows);
						var cursorRowsAxis;
						if (currentMaxTuple === -1) {
							return false;
						}
						cursorRowsAxis = this.m_cursorResultSet
								.getCursorRowsAxis();
						return currentMaxTuple < cursorRowsAxis
								.getTuplesCountTotal();
					},
					getMaxResultRecords : function() {
						return this.m_maxResultRecords;
					},
					setMaxResultRecords : function(maxResultRecords) {
						this.m_maxResultRecords = maxResultRecords;
						return null;
					},
					resetMaxResultRecords : function() {
						this.m_maxResultRecords = -1;
						return null;
					},
					setDataRefreshEnabled : function(dataRefreshEnabled) {
						this.m_dataRefreshEnabled = dataRefreshEnabled;
					},
					getDataRefreshEnabled : function() {
						return this.m_dataRefreshEnabled;
					},
					setResultSetPersistanceTargetSchema : function(
							resultSetPersistanceSchema) {
						this.m_resultSetPersistanceSchema = resultSetPersistanceSchema;
						return null;
					},
					setResultSetPersistanceTargetTable : function(
							resultSetPersistanceTable) {
						this.m_resultSetPersistanceTable = resultSetPersistanceTable;
						return null;
					},
					setResultSetPersistanceIdentifier : function(
							resultSetPersistanceIdentifier) {
						this.m_resultSetPersistanceIdentifier = resultSetPersistanceIdentifier;
						return null;
					},
					setResultSetPersistanceEnabled : function(
							resultSetPersistanceEnabled) {
						this.m_resultSetPersistanceEnabled = resultSetPersistanceEnabled;
						return null;
					},
					getResultSetPersistanceSchema : function() {
						return this.m_resultSetPersistanceSchema;
					},
					getResultSetPersistanceTable : function() {
						return this.m_resultSetPersistanceTable;
					},
					getResultSetPersistanceIdentifier : function() {
						return this.m_resultSetPersistanceIdentifier;
					},
					isResultSetPersistanceEnabled : function() {
						return this.m_resultSetPersistanceEnabled;
					},
					isResultSetTransportEnabled : function() {
						return this.m_isResultSetTransportEnabled;
					},
					setResultSetTransportEnabled : function(isEnabled) {
						this.m_isResultSetTransportEnabled = isEnabled;
						return null;
					},
					getAbstractRendering : function(type) {
						var rootCell;
						var hiChartRenderer;
						var rs;
						var grid;
						var colCount;
						var rowCount;
						var layer1;
						var layer1Cells;
						var y;
						var x;
						var gridCell;
						var cell1Layer1;
						if (type.isTypeOf(sap.firefly.DataBindingType.CHART)) {
							hiChartRenderer = sap.firefly.RsHiChartRenderer
									.create();
							rootCell = hiChartRenderer.render(type, this
									.getCursorResultSet());
						} else {
							rootCell = sap.firefly.PrStructure.create();
							rs = this.getClassicResultSet();
							grid = sap.firefly.ReferenceGrid.create(rs);
							grid.prepareCellStructure(true, true);
							colCount = grid.getColumnCount();
							rowCount = grid.getRowCount();
							layer1 = rootCell;
							layer1.setStringByName("Type", "Grid");
							layer1.setIntegerByName("RowCount", rowCount);
							layer1.setIntegerByName("ColCount", colCount);
							layer1Cells = layer1.setNewListByName("Cells");
							for (y = 0; y < rowCount; y++) {
								for (x = 0; x < colCount; x++) {
									gridCell = grid.getSimpleCell(x, y);
									cell1Layer1 = layer1Cells.addNewStructure();
									if (gridCell !== null) {
										cell1Layer1.setStringByName("Type",
												"Text");
										cell1Layer1.setStringByName("Value",
												gridCell.getText(50));
									} else {
										cell1Layer1.setStringByName("Type",
												"Empty");
									}
								}
							}
						}
						return rootCell;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DfResultSetProvider",
				sap.firefly.QOlapSyncAction,
				{
					m_resultSet : null,
					releaseObject : function() {
						this.m_resultSet = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultSet);
						sap.firefly.DfResultSetProvider.$superclass.releaseObject
								.call(this);
					},
					processResultSet : function(syncType, listener,
							customIdentifier) {
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					getComponentName : function() {
						return "DfResultSetProvider";
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onProviderFetch(extResult, data,
								customIdentifier);
					},
					getData : function() {
						return this;
					},
					getResultSet : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_resultSet);
					},
					setResultSet : function(resultSet) {
						this.m_resultSet = sap.firefly.XWeakReferenceUtil
								.getWeakRef(resultSet);
					},
					getColumnAxisProvider : function() {
					},
					getDataCellProvider : function() {
					},
					getRowsAxisProvider : function() {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QValueHelpDimMemberAction",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						create : function(parent) {
							var newObject = new sap.firefly.QValueHelpDimMemberAction();
							newObject.setupValueHelpAction(parent);
							return newObject;
						}
					},
					m_offset : 0,
					m_max : 0,
					m_members : null,
					setupValueHelpAction : function(parent) {
						this.setupSynchronizingObject(parent);
					},
					releaseObject : function() {
						this.m_members = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_members);
						sap.firefly.QValueHelpDimMemberAction.$superclass.releaseObject
								.call(this);
					},
					processSynchronization : function(syncType) {
						var context = this.getActionContext();
						var dimension = context.getDimension();
						var variable;
						dimension.setSelectorPaging(this.getOffsetRows(), this
								.getOffsetRows()
								+ this.getMaxRows());
						variable = context.getVariable();
						dimension.processVariableHelp(variable.getName(),
								syncType, this, null);
						return true;
					},
					onValuehelpExecuted : function(extResult,
							resultSetContainer, customIdentifier) {
						var data;
						var size;
						var i;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							data = extResult.getData();
							this.m_members = sap.firefly.XList.create();
							size = data.size();
							for (i = 0; i < size; i++) {
								this.m_members.add(data.get(i)
										.getDimensionMember());
							}
						}
						this.setData(this);
						this.endSync();
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						listener.onValueHelpDimMemberExecuted(extResult, this,
								customIdentifier);
					},
					cancelSynchronization : function() {
						sap.firefly.QValueHelpDimMemberAction.$superclass.cancelSynchronization
								.call(this);
					},
					setOffsetRows : function(offset) {
						this.m_offset = offset;
						return null;
					},
					getOffsetRows : function() {
						return this.m_offset;
					},
					setMaxRows : function(max) {
						this.m_max = max;
						return null;
					},
					getMaxRows : function() {
						return this.m_max;
					},
					hasMoreRowRecordsAvailable : function() {
						return false;
					},
					getMembers : function() {
						return this.m_members;
					},
					getValueHelp : function() {
						return this.getActionContext();
					}
				});
$Firefly.createClass("sap.firefly.QValueHelpLeaf", sap.firefly.XObject, {
	$statics : {
		create : function(parentNode, member, displayLevel) {
			var newObj = new sap.firefly.QValueHelpLeaf();
			newObj.setupNode(parentNode, member, displayLevel);
			return newObj;
		}
	},
	m_parentNode : null,
	m_member : null,
	m_displayLevel : 0,
	m_osid : null,
	setupNode : function(parentNode, member, displayLevel) {
		this.m_parentNode = parentNode;
		this.m_displayLevel = displayLevel;
		this.m_member = member;
	},
	getDimension : function() {
		return this.m_parentNode.getDimension();
	},
	getDimensionMember : function() {
		return this.m_member;
	},
	getParentNode : function() {
		return this.m_parentNode;
	},
	getParentValueHelpNode : function() {
		return this.m_parentNode;
	},
	getComponentType : function() {
		return this.getMemberType();
	},
	getOlapComponentType : function() {
		return this.getMemberType();
	},
	getType : function() {
		return this.getMemberType();
	},
	getMemberType : function() {
		return sap.firefly.MemberType.VALUE_HELP_LEAF;
	},
	isLeaf : function() {
		return this.getMemberType().isLeaf();
	},
	isNode : function() {
		return this.getMemberType().isNode();
	},
	getStartIndex : function() {
		return -1;
	},
	getEndIndex : function() {
		return -1;
	},
	getChildren : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getChildElements : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getChildSetState : function() {
		return sap.firefly.ChildSetState.NONE;
	},
	processValueHelpFetch : function(syncType, listener, customIdentifier) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getDisplayLevel : function() {
		return this.m_displayLevel;
	},
	getSelectableElement : function() {
		return this.m_member;
	},
	getAggregatedChildCount : function() {
		return 1;
	},
	getDrillState : function() {
		return sap.firefly.DrillState.LEAF;
	},
	getDrillPath : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getName : function() {
		return this.m_member.getName();
	},
	getFirstText : function() {
		return this.getName();
	},
	getLastText : function() {
		return this.getName();
	},
	getOsid : function() {
		var buffer;
		if (this.m_osid === null) {
			buffer = sap.firefly.XStringBuffer.create();
			buffer.append(this.getName());
			buffer.append("_");
			buffer.appendInt(this.m_member.getSession().getNextSid());
			this.m_osid = buffer.toString();
		}
		return this.m_osid;
	},
	hasChildren : function() {
		return false;
	},
	getText : function() {
		return this.getName();
	},
	getTagValue : function(tagName) {
		return null;
	},
	getContentElement : function() {
		return this;
	},
	getContentConstant : function() {
		return null;
	},
	processChildFetch : function(syncType, listener, customIdentifier) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	registerChangedListener : function(listener, customIdentifier) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	unregisterChangedListener : function(listener) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getChildCount : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	cloneOlapComponent : function(context, parent) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	queueEventing : function() {
	},
	stopEventing : function() {
	},
	isEventingStopped : function() {
		return false;
	},
	resumeEventing : function() {
	}
});
$Firefly
		.createClass(
				"sap.firefly.QValueHelpNode",
				sap.firefly.QOlapSyncAction,
				{
					$statics : {
						WINDOW_SIZE : 100,
						SPLITTER_SIZE : 100,
						STRATEGY_WINDOWING : 0,
						STRATEGY_SPLITTER : 1,
						STRATEGY : 0,
						create : function(valueHelp, parentNode, member,
								displayLevel) {
							var newObj = new sap.firefly.QValueHelpNode();
							newObj.setupNode(valueHelp, parentNode, member,
									displayLevel, 1);
							return newObj;
						}
					},
					m_parentNode : null,
					m_member : null,
					m_children : null,
					m_displayLevel : 0,
					m_childSetState : null,
					m_splittingSize : 0,
					m_aggregatedChildCount : 0,
					m_requestSettings : null,
					m_osid : null,
					setupNode : function(valueHelp, parentNode, member,
							displayLevel, splittingSize) {
						this.setupSynchronizingObject(valueHelp);
						this.m_parentNode = parentNode;
						this.m_displayLevel = displayLevel;
						this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
						this.m_splittingSize = splittingSize;
						this.m_member = member;
					},
					getDimension : function() {
						return this.getActionContext().getValueHelpDimension();
					},
					getDimensionMember : function() {
						return this.m_member;
					},
					getParentNode : function() {
						return this.m_parentNode;
					},
					getParentValueHelpNode : function() {
						return this.m_parentNode;
					},
					getComponentType : function() {
						return this.getMemberType();
					},
					getOlapComponentType : function() {
						return this.getMemberType();
					},
					getType : function() {
						return this.getMemberType();
					},
					getMemberType : function() {
						if (this.m_parentNode === null) {
							return sap.firefly.MemberType.VALUE_HELP_ROOT_NODE;
						}
						return sap.firefly.MemberType.VALUE_HELP_NODE;
					},
					isLeaf : function() {
						return this.getMemberType().isLeaf();
					},
					isNode : function() {
						return this.getMemberType().isNode();
					},
					getChildElements : function() {
						return sap.firefly.XReadOnlyListWrapper
								.create(this.m_children);
					},
					getChildren : function() {
						return this.m_children;
					},
					processValueHelpFetch : function(syncType, listener,
							customIdentifier) {
						if (this.m_childSetState === sap.firefly.ChildSetState.INCOMPLETE) {
							this.resetSyncState();
						}
						return this.processSyncAction(syncType, listener,
								customIdentifier);
					},
					processChildFetch : function(syncType, listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					processSynchronization : function(syncType) {
						var valueHelpDimension = this.getActionContext()
								.getValueHelpDimension();
						var name = valueHelpDimension.getName();
						var hierarchyAssignedAndActive = valueHelpDimension
								.isHierarchyAssignedAndActive();
						var endIndex = 0;
						var queryManager;
						var valueHelpModel;
						var selector;
						var selectionStateContainer;
						var cmds;
						var memberName;
						if (this.m_childSetState === sap.firefly.ChildSetState.INCOMPLETE) {
							endIndex = this.getEndIndex() + 1;
						}
						this.m_requestSettings = sap.firefly.QRequestSettings
								.create(endIndex,
										sap.firefly.QValueHelpNode.WINDOW_SIZE,
										hierarchyAssignedAndActive);
						queryManager = this.getActionContext()
								.getQueryManager();
						valueHelpModel = queryManager.getQueryModel();
						selector = valueHelpModel.getSelector();
						selectionStateContainer = selector
								.getSelectionStateContainer();
						if (selectionStateContainer.isCartesianProduct() === false) {
							selectionStateContainer.setComplexSelection(null);
						}
						cmds = valueHelpModel.getConvenienceCommands();
						cmds.clearFiltersByDimensionName(name);
						if (this.m_requestSettings.m_isHierarchyShot) {
							if (this.getMemberType() === sap.firefly.MemberType.VALUE_HELP_ROOT_NODE) {
								valueHelpDimension.setInitialDrillLevel(0);
							} else {
								memberName = this.m_member.getName();
								cmds.addSingleMemberFilterByDimension(
										valueHelpDimension, memberName,
										sap.firefly.ComparisonOperator.EQUAL);
								this.m_requestSettings.m_isDeltaDrill = true;
								valueHelpDimension.setInitialDrillLevel(1);
							}
						}
						queryManager
								.setOffsetRows(this.m_requestSettings.m_offset);
						queryManager
								.setMaxRows(this.m_requestSettings.m_windowSize);
						queryManager.processQueryExecution(syncType, this,
								this.m_requestSettings);
						return true;
					},
					getDrillPath : function() {
						var drillPath = sap.firefly.XList.create();
						return drillPath;
					},
					onQueryExecuted : function(extResult, resultSetContainer,
							customIdentifier) {
						var valueHelpDimension = this.getDimension();
						var level0Children;
						var allChildren;
						var cursorResultSet;
						var cursorRowsAxis;
						var currentParent;
						var peerNode;
						var tuplesCount;
						var myTargetState;
						var childTargetState;
						var previousChildren;
						var rootExpandingLevels;
						var lastPos;
						var lastElement;
						var tupleElement;
						var displayLevel;
						var parentIndex;
						var dimMember;
						var node;
						var endIndex;
						var emptySplitter;
						this.clearMessages();
						this.addMessages(extResult.getMessages());
						level0Children = sap.firefly.XList.create();
						allChildren = sap.firefly.XList.create();
						if (extResult.isValid()) {
							cursorResultSet = resultSetContainer
									.getCursorResultSet();
							cursorRowsAxis = cursorResultSet
									.getCursorRowsAxis();
							tuplesCount = cursorRowsAxis.getTuplesCount();
							if (tuplesCount < this.m_requestSettings.m_windowSize) {
								myTargetState = sap.firefly.ChildSetState.COMPLETE;
							} else {
								myTargetState = sap.firefly.ChildSetState.INCOMPLETE;
							}
							previousChildren = null;
							rootExpandingLevels = valueHelpDimension
									.getInitialDrillLevel();
							if (sap.firefly.QValueHelpNode.STRATEGY === sap.firefly.QValueHelpNode.STRATEGY_WINDOWING) {
								if ((this.m_requestSettings.m_isHierarchyShot)
										&& (rootExpandingLevels >= 0)) {
									childTargetState = sap.firefly.ChildSetState.INITIAL;
								} else {
									childTargetState = myTargetState;
								}
							} else {
								if ((this.m_requestSettings.m_isHierarchyShot)
										&& (rootExpandingLevels >= 0)) {
									childTargetState = sap.firefly.ChildSetState.INCOMPLETE;
								} else {
									childTargetState = sap.firefly.ChildSetState.COMPLETE;
								}
								if (this.m_children !== null) {
									previousChildren = this.m_children;
									this.m_children = sap.firefly.XList
											.create();
									lastPos = previousChildren.size() - 1;
									lastElement = previousChildren.get(lastPos);
									this.m_children.add(lastElement);
									previousChildren.removeAt(lastPos);
								}
							}
							if (this.m_requestSettings.m_isDeltaDrill) {
								if (cursorRowsAxis.hasNextTuple()) {
									cursorRowsAxis.nextTuple();
									allChildren.add(this);
								}
							}
							while (cursorRowsAxis.hasNextTuple()) {
								cursorRowsAxis.nextTuple();
								tupleElement = cursorRowsAxis
										.nextTupleElement();
								displayLevel = tupleElement.getDisplayLevel();
								parentIndex = tupleElement.getParentNodeIndex();
								if (parentIndex === -1) {
									currentParent = this;
								} else {
									currentParent = allChildren
											.get(parentIndex);
								}
								dimMember = tupleElement
										.createDimensionMemberFromCurrentPosition();
								peerNode = sap.firefly.QValueHelpNode.create(
										this.getActionContext(), currentParent,
										dimMember, displayLevel);
								peerNode.setChildSetState(childTargetState);
								node = peerNode;
								currentParent.addChild(node, childTargetState);
								allChildren.add(node);
								if (displayLevel === 0) {
									level0Children.add(node);
								}
							}
							if ((sap.firefly.QValueHelpNode.STRATEGY === sap.firefly.QValueHelpNode.STRATEGY_SPLITTER)
									&& (myTargetState === sap.firefly.ChildSetState.INCOMPLETE)) {
								endIndex = this.getEndIndex() + 1;
								emptySplitter = sap.firefly.QValueHelpSplitterNode
										.createSplitterNode(this
												.getActionContext(), this, 0,
												endIndex, 1);
								this.m_children.add(emptySplitter);
							}
							this.m_childSetState = myTargetState;
						} else {
							this.m_childSetState = sap.firefly.ChildSetState.COMPLETE;
						}
						this.setData(level0Children);
						this.endSync();
					},
					addChild : function(node, childState) {
						var size2;
						var currentWindowNode;
						var childNode;
						var aggregatedChildCount;
						var myChildren2;
						var startIndex2;
						var splitterNode;
						var mySize3;
						var k;
						var splitterNode2;
						var childSetState;
						var aggregatedChildCount2;
						var startIndex3;
						if (this.m_children === null) {
							this.m_children = sap.firefly.XList.create();
						}
						if (sap.firefly.QValueHelpNode.STRATEGY === sap.firefly.QValueHelpNode.STRATEGY_WINDOWING) {
							this.m_children.add(node);
						} else {
							size2 = this.m_children.size();
							if (this.m_splittingSize === -1) {
								currentWindowNode = this.m_children
										.get(size2 - 1);
								currentWindowNode.addChild(node, childState);
							} else {
								if (size2 >= sap.firefly.QValueHelpNode.SPLITTER_SIZE) {
									childNode = this.m_children.get(size2 - 1);
									aggregatedChildCount = childNode
											.getAggregatedChildCount();
									if (aggregatedChildCount === this.m_splittingSize) {
										myChildren2 = this.m_children;
										this.m_children = sap.firefly.XList
												.create();
										startIndex2 = this.getStartIndex();
										splitterNode = sap.firefly.QValueHelpSplitterNode
												.createSplitterNode(this
														.getActionContext(),
														this, 0, startIndex2, 1);
										splitterNode
												.setChildSetState(sap.firefly.ChildSetState.COMPLETE);
										this.m_children.add(splitterNode);
										mySize3 = myChildren2.size();
										for (k = 0; k < mySize3; k++) {
											splitterNode.addChild(myChildren2
													.get(k), childState);
										}
										this.m_splittingSize = this.m_splittingSize
												* sap.firefly.QValueHelpNode.SPLITTER_SIZE;
										size2 = this.m_children.size();
									}
								}
								if (this.m_splittingSize === 1) {
									this.m_children.add(node);
								} else {
									splitterNode2 = this.m_children
											.get(size2 - 1);
									childSetState = splitterNode2
											.getChildSetState();
									if (childSetState === sap.firefly.ChildSetState.INITIAL) {
										splitterNode2
												.setChildSetState(sap.firefly.ChildSetState.COMPLETE);
									}
									aggregatedChildCount2 = splitterNode2
											.getAggregatedChildCount();
									if (aggregatedChildCount2 >= this.m_splittingSize) {
										startIndex3 = splitterNode2
												.getEndIndex() + 1;
										splitterNode2 = sap.firefly.QValueHelpSplitterNode
												.createSplitterNode(this
														.getActionContext(),
														this, 0, startIndex3, 1);
										splitterNode2
												.setChildSetState(sap.firefly.ChildSetState.COMPLETE);
										this.m_children.add(splitterNode2);
									}
									splitterNode2.addChild(node, childState);
								}
							}
						}
						this.m_aggregatedChildCount = this.m_aggregatedChildCount
								+ node.getAggregatedChildCount();
					},
					getStartIndex : function() {
						return 0;
					},
					getEndIndex : function() {
						var startIndex = this.getStartIndex();
						var aggregatedChildCount = this
								.getAggregatedChildCount();
						return (startIndex + aggregatedChildCount) - 1;
					},
					getAggregatedChildCount : function() {
						if ((this.m_children === null)
								&& (this.m_member !== null)) {
							return 1;
						}
						return this.m_aggregatedChildCount;
					},
					getChildSetState : function() {
						return this.m_childSetState;
					},
					setChildSetState : function(state) {
						this.m_childSetState = state;
					},
					callListener : function(extResult, listener, data,
							customIdentifier) {
						var nodes = data;
						listener.onValueHelpFetched(extResult, this, nodes,
								customIdentifier);
					},
					getDisplayLevel : function() {
						return this.m_displayLevel;
					},
					getSelectableElement : function() {
						return this.m_member;
					},
					getFirstText : function() {
						return this.getName();
					},
					getLastText : function() {
						return this.getName();
					},
					getName : function() {
						var name;
						var text;
						var buffer;
						if (this.m_member !== null) {
							name = this.m_member.getName();
							text = this.m_member.getText();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(text)) {
								buffer = sap.firefly.XStringBuffer.create();
								buffer.append(text);
								buffer.append(" [");
								buffer.append(name);
								buffer.append("]");
								return buffer.toString();
							}
							return name;
						} else {
							if (this.m_parentNode === null) {
								return "Root";
							} else {
								return "[undefined]";
							}
						}
					},
					getOsid : function() {
						var buffer;
						if (this.m_osid === null) {
							buffer = sap.firefly.XStringBuffer.create();
							buffer.append(this.getName());
							buffer.append("_");
							buffer.appendInt(this.m_member.getSession()
									.getNextSid());
							this.m_osid = buffer.toString();
						}
						return this.m_osid;
					},
					hasChildren : function() {
						return true;
					},
					getText : function() {
						return this.getName();
					},
					getTagValue : function(tagName) {
						return null;
					},
					getContentElement : function() {
						return this;
					},
					getContentConstant : function() {
						return null;
					},
					getDrillState : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterChangedListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getChildCount : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					cloneOlapComponent : function(context, parent) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer
								.append(sap.firefly.QValueHelpNode.$superclass.toString
										.call(this));
						buffer.appendNewLine();
						buffer.append("Name: ");
						buffer.append(this.getName());
						buffer.appendNewLine();
						buffer.append("Type: ");
						buffer.append(this.getMemberType().getName());
						buffer.appendNewLine();
						buffer.append("ChildState: ");
						buffer.append(this.m_childSetState.getName());
						buffer.appendNewLine();
						buffer.append("DisplayLevel: ");
						buffer.appendInt(this.getDisplayLevel());
						return buffer.toString();
					}
				});
$Firefly.createClass("sap.firefly.PlanningPropertiesObject",
		sap.firefly.QModelComponent, {
			m_properties : null,
			getProperties : function() {
				if (this.m_properties === null) {
					this.m_properties = sap.firefly.XHashMapByString.create();
				}
				return this.m_properties;
			},
			releaseObject : function() {
				if (this.m_properties !== null) {
					this.m_properties.releaseObject();
					this.m_properties = null;
				}
				sap.firefly.PlanningPropertiesObject.$superclass.releaseObject
						.call(this);
			},
			getPropertiesCopy : function() {
				var copy = null;
				if (this.m_properties !== null) {
					copy = this.m_properties.createMapByStringCopy();
				}
				return copy;
			},
			setProperties : function(properties) {
				this.m_properties = properties;
			},
			getPropertyObject : function(propertyName) {
				return this.getProperties().getByKey(propertyName);
			},
			setPropertyObject : function(propertyName, propertyValue) {
				if (propertyValue === null) {
					this.getProperties().remove(propertyName);
				} else {
					this.getProperties().put(propertyName, propertyValue);
				}
			},
			getPropertyString : function(propertyName) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					return null;
				}
				return objectValue.getStringValue();
			},
			setPropertyString : function(propertyName, propertyValue) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					objectValue = sap.firefly.XStringValue
							.create(propertyValue);
					this.getProperties().put(propertyName, objectValue);
				} else {
					objectValue.setStringValue(propertyValue);
				}
			},
			getPropertyBoolean : function(propertyName) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					return false;
				}
				return objectValue.getBooleanValue();
			},
			setPropertyBoolean : function(propertyName, propertyValue) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					objectValue = sap.firefly.XBooleanValue
							.create(propertyValue);
					this.getProperties().put(propertyName, objectValue);
				} else {
					objectValue.setBooleanValue(propertyValue);
				}
			},
			getPropertyInteger : function(propertyName) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					return 0;
				}
				return objectValue.getIntegerValue();
			},
			setPropertyInteger : function(propertyName, propertyValue) {
				var objectValue = this.getPropertyObject(propertyName);
				if (objectValue === null) {
					objectValue = sap.firefly.XIntegerValue
							.create(propertyValue);
					this.getProperties().put(propertyName, objectValue);
				} else {
					objectValue.setIntegerValue(propertyValue);
				}
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningServiceConfig",
				sap.firefly.DfServiceConfigClassic,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.PlanningServiceConfig.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.PlanningServiceConfig);
						}
					},
					m_properties : null,
					setupConfig : function(application) {
						sap.firefly.PlanningServiceConfig.$superclass.setupConfig
								.call(this, application);
						this.m_properties = sap.firefly.XProperties.create();
					},
					releaseObject : function() {
						if (this.m_properties !== null) {
							this.m_properties.releaseObject();
							this.m_properties = null;
						}
						sap.firefly.PlanningServiceConfig.$superclass.releaseObject
								.call(this);
					},
					getProperties : function() {
						return this.m_properties;
					},
					getDataSource : function() {
						var dataSource = sap.firefly.QFactory2.newDataSource();
						var properties = this.getProperties();
						var dataArea;
						if (properties
								.containsKey(sap.firefly.PlanningConstants.PLANNING_MODEL)) {
							dataSource
									.setType(sap.firefly.MetaObjectType.PLANNING_MODEL);
							dataSource
									.setObjectName(properties
											.getStringByName(sap.firefly.PlanningConstants.PLANNING_MODEL));
							if (properties
									.contains(sap.firefly.PlanningConstants.PLANNING_SCHEMA)) {
								dataSource
										.setSchemaName(properties
												.getByKey(sap.firefly.PlanningConstants.PLANNING_SCHEMA));
							}
						} else {
							if (properties
									.contains(sap.firefly.PlanningConstants.MODEL)) {
								dataSource
										.setModelName(sap.firefly.PlanningConstants.MODEL);
							}
							if (properties
									.contains(sap.firefly.PlanningConstants.ENVIRONMENT)) {
								dataSource
										.setEnvironmentName(sap.firefly.PlanningConstants.ENVIRONMENT);
							}
							dataArea = null;
							if (properties
									.contains(sap.firefly.PlanningConstants.DATA_AREA)) {
								dataArea = properties
										.getByKey(sap.firefly.PlanningConstants.DATA_AREA);
							}
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(dataArea)) {
								dataArea = sap.firefly.PlanningConstants.DATA_AREA_DEFAULT;
							}
							dataSource.setDataArea(dataArea);
						}
						return dataSource;
					},
					setDataSourceName : function(dataSourceName) {
						var dataSource = sap.firefly.QFactory2.newDataSource();
						dataSource.setFullQualifiedName(dataSourceName);
						this.setDataSource(dataSource);
					},
					setDataSource : function(dataSource) {
						var properties = this.getProperties();
						var type;
						var planningSchema;
						var planningModel;
						var modelName;
						var environmentName;
						var dataArea;
						properties
								.remove(sap.firefly.PlanningConstants.PLANNING_MODEL);
						properties
								.remove(sap.firefly.PlanningConstants.PLANNING_SCHEMA);
						properties.remove(sap.firefly.PlanningConstants.MODEL);
						properties
								.remove(sap.firefly.PlanningConstants.ENVIRONMENT);
						properties
								.remove(sap.firefly.PlanningConstants.DATA_AREA);
						if (dataSource === null) {
							return;
						}
						type = dataSource.getType();
						if (type === sap.firefly.MetaObjectType.PLANNING_MODEL) {
							planningSchema = dataSource.getSchemaName();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(planningSchema)) {
								properties
										.put(
												sap.firefly.PlanningConstants.PLANNING_SCHEMA,
												planningSchema);
							}
							planningModel = dataSource.getObjectName();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(planningModel)) {
								properties
										.put(
												sap.firefly.PlanningConstants.PLANNING_MODEL,
												planningModel);
							}
						} else {
							if (type === null) {
								modelName = dataSource.getModelName();
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(modelName)) {
									properties
											.setStringByName(
													sap.firefly.PlanningConstants.MODEL,
													modelName);
								}
								environmentName = dataSource
										.getEnvironmentName();
								if (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(environmentName)) {
									properties
											.setStringByName(
													sap.firefly.PlanningConstants.ENVIRONMENT,
													environmentName);
								}
								dataArea = dataSource.getDataArea();
								if (sap.firefly.XStringUtils
										.isNullOrEmpty(dataArea)) {
									dataArea = sap.firefly.PlanningConstants.DATA_AREA_DEFAULT;
								}
								properties
										.setStringByName(
												sap.firefly.PlanningConstants.DATA_AREA,
												dataArea);
							}
						}
					},
					toString : function() {
						var sb;
						var configKeys;
						var i;
						var configKey;
						var configValue;
						if (this.hasErrors()) {
							return this.getSummary();
						}
						sb = sap.firefly.XStringBuffer.create();
						if (this.m_properties !== null) {
							configKeys = this.m_properties
									.getKeysAsReadOnlyListOfString();
							for (i = 0; i < configKeys.size(); i++) {
								configKey = configKeys.get(i);
								configValue = this.m_properties
										.getByKey(configKey);
								sb.append(configKey);
								sb.append("=");
								sb.append(configValue);
								sb.appendNewLine();
							}
						}
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCommandModelComponent",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, planningCommand) {
							var component = new sap.firefly.PlanningCommandModelComponent();
							component.setupModelComponent(context, null);
							component.m_planningCommand = sap.firefly.XWeakReferenceUtil
									.getWeakRef(planningCommand);
							return component;
						}
					},
					m_planningCommand : null,
					getPlanningCommand : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_planningCommand);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.PLANNING_COMMAND;
					},
					getContext : function() {
						return this;
					},
					getFieldAccessorSingle : function() {
						return this.getPlanningCommand();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QAttributeContainer",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, dimension) {
							var object = new sap.firefly.QAttributeContainer();
							object.setupAttributeContainer(context, dimension,
									"Attributes");
							return object;
						}
					},
					m_resultSetAttributes : null,
					m_selectorAttributes : null,
					m_defaultResultSetAttributes : null,
					m_allAttributes : null,
					m_mainAttribute : null,
					cloneOlapComponent : function(context, parent) {
						var clone = sap.firefly.QAttributeContainer.create(
								context, null);
						clone.copyAttributeContainer(this);
						return clone;
					},
					setupAttributeContainer : function(context, dimension, name) {
						this.setupModelComponent(context, dimension);
						this.setName(name);
						this.m_resultSetAttributes = sap.firefly.QAttributeList
								.createAttributeList(this, this, false,
										"Resultset Attributes");
						this.m_selectorAttributes = sap.firefly.QAttributeList
								.createAttributeList(this, this, false,
										"Selector Attribtues");
						this.m_allAttributes = sap.firefly.QAttributeList
								.createAttributeList(this, this, false,
										"All Attributes");
						this.m_defaultResultSetAttributes = sap.firefly.XListWeakRef
								.create();
					},
					copyAttributeContainer : function(origin) {
						var size;
						var i;
						var context;
						var dimension;
						var origAttribute;
						var cloneAttribute;
						var attributeByName;
						this.copyModelComponent(origin);
						size = origin.m_allAttributes.size();
						i = 0;
						context = this.getContext();
						dimension = this.getDimension();
						for (i = 0; i < size; i++) {
							origAttribute = origin.getAttributes().get(i);
							cloneAttribute = sap.firefly.QAttribute
									.createAttribute(context, dimension);
							cloneAttribute.copyAttribute(origAttribute);
							(this.m_allAttributes).addIfNotNull(cloneAttribute);
						}
						(this.m_allAttributes)
								.copyAttributeList(origin.m_allAttributes);
						size = origin.m_resultSetAttributes.size();
						for (i = 0; i < size; i++) {
							(this.m_resultSetAttributes)
									.addIfNotNull(this.m_allAttributes
											.getAttributeByName(origin.m_resultSetAttributes
													.get(i).getName()));
						}
						(this.m_resultSetAttributes)
								.copyAttributeList(origin.m_resultSetAttributes);
						size = origin.m_defaultResultSetAttributes.size();
						for (i = 0; i < size; i++) {
							attributeByName = this.m_allAttributes
									.getAttributeByName(origin.m_defaultResultSetAttributes
											.get(i).getName());
							this.m_defaultResultSetAttributes
									.add(attributeByName);
							(this.m_selectorAttributes)
									.addIfNotNull(attributeByName);
						}
						(this.m_selectorAttributes)
								.copyAttributeList(origin.m_selectorAttributes);
						if (origin.m_mainAttribute !== null) {
							this.m_mainAttribute = this.m_allAttributes
									.getAttributeByName(origin.m_mainAttribute
											.getName());
						}
					},
					releaseObject : function() {
						this.m_resultSetAttributes = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_resultSetAttributes);
						this.m_selectorAttributes = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_selectorAttributes);
						this.m_allAttributes = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_allAttributes);
						this.m_mainAttribute = sap.firefly.XObject
								.releaseIfNotNull(this.m_mainAttribute);
						this.m_defaultResultSetAttributes = sap.firefly.XObject
								.releaseIfNotNull(this.m_defaultResultSetAttributes);
						sap.firefly.QAttributeContainer.$superclass.releaseObject
								.call(this);
					},
					getResultSetAttributes : function() {
						return this.m_resultSetAttributes;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.ATTRIBUTE_CONTAINER;
					},
					getAttributesExt : function(context) {
						if (context === sap.firefly.QContextType.RESULT_SET) {
							return this.getResultSetAttributes();
						}
						return this.getSelectorAttributes();
					},
					getSelectorAttributes : function() {
						return this.m_selectorAttributes;
					},
					getMainAttribute : function() {
						return this.m_mainAttribute;
					},
					setMainAttribute : function(mainAttribute) {
						this.m_mainAttribute = mainAttribute;
					},
					getAttributes : function() {
						return this.m_allAttributes;
					},
					getAttributeByName : function(name) {
						return this.m_allAttributes.getAttributeByName(name);
					},
					getDimension : function() {
						return this.getParentComponent();
					},
					addAttribute : function(attribute) {
						this.m_allAttributes.add(attribute);
					},
					addAttributeInternal : function(attribute) {
						(this.m_allAttributes).addInternal(attribute);
					},
					notifyChildChanged : function(changedNodes) {
						var dimension;
						var size;
						var i;
						var next;
						this.queueEventing();
						sap.firefly.QAttributeContainer.$superclass.notifyChildChanged
								.call(this, changedNodes);
						dimension = this.getDimension();
						size = changedNodes.size();
						for (i = 0; i < size; i++) {
							next = changedNodes.get(i);
							if (next === this.m_selectorAttributes) {
								dimension
										.setSelectorFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED);
							} else {
								if (next === this.m_resultSetAttributes) {
									dimension
											.setFieldLayoutType(sap.firefly.FieldLayoutType.ATTRIBUTE_BASED);
								}
							}
						}
						this.resumeEventing();
					},
					isComponentNode : function() {
						return true;
					},
					getNamedChildren : function() {
						var map = sap.firefly.XHashMapByString.create();
						map.put("AllAttributes", this.m_allAttributes);
						map.put("ResultSetAttributes",
								this.m_resultSetAttributes);
						map
								.put("SelectorAttributes",
										this.m_selectorAttributes);
						map.put("MainAttribute", this.m_mainAttribute);
						return map;
					},
					addDefaultResultSetAttribute : function(attribute) {
						this.m_defaultResultSetAttributes.add(attribute);
					},
					getDefaultResultSetAttributes : function() {
						return this.m_defaultResultSetAttributes;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						var otherAttributes = otherObj.getResultSetAttributes();
						var i;
						var otherAttribute;
						var attributeName;
						var attribute;
						this.m_resultSetAttributes.clear();
						for (i = 0; i < otherAttributes.size(); i++) {
							otherAttribute = otherAttributes.get(i);
							attributeName = otherAttribute.getName();
							attribute = this.getAttributeByName(attributeName);
							this.m_resultSetAttributes.add(attribute);
							attribute.mergeDeepRecursive(settings,
									otherAttribute);
						}
					}
				});
$Firefly.createClass("sap.firefly.QAxesManager", sap.firefly.QModelComponent,
		{
			$statics : {
				create : function(context, queryModel) {
					var newObj = new sap.firefly.QAxesManager();
					newObj.setupAxesManager(context, queryModel);
					return newObj;
				}
			},
			m_axisRows : null,
			m_axisColumns : null,
			m_axisFree : null,
			m_axisDynamic : null,
			m_axisFilter : null,
			m_axisRepository : null,
			copyAxesManager : function(origin) {
				sap.firefly.QAxesManager.$superclass.copyModelComponent.call(
						this, origin);
				(this.m_axisRows).copyAxis(origin.m_axisRows);
				(this.m_axisColumns).copyAxis(origin.m_axisColumns);
				(this.m_axisFree).copyAxis(origin.m_axisFree);
				(this.m_axisDynamic).copyAxis(origin.m_axisDynamic);
				(this.m_axisFilter).copyAxis(origin.m_axisFilter);
				(this.m_axisRepository).copyAxis(origin.m_axisRepository);
			},
			setupAxesManager : function(context, queryModel) {
				this.setupModelComponent(context, queryModel);
				this.m_axisRepository = sap.firefly.QAxis.createAxis(context,
						this, sap.firefly.AxisType.REPOSITORY);
				this.m_axisColumns = sap.firefly.QAxis.createAxis(context,
						this, sap.firefly.AxisType.COLUMNS);
				this.m_axisRows = sap.firefly.QAxis.createAxis(context, this,
						sap.firefly.AxisType.ROWS);
				this.m_axisFree = sap.firefly.QAxis.createAxis(context, this,
						sap.firefly.AxisType.FREE);
				this.m_axisDynamic = sap.firefly.QAxis.createAxis(context,
						this, sap.firefly.AxisType.DYNAMIC);
				this.m_axisFilter = sap.firefly.QAxis.createAxis(context, this,
						sap.firefly.AxisType.FILTER);
			},
			getOlapComponentType : function() {
				return sap.firefly.OlapComponentType.AXES_MANAGER;
			},
			releaseObject : function() {
				this.m_axisColumns = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisColumns);
				this.m_axisDynamic = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisDynamic);
				this.m_axisFilter = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisFilter);
				this.m_axisFree = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisFree);
				this.m_axisRepository = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisRepository);
				this.m_axisRows = sap.firefly.XObject
						.releaseIfNotNull(this.m_axisRows);
				sap.firefly.QAxesManager.$superclass.releaseObject.call(this);
			},
			getDynamicAxis : function() {
				return this.m_axisDynamic;
			},
			getColumnsAxis : function() {
				return this.m_axisColumns;
			},
			getRowsAxis : function() {
				return this.m_axisRows;
			},
			getFreeAxis : function() {
				return this.m_axisFree;
			},
			getRepositoryAxis : function() {
				return this.m_axisRepository;
			},
			getFilterAxis : function() {
				return this.m_axisFilter;
			},
			getAxis : function(axis) {
				return this.getAxisBase(axis);
			},
			getFormatAxis : function() {
				return this.getColumnsAxis();
			},
			getAxisBase : function(axis) {
				if (axis === sap.firefly.AxisType.COLUMNS) {
					return this.m_axisColumns;
				} else {
					if (axis === sap.firefly.AxisType.ROWS) {
						return this.m_axisRows;
					} else {
						if (axis === sap.firefly.AxisType.FREE) {
							return this.m_axisFree;
						} else {
							if (axis === sap.firefly.AxisType.REPOSITORY) {
								return this.m_axisRepository;
							} else {
								if (axis === sap.firefly.AxisType.DYNAMIC) {
									return this.m_axisDynamic;
								} else {
									if (axis === sap.firefly.AxisType.FILTER) {
										return this.m_axisFilter;
									}
								}
							}
						}
					}
				}
				return null;
			},
			getNamedChildren : function() {
				var map = sap.firefly.XHashMapByString.create();
				map.put("RowsAxis", this.m_axisRows);
				map.put("ColumnsAxis", this.m_axisColumns);
				map.put("FreeAxis", this.m_axisFree);
				map.put("DynamicAxis", this.m_axisDynamic);
				map.put("FilterAxis", this.m_axisFilter);
				map.put("RepositoryAxis", this.m_axisRepository);
				return map;
			}
		});
$Firefly.createClass("sap.firefly.OlapCatalogProxyGroup",
		sap.firefly.OlapCatalogProxy, {
			$statics : {
				createGroup : function(parent) {
					var newObj = new sap.firefly.OlapCatalogProxyGroup();
					newObj.setupProxy(parent, null, null);
					newObj.m_groupChildren = sap.firefly.XList.create();
					return newObj;
				}
			},
			m_groupChildren : null,
			isNode : function() {
				return true;
			},
			getChildSetState : function() {
				return sap.firefly.ChildSetState.COMPLETE;
			},
			hasChildren : function() {
				return this.m_groupChildren.hasElements();
			},
			getChildElements : function() {
				return this.m_groupChildren;
			},
			add : function(element) {
				this.m_groupChildren.add(element);
			},
			sort : function() {
				var comparator = sap.firefly.XComparatorName.create();
				this.m_groupChildren.sortByComparator(comparator);
			},
			getComponentType : function() {
				return sap.firefly.OlapComponentType.GROUP_BY_NODE;
			},
			getTagValue : function(tagName) {
				return null;
			},
			getContentElement : function() {
				return this;
			},
			getContentConstant : function() {
				return null;
			},
			processChildFetch : function(syncType, listener, customIdentifier) {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			}
		});
$Firefly.createClass("sap.firefly.OlapCatalogProxyPackage",
		sap.firefly.OlapCatalogProxy, {
			newProxy : function(parent, element, groupByTag) {
				var newObj = new sap.firefly.OlapCatalogProxyPackage();
				newObj.setupProxy(parent, element, groupByTag);
				return newObj;
			},
			setupProxy : function(parent, element, groupByTag) {
				sap.firefly.OlapCatalogProxyPackage.$superclass.setupProxy
						.call(this, parent, element, groupByTag);
				this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
			},
			isNode : function() {
				return true;
			},
			getPackage : function() {
				return this.getOriginElement().getName();
			},
			processSynchronization : function(syncType) {
				var olapCatalogManager = this.getOlapCatalogManager();
				var extResult = olapCatalogManager.getAllObjects(this
						.getMetaObjectType(), this.getSchema(), this
						.getPackage());
				this.addAllMessages(extResult);
				if (this.isValid()) {
					this.fillChildren(extResult.getData());
				}
				return false;
			}
		});
$Firefly.createClass("sap.firefly.OlapCatalogProxyQueryObj",
		sap.firefly.OlapCatalogProxy, {
			m_identifier : null,
			newProxy : function(parent, element, groupByTag) {
				var newObj = new sap.firefly.OlapCatalogProxyQueryObj();
				newObj.setupProxy(parent, element, groupByTag);
				return newObj;
			},
			setupProxy : function(parent, element, groupByTag) {
				sap.firefly.OlapCatalogProxyQueryObj.$superclass.setupProxy
						.call(this, parent, element, groupByTag);
				this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
				this.m_identifier = sap.firefly.QFactory2.newDataSource();
				this.m_identifier.setType(this.getMetaObjectType());
				this.m_identifier.setSchemaName(this.getSchema());
				this.m_identifier.setPackageName(this.getPackage());
				this.m_identifier.setName(this.getObjectName());
			},
			isNode : function() {
				return true;
			},
			getObjectName : function() {
				return this.getOriginElement().getName();
			},
			getDataSource : function() {
				return this.m_identifier;
			},
			processSynchronization : function(syncType) {
				var application = this.getApplication();
				var queryServiceConfig = sap.firefly.QueryServiceConfig
						.create(application);
				queryServiceConfig.setSystemName(this.getSystemDescription()
						.getName());
				queryServiceConfig.setDataSource(this.m_identifier);
				queryServiceConfig.processQueryManagerCreation(
						sap.firefly.SyncType.NON_BLOCKING, this, null);
				return true;
			},
			onQueryManagerCreated : function(extResult, queryManager,
					customIdentifier) {
				var list;
				var queryModel;
				this.addAllMessages(extResult);
				if (extResult.isValid()) {
					list = sap.firefly.XList.create();
					queryModel = queryManager.getQueryModel();
					list.add(queryModel);
					this.fillChildren(list);
				}
				this.endSync();
			}
		});
$Firefly.createClass("sap.firefly.OlapCatalogProxySchema",
		sap.firefly.OlapCatalogProxy, {
			newProxy : function(parent, element, groupByTag) {
				var newObj = new sap.firefly.OlapCatalogProxySchema();
				newObj.setupProxy(parent, element, groupByTag);
				return newObj;
			},
			setupProxy : function(parent, element, groupByTag) {
				sap.firefly.OlapCatalogProxySchema.$superclass.setupProxy.call(
						this, parent, element, groupByTag);
				this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
			},
			isNode : function() {
				return true;
			},
			getSchema : function() {
				return this.getOriginElement().getName();
			},
			processSynchronization : function(syncType) {
				var olapCatalogManager = this.getOlapCatalogManager();
				var extResult = olapCatalogManager.getAllPackages(this
						.getMetaObjectType(), this.getSchema());
				this.addAllMessages(extResult);
				if (this.isValid()) {
					this.fillChildren(extResult.getData());
				}
				return false;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.OlapCatalogProxySystem",
				sap.firefly.OlapCatalogProxy,
				{
					m_systemDescription : null,
					m_olapCatalogManager : null,
					newProxy : function(parent, element, groupByTag) {
						var newObj = new sap.firefly.OlapCatalogProxySystem();
						newObj.setupProxy(parent, element, groupByTag);
						return newObj;
					},
					setupProxy : function(parent, element, groupByTag) {
						sap.firefly.OlapCatalogProxySystem.$superclass.setupProxy
								.call(this, parent, element, groupByTag);
						this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
						this.m_systemDescription = element;
					},
					isNode : function() {
						return true;
					},
					processSynchronization : function(syncType) {
						var application = this.m_systemDescription
								.getApplication();
						var serviceConfig = sap.firefly.OlapApiModule.SERVICE_TYPE_OLAP_CATALOG
								.createServiceConfig(application);
						serviceConfig.setSystemName(this.m_systemDescription
								.getName());
						serviceConfig.processOlapCatalogManagerCreation(this
								.getActiveSyncType(), this, null);
						return true;
					},
					onOlapCatalogManagerCreated : function(extResult,
							olapCatalogManager, customIdentifier) {
						var extResult2;
						var elements;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							this.m_olapCatalogManager = olapCatalogManager;
							extResult2 = olapCatalogManager.getAllTypes();
							this.addAllMessages(extResult2);
							if (extResult2.isValid()) {
								elements = extResult2.getData();
								this.fillChildren(elements);
							}
							this.endSync();
						} else {
							this.endSync();
						}
					},
					onOlapCatalogResult : function(extResult, result,
							customIdentifier) {
						var objectsList;
						var list;
						this.addAllMessages(extResult);
						if (extResult.isValid()) {
							objectsList = result.getObjectsList();
							list = sap.firefly.XReadOnlyListWrapper
									.create(objectsList);
							this.fillChildren(list);
						}
						this.endSync();
					},
					getSystemDescription : function() {
						return this.m_systemDescription;
					},
					getOlapCatalogManager : function() {
						return this.m_olapCatalogManager;
					}
				});
$Firefly.createClass("sap.firefly.OlapCatalogProxyType",
		sap.firefly.OlapCatalogProxy, {
			m_metaObjectType : null,
			newProxy : function(parent, element, groupByTag) {
				var newObj = new sap.firefly.OlapCatalogProxyType();
				newObj.setupProxy(parent, element, groupByTag);
				return newObj;
			},
			setupProxy : function(parent, element, groupByTag) {
				sap.firefly.OlapCatalogProxyType.$superclass.setupProxy.call(
						this, parent, element, groupByTag);
				this.m_childSetState = sap.firefly.ChildSetState.INITIAL;
				this.m_metaObjectType = element.getContentConstant();
			},
			isNode : function() {
				return true;
			},
			processSynchronization : function(syncType) {
				var olapCatalogManager = this.getOlapCatalogManager();
				var extResult = olapCatalogManager
						.getAllSchemas(this.m_metaObjectType);
				this.addAllMessages(extResult);
				if (this.isValid()) {
					this.fillChildren(extResult.getData());
				}
				return false;
			},
			getMetaObjectType : function() {
				return this.m_metaObjectType;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QModelComponentNode",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createNode : function(context, modelComponent, name) {
							var object = new sap.firefly.QModelComponentNode();
							var list = sap.firefly.XList.create();
							list.add(modelComponent);
							object.setupModelComponentNode(context, list, name,
									true);
							return object;
						},
						createNodeWithList : function(context,
								modelComponentList, name) {
							var object = new sap.firefly.QModelComponentNode();
							object.setupModelComponentNode(context,
									modelComponentList, name, true);
							return object;
						},
						createLeave : function(context, name) {
							var object = new sap.firefly.QModelComponentNode();
							object.setupModelComponentNode(context, null, name,
									false);
							return object;
						}
					},
					m_modelComponentList : null,
					m_isComponentNode : false,
					setupModelComponentNode : function(context,
							modelComponentList, name, isComponentNode) {
						this.setupModelComponent(context, this);
						this.setName(name);
						this.m_modelComponentList = modelComponentList;
						this.m_isComponentNode = isComponentNode;
					},
					releaseObject : function() {
						this.m_modelComponentList = null;
						sap.firefly.QModelComponentNode.$superclass.releaseObject
								.call(this);
					},
					isComponentNode : function() {
						return this.m_isComponentNode;
					},
					getIndexedChildren : function() {
						return this.m_modelComponentList.getIterator();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QCondition",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, conditionManager,
								technicalName, isBackendCondition) {
							var newObj;
							if (technicalName === null) {
								return null;
							}
							newObj = new sap.firefly.QCondition();
							newObj.setupCondition(context, conditionManager,
									technicalName, isBackendCondition);
							return newObj;
						}
					},
					m_isActive : false,
					m_isBackendCondition : false,
					m_description : null,
					m_onDisabled : null,
					m_dimensionEvaluationType : null,
					m_evaluationDimensions : null,
					m_conditionThresholds : null,
					m_breakGroupDimensions : null,
					m_breakGroup : false,
					m_autoGroup : false,
					copyCondition : function(origin) {
						var size;
						var queryModel;
						var i;
						var origEvalDimension;
						var originThreshold;
						var cloneThreshold;
						var origBreakGroupDimension;
						this.copyModelComponent(origin);
						this.m_isActive = origin.m_isActive;
						this.m_description = origin.m_description;
						this.m_onDisabled = origin.m_onDisabled;
						this.m_dimensionEvaluationType = origin.m_dimensionEvaluationType;
						this.m_isBackendCondition = origin.m_isBackendCondition;
						size = origin.m_evaluationDimensions.size();
						queryModel = this.getQueryModel();
						for (i = 0; i < size; i++) {
							origEvalDimension = origin.m_evaluationDimensions
									.get(i);
							this.m_evaluationDimensions.add(queryModel
									.getDimensionByName(origEvalDimension
											.getName()));
						}
						size = origin.m_conditionThresholds.size();
						for (i = 0; i < size; i++) {
							originThreshold = origin.m_conditionThresholds
									.get(i);
							cloneThreshold = this.createThreshold();
							cloneThreshold
									.copyConditionThreshold(originThreshold);
						}
						this.m_autoGroup = origin.m_autoGroup;
						this.m_breakGroup = origin.m_breakGroup;
						size = origin.m_breakGroupDimensions.size();
						for (i = 0; i < size; i++) {
							origBreakGroupDimension = origin.m_breakGroupDimensions
									.get(i);
							this.m_breakGroupDimensions.add(queryModel
									.getDimensionByName(origBreakGroupDimension
											.getName()));
						}
					},
					setupCondition : function(context, conditionManager,
							technicalName, isBackendCondition) {
						this.setupModelComponent(context, conditionManager);
						this.setName(technicalName);
						this.setOnDisabledToWarning();
						this.m_isActive = true;
						this.m_isBackendCondition = isBackendCondition;
						this.m_conditionThresholds = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, false,
										"ThresholdList");
						this.m_evaluationDimensions = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, false,
										"EvaluationDimensionList");
						this.m_breakGroupDimensions = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, false,
										"BreakGroupDimensionList");
					},
					setParent : function(parent) {
						var context;
						if (parent !== null) {
							context = parent.getContext();
							this.m_evaluationDimensions.setContext(context);
							this.m_conditionThresholds.setContext(context);
							this.m_breakGroupDimensions.setContext(context);
						}
						sap.firefly.QCondition.$superclass.setParent.call(this,
								parent);
					},
					isActive : function() {
						return this.m_isActive;
					},
					setActive : function(active) {
						if (this.m_isActive !== active) {
							this.m_isActive = active;
							this.notifyNodeChanged();
						}
					},
					getDescription : function() {
						return this.m_description;
					},
					setDescription : function(description) {
						if (sap.firefly.XString.isEqual(this.m_description,
								description) === false) {
							this.m_description = description;
							this.notifyNodeChanged();
						}
					},
					getConditionName : function() {
						return this.getName();
					},
					getDimensionEvaluationType : function() {
						return this.m_dimensionEvaluationType;
					},
					setDimensionEvaluationType : function(
							dimensionEvalutationType) {
						if ((this.m_dimensionEvaluationType === dimensionEvalutationType) === false) {
							this.m_dimensionEvaluationType = dimensionEvalutationType;
							this.notifyNodeChanged();
						}
					},
					getEvaluationDimensions : function() {
						return this.m_evaluationDimensions;
					},
					addEvaluationDimension : function(dimension) {
						this.m_evaluationDimensions.add(dimension);
					},
					removeEvaluationDimension : function(dimension) {
						this.m_evaluationDimensions.removeElement(dimension);
					},
					getThresholds : function() {
						return this.m_conditionThresholds;
					},
					addThreshold : function(threshold) {
						if (threshold !== null) {
							(threshold).setParent(this);
							this.m_conditionThresholds.add(threshold);
							if (threshold.isValid()) {
								this.notifyNodeChanged();
							}
						}
					},
					removeThreshold : function(threshold) {
						if (threshold !== null) {
							(threshold).setParent(null);
							this.m_conditionThresholds.removeElement(threshold);
							if (threshold.isValid()) {
								this.notifyNodeChanged();
							}
						}
					},
					getConditionManager : function() {
						return this.getParentComponent();
					},
					createThreshold : function() {
						var newThreshold = sap.firefly.QConditionThreshold
								.create(this.getContext(), this);
						this.addThreshold(newThreshold);
						return newThreshold;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITION;
					},
					isValid : function() {
						if (this.getDimensionEvaluationType() === null) {
							return false;
						}
						if ((this.getDimensionEvaluationType() === sap.firefly.ConditionDimensionEvaluationType.GIVEN_LIST)
								&& this.getEvaluationDimensions().isEmpty()) {
							return false;
						}
						return true;
					},
					releaseObject : function() {
						this.m_description = null;
						this.m_dimensionEvaluationType = null;
						this.m_evaluationDimensions = sap.firefly.XObject
								.releaseIfNotNull(this.m_evaluationDimensions);
						this.m_breakGroupDimensions = sap.firefly.XObject
								.releaseIfNotNull(this.m_breakGroupDimensions);
						this.m_conditionThresholds = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_conditionThresholds);
						sap.firefly.QCondition.$superclass.releaseObject
								.call(this);
					},
					setConditionName : function(conditionName) {
						if ((conditionName === null)
								|| (this.getConditionManager()
										.getConditionByName(conditionName) !== null)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						if (sap.firefly.XString.isEqual(this.getName(),
								conditionName)) {
							return;
						}
						this.setName(conditionName);
					},
					isChangeable : function() {
						return this.isUserCondition();
					},
					isBackendCondition : function() {
						return this.m_isBackendCondition;
					},
					isUserCondition : function() {
						return this.isBackendCondition() === false;
					},
					addBreakGroupDimension : function(dimension) {
						this.m_breakGroupDimensions.add(dimension);
					},
					removeBreakGroupDimension : function(dimension) {
						this.m_breakGroupDimensions.removeElement(dimension);
					},
					getBreakGroupDimensions : function() {
						return this.m_breakGroupDimensions;
					},
					setBreakGroup : function(breakGroup) {
						this.m_breakGroup = breakGroup;
					},
					isBreakGroup : function() {
						return this.m_breakGroup;
					},
					setAutoGroup : function(autoGroup) {
						this.m_autoGroup = autoGroup;
					},
					isAutoGroup : function() {
						return this.m_autoGroup;
					},
					getOnDisabled : function() {
						return this.m_onDisabled;
					},
					setOnDisabledToWarning : function() {
						this.m_onDisabled = sap.firefly.InAConstants.VA_CONDITIONS_ON_DISABLED_WARNING;
					},
					setOnDisabledToError : function() {
						this.m_onDisabled = sap.firefly.InAConstants.VA_CONDITIONS_ON_DISABLED_ERROR;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QConditionThreshold",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, parentCondition) {
							var newObj = new sap.firefly.QConditionThreshold();
							newObj.setupThreshold(context, parentCondition,
									"Threshold");
							return newObj;
						}
					},
					m_firstValue : null,
					m_firstValueIs : null,
					m_secondValue : null,
					m_secondValueIs : null,
					m_measureCoordinates : null,
					m_conditionComparisonOperator : null,
					m_hierarchyLevel : null,
					m_leavesOnly : false,
					copyConditionThreshold : function(origin) {
						var queryModel;
						var size;
						var i;
						var origMember;
						var cloneMember;
						this.copyModelComponent(origin);
						if (origin.m_firstValue !== null) {
							(this.getLow()).copyFilterValueBag(origin.getLow());
						}
						if (origin.m_firstValueIs !== null) {
							(this.getLowIs()).copyFilterValueBag(origin
									.getLowIs());
						}
						if (origin.m_secondValue !== null) {
							(this.getHigh()).copyFilterValueBag(origin
									.getHigh());
						}
						if (origin.m_secondValueIs !== null) {
							(this.getHighIs()).copyFilterValueBag(origin
									.getHighIs());
						}
						queryModel = this.getQueryModel();
						size = origin.m_measureCoordinates.size();
						for (i = 0; i < size; i++) {
							origMember = origin.m_measureCoordinates.get(i);
							cloneMember = queryModel.getDimensionByName(
									origMember.getDimension().getName())
									.getDimensionMember(origMember.getName(),
											false);
							cloneMember.copyDimensionMember(origMember);
							this.m_measureCoordinates.add(cloneMember);
						}
						if (origin.m_hierarchyLevel !== null) {
							this.m_hierarchyLevel = sap.firefly.XIntegerValue
									.create(origin.m_hierarchyLevel
											.getIntegerValue());
						}
						this.m_leavesOnly = origin.m_leavesOnly;
						this.m_conditionComparisonOperator = origin.m_conditionComparisonOperator;
					},
					setupThreshold : function(context, parentCondition,
							modelComponentName) {
						this.setupModelComponent(context, parentCondition);
						this.setName(modelComponentName);
						this.m_conditionComparisonOperator = sap.firefly.ConditionComparisonOperator.EQUAL;
						this.m_measureCoordinates = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, false,
										"MeasureCoordinates");
					},
					setParent : function(parent) {
						if (parent !== null) {
							this.m_measureCoordinates.setContext(parent
									.getContext());
						}
						sap.firefly.QConditionThreshold.$superclass.setParent
								.call(this, parent);
					},
					getMeasureCoordinates : function() {
						return this.m_measureCoordinates;
					},
					addMeasureCoordinate : function(dimensionMember) {
						if (dimensionMember !== null) {
							this.m_measureCoordinates.add(dimensionMember);
							this.notifyNodeChanged();
						}
					},
					removeMeasureCoordinate : function(dimensionMember) {
						if (dimensionMember !== null) {
							this.m_measureCoordinates
									.removeElement(dimensionMember);
							this.notifyNodeChanged();
						}
					},
					getLow : function() {
						if (this.m_firstValue === null) {
							this.m_firstValue = sap.firefly.QFilterValueBag
									._create(this.getContext(), null, this,
											false);
						}
						return this.m_firstValue;
					},
					getLowIs : function() {
						if (this.m_firstValueIs === null) {
							this.m_firstValueIs = sap.firefly.QFilterValueBag
									._create(this.getContext(), null, this,
											false);
						}
						return this.m_firstValueIs;
					},
					getHigh : function() {
						if (this.m_secondValue === null) {
							this.m_secondValue = sap.firefly.QFilterValueBag
									._create(this.getContext(), null, this,
											false);
						}
						return this.m_secondValue;
					},
					getHighIs : function() {
						if (this.m_secondValueIs === null) {
							this.m_secondValueIs = sap.firefly.QFilterValueBag
									._create(this.getContext(), null, this,
											false);
						}
						return this.m_secondValueIs;
					},
					getComparisonOperator : function() {
						if (this.m_conditionComparisonOperator === null) {
							this.m_conditionComparisonOperator = sap.firefly.ConditionComparisonOperator.EQUAL;
						}
						return this.m_conditionComparisonOperator;
					},
					setComparisonOperator : function(
							conditionComparisonOperator) {
						if (this.m_conditionComparisonOperator !== conditionComparisonOperator) {
							this.m_conditionComparisonOperator = conditionComparisonOperator;
							this.notifyNodeChanged();
						}
					},
					isValid : function() {
						if ((this.getLow().getValue() !== null)
								&& (this.getMeasureCoordinates().size() >= 1)) {
							return true;
						}
						return false;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITIONS_THRESHOLD;
					},
					releaseObject : function() {
						this.m_firstValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_firstValue);
						this.m_firstValueIs = sap.firefly.XObject
								.releaseIfNotNull(this.m_firstValueIs);
						this.m_secondValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_secondValue);
						this.m_secondValueIs = sap.firefly.XObject
								.releaseIfNotNull(this.m_secondValueIs);
						this.m_measureCoordinates = sap.firefly.XObject
								.releaseIfNotNull(this.m_measureCoordinates);
						this.m_hierarchyLevel = sap.firefly.XObject
								.releaseIfNotNull(this.m_hierarchyLevel);
						this.m_conditionComparisonOperator = null;
						sap.firefly.QConditionThreshold.$superclass.releaseObject
								.call(this);
					},
					setLeavesOnly : function(leavesOnly) {
						if (this.m_leavesOnly !== leavesOnly) {
							this.m_leavesOnly = leavesOnly;
							this.notifyNodeChanged();
						}
					},
					isLeavesOnly : function() {
						return this.m_leavesOnly;
					},
					setLevel : function(level) {
						var newLevelValue;
						if (level === null) {
							if (this.m_hierarchyLevel !== null) {
								this.m_hierarchyLevel.releaseObject();
								this.m_hierarchyLevel = null;
								this.notifyNodeChanged();
							}
						} else {
							newLevelValue = level.getIntegerValue();
							if (this.m_hierarchyLevel === null) {
								this.m_hierarchyLevel = sap.firefly.XIntegerValue
										.create(newLevelValue);
								this.notifyNodeChanged();
							} else {
								if (this.m_hierarchyLevel.getIntegerValue() !== newLevelValue) {
									this.m_hierarchyLevel
											.setIntegerValue(newLevelValue);
									this.notifyNodeChanged();
								}
							}
						}
					},
					getLevel : function() {
						return this.m_hierarchyLevel;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDataCell",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(application, context, parentNode,
								dataCellList, name) {
							return sap.firefly.QDataCell._create(context,
									parentNode, dataCellList, name);
						},
						_create : function(context, parentNode, dataCellList,
								name) {
							var cell = new sap.firefly.QDataCell();
							cell.setupDataCell(context, parentNode,
									dataCellList, name);
							return cell;
						}
					},
					m_queryCellName : null,
					m_disaggMode : null,
					m_disaggRefCellName : null,
					m_cumulation : false,
					m_emphasized : false,
					m_inputEnabled : false,
					m_signReversal : false,
					m_decimalPlaces : 0,
					m_scalingFactor : 0,
					m_queryDataCellList : null,
					m_baseCellValueType : null,
					m_dimensionReference : null,
					m_structureMember1 : null,
					m_structureMember2 : null,
					copyDataCell : function(origin) {
						this.copyModelComponent(origin);
						this.m_disaggMode = origin.m_disaggMode;
						this.m_disaggRefCellName = origin.m_disaggRefCellName;
						this.m_cumulation = origin.m_cumulation;
						this.m_emphasized = origin.m_emphasized;
						this.m_inputEnabled = origin.m_inputEnabled;
						this.m_signReversal = origin.m_signReversal;
						this.m_decimalPlaces = origin.m_decimalPlaces;
						this.m_scalingFactor = origin.m_scalingFactor;
						this.m_baseCellValueType = origin.m_baseCellValueType;
						if (origin.m_dimensionReference !== null) {
							this.setDimensionReference(this.getQueryModel()
									.getDimensionByName(
											origin.getDimensionReference()
													.getName()));
						}
						this.m_structureMember1 = origin.m_structureMember1;
						this.m_structureMember2 = origin.m_structureMember2;
					},
					setupDataCell : function(context, parentNode, dataCellList,
							name) {
						this.setupModelComponent(context, parentNode);
						this.setQueryCellName(name);
						this.m_queryDataCellList = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dataCellList);
						this.m_baseCellValueType = null;
						this.m_decimalPlaces = -1;
						this.m_scalingFactor = 0;
					},
					releaseObject : function() {
						this.m_queryCellName = null;
						this.m_disaggMode = null;
						this.m_disaggRefCellName = null;
						this.m_queryDataCellList = sap.firefly.XObject
								.releaseIfNotNull(this.m_queryDataCellList);
						this.m_baseCellValueType = null;
						this.m_dimensionReference = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimensionReference);
						this.m_structureMember1 = null;
						this.m_structureMember2 = null;
						sap.firefly.QDataCell.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_CELL;
					},
					getText : function() {
						return this.m_queryCellName;
					},
					setQueryCellName : function(name) {
						this.m_queryCellName = name;
					},
					setBaseCellValueType : function(cellValueType) {
						this.m_baseCellValueType = cellValueType;
					},
					setDimensionReference : function(dimensionReference) {
						this.m_dimensionReference = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimensionReference);
					},
					getDimensionReference : function() {
						if (this.m_dimensionReference === null) {
							return null;
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimensionReference);
					},
					isInputEnabled : function() {
						return this.m_inputEnabled;
					},
					setInputEnabled : function(enabled) {
						this.m_inputEnabled = enabled;
					},
					setDisaggregationMode : function(mode) {
						if (this.m_disaggMode !== mode) {
							this.m_disaggMode = mode;
							this.notifyNodeChanged();
						}
					},
					setDisaggregationRefCell : function(cell) {
						if (cell === null) {
							if (this.m_disaggRefCellName !== null) {
								this.notifyNodeChanged();
							}
							this.m_disaggRefCellName = null;
						} else {
							if ((this.m_disaggRefCellName === null)
									|| (this.getDisaggregationRefCell() !== cell)) {
								this.m_disaggRefCellName = cell.getName();
								this.notifyNodeChanged();
							}
						}
					},
					getDisaggregationRefCell : function() {
						var refCellName = this.getDisaggregationRefCellName();
						var dataCellList = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryDataCellList);
						return dataCellList.getByKey(refCellName);
					},
					getDisaggregationMode : function() {
						var dataCellEntry = this.getDataCellEntry(false);
						var entryDisaggregationMode;
						if (dataCellEntry !== null) {
							entryDisaggregationMode = dataCellEntry
									.getDisaggregationMode();
							if (entryDisaggregationMode !== null) {
								return entryDisaggregationMode;
							}
						}
						return this.m_disaggMode;
					},
					setDisaggregationRefCellName : function(name) {
						this.m_disaggRefCellName = name;
					},
					getDisaggregationRefCellName : function() {
						var dataCellEntry = this.getDataCellEntry(false);
						var entryRefCellName;
						if (dataCellEntry !== null) {
							entryRefCellName = dataCellEntry
									.getDisaggregationRefCellName();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(entryRefCellName)) {
								return entryRefCellName;
							}
						}
						return this.m_disaggRefCellName;
					},
					getDataCellEntry : function(createIfNotExisting) {
						var queryModel = this.getQueryModel();
						var queryManager;
						var resultSetContainer;
						var syncState;
						var dataEntries;
						if (queryModel === null) {
							return null;
						}
						queryManager = queryModel.getQueryManager();
						if (queryManager === null) {
							return null;
						}
						resultSetContainer = queryManager
								.getActiveResultSetContainer();
						if (resultSetContainer === null) {
							return null;
						}
						syncState = resultSetContainer.getSyncState();
						if (syncState !== sap.firefly.SyncState.IN_SYNC) {
							return null;
						}
						dataEntries = resultSetContainer
								.getDataEntryCollection();
						if (dataEntries === null) {
							return null;
						}
						if (createIfNotExisting) {
							return dataEntries.getDataCellEntry(this.getName());
						}
						return dataEntries.getDataCellEntryIfExisting(this
								.getName());
					},
					setDisaggregationModeForDataEntry : function(mode) {
						var dataCellEntry = this.getDataCellEntry(true);
						if (dataCellEntry === null) {
							return;
						}
						dataCellEntry.setDisaggregationMode(mode);
					},
					setDisaggregationRefCellForDataEntry : function(cell) {
						var dataCellEntry = this.getDataCellEntry(true);
						var refCellName;
						if (dataCellEntry === null) {
							return;
						}
						refCellName = null;
						if (cell !== null) {
							refCellName = cell.getName();
						}
						dataCellEntry.setDisaggregationRefCellName(refCellName);
					},
					getName : function() {
						return this.m_queryCellName;
					},
					getDecimalPlaces : function() {
						return this.m_decimalPlaces;
					},
					setDecimalPlaces : function(places) {
						if (this.m_decimalPlaces !== places) {
							this.m_decimalPlaces = places;
							this.notifyNodeChanged();
						}
					},
					getScalingFactor : function() {
						return this.m_scalingFactor;
					},
					setScalingFactor : function(factor) {
						if (this.m_scalingFactor !== factor) {
							this.m_scalingFactor = factor;
							this.notifyNodeChanged();
						}
					},
					hasSignReversal : function() {
						return this.m_signReversal;
					},
					setSignReversal : function(reverse) {
						if (this.m_signReversal !== reverse) {
							this.m_signReversal = reverse;
							this.notifyNodeChanged();
						}
					},
					isEmphasized : function() {
						return this.m_emphasized;
					},
					setEmphasized : function(emphazised) {
						if (this.m_emphasized !== emphazised) {
							this.m_emphasized = emphazised;
							this.notifyNodeChanged();
						}
					},
					isCumulated : function() {
						return this.m_cumulation;
					},
					setCumulation : function(cumulate) {
						if (this.m_cumulation !== cumulate) {
							this.m_cumulation = cumulate;
							this.notifyNodeChanged();
						}
					},
					supportsBaseValueType : function() {
						return false;
					},
					getBaseValueType : function() {
						return this.m_baseCellValueType;
					},
					addDimensionMemberReference : function(name) {
						if (this.m_structureMember1 === null) {
							this.m_structureMember1 = name;
						} else {
							if (this.m_structureMember2 === null) {
								this.m_structureMember2 = name;
							}
						}
					},
					hasMemberReference : function(strucMember) {
						if (this.m_structureMember1 !== null) {
							if (sap.firefly.XString.compare(
									this.m_structureMember1, strucMember
											.getName()) === 0) {
								return true;
							}
						}
						if (this.m_structureMember2 !== null) {
							if (sap.firefly.XString.compare(
									this.m_structureMember2, strucMember
											.getName()) === 0) {
								return true;
							}
						}
						return false;
					},
					getReferenceStructureElement1 : function() {
						return this
								.getReferenceStructureElement(this.m_structureMember1);
					},
					getReferenceStructureElement2 : function() {
						return this
								.getReferenceStructureElement(this.m_structureMember2);
					},
					getReferenceStructureElement : function(memberName) {
						var dataCellList;
						var measureStructure;
						var member;
						var nonMeasureStructure;
						if (memberName === null) {
							return null;
						}
						dataCellList = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryDataCellList);
						measureStructure = dataCellList.getQueryModel()
								.getMeasureDimension();
						if (measureStructure !== null) {
							member = measureStructure
									.getStructureMember(memberName);
							if (member !== null) {
								return member;
							}
						}
						nonMeasureStructure = dataCellList.getQueryModel()
								.getNonMeasureDimension();
						if (nonMeasureStructure !== null) {
							return nonMeasureStructure
									.getStructureMember(memberName);
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionSelector",
				sap.firefly.QModelComponent,
				{
					$statics : {
						m_wildcard : "*",
						create : function(dimension) {
							var dimensionSelector = new sap.firefly.QDimensionSelector();
							dimensionSelector.setupDimensionSelector(dimension);
							return dimensionSelector;
						}
					},
					m_selectorPagingStart : 0,
					m_selectorPagingEnd : 0,
					m_selectorHierarchyNode : null,
					m_selectorHierarchyNodeName : null,
					m_selectorHierarchyNavigations : null,
					m_selectorHierarchyActive : false,
					m_selectorRootLevel : 0,
					m_selectorSorting : null,
					m_dimension : null,
					m_isGettingInterval : false,
					m_parentFilter : null,
					m_selectorFilterUsage : null,
					m_useDisplayKey : false,
					setupDimensionSelector : function(dimension) {
						this.setupModelComponent(dimension, dimension);
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
						this.m_selectorSorting = sap.firefly.XSortDirection.DEFAULT_VALUE;
						this.m_selectorPagingEnd = -1;
						this.m_selectorPagingStart = 0;
						this.m_selectorFilterUsage = sap.firefly.QueryFilterUsage.SELECTOR_FILTER;
						this.m_selectorRootLevel = 0;
						this.m_selectorHierarchyActive = false;
						this.m_useDisplayKey = false;
						this.m_isGettingInterval = false;
					},
					releaseObject : function() {
						this.m_parentFilter = sap.firefly.XObject
								.releaseIfNotNull(this.m_parentFilter);
						this.m_selectorHierarchyNavigations = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectorHierarchyNavigations);
						this.m_selectorSorting = null;
						this.m_selectorHierarchyNode = null;
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_selectorHierarchyNodeName = null;
						this.m_selectorFilterUsage = null;
						sap.firefly.QDimensionSelector.$superclass.releaseObject
								.call(this);
					},
					createFilterOperation : function(field, lowValue,
							highValue, comparisonOperator) {
						var newFilterOperation = sap.firefly.QFactory2
								.newFilterOperation(this.getDimension());
						newFilterOperation.setField(field);
						newFilterOperation
								.setComparisonOperator(comparisonOperator);
						newFilterOperation.getLow().setValue(lowValue);
						if (highValue !== null) {
							newFilterOperation.getHigh().setValue(highValue);
						}
						return newFilterOperation;
					},
					convertCartesianToComplex : function(cartesianProduct) {
						var newFilterOr = sap.firefly.QFactory2
								.newFilterOr(this.getSelectorContainer());
						newFilterOr.add(cartesianProduct);
						this.getSelectorContainer().setComplexSelection(
								newFilterOr);
					},
					addComplex : function(field, lowValue, highValue,
							comparisonOperator) {
						var complex = this.getComplexRoot();
						var newFilterOperation = this.createFilterOperation(
								field, lowValue, highValue, comparisonOperator);
						if (this.m_selectorHierarchyActive) {
							newFilterOperation.setHierarchyName(this
									.getDimension().getHierarchyName());
						}
						complex.add(newFilterOperation);
						return newFilterOperation;
					},
					assertValueType2 : function(fieldValueType, valueValueType,
							isHigh) {
						if (fieldValueType === valueValueType) {
							return;
						}
						if ((fieldValueType === sap.firefly.XValueType.DOUBLE)
								|| ((fieldValueType === sap.firefly.XValueType.DECIMAL_FLOAT) && (valueValueType === sap.firefly.XValueType.DOUBLE))
								|| (valueValueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
							return;
						}
						if (isHigh) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XString
											.concatenate2(
													"Value type of highValue and field don't match. Expected: ",
													fieldValueType.getName()));
						}
						throw sap.firefly.XException
								.createIllegalArgumentException(sap.firefly.XString
										.concatenate2(
												"Value type of lowValue and field don't match. Expected: ",
												fieldValueType.getName()));
					},
					assertComparisonOperator : function(comparisonOperator,
							field) {
						var dimension = this.getDimension();
						var capabilitiesByField;
						if (dimension.isMeasureStructure()) {
							if ((comparisonOperator === sap.firefly.ComparisonOperator.FUZZY)
									|| (comparisonOperator === sap.firefly.ComparisonOperator.MATCH)
									|| (comparisonOperator === sap.firefly.ComparisonOperator.NOT_MATCH)
									|| (comparisonOperator === sap.firefly.ComparisonOperator.SEARCH)
									|| (comparisonOperator === sap.firefly.ComparisonOperator.UNDEFINED)
									|| (comparisonOperator === sap.firefly.ComparisonOperator.IN)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XString
												.concatenate2(
														comparisonOperator
																.getName(),
														" operator is not supported for ValueHelp if the dimension is a measure structure"));
							}
						} else {
							capabilitiesByField = dimension
									.getSelectionCapabilities()
									.getSelectionCapabilitiesByField(field);
							if ((capabilitiesByField !== null)
									&& (capabilitiesByField
											.getSupportedComparisonOperators(
													sap.firefly.SetSign.INCLUDING)
											.contains(comparisonOperator) === false)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														comparisonOperator
																.getName(),
														" operator is not supported for the field ",
														field.getName()));
							}
						}
					},
					addSelectionByField : function(field, lowValue, highValue,
							comparisonOperator) {
						var fieldValueType;
						var lowValueType;
						var highValueType;
						var complexSelectionRoot;
						var selectorContainer;
						var cartesianProduct;
						var memberSelection;
						var element;
						this
								.assertComparisonOperator(comparisonOperator,
										field);
						fieldValueType = field.getValueType();
						lowValueType = lowValue.getValueType();
						this.assertValueType2(fieldValueType, lowValueType,
								false);
						if (highValue !== null) {
							highValueType = highValue.getValueType();
							this.assertValueType2(fieldValueType,
									highValueType, true);
						}
						complexSelectionRoot = this.getComplexRoot();
						if (complexSelectionRoot !== null) {
							return this.addComplex(field, lowValue, highValue,
									comparisonOperator);
						}
						selectorContainer = this.getSelectorContainer();
						cartesianProduct = selectorContainer
								.getCartesianProductWithDefault();
						memberSelection = cartesianProduct
								.getCartesianList(this.getDimension());
						if (memberSelection === null) {
							memberSelection = cartesianProduct
									.getCartesianListByField(field);
						}
						if (memberSelection.isEmpty()) {
							memberSelection.setField(field);
						} else {
							if (memberSelection.getField() !== field) {
								this
										.convertCartesianToComplex(cartesianProduct);
								return this.addComplex(field, lowValue,
										highValue, comparisonOperator);
							}
						}
						element = memberSelection.addNewCartesianElement();
						element.configureDoubleParameterExpression(lowValue,
								highValue, comparisonOperator);
						if (this.m_selectorHierarchyActive) {
							memberSelection.setHierarchyName(this
									.getDimension().getHierarchyName());
						}
						return memberSelection;
					},
					getFilterField : function(isKeyField) {
						if (isKeyField) {
							if (this.m_useDisplayKey) {
								return this.getSelectorDisplayKeyField();
							}
							return this.getSelectorKeyField();
						}
						return this.getSelectorTextField();
					},
					getSelectorDisplayKeyField : function() {
						if (this.m_selectorHierarchyActive) {
							return this.getDimension()
									.getHierarchyDisplayKeyField();
						}
						return this.getDimension().getFlatDisplayKeyField();
					},
					getSelectorKeyField : function() {
						if (this.m_selectorHierarchyActive) {
							return this.getDimension().getHierarchyKeyField();
						}
						return this.getDimension().getFlatKeyField();
					},
					getSelectorTextField : function() {
						if (this.getDimension().isSelectorHierarchyActive()) {
							return this.getDimension().getHierarchyTextField();
						}
						return this.getDimension().getFlatTextField();
					},
					createXValue : function(value, field) {
						var keyType = field.getValueType();
						if (keyType === sap.firefly.XValueType.STRING) {
							return sap.firefly.XStringValue.create(value);
						}
						if (keyType === sap.firefly.XValueType.LONG) {
							return sap.firefly.XLongValue
									.create(sap.firefly.XLong
											.convertStringToLong(value));
						}
						if (keyType === sap.firefly.XValueType.INTEGER) {
							return sap.firefly.XIntegerValue
									.create(sap.firefly.XInteger
											.convertStringToIntegerWithRadix(
													value, 10));
						}
						if ((keyType === sap.firefly.XValueType.DOUBLE)
								|| (keyType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
							return sap.firefly.XDoubleValue
									.create(sap.firefly.XDouble
											.convertStringToDouble(value));
						}
						if (keyType === sap.firefly.XValueType.DATE) {
							return sap.firefly.XDate.createDateFromString(
									value, null);
						}
						if (keyType === sap.firefly.XValueType.TIME) {
							return sap.firefly.XTime.createTimeFromString(
									value, null);
						}
						if (keyType === sap.firefly.XValueType.DATE_TIME) {
							return sap.firefly.XDateTime
									.createDateTimeFromString(value, null);
						}
						if (keyType === sap.firefly.XValueType.TIMESPAN) {
							return sap.firefly.XTimeSpan
									.create(sap.firefly.XLong
											.convertStringToLong(value));
						}
						throw sap.firefly.XException
								.createIllegalStateException(sap.firefly.XString
										.concatenate2(
												"Value type not supported: ",
												keyType.getName()));
					},
					setSelectorOrder : function(direction) {
						this.m_selectorSorting = direction;
					},
					getSelectorOrder : function() {
						return this.m_selectorSorting;
					},
					setSelectorPagingDefault : function() {
						this.m_selectorPagingStart = 0;
						this.m_selectorPagingEnd = -1;
					},
					setSelectorPaging : function(start, end) {
						this.m_selectorPagingEnd = end;
						this.m_selectorPagingStart = start;
					},
					getSelectorPagingStart : function() {
						return this.m_selectorPagingStart;
					},
					setSelectorPagingStart : function(start) {
						this.m_selectorPagingStart = start;
					},
					getSelectorPagingEnd : function() {
						return this.m_selectorPagingEnd;
					},
					setSelectorPagingEnd : function(end) {
						this.m_selectorPagingEnd = end;
					},
					getSelectorFilterUsage : function() {
						return this.m_selectorFilterUsage;
					},
					setSelectorFilterUsage : function(queryFilterUsage) {
						this.m_selectorFilterUsage = queryFilterUsage;
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					addSelectorSelectionForKey : function(filterValue,
							comparisonOperator) {
						var filterField = this.getFilterField(true);
						return this.addSelectionByField(filterField, this
								.createXValue(filterValue, filterField), null,
								comparisonOperator);
					},
					addSelectorSelectionForText : function(filterValue,
							comparisonOperator) {
						var filterField = this.getFilterField(false);
						if (filterField.isFilterable() === false) {
							return null;
						}
						return this.addSelectionByField(filterField, this
								.createXValue(filterValue, filterField), null,
								comparisonOperator);
					},
					addSelectorSelection : function(filterValue, field,
							comparisonOperator) {
						return this.addSelectionByField(field, filterValue,
								null, comparisonOperator);
					},
					addSelectorSelectionIntervalForKey : function(lowValue,
							highValue, comparisonOperator) {
						var filterField = this.getFilterField(true);
						return this.addSelectionByField(filterField, this
								.createXValue(lowValue, filterField), this
								.createXValue(highValue, filterField),
								comparisonOperator);
					},
					addSelectorSelectionInterval : function(lowValue,
							highValue, field, comparisonOperator) {
						return this.addSelectionByField(field, lowValue,
								highValue, comparisonOperator);
					},
					clearSelectorSelections : function() {
						var complexRoot = this.getComplexRoot();
						var cartesianProduct;
						if (complexRoot !== null) {
							(complexRoot).clear();
						} else {
							cartesianProduct = this.getCartesian();
							if (cartesianProduct !== null) {
								cartesianProduct.clear();
							}
						}
					},
					clearSelectorSelectionsByDimension : function(dimension) {
						var cartesianProduct;
						var memberSelection;
						if (dimension === null) {
							return;
						}
						cartesianProduct = this.getCartesian();
						if (cartesianProduct !== null) {
							memberSelection = cartesianProduct
									.getCartesianList(dimension);
							if (memberSelection !== null) {
								memberSelection.clear();
							}
						}
					},
					getSelectorContainer : function() {
						return this.getDimension().getQueryModel()
								.getSelector().getSelectorContainer();
					},
					getComplexRoot : function() {
						var selectorContainer = this.getSelectorContainer();
						return selectorContainer.getComplexSelectionRoot();
					},
					getCartesian : function() {
						var selectorContainer = this.getSelectorContainer();
						return selectorContainer.getCartesianProduct();
					},
					removeFilterElement : function(filter) {
						var complexRoot;
						var cartesianProduct;
						if (filter === null) {
							return;
						}
						complexRoot = this.getComplexRoot();
						if (complexRoot !== null) {
							(complexRoot).removeElement(filter);
						} else {
							cartesianProduct = this.getCartesian();
							if (cartesianProduct !== null) {
								cartesianProduct.removeElement(filter);
							}
						}
					},
					removeNavigationsWithDisplayLevelGreaterNewParent : function(
							newParentDisplayLevel) {
						var idx = 0;
						var node;
						while (idx < this.m_selectorHierarchyNavigations.size()) {
							node = this.m_selectorHierarchyNavigations.get(idx);
							if (node.getDisplayLevel() >= newParentDisplayLevel) {
								this.m_selectorHierarchyNavigations
										.removeElement(node);
							} else {
								idx++;
							}
						}
					},
					setSelectorHierarchyNode : function(parent) {
						var filterValue;
						if (this.m_selectorHierarchyNavigations === null) {
							this.m_selectorHierarchyNavigations = sap.firefly.XList
									.create();
						}
						this.m_selectorHierarchyNode = parent;
						if (parent !== null) {
							this
									.removeNavigationsWithDisplayLevelGreaterNewParent(parent
											.getDisplayLevel());
							this.m_selectorHierarchyNavigations.add(parent);
							if (this.isSelectorFilteringOnDisplayKey()) {
								filterValue = parent
										.getDimensionMember()
										.getFieldValue(
												this
														.getSelectorDisplayKeyField())
										.getStringValue();
							} else {
								filterValue = parent.getName();
							}
							this.setSelectorHierarchyNodeByName(filterValue);
						} else {
							this.m_selectorHierarchyNavigations.clear();
							this.setSelectorHierarchyNodeByName(null);
						}
					},
					getSelectorHierarchyNode : function() {
						return this.m_selectorHierarchyNode;
					},
					clearSelectorHierarchyNode : function() {
						this.setSelectorHierarchyNode(null);
						this.removeFilterElement(this.m_parentFilter);
					},
					setSelectorRootExpandingLevels : function(
							relativeLevelCount) {
						this.m_selectorRootLevel = relativeLevelCount;
					},
					getSelectorRootLevel : function() {
						return this.m_selectorRootLevel;
					},
					setSelectorHierarchyActive : function(isActive) {
						this.m_selectorHierarchyActive = isActive;
					},
					isSelectorHierarchyActive : function() {
						return this.m_selectorHierarchyActive;
					},
					setSelectorFilterOnDisplayKey : function(isUsingDisplayKey) {
						this.m_useDisplayKey = isUsingDisplayKey;
					},
					isSelectorFilteringOnDisplayKey : function() {
						return this.m_useDisplayKey;
					},
					setSelectorGettingInterval : function(doGetInterval) {
						this.m_isGettingInterval = doGetInterval;
						return this.isSelectorGettingInterval();
					},
					isSelectorGettingInterval : function() {
						return this.m_isGettingInterval
								&& (this.m_selectorHierarchyActive === false);
					},
					setSelectorHierarchyNodeByName : function(parent) {
						this.removeFilterElement(this.m_parentFilter);
						this.m_selectorHierarchyNodeName = parent;
						if (parent !== null) {
							this.m_parentFilter = this
									.addSelectorSelectionForKey(
											parent,
											sap.firefly.ComparisonOperator.EQUAL);
						}
					},
					getSelectorHierarchyNodeName : function() {
						return this.m_selectorHierarchyNodeName;
					},
					processIsNodeChildOfParent : function(nodeName, parentName,
							syncType, listener, customIdentifier) {
						var pathField;
						var selectorFields;
						var isPathFieldContained;
						var pagingStartCache;
						var pagingEndCache;
						var cartesianDimensionList;
						var childFilter;
						var processMemberHelp;
						var data;
						var childNode;
						var nodeIterator;
						var next;
						var fieldValue;
						var stringValue;
						var parser;
						var hierarchyPathStructure;
						var uniqueHierarchyPath;
						var idx;
						if (this.getDimension().getQueryModel()
								.supportsUniqueHierarchyPath() === false) {
							return false;
						}
						if (sap.firefly.XStringUtils.isNullOrEmpty(nodeName)
								|| sap.firefly.XStringUtils
										.isNullOrEmpty(parentName)) {
							return false;
						}
						if (this.m_selectorHierarchyActive === false) {
							return false;
						}
						if (sap.firefly.XString.isEqual(nodeName, parentName)) {
							return false;
						}
						pathField = this.getDimension().getHierarchyPathField();
						if (pathField === null) {
							return false;
						}
						selectorFields = this.getDimension()
								.getSelectorFields();
						isPathFieldContained = selectorFields
								.contains(pathField);
						if (isPathFieldContained === false) {
							selectorFields.add(pathField);
						}
						pagingStartCache = this.m_selectorPagingStart;
						pagingEndCache = this.m_selectorPagingEnd;
						this.setSelectorPagingDefault();
						cartesianDimensionList = this.getSelectorContainer()
								.getCartesianProductWithDefault()
								.getCartesianListWithDefault(
										this.getDimension());
						childFilter = cartesianDimensionList
								.addNewCartesianElement();
						childFilter.setField(this.getSelectorKeyField());
						childFilter
								.setComparisonOperator(sap.firefly.ComparisonOperator.EQUAL);
						childFilter.getLow().setStringValue(nodeName);
						cartesianDimensionList.setHierarchyName(this
								.getDimension().getHierarchyName());
						processMemberHelp = this.getDimension()
								.processMemberHelp(syncType, listener,
										customIdentifier);
						this.m_selectorPagingStart = pagingStartCache;
						this.m_selectorPagingEnd = pagingEndCache;
						cartesianDimensionList.removeElement(childFilter);
						if (processMemberHelp.hasErrors()) {
							throw sap.firefly.XException
									.createRuntimeException(processMemberHelp
											.getSummary());
						}
						data = processMemberHelp.getData();
						if (data.isEmpty()) {
							return false;
						}
						childNode = null;
						nodeIterator = data.getIterator();
						while (nodeIterator.hasNext()) {
							next = nodeIterator.next();
							if (sap.firefly.XString.isEqual(next.getName(),
									nodeName)) {
								childNode = next;
								break;
							}
						}
						nodeIterator.releaseObject();
						if (childNode === null) {
							return false;
						}
						fieldValue = childNode.getDimensionMember()
								.getFieldValue(pathField);
						stringValue = fieldValue.getStringValue();
						parser = sap.firefly.JsonParserFactory.newInstance();
						hierarchyPathStructure = parser.parse(stringValue);
						uniqueHierarchyPath = hierarchyPathStructure
								.getListByName(sap.firefly.InAConstants.QY_UNIQUE_NAME);
						for (idx = 0; idx < uniqueHierarchyPath.size(); idx++) {
							if (sap.firefly.XString.isEqual(uniqueHierarchyPath
									.getStringByIndex(idx), parentName)) {
								return true;
							}
						}
						return false;
					},
					processMeasureHelp : function() {
						var allStructureMembers = this.getDimension()
								.getAllStructureMembers();
						var measureList = sap.firefly.XList.create();
						var messageManager = sap.firefly.MessageManager
								.createMessageManager();
						var selectionContainer;
						var selectorFilterUsage = this.getSelectorFilterUsage();
						var cartesianList;
						var cartesianProduct;
						var measureSize;
						var measureIdx;
						var measure;
						var measureNode;
						var start;
						var end;
						var selectorOrder;
						var extMeasureResult;
						if (selectorFilterUsage === sap.firefly.QueryFilterUsage.QUERY_FILTER) {
							selectionContainer = this.getDimension()
									.getQueryModel().getSelector()
									.getSelectionStateContainer();
						} else {
							if (selectorFilterUsage === sap.firefly.QueryFilterUsage.SELECTOR_FILTER) {
								selectionContainer = this
										.getSelectorContainer();
							} else {
								messageManager
										.addWarning(
												sap.firefly.ErrorCodes.INVALID_OPERATOR,
												"Filter on other dimensions not supported for measurehelp.");
								selectionContainer = null;
							}
						}
						cartesianList = null;
						if ((selectionContainer !== null)
								&& selectionContainer.isCartesianProduct()) {
							cartesianProduct = selectionContainer
									.getCartesianProduct();
							if (cartesianProduct !== null) {
								cartesianList = cartesianProduct
										.getCartesianList(this.getDimension());
							}
						} else {
							messageManager
									.addWarning(
											sap.firefly.ErrorCodes.INVALID_OPERATOR,
											"Complex filters are ignored for measurehelp.");
						}
						measureSize = allStructureMembers.size();
						for (measureIdx = 0; measureIdx < measureSize; measureIdx++) {
							measure = allStructureMembers.get(measureIdx);
							if (this.measureMatchesFilter(measure,
									cartesianList)) {
								measureNode = sap.firefly.RsAxisTupleElement
										.create(null, measure.getName(),
												measure, -1, null, 0, -1);
								measureList.add(measureNode);
							}
						}
						start = this.getSelectorPagingStart();
						end = this.getSelectorPagingEnd();
						if ((end < 0) || (end > measureSize)) {
							end = measureSize;
						}
						while (end < measureList.size()) {
							measureList.removeAt(measureList.size() - 1);
						}
						while (start > 0) {
							measureList.removeAt(0);
							start--;
						}
						selectorOrder = this.getSelectorOrder();
						if ((selectorOrder === sap.firefly.XSortDirection.ASCENDING)
								|| (selectorOrder === sap.firefly.XSortDirection.DESCENDING)) {
							measureList.sortByDirection(selectorOrder);
						}
						extMeasureResult = sap.firefly.ExtResult.create(
								measureList, messageManager);
						return extMeasureResult;
					},
					measureMatchesLike : function(op, isIncluding, text) {
						var searchPattern = op.getLow().getStringValue();
						var startsWithWildcard = sap.firefly.XString
								.startsWith(
										searchPattern,
										sap.firefly.QDimensionSelector.m_wildcard);
						var endsWithWildcard = sap.firefly.XString.endsWith(
								searchPattern,
								sap.firefly.QDimensionSelector.m_wildcard);
						var start = 0;
						var end;
						var measureNameContained;
						if (startsWithWildcard) {
							start = 1;
						}
						end = sap.firefly.XString.size(searchPattern);
						if (endsWithWildcard) {
							end = sap.firefly.XString.size(searchPattern) - 1;
						}
						if (startsWithWildcard || endsWithWildcard) {
							searchPattern = sap.firefly.XString.substring(
									searchPattern, start, end);
						}
						measureNameContained = sap.firefly.XString
								.containsString(text, searchPattern);
						if ((measureNameContained) && (isIncluding)) {
							return true;
						} else {
							if ((measureNameContained === false)
									&& (isIncluding === false)) {
								return true;
							}
						}
						return false;
					},
					measureMatchesFilter : function(measure, cartesianList) {
						var filterIdx;
						var op;
						var comparisonOperator;
						var text;
						var measureNameCompare;
						var isIncluding;
						var measureNameCompareBetween;
						var measureNameCompareBetweenExcluding;
						if (cartesianList === null) {
							return true;
						}
						for (filterIdx = 0; filterIdx < cartesianList.size(); filterIdx++) {
							op = cartesianList.getOp(filterIdx);
							comparisonOperator = op.getComparisonOperator();
							if (op.getField() === this.getSelectorKeyField()) {
								text = measure.getName();
							} else {
								text = measure.getText();
							}
							measureNameCompare = sap.firefly.XString.compare(
									text, op.getLow().getStringValue());
							isIncluding = op.getSetSign() === sap.firefly.SetSign.INCLUDING;
							if (comparisonOperator === sap.firefly.ComparisonOperator.EQUAL) {
								if ((measureNameCompare === 0) && (isIncluding)) {
									return true;
								}
								if ((measureNameCompare !== 0)
										&& (isIncluding === false)) {
									return true;
								}
							} else {
								if (comparisonOperator === sap.firefly.ComparisonOperator.NOT_EQUAL) {
									if ((measureNameCompare !== 0)
											&& (isIncluding)) {
										return true;
									}
									if ((measureNameCompare === 0)
											&& (isIncluding === false)) {
										return true;
									}
								} else {
									if (comparisonOperator === sap.firefly.ComparisonOperator.LIKE) {
										return this.measureMatchesLike(op,
												isIncluding, text);
									} else {
										if (comparisonOperator === sap.firefly.ComparisonOperator.LESS_THAN) {
											if ((measureNameCompare < 0)
													&& (isIncluding)) {
												return true;
											}
											if ((measureNameCompare >= 0)
													&& (isIncluding === false)) {
												return true;
											}
										} else {
											if (comparisonOperator === sap.firefly.ComparisonOperator.LESS_EQUAL) {
												if ((measureNameCompare <= 0)
														&& (isIncluding)) {
													return true;
												}
												if ((measureNameCompare > 0)
														&& (isIncluding === false)) {
													return true;
												}
											} else {
												if (comparisonOperator === sap.firefly.ComparisonOperator.GREATER_THAN) {
													if ((measureNameCompare > 0)
															&& (isIncluding)) {
														return true;
													}
													if ((measureNameCompare <= 0)
															&& (isIncluding === false)) {
														return true;
													}
												} else {
													if (comparisonOperator === sap.firefly.ComparisonOperator.GREATER_EQUAL) {
														if ((measureNameCompare >= 0)
																&& (isIncluding)) {
															return true;
														}
														if ((measureNameCompare < 0)
																&& (isIncluding === false)) {
															return true;
														}
													} else {
														if (comparisonOperator === sap.firefly.ComparisonOperator.BETWEEN) {
															measureNameCompareBetween = sap.firefly.XString
																	.compare(
																			text,
																			op
																					.getHigh()
																					.getStringValue());
															if ((measureNameCompare >= 0)
																	&& (measureNameCompareBetween <= 0)
																	&& (isIncluding)) {
																return true;
															}
															if (((measureNameCompare < 0) || (measureNameCompareBetween > 0))
																	&& (isIncluding === false)) {
																return true;
															}
														} else {
															if (comparisonOperator === sap.firefly.ComparisonOperator.BETWEEN_EXCLUDING) {
																measureNameCompareBetweenExcluding = sap.firefly.XString
																		.compare(
																				text,
																				op
																						.getHigh()
																						.getStringValue());
																if ((measureNameCompare > 0)
																		&& (measureNameCompareBetweenExcluding < 0)
																		&& (isIncluding)) {
																	return true;
																}
																if (((measureNameCompare <= 0) || (measureNameCompareBetweenExcluding >= 0))
																		&& (isIncluding === false)) {
																	return true;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						return false;
					},
					setSelectorComplexSelectionRoot : function(complexSelection) {
						this.getSelectorContainer().setComplexSelection(
								complexSelection);
					},
					getNavigationNodes : function() {
						return this.m_selectorHierarchyNavigations;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherSel = other;
						this.m_selectorHierarchyActive = otherSel
								.isSelectorHierarchyActive();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QSelectValue",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createDimensionElement : function(selectField,
								hierarchyName, value) {
							var newObject;
							sap.firefly.XVersion.checkCleanOlapConstructors(41);
							newObject = new sap.firefly.QSelectValue();
							newObject.setupSelectElement(selectField
									.getContext(), selectField, hierarchyName,
									value);
							return newObject;
						},
						_createDimensionElement2 : function(context,
								selectField, hierarchyName, value) {
							var newObject = new sap.firefly.QSelectValue();
							newObject.setupSelectElement(context, selectField,
									hierarchyName, value);
							return newObject;
						},
						createDimensionElementCopy : function(context,
								dimensionElement) {
							var newObject = new sap.firefly.QSelectValue();
							var selectField = dimensionElement.getSelectField();
							var selectHierarchyName = dimensionElement
									.getSelectHierarchyName();
							var selectValue = dimensionElement.getSelectValue();
							newObject.setupSelectElement(context, selectField,
									selectHierarchyName, selectValue);
							return newObject;
						}
					},
					m_selectValue : null,
					m_selectField : null,
					m_selectHierarchyName : null,
					createSelectValue : function(context, selectField,
							hierarchyName, value) {
						var newObject = new sap.firefly.QSelectValue();
						newObject.setupSelectElement(context, selectField,
								hierarchyName, value);
						return newObject;
					},
					createSelectValueCopy : function(context, selectValue) {
						var newObject = new sap.firefly.QSelectValue();
						newObject.setupSelectElement(context, selectValue
								.getSelectField(), selectValue
								.getSelectHierarchyName(), selectValue
								.getSelectValue());
						return newObject;
					},
					setupSelectElement : function(context, selectField,
							hierarchyName, value) {
						this.setupModelComponent(context, null);
						this.m_selectField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(selectField);
						this.m_selectHierarchyName = hierarchyName;
						this.m_selectValue = value;
					},
					releaseObject : function() {
						this.m_selectField = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectField);
						this.m_selectHierarchyName = null;
						this.m_selectValue = null;
						sap.firefly.QSelectValue.$superclass.releaseObject
								.call(this);
					},
					getSelectValue : function() {
						return this.m_selectValue;
					},
					getSelectField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_selectField);
					},
					getSelectHierarchyName : function() {
						return this.m_selectHierarchyName;
					},
					getDimension : function() {
						return this.getSelectField().getDimension();
					},
					getType : function() {
						return this.getMemberType();
					},
					getMemberType : function() {
						return sap.firefly.MemberType.SELECT_VALUE;
					},
					getSelectableElement : function() {
						return this;
					},
					isNode : function() {
						return this.getMemberType().isNode();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QAbstractDimensionMember",
				sap.firefly.QModelComponent,
				{
					m_dimension : null,
					m_memberType : null,
					setupAbstractDimensionMember : function(context, dimension) {
						this.setupModelComponent(context, dimension);
						this.setDimension(dimension);
					},
					copyAbstractDimensionMember : function(origin) {
						var queryModel;
						var originDimension;
						sap.firefly.QAbstractDimensionMember.$superclass.copyModelComponent
								.call(this, origin);
						queryModel = this.getQueryModel();
						originDimension = origin.getDimension();
						if (originDimension === null) {
							originDimension = origin.getParentComponent();
						}
						this.setDimension(queryModel
								.getDimensionByName(originDimension.getName()));
						this.m_memberType = origin.m_memberType;
					},
					releaseObject : function() {
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_memberType = null;
						sap.firefly.QAbstractDimensionMember.$superclass.releaseObject
								.call(this);
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					setDimension : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					getAttributeMemberByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setType : function(type) {
						this.m_memberType = type;
					},
					getType : function() {
						return this.getMemberType();
					},
					getMemberType : function() {
						return this.m_memberType;
					},
					getOlapComponentType : function() {
						return this.m_memberType;
					},
					getNodeType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getField : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDimensionMember : function() {
						return this;
					},
					getSelectableElement : function() {
						return this;
					},
					isNode : function() {
						return this.getMemberType().isNode();
					},
					getValueType : function() {
					},
					getGeometry : function() {
					},
					getLineStringValue : function() {
					},
					getMultiLineStringValue : function() {
					},
					getMultiPointValue : function() {
					},
					getMultiPolygonValue : function() {
					},
					getPointValue : function() {
					},
					getPolygonValue : function() {
					},
					getStringValue : function() {
					},
					getDoubleValue : function() {
					},
					getIntegerValue : function() {
					},
					getBooleanValue : function() {
					},
					getLongValue : function() {
					},
					getDateValue : function() {
					},
					getTimeValue : function() {
					},
					getDateTimeValue : function() {
					},
					getTimeSpanValue : function() {
					},
					getNullValue : function() {
					},
					getValue : function() {
					},
					hasValue : function() {
					},
					getErrorValue : function() {
					},
					getFormattedValue : function() {
					},
					getPropertiesValue : function() {
					},
					getStructureListValue : function() {
					},
					getStructureValue : function() {
					},
					getSelectField : function() {
					},
					getSelectHierarchyName : function() {
					},
					getSelectValue : function() {
					},
					createSelection : function() {
					},
					getAllFieldValues : function() {
					},
					getDateByPresentation : function(arg1) {
					},
					getDimensionMemberNameValueException : function() {
					},
					getDoubleByPresentation : function(arg1) {
					},
					getFieldValue : function(arg1) {
					},
					getIntByPresentation : function(arg1) {
					},
					getKeyFieldValue : function() {
					},
					getPolygonByPresentation : function(arg1) {
					},
					getResultSetFieldValues : function() {
					},
					getResultVisibility : function() {
					},
					getStringByPresentation : function(arg1) {
					},
					getTimeSpanByPresentation : function(arg1) {
					},
					getValueAsString : function() {
					},
					setResultVisibility : function(arg1) {
					},
					addFieldValue : function(arg1) {
					},
					createAndAddField : function(arg1) {
					},
					createAndAddFieldValueWithAmount : function(arg1, arg2) {
					},
					createAndAddFieldValueWithBoolean : function(arg1, arg2) {
					},
					createAndAddFieldValueWithDate : function(arg1, arg2) {
					},
					createAndAddFieldValueWithDateTime : function(arg1, arg2) {
					},
					createAndAddFieldValueWithDouble : function(arg1, arg2) {
					},
					createAndAddFieldValueWithInteger : function(arg1, arg2) {
					},
					createAndAddFieldValueWithLong : function(arg1, arg2) {
					},
					createAndAddFieldValueWithString : function(arg1, arg2) {
					},
					createAndAddFieldValueWithTime : function(arg1, arg2) {
					},
					createAndAddFieldWithValue : function(arg1, arg2) {
					},
					setDimensionMemberNameValueException : function(arg1) {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDrillManager",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, queryModel) {
							var object = new sap.firefly.QDrillManager();
							object.setupDrillManager(context, queryModel);
							return object;
						}
					},
					m_drillOperations : null,
					m_drillOperationsMap : null,
					m_drillCounter : 0,
					m_supportsDrillCounter : false,
					m_validatesContextFree : false,
					copyDrillManager : function(origin) {
						var size;
						var queryModel;
						var i;
						var origDrillOp;
						var cloneDrillOp;
						sap.firefly.QDrillManager.$superclass.copyModelComponent
								.call(this, origin);
						size = origin.m_drillOperations.size();
						queryModel = this.getQueryModel();
						for (i = 0; i < size; i++) {
							origDrillOp = origin.m_drillOperations.get(i);
							cloneDrillOp = sap.firefly.QDrillOperation.create(
									this, origDrillOp.getType(), queryModel
											.getDimensionByName(origDrillOp
													.getTargetDimension()
													.getName()), origDrillOp
											.getDrillState(), origDrillOp
											.getRelativeLevelCount(),
									origDrillOp.getDrillPath(), origDrillOp
											.getModCounter());
							this.addOperationInternal(cloneDrillOp);
						}
						this.m_drillCounter = origin.m_drillCounter;
						this.m_supportsDrillCounter = origin.m_supportsDrillCounter;
						this.m_validatesContextFree = origin.m_validatesContextFree;
					},
					setupDrillManager : function(context, queryModel) {
						this.setupModelComponent(context, queryModel);
						this.m_drillOperations = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, true,
										"Drill Operations");
						this.m_drillOperationsMap = sap.firefly.XHashMapByString
								.create();
						this.m_validatesContextFree = true;
					},
					releaseObject : function() {
						this.m_drillOperations = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_drillOperations);
						this.m_drillOperationsMap = sap.firefly.XObject
								.releaseIfNotNull(this.m_drillOperationsMap);
						sap.firefly.QDrillManager.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DRILL_MANAGER;
					},
					getDrillOperations : function() {
						return this.m_drillOperations;
					},
					setDrillState : function(drillPath, drillState) {
						var newOperation = sap.firefly.QDrillOperation._create(
								this.getContext(), this,
								sap.firefly.DrillOperationType.CONTEXT, null,
								drillState, 1, drillPath, this.m_drillCounter);
						return this.addOperationInternal(newOperation);
					},
					setRootExpandingLevels : function(dimension,
							relativeLevelCount) {
						var newOperation = sap.firefly.QDrillOperation._create(
								this.getContext(), this,
								sap.firefly.DrillOperationType.ROOT, dimension,
								sap.firefly.DrillState.EXPANDED,
								relativeLevelCount, null, this.m_drillCounter);
						return this.addOperationInternal(newOperation);
					},
					addOperationInternal : function(newOperation) {
						var uniqueName;
						this.m_drillCounter++;
						uniqueName = newOperation.getPathUniqueName();
						this.removeElementByKey(uniqueName);
						this.m_drillOperations.add(newOperation);
						this.m_drillOperationsMap.put(uniqueName, newOperation);
						this.notifyNodeChanged();
						return newOperation;
					},
					processDeltaDrill : function(drillPath, syncType, listener,
							customIdentifier) {
						var drillOperation = this.setDrillState(drillPath,
								sap.firefly.DrillState.EXPANDED);
						var targetDimension = drillOperation
								.getTargetDimension();
						var queryExecution;
						targetDimension.setHierarchyNavigationDeltaMode(true);
						queryExecution = this.getQueryModel().getQueryManager()
								.processQueryExecution(syncType, listener,
										customIdentifier);
						targetDimension.setHierarchyNavigationDeltaMode(false);
						this.notifyNodeChanged();
						return queryExecution;
					},
					removeElementByKey : function(uniqueName) {
						var oldOperation = this.m_drillOperationsMap
								.getByKey(uniqueName);
						if (oldOperation !== null) {
							this.m_drillOperations.removeElement(oldOperation);
							this.m_drillOperationsMap.remove(uniqueName);
						}
					},
					getRootExpandingLevels : function(dimension) {
						var size = this.m_drillOperations.size();
						var i;
						var drillOperation;
						for (i = 0; i < size; i++) {
							drillOperation = this.m_drillOperations.get(i);
							if ((drillOperation.getType() === sap.firefly.DrillOperationType.ROOT)
									&& (drillOperation.getTargetDimension() === dimension)) {
								return drillOperation;
							}
						}
						return null;
					},
					removeInvalidDrillOperations : function() {
						var idxDrillOperation;
						var doRemove;
						var drillOperation;
						var drillPath;
						var idxDrillPath;
						var drillPathElement;
						var dimension;
						var selectedHierarchyName;
						var hierarchyName;
						for (idxDrillOperation = 0; idxDrillOperation < this.m_drillOperations
								.size();) {
							doRemove = false;
							drillOperation = this.m_drillOperations
									.get(idxDrillOperation);
							if (drillOperation.getType().isEqualTo(
									sap.firefly.DrillOperationType.CONTEXT)) {
								drillPath = drillOperation.getDrillPath();
								for (idxDrillPath = 0; idxDrillPath < drillPath
										.size(); idxDrillPath++) {
									drillPathElement = drillPath
											.get(idxDrillPath);
									dimension = drillPathElement.getDimension();
									if (dimension.getAxis().getType()
											.isEqualTo(
													sap.firefly.AxisType.FREE)) {
										doRemove = true;
										break;
									}
									if ((this
											.isValidatingContextFreeNavigations() === false)
											&& (drillPath.size() < 2)) {
										break;
									}
									if (dimension.getIndexOnAxis() !== idxDrillPath) {
										doRemove = true;
										break;
									}
									selectedHierarchyName = drillPathElement
											.getSelectHierarchyName();
									hierarchyName = dimension
											.getHierarchyName();
									if (sap.firefly.XString.isEqual(
											hierarchyName,
											selectedHierarchyName) === false) {
										doRemove = true;
										break;
									}
								}
							}
							if (doRemove) {
								this.removeElementByKey(drillOperation
										.getPathUniqueName());
							} else {
								idxDrillOperation++;
							}
						}
					},
					removeDrillOperationsByDimension : function(dimension) {
						var removedOperation = false;
						var idxDrillOperation = 0;
						var drillOperation;
						var drillPath;
						var lastDrillPathElement;
						while (idxDrillOperation < this.m_drillOperations
								.size()) {
							drillOperation = this.m_drillOperations
									.get(idxDrillOperation);
							if (drillOperation.getType().isEqualTo(
									sap.firefly.DrillOperationType.CONTEXT)) {
								drillPath = drillOperation.getDrillPath();
								lastDrillPathElement = drillPath.get(drillPath
										.size() - 1);
								if (lastDrillPathElement.getDimension()
										.isEqualTo(dimension)) {
									removedOperation = true;
									this.removeElementByKey(drillOperation
											.getPathUniqueName());
								} else {
									idxDrillOperation++;
								}
							} else {
								idxDrillOperation++;
							}
						}
						if (removedOperation) {
							this.notifyNodeChanged();
						}
					},
					removeAllContextDrillOperations : function() {
						var drillIdx;
						var iqDrillOperation;
						for (drillIdx = 0; drillIdx < this.m_drillOperations
								.size(); drillIdx++) {
							iqDrillOperation = this.m_drillOperations
									.get(drillIdx);
							if (iqDrillOperation.getType().isEqualTo(
									sap.firefly.DrillOperationType.CONTEXT)) {
								this.removeElementByKey(iqDrillOperation
										.getPathUniqueName());
								drillIdx--;
							}
						}
					},
					supportsDrillCounter : function() {
						return this.m_supportsDrillCounter;
					},
					setSupportsDrillCounter : function(supportsDrillCounter) {
						this.m_supportsDrillCounter = supportsDrillCounter;
					},
					isValidatingContextFreeNavigations : function() {
						return this.m_validatesContextFree;
					},
					setValidateContextFreeNavigations : function(isValidating) {
						this.m_validatesContextFree = isValidating;
					},
					getIndexedChildren : function() {
						return sap.firefly.XIteratorWrapper
								.create(this.m_drillOperations.getIterator());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDrillOperation",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(parent, type, targetDimension,
								drillState, expandLevels, drillPath,
								drillCounter) {
							var object = new sap.firefly.QDrillOperation();
							object.setupDrillOperation(parent.getContext(),
									parent, type, targetDimension, drillState,
									expandLevels, drillPath, drillCounter);
							return object;
						},
						_create : function(context, parent, type,
								targetDimension, drillState, expandLevels,
								drillPath, drillCounter) {
							var object = new sap.firefly.QDrillOperation();
							object.setupDrillOperation(context, parent, type,
									targetDimension, drillState, expandLevels,
									drillPath, drillCounter);
							return object;
						}
					},
					m_drillPath : null,
					m_elementPath : null,
					m_drillState : null,
					m_targetDimension : null,
					m_type : null,
					m_expandLevels : 0,
					m_drillCounter : 0,
					cloneOlapComponent : function(context, parent) {
						var targetDimName = this.getTargetDimension().getName();
						var targetDim = context.getDimensionAccessor()
								.getDimensionByName(targetDimName);
						var clone = sap.firefly.QDrillOperation._create(
								context, null, this.m_type, targetDim,
								this.m_drillState, this.m_expandLevels,
								this.m_drillPath, this.m_drillCounter);
						clone.copyModelComponent(this);
						clone.m_elementPath = this.m_elementPath
								.createListCopy();
						return clone;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DRILL_OPERATION;
					},
					setupDrillOperation : function(context, parent, type,
							targetDimension, drillState, expandLevels,
							drillPath, drillCounter) {
						var size;
						var i;
						this.setupModelComponent(context, parent);
						this.m_type = type;
						this.m_expandLevels = expandLevels;
						this.m_drillPath = drillPath;
						this.m_drillState = drillState;
						this.m_targetDimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(targetDimension);
						this.m_drillCounter = drillCounter;
						if (drillPath !== null) {
							this.m_elementPath = sap.firefly.XList.create();
							size = drillPath.size();
							for (i = 0; i < size; i++) {
								this.m_elementPath.add(sap.firefly.QSelectValue
										.createDimensionElementCopy(context,
												drillPath.get(i)));
							}
							if ((targetDimension === null) && (size > 0)) {
								this.m_targetDimension = sap.firefly.XWeakReferenceUtil
										.getWeakRef(drillPath.get(size - 1)
												.getDimension());
							}
						}
					},
					releaseObject : function() {
						this.m_elementPath = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_elementPath);
						this.m_drillPath = null;
						this.m_drillState = null;
						this.m_targetDimension = null;
						this.m_type = null;
						sap.firefly.QDrillOperation.$superclass.releaseObject
								.call(this);
					},
					getDrillPath : function() {
						return this.m_drillPath;
					},
					getElementPath : function() {
						return this.m_elementPath;
					},
					getDrillState : function() {
						return this.m_drillState;
					},
					setDrillState : function(drillState) {
						if (this.m_drillState !== drillState) {
							this.notifyNodeChanged();
						}
						this.m_drillState = drillState;
					},
					getTargetDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_targetDimension);
					},
					getType : function() {
						return this.m_type;
					},
					getRelativeLevelCount : function() {
						return this.m_expandLevels;
					},
					getDrillCounter : function() {
						return this.m_drillCounter;
					},
					getUniqueName : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var size;
						var i;
						var element;
						var dimension;
						buffer.append("[");
						buffer.append(this.m_type.getName());
						buffer.append(":");
						if (this.m_targetDimension !== null) {
							buffer.append(this.getTargetDimension().getName());
						}
						buffer.append("]");
						if (this.m_drillPath !== null) {
							size = this.m_drillPath.size();
							for (i = 0; i < size; i++) {
								if ((i > 0)) {
									buffer.append("/");
								}
								element = this.m_drillPath.get(i);
								buffer.append("[");
								dimension = element.getDimension();
								if (dimension !== null) {
									buffer.append(dimension.getName());
								}
								buffer.append("]");
								buffer.append("{ ");
								buffer.append(element.getName());
								buffer.append("} ");
							}
						}
						return buffer.toString();
					},
					getPathUniqueName : function() {
						return this.getUniqueName();
					},
					setRelativeLevelCount : function(level) {
						if (this.m_expandLevels !== level) {
							this.notifyNodeChanged();
						}
						this.m_expandLevels = level;
					},
					getDrillManager : function() {
						return this.getParentComponent().getParentComponent();
					},
					supportsDrillCounter : function() {
						var drillManager = this.getDrillManager();
						if (drillManager === null) {
							return false;
						}
						return drillManager.supportsDrillCounter();
					},
					toString : function() {
						return this.getPathUniqueName();
					}
				});
$Firefly.createClass("sap.firefly.QDrillPathElement",
		sap.firefly.QModelComponent, {
			$statics : {
				create : function() {
					return sap.firefly.QDrillPathElement._create(null);
				},
				_create : function(context) {
					var object = new sap.firefly.QDrillPathElement();
					object.setupModelComponent(context, null);
					return object;
				}
			},
			m_dimension : null,
			m_hierarchyName : null,
			m_fieldName : null,
			cloneOlapComponent : function(context, parent) {
				var clone = sap.firefly.QDrillPathElement._create(context);
				clone.copyModelComponent(this);
				clone.m_dimension = this.m_dimension;
				clone.m_hierarchyName = this.m_hierarchyName;
				clone.m_fieldName = this.m_fieldName;
				return clone;
			},
			releaseObject : function() {
				this.m_dimension = sap.firefly.XObject
						.releaseIfNotNull(this.m_dimension);
				this.m_hierarchyName = null;
				this.m_fieldName = null;
				sap.firefly.QDrillPathElement.$superclass.releaseObject
						.call(this);
			},
			getOlapComponentType : function() {
				return this.getMemberType();
			},
			getType : function() {
				return this.getMemberType();
			},
			getMemberType : function() {
				return sap.firefly.MemberType.DRILL_PATH_ELEMENT;
			},
			getDimension : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_dimension);
			},
			setDimension : function(dimension) {
				this.m_dimension = sap.firefly.XWeakReferenceUtil
						.getWeakRef(dimension);
				if (dimension !== null) {
					this.m_hierarchyName = dimension.getHierarchyName();
					if (this.getFieldName() === null) {
						this.setFieldName(dimension.getKeyField().getName());
					}
				}
			},
			getFieldName : function() {
				return this.m_fieldName;
			},
			setFieldName : function(fieldName) {
				this.m_fieldName = fieldName;
			},
			getSelectValue : function() {
				return this.getName();
			},
			getSelectField : function() {
				if (this.m_dimension === null) {
					return null;
				}
				return this.getDimension().getFieldByName(this.m_fieldName);
			},
			getSelectHierarchyName : function() {
				return this.m_hierarchyName;
			},
			getSelectableElement : function() {
				return this;
			},
			isNode : function() {
				return this.getMemberType().isNode();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QEvaluate",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createEvaluate : function(dimension, lowValue,
								exception) {
							var evaluate;
							if ((dimension === null) || (exception === null)) {
								return null;
							}
							evaluate = new sap.firefly.QEvaluate();
							evaluate.setField(dimension.getKeyField());
							evaluate.setupEvaluate(lowValue, exception);
							return evaluate;
						},
						createEvaluateWithField : function(field, lowValue,
								exception) {
							var evaluate;
							if ((field === null) || (exception === null)) {
								return null;
							}
							evaluate = new sap.firefly.QEvaluate();
							evaluate.setField(field);
							evaluate.setupEvaluate(lowValue, exception);
							return evaluate;
						}
					},
					m_field : null,
					m_operator : null,
					m_lowValue : null,
					m_highValue : null,
					m_evaluate : null,
					copyEvaluate : function(origin) {
						sap.firefly.QEvaluate.$superclass.copyModelComponent
								.call(this, origin);
						this.setField(this.getField().getDimension()
								.getFieldByName(origin.getField().getName()));
						this.m_operator = origin.m_operator;
						this.m_evaluate = origin.m_evaluate;
						if (origin.m_highValue !== null) {
							this.setHighValue(origin.m_highValue.getValue()
									.clone());
						}
					},
					setupEvaluate : function(lowValue, exception) {
						this.setupModelComponent(exception.getContext(),
								exception);
						this.m_operator = sap.firefly.ComparisonOperator.EQUAL;
						this.m_lowValue = sap.firefly.XValueAccess.create();
						this.setLowValue(lowValue);
						this.m_evaluate = sap.firefly.QExceptionEvalType.ALL;
					},
					releaseObject : function() {
						this.m_operator = null;
						this.m_lowValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_lowValue);
						this.m_highValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_highValue);
						this.m_evaluate = null;
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						sap.firefly.QEvaluate.$superclass.releaseObject
								.call(this);
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					setField : function(field) {
						if (field === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The field is null.");
						}
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					getException : function() {
						return this.getParentComponent();
					},
					getOperator : function() {
						return this.m_operator;
					},
					setOperator : function(comparisonOperator) {
						this.m_operator = comparisonOperator;
					},
					getLowValue : function() {
						return this.m_lowValue;
					},
					setLowValue : function(lowValue) {
						if (lowValue !== null) {
							this.assertValueType(lowValue, this.getValueType());
						}
						this.setXValue(lowValue, this.m_lowValue);
					},
					getHighValue : function() {
						if (this.m_highValue === null) {
							this.m_highValue = sap.firefly.XValueAccess
									.create();
						}
						return this.m_highValue;
					},
					setHighValue : function(highValue) {
						if (highValue !== null) {
							this
									.assertValueType(highValue, this
											.getValueType());
						}
						this.setXValue(highValue, this.getHighValue());
					},
					setXValue : function(value, mValueAccess) {
						var message;
						if (value === null) {
							return;
						}
						if (this.getValueType() === sap.firefly.XValueType.INTEGER) {
							mValueAccess.setIntegerValue((value)
									.getIntegerValue());
						} else {
							if (this.getValueType() === sap.firefly.XValueType.STRING) {
								mValueAccess.setStringValue((value)
										.getStringValue());
							} else {
								if (this.getValueType() === sap.firefly.XValueType.DOUBLE) {
									mValueAccess.setDoubleValue((value)
											.getDoubleValue());
								} else {
									if (this.getValueType() === sap.firefly.XValueType.BOOLEAN) {
										mValueAccess.setBooleanValue((value)
												.getBooleanValue());
									} else {
										if (this.getValueType() === sap.firefly.XValueType.DATE) {
											mValueAccess.setDateValue((value));
										} else {
											if (this.getValueType() === sap.firefly.XValueType.TIME) {
												mValueAccess
														.setTimeValue((value));
											} else {
												if (this.getValueType() === sap.firefly.XValueType.DATE_TIME) {
													mValueAccess
															.setDateTimeValue((value));
												} else {
													if (this.getValueType() === sap.firefly.XValueType.TIMESPAN) {
														mValueAccess
																.setTimeSpanValue((value));
													} else {
														if (this.getValueType() === sap.firefly.XValueType.LONG) {
															mValueAccess
																	.setLongValue((value)
																			.getLongValue());
														} else {
															message = sap.firefly.XStringBuffer
																	.create();
															message
																	.append("Value type of Evaluate is not supported. Expected '");
															message
																	.append(this
																			.getValueType()
																			.getName());
															message
																	.append("'!");
															throw sap.firefly.XException
																	.createIllegalArgumentException(message
																			.toString());
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					setIntervall : function(lowValue, highValue) {
						if (lowValue.getValueType().isEqualTo(
								highValue.getValueType()) === false) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Value type of low value and high value differ.");
						}
						this.setLowValue(lowValue);
						this.setHighValue(highValue);
					},
					getValueType : function() {
						return this.getField().getValueType();
					},
					getEvaluate : function() {
						return this.m_evaluate;
					},
					setEvaluate : function(evaluate) {
						this.m_evaluate = evaluate;
					},
					getDimension : function() {
						return this.getField().getDimension();
					},
					setDimension : function(dimension) {
						if (dimension === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The dimension is null.");
						}
						this.setField(dimension.getKeyField());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QException",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createException : function(context, model, name, text) {
							var exception = new sap.firefly.QException();
							exception
									.setupException(context, model, name, text);
							return exception;
						}
					},
					m_evaluateDefault : null,
					m_headerSetting : null,
					m_evaluates : null,
					m_thresholds : null,
					m_evaluatedBeforePostAggregation : false,
					m_isActive : false,
					m_isChangeable : false,
					m_measure : null,
					copyException : function(origin) {
						var size;
						var i;
						var originThreshold;
						var cloneThreshold;
						var queryModel;
						var originEvaluate;
						var dimension;
						var cloneEvaluate;
						var origMeasure;
						sap.firefly.QException.$superclass.copyModelComponent
								.call(this, origin);
						size = origin.m_thresholds.size();
						for (i = 0; i < size; i++) {
							originThreshold = origin.m_thresholds.get(i);
							cloneThreshold = this.addNewThreshold(0,
									originThreshold.getAlertLevel());
							cloneThreshold.copyThreshold(originThreshold);
						}
						queryModel = this.getQueryModel();
						if (origin.m_evaluates !== null) {
							size = origin.m_evaluates.size();
							for (i = 0; i < size; i++) {
								originEvaluate = origin.m_evaluates.get(i);
								dimension = queryModel
										.getDimensionByName(originEvaluate
												.getDimension().getName());
								cloneEvaluate = sap.firefly.QEvaluate
										.createEvaluate(dimension,
												originEvaluate.getLowValue()
														.getValue().clone(),
												this);
								cloneEvaluate.copyEvaluate(originEvaluate);
								this.addEvaluate(cloneEvaluate);
							}
						}
						origMeasure = origin.getMeasure();
						this.setMeasure(queryModel.getDimensionByName(
								origMeasure.getDimension().getName())
								.getStructureMember(origMeasure.getName()));
						this.m_evaluateDefault = origin.m_evaluateDefault;
						this.m_headerSetting = origin.m_headerSetting;
						this.m_evaluatedBeforePostAggregation = origin.m_evaluatedBeforePostAggregation;
						this.m_isActive = origin.m_isActive;
						this.m_isChangeable = origin.m_isChangeable;
					},
					setupException : function(context, model, name, text) {
						this.setupModelComponent(context, model);
						this.setName(name);
						this.setText(text);
						this.m_isChangeable = true;
						this.m_thresholds = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, false,
										"Thresholds");
						this.m_evaluateDefault = sap.firefly.QExceptionEvalType.ALL;
						this.m_headerSetting = sap.firefly.QExceptionHeaderSettings.NONE;
						this.m_evaluatedBeforePostAggregation = false;
						this.m_isActive = true;
					},
					releaseObject : function() {
						this.m_thresholds = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_thresholds);
						this.m_evaluates = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_evaluates);
						this.m_evaluateDefault = null;
						this.m_headerSetting = null;
						this.m_measure = sap.firefly.XObject
								.releaseIfNotNull(this.m_measure);
						sap.firefly.QException.$superclass.releaseObject
								.call(this);
					},
					lazyLoadEvaluateList : function() {
						if (this.m_evaluates === null) {
							this.m_evaluates = sap.firefly.QModelComponentList
									.createModelComponentList(
											this.getContext(), this, false,
											"Evaluates");
						}
					},
					addEvaluate : function(evaluate) {
						this.lazyLoadEvaluateList();
						this.insertEvaluate(this.m_evaluates.size(), evaluate);
						this.notifyNodeChanged();
					},
					addNewEvaluate : function(dimension, lowValue) {
						var evaluate;
						this.assertIsChangeable();
						evaluate = this.newEvaluate(dimension, lowValue);
						this.addEvaluate(evaluate);
						return evaluate;
					},
					addNewEvaluateWithField : function(field, lowValue) {
						var evaluate = this.newEvaluateWithField(field,
								lowValue);
						this.addEvaluate(evaluate);
						return evaluate;
					},
					addNewThreshold : function(lowValue, alertLevel) {
						var threshold;
						this.assertIsChangeable();
						threshold = this.newThreshold(lowValue, alertLevel);
						this.addThreshold(threshold);
						return threshold;
					},
					addNewThresholdWithString : function(lowValue, alertLevel) {
						var threshold = this.newThresholdWithString(lowValue,
								alertLevel);
						this.addThreshold(threshold);
						return threshold;
					},
					addThreshold : function(threshold) {
						this.insertThreshold(this.m_thresholds.size(),
								threshold);
						this.notifyNodeChanged();
					},
					assertIsChangeable : function() {
						if (this.m_isChangeable === false) {
							throw sap.firefly.XException
									.createRuntimeException(sap.firefly.XStringUtils
											.concatenate3("The exception '",
													this.getName(),
													"' is not changeable!"));
						}
					},
					getEvaluateDefault : function() {
						return this.m_evaluateDefault;
					},
					getEvaluates : function() {
						if (this.m_evaluates === null) {
							return sap.firefly.XList.create();
						}
						return this.m_evaluates.getValuesAsReadOnlyList();
					},
					getHeaderSetting : function() {
						return this.m_headerSetting;
					},
					getMeasure : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_measure);
					},
					getThresholds : function() {
						return this.m_thresholds;
					},
					insertEvaluate : function(index, evaluate) {
						this.lazyLoadEvaluateList();
						this.assertIsChangeable();
						if (evaluate === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The evaluate is null.");
						}
						if (evaluate.getException() !== this) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The evaluate was created by another exception and can't be bound to this one.");
						}
						if (index >= this.m_evaluates.size()) {
							this.m_evaluates.add(evaluate);
						} else {
							if (index >= 0) {
								this.m_evaluates.set(index, evaluate);
							} else {
								this.m_evaluates.insert(0, evaluate);
							}
						}
						this.notifyNodeChanged();
					},
					insertThreshold : function(index, threshold) {
						this.assertIsChangeable();
						if (threshold === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The threshold is null.");
						}
						if (threshold.getException() !== this) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The threshold was created by another exception and can't be bound to this one.");
						}
						if (index >= this.m_thresholds.size()) {
							this.m_thresholds.add(threshold);
						} else {
							if (index >= 0) {
								this.m_thresholds.set(index, threshold);
							} else {
								this.m_thresholds.insert(0, threshold);
							}
						}
						this.notifyNodeChanged();
					},
					isActive : function() {
						return this.m_isActive;
					},
					isChangeable : function() {
						return this.m_isChangeable;
					},
					isEvaluatedAfterCalculations : function() {
						return this.m_evaluatedBeforePostAggregation;
					},
					newEvaluate : function(dimension, lowValue) {
						if (dimension === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The dimension is null.");
						}
						if ((lowValue !== null)
								&& (lowValue.getValueType().isEqualTo(
										dimension.getKeyField().getValueType()) === false)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Type of low value doesn't match value type of the dimension.");
						}
						return sap.firefly.QEvaluate.createEvaluate(dimension,
								lowValue, this);
					},
					newEvaluateWithField : function(field, lowValue) {
						if (field === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The field is null.");
						}
						if ((lowValue !== null)
								&& (lowValue.getValueType().isEqualTo(
										field.getValueType()) === false)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Type of low value doesn't match value type of the field.");
						}
						return sap.firefly.QEvaluate.createEvaluateWithField(
								field, lowValue, this);
					},
					newThreshold : function(lowValue, alertLevel) {
						return sap.firefly.QThreshold.createThreshold(this
								.getContext(), lowValue, alertLevel, this);
					},
					newThresholdWithString : function(lowValue, alertLevel) {
						return sap.firefly.QThreshold
								.createThresholdWithString(this.getContext(),
										lowValue, alertLevel, this);
					},
					setActive : function(active) {
						this.m_isActive = active;
						this.notifyNodeChanged();
					},
					setEvaluateDefault : function(evaluateDefault) {
						this.assertIsChangeable();
						this.m_evaluateDefault = evaluateDefault;
						this.notifyNodeChanged();
					},
					setEvaluationAfterCalculations : function(afterCalculations) {
						this.assertIsChangeable();
						this.m_evaluatedBeforePostAggregation = afterCalculations;
						this.notifyNodeChanged();
					},
					assertBw : function() {
						if (this.getQueryModel().getQueryManager()
								.getSystemDescription().getSystemType()
								.isTypeOf(sap.firefly.SystemType.BW) === false) {
							throw sap.firefly.XException
									.createRuntimeException("This is only supported for BW systems!");
						}
					},
					setHeaderSetting : function(headerSetting) {
						if (this.m_headerSetting !== headerSetting) {
							this.assertIsChangeable();
							this.assertBw();
							this.m_headerSetting = headerSetting;
							this.notifyNodeChanged();
						}
					},
					setIsChangeable : function(isChangeable) {
						this.m_isChangeable = isChangeable;
					},
					setMeasure : function(measure) {
						this.assertIsChangeable();
						if (measure === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The structure member is null.");
						}
						this.m_measure = sap.firefly.XWeakReferenceUtil
								.getWeakRef(measure);
						this.notifyNodeChanged();
					},
					setHeaderSettingBase : function(headerSetting) {
						this.m_headerSetting = headerSetting;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QSettings",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createSetting : function(context, name, priority,
								threshold) {
							var setting;
							if (threshold === null) {
								return null;
							}
							setting = new sap.firefly.QSettings();
							setting.setName(name);
							setting.setupSetting(context, priority, threshold);
							return setting;
						},
						createSettingWithConstant : function(context,
								exceptionSetting, priority, threshold) {
							var setting;
							if (threshold === null) {
								return null;
							}
							setting = new sap.firefly.QSettings();
							setting.setName(exceptionSetting.getName());
							setting.setupSetting(context, priority, threshold);
							return setting;
						}
					},
					m_value : null,
					m_setting : null,
					m_priority : 0,
					setupSetting : function(context, priority, threshold) {
						this.setupModelComponent(context, threshold);
						this.m_priority = priority;
						this.setParent(threshold);
					},
					releaseObject : function() {
						this.m_setting = null;
						this.m_value = null;
						sap.firefly.QSettings.$superclass.releaseObject
								.call(this);
					},
					setValue : function(value) {
						this.m_value = value;
						this.notifyNodeChanged();
					},
					getValue : function() {
						return this.m_value;
					},
					setPriority : function(priority) {
						if (this.m_priority !== priority) {
							this.m_priority = priority;
							this.notifyNodeChanged();
						}
					},
					getPriority : function() {
						return this.m_priority;
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						sb.append(this.getName());
						sb.append(": ");
						sb.append(this.getValue());
						sb.append(" Prio: ");
						sb.appendInt(this.getPriority());
						return sb.toString();
					},
					isEqualTo : function(other) {
						var otherSetting;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						otherSetting = other;
						if (sap.firefly.XString.isEqual(this.getName(),
								otherSetting.getName()) === false) {
							return false;
						}
						if (sap.firefly.XString.isEqual(this.getValue(),
								otherSetting.getValue()) === false) {
							return false;
						}
						if (this.getPriority() !== otherSetting.getPriority()) {
							return false;
						}
						return true;
					},
					compareTo : function(objectToCompare) {
						var otherSetting;
						if (objectToCompare === null) {
							return 1;
						}
						otherSetting = objectToCompare;
						if (sap.firefly.XString.isEqual(this.getName(),
								otherSetting.getName()) === false) {
							return sap.firefly.XString.compare(this.getName(),
									otherSetting.getName());
						}
						if (sap.firefly.XString.isEqual(this.getValue(),
								otherSetting.getValue()) === false) {
							return sap.firefly.XString.compare(this.getValue(),
									otherSetting.getValue());
						}
						if (this.getPriority() !== otherSetting.getPriority()) {
							return (this.getPriority() - otherSetting
									.getPriority());
						}
						return 0;
					},
					setSetting : function(setting) {
						if (setting === null) {
							throw sap.firefly.XException
									.createIllegalStateException("The ExceptionSetting must not be null.");
						}
						this.m_setting = setting;
						this.setName(setting.getName());
						this.notifyNodeChanged();
					},
					getSetting : function() {
						return this.m_setting;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QField",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_createField : function(context, dimension, type) {
							var attribute = new sap.firefly.QField();
							attribute.setupField(context, dimension, type);
							return attribute;
						}
					},
					m_mappedColumnName : null,
					m_sqlType : null,
					m_aliasName : null,
					m_attribute : null,
					m_presentationType : null,
					m_infoObjectType : null,
					m_visibilityType : null,
					m_valueType : null,
					m_textTransformationType : null,
					m_usageType : null,
					m_dependencyFields : null,
					m_isSelectable : false,
					m_isHierarchyKeyField : false,
					m_isFlatKeyField : false,
					m_isDefaultTextField : false,
					m_isHierarchyPathField : false,
					m_isLowerCaseEnabled : false,
					m_isDisplayAttributeField : false,
					m_isCubeBlendingPropertiesField : false,
					m_conversionRoutine : null,
					m_initialValue : null,
					m_decimals : 0,
					m_length : 0,
					m_precision : 0,
					m_alwaysRequested : false,
					m_lowerBound : null,
					m_upperBound : null,
					m_attributeType : null,
					m_navigationalAttributeDescription : null,
					cloneOlapComponent : function(context, parent) {
						var clone = sap.firefly.QField._createField(context,
								null, this.m_presentationType);
						clone.copyField(this);
						return clone;
					},
					copyField : function(origin) {
						sap.firefly.QField.$superclass.copyModelComponent.call(
								this, origin);
						this.m_mappedColumnName = origin.m_mappedColumnName;
						this.m_sqlType = origin.m_sqlType;
						this.m_aliasName = origin.m_aliasName;
						this.m_attribute = origin.m_attribute;
						this.m_presentationType = origin.m_presentationType;
						this.m_infoObjectType = origin.m_infoObjectType;
						this.m_visibilityType = origin.m_visibilityType;
						this.m_valueType = origin.m_valueType;
						this.m_textTransformationType = origin.m_textTransformationType;
						this.m_usageType = origin.m_usageType;
						if (origin.m_dependencyFields !== null) {
							this.m_dependencyFields = origin.m_dependencyFields
									.createListOfStringCopy();
						}
						this.m_isSelectable = origin.m_isSelectable;
						this.m_isHierarchyKeyField = origin.m_isHierarchyKeyField;
						this.m_isFlatKeyField = origin.m_isFlatKeyField;
						this.m_isDefaultTextField = origin.m_isDefaultTextField;
						this.m_isHierarchyPathField = origin.m_isHierarchyPathField;
						this.m_isLowerCaseEnabled = origin.m_isLowerCaseEnabled;
						this.m_isDisplayAttributeField = origin.m_isDisplayAttributeField;
						this.m_isCubeBlendingPropertiesField = origin.m_isCubeBlendingPropertiesField;
						this.m_conversionRoutine = origin.m_conversionRoutine;
						this.m_initialValue = origin.m_initialValue;
						this.m_decimals = origin.m_decimals;
						this.m_length = origin.m_length;
						this.m_precision = origin.m_precision;
						this.m_alwaysRequested = origin.m_alwaysRequested;
						this.m_lowerBound = origin.m_lowerBound;
						this.m_upperBound = origin.m_upperBound;
						this.m_attributeType = origin.m_attributeType;
						this.m_navigationalAttributeDescription = origin.m_navigationalAttributeDescription;
					},
					setupField : function(context, dimension, type) {
						this.setupModelComponent(context, dimension);
						this.setPresentationType(type);
						this.setValueType(sap.firefly.XValueType.STRING);
						this.setUsageType(sap.firefly.FieldUsageType.ALL);
						if (type === sap.firefly.PresentationType.KEY) {
							this.setText("Key");
							this.setName("KEY");
						}
						this.m_isSelectable = true;
					},
					releaseObject : function() {
						this.m_mappedColumnName = null;
						this.m_aliasName = null;
						this.m_attribute = null;
						this.m_sqlType = null;
						this.m_presentationType = null;
						this.m_infoObjectType = null;
						this.m_visibilityType = null;
						this.m_valueType = null;
						this.m_textTransformationType = null;
						this.m_usageType = null;
						this.m_dependencyFields = sap.firefly.XObject
								.releaseIfNotNull(this.m_dependencyFields);
						this.m_conversionRoutine = null;
						this.m_initialValue = null;
						this.m_lowerBound = null;
						this.m_upperBound = null;
						this.m_attributeType = null;
						this.m_navigationalAttributeDescription = null;
						sap.firefly.QField.$superclass.releaseObject.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD;
					},
					setDimension : function(dimension) {
						this.setParent(dimension);
					},
					getDimension : function() {
						return this.getParentComponent();
					},
					getDimensionBase : function() {
						return this.getParentComponent();
					},
					getResultSetSorting : function() {
						var queryModel = this.getQueryModel();
						var sortManager;
						if (queryModel === null) {
							return null;
						}
						sortManager = queryModel.getSortingManager();
						return sortManager.getFieldSorting(this, true);
					},
					supportsSorting : function() {
						var queryModel = this.getQueryModel();
						var sortManager;
						if (queryModel === null) {
							return false;
						}
						sortManager = queryModel.getSortingManager();
						return sortManager.supportsFieldSorting(this);
					},
					hasSorting : function() {
						var queryModel = this.getQueryModel();
						var sortManager;
						var fieldSorting;
						if (queryModel === null) {
							return false;
						}
						sortManager = queryModel.getSortingManager();
						fieldSorting = sortManager.getFieldSorting(this, false);
						return fieldSorting !== null;
					},
					getPresentationType : function() {
						return this.m_presentationType;
					},
					setPresentationType : function(presentationType) {
						this.m_presentationType = presentationType;
					},
					getValueType : function() {
						return this.m_valueType;
					},
					setValueType : function(valueType) {
						this.m_valueType = valueType;
					},
					createFieldLiteralValue : function() {
						return sap.firefly.QFieldValue.createLiteral(this
								.getContext(), this);
					},
					isKeyField : function() {
						return this.m_isHierarchyKeyField
								|| this.m_isFlatKeyField
								|| (this.m_presentationType === sap.firefly.PresentationType.KEY_NOT_COMPOUND);
					},
					isHierarchyKeyField : function() {
						return this.m_isHierarchyKeyField;
					},
					setIsHierarchyKeyField : function(isHierarchyKeyField) {
						this.m_isHierarchyKeyField = isHierarchyKeyField;
					},
					isFlatKeyField : function() {
						return this.m_isFlatKeyField;
					},
					setIsFlatKeyField : function(isFlatKeyField) {
						this.m_isFlatKeyField = isFlatKeyField;
					},
					isDefaultTextField : function() {
						return this.m_isDefaultTextField;
					},
					setIsFlatTextField : function(isDefaultTextField) {
						this.m_isDefaultTextField = isDefaultTextField;
					},
					getAttribute : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_attribute);
					},
					setAttribute : function(attribute) {
						this.m_attribute = sap.firefly.XWeakReferenceUtil
								.getWeakRef(attribute);
					},
					setDecimals : function(decimals) {
						this.m_decimals = decimals;
					},
					setPrecision : function(precision) {
						this.m_precision = precision;
					},
					getDecimals : function() {
						return this.m_decimals;
					},
					getPrecision : function() {
						return this.m_precision;
					},
					getIsLowerCaseEnabled : function() {
						return this.m_isLowerCaseEnabled;
					},
					setIsLowerCaseEnabled : function(lowerCaseEnabled) {
						this.m_isLowerCaseEnabled = lowerCaseEnabled;
					},
					getConversionRoutine : function() {
						return this.m_conversionRoutine;
					},
					setConversionRoutine : function(conversionRoutine) {
						this.m_conversionRoutine = conversionRoutine;
					},
					getInitialValue : function() {
						return this.m_initialValue;
					},
					setInitialValue : function(initialValue) {
						this.m_initialValue = initialValue;
					},
					getLength : function() {
						return this.m_length;
					},
					setLength : function(length) {
						this.m_length = length;
					},
					getInfoObjectType : function() {
						return this.m_infoObjectType;
					},
					setInfoObjectType : function(infoObjectType) {
						this.m_infoObjectType = infoObjectType;
					},
					getVisibilityType : function() {
						return this.m_visibilityType;
					},
					setVisibilityType : function(visibilityType) {
						this.m_visibilityType = visibilityType;
					},
					getDependencyFields : function() {
						if (this.m_dependencyFields === null) {
							return sap.firefly.XListOfString.create();
						}
						return this.m_dependencyFields;
					},
					addDependencyField : function(dependentFieldName) {
						if (this.m_dependencyFields === null) {
							this.m_dependencyFields = sap.firefly.XListOfString
									.create();
						}
						this.m_dependencyFields.add(dependentFieldName);
					},
					getAliasName : function() {
						return this.m_aliasName;
					},
					setAliasName : function(aliasName) {
						this.m_aliasName = aliasName;
					},
					isDisplayAttributeField : function() {
						return this.m_isDisplayAttributeField;
					},
					setIsDisplayAttributeField : function(
							isDisplayAttributeField) {
						this.m_isDisplayAttributeField = isDisplayAttributeField;
					},
					getUsageType : function() {
						return this.m_usageType;
					},
					setUsageType : function(usageType) {
						if (this.m_usageType === null) {
							this.m_usageType = usageType;
						}
					},
					isAlwaysRequested : function() {
						return this.m_alwaysRequested;
					},
					setAlwaysRequested : function(alwaysRequested) {
						this.m_alwaysRequested = alwaysRequested;
					},
					setLowerBound : function(lowerBound) {
						this.m_lowerBound = lowerBound;
					},
					setUpperBound : function(upperBound) {
						this.m_upperBound = upperBound;
					},
					getUpperBound : function() {
						return this.m_upperBound;
					},
					getLowerBound : function() {
						return this.m_lowerBound;
					},
					supportsSpatialTransformation : function() {
						return this.getQueryModel()
								.supportsSpatialTransformation();
					},
					setTextTransformation : function(textTransformationType) {
						if (textTransformationType
								.isTypeOf(sap.firefly.TextTransformationType.SPATIAL_TRANSFORMATION)
								&& (this.supportsSpatialTransformation() === false)) {
							this.m_textTransformationType = null;
							return;
						}
						this.m_textTransformationType = textTransformationType;
					},
					getTextTransformation : function() {
						return this.m_textTransformationType;
					},
					isHierarchyPathField : function() {
						return this.m_isHierarchyPathField;
					},
					setIsHierarchyPathField : function(isHierarchyPathField) {
						this.m_isHierarchyPathField = isHierarchyPathField;
					},
					isCubeBlendingPropertiesField : function() {
						return this.m_isCubeBlendingPropertiesField;
					},
					setIsCubeBlendingPropertiesField : function(
							isBlendingPropertiesField) {
						this.m_isCubeBlendingPropertiesField = isBlendingPropertiesField;
					},
					getMappedColumnName : function() {
						return this.m_mappedColumnName;
					},
					setMappedColumnName : function(columnName) {
						this.m_mappedColumnName = columnName;
					},
					getNavigationalAttributeDescription : function() {
						return this.m_navigationalAttributeDescription;
					},
					setNavigationalAttributeDescription : function(
							navigationalAttributeDescription) {
						this.m_navigationalAttributeDescription = navigationalAttributeDescription;
					},
					getAttributeType : function() {
						return this.m_attributeType;
					},
					setAttributeType : function(attributeType) {
						this.m_attributeType = attributeType;
					},
					isFilterable : function() {
						return this.m_isSelectable;
					},
					setIsFilterable : function(isSelectable) {
						this.m_isSelectable = isSelectable;
					},
					getSqlType : function() {
						return this.m_sqlType;
					},
					setSqlType : function(sqlType) {
						this.m_sqlType = sqlType;
					},
					isEqualTo : function(other) {
						var xOther;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						xOther = other;
						if (this.getAttribute() !== xOther.getAttribute()) {
							return false;
						}
						if (this.getDimension() !== xOther.getDimension()) {
							return false;
						}
						if (sap.firefly.XString.isEqual(this.getName(), xOther
								.getName()) === false) {
							return false;
						}
						return true;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFieldContainer",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, dimension) {
							var object = new sap.firefly.QFieldContainer();
							object.setupFieldContainer(context, dimension,
									"Fields");
							return object;
						}
					},
					m_defaultResultSetFields : null,
					m_hasFixedResultSetFields : false,
					m_resultSetFields : null,
					m_selectorFields : null,
					m_allFields : null,
					m_flatFieldMapByType : null,
					m_hierarchyFieldMapByType : null,
					m_flatKeyField : null,
					m_flatTextField : null,
					m_flatDisplayKeyField : null,
					m_hierarchyKeyField : null,
					m_hierarchyTextField : null,
					m_hierarchyDisplayKeyField : null,
					m_hierarchyPathField : null,
					m_cubeBlendingPropertiesField : null,
					getFieldFromDimensionIfNull : function(fieldName) {
						var fieldByName = this.m_allFields.getByKey(fieldName);
						if (fieldByName === null) {
							fieldByName = this.getDimension().getFieldByName(
									fieldName);
						}
						return fieldByName;
					},
					copyFieldContainer : function(origin) {
						var dimension;
						var size;
						var context;
						var i;
						var origField;
						var cloneField;
						var byKey;
						sap.firefly.QFieldContainer.$superclass.copyModelComponent
								.call(this, origin);
						this.m_hasFixedResultSetFields = origin.m_hasFixedResultSetFields;
						dimension = this.getDimension();
						size = origin.m_allFields.size();
						context = this.getContext();
						i = 0;
						for (i = 0; i < size; i++) {
							origField = origin.m_allFields.get(i);
							cloneField = sap.firefly.QField._createField(
									context, dimension, origField
											.getPresentationType());
							cloneField.copyField(origField);
							(this.m_allFields).addIfNotNull(cloneField);
						}
						(this.m_allFields).copyFieldList(origin.m_allFields);
						size = origin.m_resultSetFields.size();
						for (i = 0; i < size; i++) {
							(this.m_resultSetFields)
									.addIfNotNull(this.m_allFields
											.getByKey(origin.m_resultSetFields
													.get(i).getName()));
						}
						(this.m_resultSetFields)
								.copyFieldList(origin.m_resultSetFields);
						size = origin.m_defaultResultSetFields.size();
						for (i = 0; i < size; i++) {
							byKey = this.m_allFields
									.getByKey(origin.m_defaultResultSetFields
											.get(i).getName());
							this.m_defaultResultSetFields.add(byKey);
							(this.m_selectorFields).addIfNotNull(byKey);
						}
						(this.m_selectorFields)
								.copyFieldList(origin.m_selectorFields);
						if (origin.m_flatKeyField !== null) {
							this.setFlatKeyField(this
									.getFieldFromDimensionIfNull(origin
											.getFlatKeyField().getName()));
						}
						if (origin.m_flatTextField !== null) {
							this.setFlatTextField(this
									.getFieldFromDimensionIfNull(origin
											.getFlatTextField().getName()));
						}
						if (origin.m_flatDisplayKeyField !== null) {
							this
									.setFlatDisplayKeyField(this
											.getFieldFromDimensionIfNull(origin
													.getFlatDisplayKeyField()
													.getName()));
						}
						if (origin.m_hierarchyKeyField !== null) {
							this.setHierachyKeyField(this
									.getFieldFromDimensionIfNull(origin
											.getHierarchyKeyField().getName()));
						}
						if (origin.m_hierarchyTextField !== null) {
							this
									.setHierarchyTextField(this
											.getFieldFromDimensionIfNull(origin
													.getHierarchyTextField()
													.getName()));
						}
						if (origin.m_hierarchyDisplayKeyField !== null) {
							this.setHierarchyDisplayKeyField(this
									.getFieldFromDimensionIfNull(origin
											.getHierarchyDisplayKeyField()
											.getName()));
						}
						if (origin.m_hierarchyPathField !== null) {
							this
									.setHierarchyPathField(this
											.getFieldFromDimensionIfNull(origin
													.getHierarchyPathField()
													.getName()));
						}
						if (origin.m_cubeBlendingPropertiesField !== null) {
							this.setCubeBlendingPropertiesField(this
									.getFieldFromDimensionIfNull(origin
											.getCubeBlendingPropertiesField()
											.getName()));
						}
					},
					setupFieldContainer : function(context, dimension, name) {
						this.setupModelComponent(context, dimension);
						this.setName(name);
						this.m_defaultResultSetFields = sap.firefly.XListWeakRef
								.create();
						this.m_resultSetFields = sap.firefly.QFieldList
								.createFieldList(this, this, false,
										"Result Set Fields");
						this.m_selectorFields = sap.firefly.QFieldList
								.createFieldList(this, this, false,
										"Selector Fields");
						this.m_allFields = sap.firefly.QFieldList
								.createFieldList(this, this, false,
										"All Fields");
						this.m_flatFieldMapByType = sap.firefly.XWeakMap
								.create();
						this.m_hierarchyFieldMapByType = sap.firefly.XWeakMap
								.create();
					},
					releaseObject : function() {
						this.m_defaultResultSetFields = sap.firefly.XObject
								.releaseIfNotNull(this.m_defaultResultSetFields);
						this.m_resultSetFields = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_resultSetFields);
						this.m_selectorFields = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_selectorFields);
						this.m_allFields = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_allFields);
						this.m_flatFieldMapByType = sap.firefly.XObject
								.releaseIfNotNull(this.m_flatFieldMapByType);
						this.m_hierarchyFieldMapByType = sap.firefly.XObject
								.releaseIfNotNull(this.m_hierarchyFieldMapByType);
						this.m_flatKeyField = null;
						this.m_flatTextField = null;
						this.m_flatDisplayKeyField = null;
						this.m_hierarchyKeyField = null;
						this.m_hierarchyTextField = null;
						this.m_hierarchyDisplayKeyField = null;
						this.m_hierarchyPathField = null;
						this.m_cubeBlendingPropertiesField = null;
						sap.firefly.QFieldContainer.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD_CONTAINER;
					},
					getFields : function() {
						return this.m_allFields;
					},
					getFieldByName : function(name) {
						return this.m_allFields.getByKey(name);
					},
					getFieldByNameOrAlias : function(name) {
						return this.m_allFields.getFieldByNameOrAlias(name);
					},
					getFirstFieldByType : function(type) {
						return this.m_allFields.getFirstFieldByType(type);
					},
					getResultSetFields : function() {
						return this.m_resultSetFields;
					},
					getSelectorFields : function() {
						return this.m_selectorFields;
					},
					getFieldByPresentationType : function(presentationType) {
						var field = null;
						if (presentationType !== null) {
							if (presentationType === sap.firefly.PresentationType.ACTIVE_KEY) {
								field = this.getKeyField();
							} else {
								if (presentationType === sap.firefly.PresentationType.ACTIVE_DISPLAY_KEY) {
									field = this.getDisplayKeyField();
								} else {
									if (presentationType === sap.firefly.PresentationType.ACTIVE_TEXT) {
										field = this.getTextField();
									} else {
										if (this.getDimension()
												.isHierarchyActive()) {
											field = this.m_hierarchyFieldMapByType
													.getByKey(presentationType
															.getName());
										} else {
											field = this.m_flatFieldMapByType
													.getByKey(presentationType
															.getName());
										}
									}
								}
							}
						}
						return field;
					},
					getKeyField : function() {
						if (this.getDimension().isHierarchyActive()) {
							return this.getHierarchyKeyField();
						}
						return this.getFlatKeyField();
					},
					getKeyFieldExt : function(context) {
						if (context === sap.firefly.QContextType.RESULT_SET) {
							if (this.getDimension().isHierarchyActive()) {
								return this.getHierarchyKeyField();
							}
							return this.getFlatKeyField();
						}
						if (this.getDimension().isSelectorHierarchyActive()) {
							return this.getHierarchyKeyField();
						}
						return this.getFlatKeyField();
					},
					getTextField : function() {
						if (this.getDimension().isHierarchyActive()) {
							return this.getHierarchyTextField();
						}
						return this.getFlatTextField();
					},
					getDisplayKeyField : function() {
						if (this.getDimension().isHierarchyActive()) {
							return this.getHierarchyDisplayKeyField();
						}
						return this.getFlatDisplayKeyField();
					},
					getFlatKeyField : function() {
						var size;
						var i;
						var field;
						if (this.m_flatKeyField === null) {
							size = this.m_allFields.size();
							for (i = 0; i < size; i++) {
								field = this.m_allFields.get(i);
								if (field.isFlatKeyField()) {
									this.m_flatKeyField = sap.firefly.XWeakReferenceUtil
											.getWeakRef(field);
									break;
								}
							}
							if (this.m_flatKeyField === null) {
								this.m_flatKeyField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this
												.getFirstFieldByType(sap.firefly.PresentationType.KEY));
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_flatKeyField);
					},
					getFlatTextField : function() {
						var size;
						var i;
						var field;
						if (this.m_flatTextField === null) {
							size = this.m_allFields.size();
							for (i = 0; i < size; i++) {
								field = this.m_allFields.get(i);
								if (field.isDefaultTextField()) {
									this.m_flatTextField = sap.firefly.XWeakReferenceUtil
											.getWeakRef(field);
									break;
								}
							}
							if (this.m_flatTextField === null) {
								this.m_flatTextField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this
												.getFirstFieldByType(sap.firefly.PresentationType.TEXT));
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_flatTextField);
					},
					getFlatDisplayKeyField : function() {
						if (this.m_flatDisplayKeyField === null) {
							this.m_flatDisplayKeyField = sap.firefly.XWeakReferenceUtil
									.getWeakRef(this
											.getFirstFieldByType(sap.firefly.PresentationType.DISPLAY_KEY));
							if (this.m_flatDisplayKeyField === null) {
								this.m_flatDisplayKeyField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this.getFlatKeyField());
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_flatDisplayKeyField);
					},
					setFlatKeyField : function(field) {
						this.m_flatKeyField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					setFlatTextField : function(field) {
						this.m_flatTextField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					setFlatDisplayKeyField : function(field) {
						this.m_flatDisplayKeyField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					getHierarchyKeyField : function() {
						if (this.m_hierarchyKeyField === null) {
							this.m_hierarchyKeyField = sap.firefly.XWeakReferenceUtil
									.getWeakRef(this
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_KEY));
							if (this.m_hierarchyKeyField === null) {
								this.m_hierarchyKeyField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this.getFlatKeyField());
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_hierarchyKeyField);
					},
					getHierarchyTextField : function() {
						if (this.m_hierarchyTextField === null) {
							this.m_hierarchyTextField = sap.firefly.XWeakReferenceUtil
									.getWeakRef(this
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_TEXT));
							if (this.m_hierarchyTextField === null) {
								this.m_hierarchyTextField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this.getFlatTextField());
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_hierarchyTextField);
					},
					getHierarchyDisplayKeyField : function() {
						if (this.m_hierarchyDisplayKeyField === null) {
							this.m_hierarchyDisplayKeyField = sap.firefly.XWeakReferenceUtil
									.getWeakRef(this
											.getFirstFieldByType(sap.firefly.PresentationType.HIERARCHY_DISPLAY_KEY));
							if (this.m_hierarchyDisplayKeyField === null) {
								this.m_hierarchyDisplayKeyField = sap.firefly.XWeakReferenceUtil
										.getWeakRef(this
												.getFlatDisplayKeyField());
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_hierarchyDisplayKeyField);
					},
					setHierachyKeyField : function(field) {
						this.m_hierarchyKeyField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					setHierarchyTextField : function(field) {
						this.m_hierarchyTextField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					setHierarchyDisplayKeyField : function(field) {
						this.m_hierarchyDisplayKeyField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					addField : function(field) {
						this.addFieldInternal(field);
						this.notifyNodeChanged();
					},
					addFieldInternal : function(field) {
						var usageType;
						var presentationName;
						(this.m_allFields).addInternal(field);
						usageType = field.getUsageType();
						presentationName = field.getPresentationType()
								.getName();
						if (usageType !== sap.firefly.FieldUsageType.FLAT) {
							if (this.m_hierarchyFieldMapByType
									.containsKey(presentationName) === false) {
								this.m_hierarchyFieldMapByType.put(
										presentationName, field);
							}
						}
						if (this.m_flatFieldMapByType
								.containsKey(presentationName) === false) {
							this.m_flatFieldMapByType.put(presentationName,
									field);
						}
					},
					addNewField : function(usageType, type, name, text) {
						var field = sap.firefly.QField._createField(this
								.getContext(), this.getDimension(), type);
						field.setName(name);
						field.setText(text);
						field.setUsageType(usageType);
						this.addField(field);
						return field;
					},
					getDimension : function() {
						return this.getParentComponent();
					},
					notifyChildChanged : function(changedNodes) {
						var dimension;
						var fieldLayoutType;
						var size;
						var i;
						var next;
						this.queueEventing();
						sap.firefly.QFieldContainer.$superclass.notifyChildChanged
								.call(this, changedNodes);
						dimension = this.getDimension();
						fieldLayoutType = this.getFieldLayoutType();
						size = changedNodes.size();
						for (i = 0; i < size; i++) {
							next = changedNodes.get(i);
							if (next === this.m_selectorFields) {
								dimension
										.setSelectorFieldLayoutType(fieldLayoutType);
							} else {
								if (next === this.m_resultSetFields) {
									dimension
											.setFieldLayoutType(fieldLayoutType);
								}
							}
						}
						this.resumeEventing();
					},
					getFieldLayoutType : function() {
						return sap.firefly.FieldLayoutType.FIELD_BASED;
					},
					isComponentNode : function() {
						return true;
					},
					getIndexedChildren : function() {
						var children = sap.firefly.XList.create();
						children.add(this.m_allFields);
						children.add(this.m_resultSetFields);
						children.add(this.m_selectorFields);
						return children.getIterator();
					},
					getFieldIterator : function() {
						return this.m_allFields.getIterator();
					},
					getFlatFieldsList : function() {
						return this
								.getFieldsList(sap.firefly.FieldUsageType.FLAT);
					},
					getHierarchyFieldsList : function() {
						return this
								.getFieldsList(sap.firefly.FieldUsageType.HIERARCHY);
					},
					getFieldsList : function(usageType) {
						var fields = sap.firefly.XListOfNameObject.create();
						var size = this.m_allFields.size();
						var i;
						var field;
						var currentUsageType;
						for (i = 0; i < size; i++) {
							field = this.m_allFields.get(i);
							currentUsageType = field.getUsageType();
							if ((field.isAlwaysRequested())
									|| (currentUsageType === sap.firefly.FieldUsageType.ALL)
									|| (currentUsageType === usageType)) {
								fields.add(field);
							}
						}
						return fields;
					},
					getHierarchyPathField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_hierarchyPathField);
					},
					setHierarchyPathField : function(field) {
						this.m_hierarchyPathField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					getDefaultResultSetFields : function() {
						return this.m_defaultResultSetFields;
					},
					addDefaultResultSetField : function(field) {
						this.m_defaultResultSetFields.add(field);
					},
					clearDefaultResultSetFields : function() {
						this.m_defaultResultSetFields.clear();
					},
					hasFixedResultSetFields : function() {
						return this.m_hasFixedResultSetFields;
					},
					setHasFixedResultSetFields : function(
							hasFixedResultSetFields) {
						this.m_hasFixedResultSetFields = hasFixedResultSetFields;
					},
					getFieldsExt : function(context) {
						if (context === sap.firefly.QContextType.RESULT_SET) {
							return this.m_resultSetFields;
						}
						return this.m_selectorFields;
					},
					getFieldsListByActiveUsageType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldsListByActiveUsageTypeExt : function(context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setCubeBlendingPropertiesField : function(
							blendingPropertiesField) {
						this.m_cubeBlendingPropertiesField = sap.firefly.XWeakReferenceUtil
								.getWeakRef(blendingPropertiesField);
					},
					getCubeBlendingPropertiesField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_cubeBlendingPropertiesField);
					},
					mergeDeepRecursive : function(settings, other) {
						var otherAttribute = other;
						var otherFields = otherAttribute.getResultSetFields();
						var i;
						var otherField;
						var name;
						var field;
						this.m_resultSetFields.clear();
						for (i = 0; i < otherFields.size(); i++) {
							otherField = otherFields.get(i);
							name = otherField.getName();
							field = this.getFieldByName(name);
							if (field !== null) {
								this.m_resultSetFields.add(field);
							}
						}
					},
					removeFieldByName : function(fieldName) {
						var fieldToRemove = this.m_allFields
								.getFieldByName(fieldName);
						if (fieldToRemove !== null) {
							this.m_defaultResultSetFields
									.removeAt(this.m_allFields
											.getIndex(fieldToRemove));
							this.m_allFields.removeElement(fieldToRemove);
							this.m_resultSetFields.removeElement(fieldToRemove);
							this.m_selectorFields.removeElement(fieldToRemove);
							this.m_flatFieldMapByType.remove(fieldName);
							if (this.getFlatKeyField() === fieldToRemove) {
								this.m_flatKeyField = null;
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFieldValue",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_create : function(context, parentNode, field,
								dimensionMember) {
							var fieldValue = new sap.firefly.QFieldValue();
							fieldValue.setupFieldValue(context, parentNode,
									field, dimensionMember,
									sap.firefly.MemberType.FIELD_VALUE);
							return fieldValue;
						},
						create : function(context, field, dimensionMember) {
							var fieldValue = new sap.firefly.QFieldValue();
							fieldValue.setupFieldValue(context, null, field,
									dimensionMember,
									sap.firefly.MemberType.FIELD_VALUE);
							return fieldValue;
						},
						createLiteral : function(context, field) {
							var fieldValue = new sap.firefly.QFieldValue();
							fieldValue
									.setupFieldValue(
											context,
											null,
											field,
											null,
											sap.firefly.MemberType.LITERAL_MEMBER);
							return fieldValue;
						}
					},
					m_value : null,
					m_valueException : null,
					m_formattedValue : null,
					m_dimensionMember : null,
					m_field : null,
					m_memberType : null,
					m_isStarWildcardEnabled : false,
					setupFieldValue : function(context, parentNode, field,
							dimensionMember, memberType) {
						this.setupModelComponent(context, parentNode);
						this.setDimensionMember(dimensionMember);
						this.m_field = field;
						this.m_memberType = memberType;
					},
					cloneOlapComponent : function(context, parent) {
						var clone = new sap.firefly.QFieldValue();
						clone.setupFieldValue(context, parent, null, null,
								this.m_memberType);
						clone.copyFieldValue(this);
						return clone;
					},
					copyFromFieldValue : function(other) {
						this.copyFieldValue(other);
						this.notifyNodeChanged();
					},
					copyFrom : function(source) {
					},
					copyFieldValue : function(origin) {
						var origMember;
						var originName;
						var dimName;
						var cloneDimension;
						var cloneMember;
						sap.firefly.QFieldValue.$superclass.copyModelComponent
								.call(this, origin);
						if (origin.m_value !== null) {
							this.m_value = origin.m_value.clone();
						}
						this.m_valueException = origin.m_valueException;
						this.m_formattedValue = origin.m_formattedValue;
						this.m_field = origin.m_field;
						this.m_memberType = origin.m_memberType;
						this.m_isStarWildcardEnabled = origin.m_isStarWildcardEnabled;
						if (origin.m_dimensionMember !== null) {
							origMember = origin.getDimensionMember();
							if (origMember !== null) {
								originName = origMember.getName();
								if (originName !== null) {
									dimName = origMember.getDimension()
											.getName();
									cloneDimension = this
											.getDimensionAccessor()
											.getDimensionByName(dimName);
									cloneMember = cloneDimension
											.getDimensionMember(originName,
													false);
									if (cloneMember !== null) {
										this.setDimensionMember(cloneMember);
									}
								}
							}
						}
					},
					mergeDeepRecursive : function(settings, other) {
						var otherFieldValue = other;
						var otherValue = otherFieldValue.getValue();
						if ((this.m_value !== null)
								&& (otherValue !== null)
								&& (this.m_value.isEqualTo(otherValue) === false)) {
							this.m_value = otherValue.clone();
						}
					},
					releaseObject : function() {
						this.m_value = sap.firefly.XObject
								.releaseIfNotNull(this.m_value);
						this.m_dimensionMember = null;
						this.m_formattedValue = null;
						this.m_valueException = null;
						this.m_field = null;
						sap.firefly.QFieldValue.$superclass.releaseObject
								.call(this);
					},
					getType : function() {
						return this.getMemberType();
					},
					getMemberType : function() {
						return this.m_memberType;
					},
					getField : function() {
						return this.m_field;
					},
					getFieldBase : function() {
						return this.m_field;
					},
					getValueType : function() {
						if (this.m_value === null) {
							return null;
						}
						return this.m_value.getValueType();
					},
					getErrorValue : function() {
						return null;
					},
					setErrorValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSelectValue : function() {
						return this.getStringValue();
					},
					getSelectField : function() {
						return this.m_field;
					},
					getSelectHierarchyName : function() {
						return null;
					},
					getFormattedValue : function() {
						return this.m_formattedValue;
					},
					setFormattedValue : function(formattedValue) {
						this.m_formattedValue = formattedValue;
					},
					getValue : function() {
						return this.m_value;
					},
					setValue : function(value) {
						this.m_value = value;
						this.notifyNodeChanged();
					},
					setXValue : function(value) {
						this.setValue(value);
					},
					getDimension : function() {
						var field = this.getField();
						if (field !== null) {
							return field.getDimension();
						} else {
							return null;
						}
					},
					getDimensionMember : function() {
						var field;
						if (this.m_dimensionMember === null) {
							field = this.getField();
							if ((field !== null) && field.isKeyField()) {
								this.m_dimensionMember = this.getDimension()
										.getDimensionMemberWithValue(
												this.getValue(), false, field);
							}
						}
						return this.m_dimensionMember;
					},
					setDimensionMember : function(dimensionMember) {
						this.m_dimensionMember = dimensionMember;
					},
					getDoubleValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.DOUBLE);
						return (value).getDoubleValue();
					},
					setDoubleValue : function(doubleValue) {
						if (sap.firefly.XMath.isNaN(doubleValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The doube value must not be NaN!");
						}
						this.setValue(sap.firefly.XDoubleValue
								.create(doubleValue));
					},
					getIntegerValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.INTEGER);
						return (value).getIntegerValue();
					},
					setIntegerValue : function(integerValue) {
						if (sap.firefly.XMath.isNaN(integerValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The integer value must not be NaN!");
						}
						this.setValue(sap.firefly.XIntegerValue
								.create(integerValue));
					},
					getLongValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.LONG);
						return (value).getLongValue();
					},
					setLongValue : function(longValue) {
						if (sap.firefly.XMath.isNaN(longValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The long value must not be NaN!");
						}
						this.setValue(sap.firefly.XLongValue.create(longValue));
					},
					getDateValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.DATE);
						return value;
					},
					setDateValue : function(dateValue) {
						this.setValue(dateValue);
					},
					getTimeValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.TIME);
						return value;
					},
					setTimeValue : function(timeValue) {
						this.setValue(timeValue);
					},
					getTimeSpanValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.TIMESPAN);
						return value;
					},
					setTimeSpanValue : function(value) {
						this.setValue(value);
					},
					getGeometry : function() {
						var value = this.getValue();
						var valueType = value.getValueType();
						if (valueType.isSpatial() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						return value;
					},
					getPolygonValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.POLYGON);
						return value;
					},
					setPolygonValue : function(value) {
						this.setValue(value);
					},
					getPointValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.POINT);
						return value;
					},
					setPointValue : function(value) {
						this.setValue(value);
					},
					getStringValue : function() {
						var value = this.getValue();
						if (value.getValueType() === sap.firefly.XValueType.STRING) {
							return (value).getStringValue();
						}
						return value.toString();
					},
					setStringValue : function(stringValue) {
						this.setValue(sap.firefly.XStringValue
								.create(stringValue));
					},
					getBooleanValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.BOOLEAN);
						return (value).getBooleanValue();
					},
					setBooleanValue : function(booleanValue) {
						this.setValue(sap.firefly.XBooleanValue
								.create(booleanValue));
					},
					getStructureValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.STRUCTURE);
						return value;
					},
					setStructureValue : function(value) {
						this.setValue(value);
					},
					getStructureListValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.LIST);
						return value;
					},
					setStructureListValue : function(value) {
						this.setValue(value);
					},
					getPropertiesValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.PROPERTIES);
						return value;
					},
					setPropertiesValue : function(properties) {
						this.setValue(properties);
					},
					getDateTimeValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.DATE_TIME);
						return value;
					},
					setDateTimeValue : function(dateTimeValue) {
						this.setValue(dateTimeValue);
					},
					getMultiPolygonValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POLYGON);
						return value;
					},
					setMultiPolygonValue : function(value) {
						this.setValue(value);
					},
					getLineStringValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.LINE_STRING);
						return value;
					},
					setLineStringValue : function(value) {
						this.setValue(value);
					},
					getMultiLineStringValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_LINE_STRING);
						return value;
					},
					setMultiLineStringValue : function(value) {
						this.setValue(value);
					},
					getNullValue : function() {
						return null;
					},
					setNullValue : function(nullValueType) {
					},
					getMultiPointValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POINT);
						return value;
					},
					setMultiPointValue : function(value) {
						this.setValue(value);
					},
					getValueException : function() {
						return this.m_valueException;
					},
					setValueException : function(valueException) {
						this.m_valueException = valueException;
					},
					parseStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setLiteralString : function(value) {
						this.setValue(sap.firefly.XStringValue.create(value));
					},
					setLiteralPolygon : function(value) {
						this.setValue(value);
					},
					setLiteralInt : function(value) {
						this.setValue(sap.firefly.XIntegerValue.create(value));
					},
					setLiteralLong : function(value) {
						this.setValue(sap.firefly.XLongValue.create(value));
					},
					setLiteralDouble : function(value) {
						this.setValue(sap.firefly.XDoubleValue.create(value));
					},
					setLiteralDate : function(value) {
						this.setValue(value);
					},
					setLiteralTimespan : function(timespan) {
						this.setValue(sap.firefly.XTimeSpan.create(timespan));
					},
					setLiteralPoint : function(value) {
						this.setValue(value);
					},
					supportsStarWildcard : function() {
						return true;
					},
					isStarWildcardEnabled : function() {
						return this.m_isStarWildcardEnabled;
					},
					setIsStarWildcardEnabled : function(isEnabled) {
						this.m_isStarWildcardEnabled = isEnabled;
					},
					hasValue : function() {
						return this.m_value !== null;
					},
					getSelectableElement : function() {
						return this;
					},
					isNode : function() {
						return this.getMemberType().isNode();
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append(this.getField().toString());
						if (this.m_value !== null) {
							buffer.append(": '");
							buffer.append(this.m_value.toString());
							buffer.append("'");
						}
						return buffer.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilter",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(query) {
							var selector = new sap.firefly.QFilter();
							selector.setupFilter(query, query);
							return selector;
						},
						createWithModelComponent : function(context,
								modelComponent, dimensionAccessor) {
							var selector = new sap.firefly.QFilter();
							selector.setupFilter(context, modelComponent);
							return selector;
						},
						updateEffective : function(effectiveFilter,
								sourceFilters, withEvents) {
							var isLocked;
							var filterElements;
							var i;
							var rootElementAnd;
							var j;
							var singleCartesianElement;
							var filterExpression;
							var singleCartesianProduct;
							var singleCartesianProductClone;
							var cartesianProduct;
							var n;
							var currentFilterElement;
							var currentCartesianProduct;
							var k;
							if (effectiveFilter !== null) {
								if (withEvents) {
									effectiveFilter.queueEventing();
								} else {
									effectiveFilter.stopEventing();
								}
								isLocked = effectiveFilter.isLocked();
								if (isLocked) {
									effectiveFilter.setIsLocked(false);
								}
								if (effectiveFilter.isCartesianProduct()) {
									effectiveFilter.setCartesianProduct(null);
								}
								if (effectiveFilter.isComplexSelection()) {
									effectiveFilter.setComplexSelection(null);
								}
								if (effectiveFilter.supportsCellValueOperands()) {
									effectiveFilter.clearCellValueSelections();
									effectiveFilter
											.setIsSuppressingNulls(false);
								}
								if ((sourceFilters !== null)
										&& sourceFilters.hasElements()) {
									filterElements = sap.firefly.XList.create();
									for (i = 0; i < sourceFilters.size(); i++) {
										sap.firefly.QFilter
												.addFilterElementIfNotNull(
														sourceFilters.get(i),
														filterElements);
									}
									if (filterElements.hasElements()) {
										if (effectiveFilter
												.supportsComplexSelections()) {
											if (filterElements.size() === 1) {
												effectiveFilter
														.setComplexSelection(filterElements
																.get(0));
											} else {
												rootElementAnd = sap.firefly.QFactory2
														.newFilterAnd(effectiveFilter);
												for (j = 0; j < filterElements
														.size(); j++) {
													rootElementAnd
															.add(filterElements
																	.get(j));
												}
												effectiveFilter
														.setComplexSelection(rootElementAnd);
											}
										} else {
											if (filterElements.size() === 1) {
												singleCartesianElement = filterElements
														.get(0);
												filterExpression = singleCartesianElement
														.getFilterExpression();
												if (filterExpression !== null) {
													singleCartesianProduct = filterExpression
															.getCartesianProduct();
													if ((singleCartesianProduct !== null)
															&& (singleCartesianProduct
																	.hasElements())) {
														singleCartesianProductClone = sap.firefly.QFactory2
																.newFilterCartesianProduct(effectiveFilter);
														(singleCartesianProductClone)
																.copyCartesianProduct(singleCartesianProduct);
														effectiveFilter
																.setCartesianProduct(singleCartesianProductClone);
													}
												}
											} else {
												cartesianProduct = sap.firefly.QFactory2
														.newFilterCartesianProduct(effectiveFilter);
												for (n = 0; n < filterElements
														.size(); n++) {
													currentFilterElement = filterElements
															.get(n);
													currentCartesianProduct = currentFilterElement
															.getFilterExpression()
															.getCartesianProduct();
													cartesianProduct = sap.firefly.QFilter
															.mergeCartesianProducts(
																	cartesianProduct,
																	currentCartesianProduct,
																	cartesianProduct
																			.getContext(),
																	cartesianProduct);
												}
												if (cartesianProduct
														.hasElements()) {
													effectiveFilter
															.setCartesianProduct(cartesianProduct);
												}
											}
										}
									}
									if (effectiveFilter
											.supportsCellValueOperands()) {
										for (k = 0; k < sourceFilters.size(); k++) {
											sap.firefly.QFilter
													.addCellValueSelections(
															sourceFilters
																	.get(k),
															effectiveFilter);
										}
									}
								}
								if (isLocked) {
									effectiveFilter.setIsLocked(true);
								}
								effectiveFilter.resumeEventing();
							}
						},
						mergeCartesianProducts : function(cartesianProductA,
								cartesianProductB, context, parent) {
							var newCartesianProduct;
							var i;
							var cartesianChildB;
							var currentDimension;
							var dimensionName;
							var existingListForDimension;
							var n;
							var cartesianElement;
							var clonedCartesianElement;
							var cloneOfCartesianChildB;
							if ((cartesianProductA === null)
									&& (cartesianProductB === null)) {
								return null;
							}
							if (cartesianProductA === null) {
								return cartesianProductB.clone();
							}
							if (cartesianProductB === null) {
								return cartesianProductA.clone();
							}
							newCartesianProduct = sap.firefly.QFilterCartesianProduct
									._create(context, cartesianProductA
											.getFilterExpression());
							(newCartesianProduct)
									.copyCartesianProduct(cartesianProductA);
							newCartesianProduct.setParent(parent);
							for (i = 0; i < cartesianProductB.size(); i++) {
								cartesianChildB = cartesianProductB
										.getCartesianChild(i);
								currentDimension = cartesianChildB
										.getDimension();
								dimensionName = currentDimension.getName();
								existingListForDimension = newCartesianProduct
										.getCartesianListByDimensionName(dimensionName);
								if (existingListForDimension !== null) {
									for (n = 0; n < cartesianChildB.size(); n++) {
										cartesianElement = cartesianChildB
												.getCartesianElement(n);
										clonedCartesianElement = existingListForDimension
												.addNewCartesianElement();
										(clonedCartesianElement)
												.copyFilterOperation(cartesianElement);
									}
								} else {
									cloneOfCartesianChildB = cartesianChildB
											.cloneOlapComponent(context, null);
									cloneOfCartesianChildB
											.setParent(newCartesianProduct);
									newCartesianProduct
											.add(cloneOfCartesianChildB);
								}
							}
							return newCartesianProduct;
						},
						addFilterExpressionIfNotNull : function(
								filterExpression, filterExpressions) {
							if (filterExpression === null) {
								return;
							}
							filterExpressions.add(filterExpression);
						},
						addCellValueSelections : function(source, target) {
							var cellValueOperands;
							var i;
							var cellValueOperand;
							var clone;
							if (source === null) {
								return;
							}
							cellValueOperands = source.getCellValueOperands();
							if (cellValueOperands === null) {
								return;
							}
							for (i = 0; i < cellValueOperands.size(); i++) {
								cellValueOperand = cellValueOperands.get(i);
								clone = cellValueOperand;
								target.addCellValueSelection(clone);
							}
							if (source.isSuppressingNulls()) {
								target.setIsSuppressingNulls(true);
							}
						},
						addFilterElementIfNotNull : function(filterExpression,
								filterElements) {
							var filterElement;
							var clone;
							if (filterExpression === null) {
								return;
							}
							filterElement = filterExpression
									.getFilterRootElement();
							if (filterElement === null) {
								return;
							}
							clone = filterElement;
							filterElements.add(clone);
						}
					},
					m_selectionSpaceContainer : null,
					m_selectionStateContainer : null,
					m_selectorContainer : null,
					m_selectionVisibilityContainer : null,
					m_effectiveSelectionContainer : null,
					m_externSelectionContainer : null,
					m_selectionTmpContainer : null,
					m_effectiveSelectionVisibilityContainer : null,
					m_externSelectionVisibilityContainer : null,
					m_selectionVisibilityTmpContainer : null,
					m_selectableDimensionList : null,
					copyFilterManager : function(origin) {
						sap.firefly.QFilter.$superclass.copyModelComponent
								.call(this, origin);
						if (origin.m_selectionSpaceContainer !== null) {
							(this.getSelectionSpaceContainer())
									.copyFilterExpression(origin.m_selectionSpaceContainer);
						}
						if (origin.m_selectionStateContainer !== null) {
							(this.getSelectionStateContainer())
									.copyFilterExpression(origin.m_selectionStateContainer);
						}
						if (origin.m_selectionVisibilityContainer !== null) {
							(this.getSelectionVisibilityContainer())
									.copyFilterExpression(origin.m_selectionVisibilityContainer);
						}
					},
					setupFilter : function(context, parentComponent) {
						this.setupModelComponent(context, parentComponent);
						this.setName("filterManager");
					},
					releaseObject : function() {
						this.m_effectiveSelectionContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_effectiveSelectionContainer);
						this.m_effectiveSelectionVisibilityContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_effectiveSelectionVisibilityContainer);
						this.m_externSelectionContainer = null;
						this.m_externSelectionVisibilityContainer = null;
						this.m_selectionTmpContainer = null;
						this.m_selectableDimensionList = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectableDimensionList);
						this.m_selectionSpaceContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionSpaceContainer);
						this.m_selectionStateContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionStateContainer);
						this.m_selectionVisibilityContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionVisibilityContainer);
						this.m_selectionVisibilityTmpContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionVisibilityTmpContainer);
						this.m_selectorContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectorContainer);
						sap.firefly.QFilter.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.SELECTOR;
					},
					createSelectionContainer : function() {
						return sap.firefly.QFilterExpression.create(this
								.getContext(), this);
					},
					getSelectionStateContainer : function() {
						if (this.m_selectionStateContainer === null) {
							this.stopEventing();
							this.setSelectionStateContainer(this
									.createSelectionContainer());
							this.resumeEventing();
						}
						return this.m_selectionStateContainer;
					},
					getSelectorContainer : function() {
						if (this.m_selectorContainer === null) {
							this.m_selectorContainer = this
									.createSelectionContainer();
							this.m_selectorContainer
									.setName("selectorContainer");
							this.m_selectorContainer.setParent(null);
						}
						return this.m_selectorContainer;
					},
					getSelectionVisibilityContainer : function() {
						if (this.m_selectionVisibilityContainer === null) {
							this.stopEventing();
							this.setSelectionVisibilityContainer(this
									.createSelectionContainer());
							this.resumeEventing();
						}
						return this.m_selectionVisibilityContainer;
					},
					getExternSelectionContainer : function() {
						return this.m_externSelectionContainer;
					},
					getExternSelectionVisibilityContainer : function() {
						return this.m_externSelectionVisibilityContainer;
					},
					getSelectionTmpContainer : function() {
						if (this.m_selectionTmpContainer === null) {
							this.stopEventing();
							this.setSelectionTmpContainer(this
									.createSelectionContainer());
							this.resumeEventing();
						}
						return this.m_selectionTmpContainer;
					},
					getSelectionVisibilityTmpContainer : function() {
						if (this.m_selectionVisibilityTmpContainer === null) {
							this.stopEventing();
							this.setSelectionVisibilityTmpContainer(this
									.createSelectionContainer());
							this.resumeEventing();
						}
						return this.m_selectionVisibilityTmpContainer;
					},
					setSelectionVisibilityContainer : function(
							selectionVisibilityContainer) {
						if (this.m_selectionVisibilityContainer === selectionVisibilityContainer) {
							return;
						}
						if (this.m_selectionVisibilityContainer !== null) {
							this
									.freeAsPrimaryParent(this.m_selectionVisibilityContainer);
							this.m_selectionVisibilityContainer = null;
						}
						if (selectionVisibilityContainer !== null) {
							this.m_selectionVisibilityContainer = selectionVisibilityContainer;
							this.becomePrimaryParentAndSetName(
									this.m_selectionVisibilityContainer,
									"selectionVisibilityContainer");
						}
						this.notifyNodeChanged();
						if (this.m_effectiveSelectionContainer !== null) {
							this
									.updateEffectiveSelectionVisibilityContainer(true);
						}
					},
					becomeSecondaryParent : function(filterExpression) {
						filterExpression.addSecondaryParent(this);
						filterExpression.registerChangedListener(this, null);
					},
					freeAsSecondaryParent : function(filterExpression) {
						filterExpression.unregisterChangedListener(this);
						filterExpression.removeSecondaryParent(this);
					},
					becomePrimaryParentAndSetName : function(filterExpression,
							newName) {
						filterExpression.setParent(this);
						filterExpression.registerChangedListener(this, null);
						filterExpression.setName(newName);
					},
					freeAsPrimaryParent : function(filterExpression) {
						filterExpression.unregisterChangedListener(this);
						filterExpression.releaseObject();
					},
					setSelectionSpaceContainer : function(
							selectionSpaceContainer) {
						if (this.m_selectionSpaceContainer === selectionSpaceContainer) {
							return;
						}
						if (this.m_selectionSpaceContainer !== null) {
							this
									.freeAsPrimaryParent(this.m_selectionSpaceContainer);
							this.m_selectionSpaceContainer = null;
						}
						if (selectionSpaceContainer !== null) {
							this.m_selectionSpaceContainer = selectionSpaceContainer;
							this.becomePrimaryParentAndSetName(
									this.m_selectionSpaceContainer,
									"selectionSpaceContainer");
						}
						this.notifyNodeChanged();
					},
					getSelectionSpaceContainer : function() {
						if (this.m_selectionSpaceContainer === null) {
							this.stopEventing();
							this.setSelectionSpaceContainer(this
									.createSelectionContainer());
							this.resumeEventing();
						}
						return this.m_selectionSpaceContainer;
					},
					setSelectionStateContainer : function(
							selectionStateContainer) {
						if (this.m_selectionStateContainer === selectionStateContainer) {
							return;
						}
						if (this.m_selectionStateContainer !== null) {
							this
									.freeAsPrimaryParent(this.m_selectionStateContainer);
							this.m_selectionStateContainer = null;
						}
						if (selectionStateContainer !== null) {
							this.m_selectionStateContainer = selectionStateContainer;
							this.becomePrimaryParentAndSetName(
									this.m_selectionStateContainer,
									"selectionStateContainer");
						}
						this.notifyNodeChanged();
						this.updateEffectiveSelectionContainer(true);
					},
					setSelectionTmpContainer : function(selectionTmpContainer) {
						if (this.m_selectionTmpContainer === selectionTmpContainer) {
							return;
						}
						if (this.m_selectionTmpContainer !== null) {
							this
									.freeAsPrimaryParent(this.m_selectionTmpContainer);
							this.m_selectionTmpContainer = null;
						}
						if (selectionTmpContainer !== null) {
							this.m_selectionTmpContainer = selectionTmpContainer;
							this.becomePrimaryParentAndSetName(
									this.m_selectionTmpContainer,
									"selectionTmpContainer");
						}
						this.notifyNodeChanged();
						this.updateEffectiveSelectionContainer(true);
					},
					setSelectionVisibilityTmpContainer : function(
							selectionVisibilityTmpContainer) {
						if (this.m_selectionVisibilityTmpContainer === selectionVisibilityTmpContainer) {
							return;
						}
						if (this.m_selectionVisibilityTmpContainer !== null) {
							this
									.freeAsPrimaryParent(this.m_selectionVisibilityTmpContainer);
							this.m_selectionVisibilityTmpContainer = null;
						}
						if (selectionVisibilityTmpContainer !== null) {
							this.m_selectionVisibilityTmpContainer = selectionVisibilityTmpContainer;
							this.becomePrimaryParentAndSetName(
									this.m_selectionVisibilityTmpContainer,
									"selectionVisibilityTmpContainer");
						}
						this.notifyNodeChanged();
						this.updateEffectiveSelectionVisibilityContainer(true);
					},
					setExternSelectionContainer : function(
							externSelectionContainer) {
						if (this.m_externSelectionContainer === externSelectionContainer) {
							return;
						}
						if (this.m_externSelectionContainer !== null) {
							this
									.freeAsSecondaryParent(this.m_externSelectionContainer);
							this.m_externSelectionContainer = null;
						}
						if (externSelectionContainer !== null) {
							this.m_externSelectionContainer = externSelectionContainer;
							this
									.becomeSecondaryParent(this.m_externSelectionContainer);
						}
						this.notifyNodeChanged();
						this.updateEffectiveSelectionContainer(true);
					},
					setExternSelectionVisibilityContainer : function(
							externSelectionVisibilityContainer) {
						if (!this.supportsComplexSelections()) {
							return;
						}
						if (this.m_externSelectionVisibilityContainer === externSelectionVisibilityContainer) {
							return;
						}
						if (this.m_externSelectionVisibilityContainer !== null) {
							this
									.freeAsSecondaryParent(this.m_externSelectionVisibilityContainer);
							this.m_externSelectionVisibilityContainer = null;
						}
						if (externSelectionVisibilityContainer !== null) {
							this.m_externSelectionVisibilityContainer = externSelectionVisibilityContainer;
							this
									.becomeSecondaryParent(this.m_externSelectionVisibilityContainer);
						}
						this.notifyNodeChanged();
						this.updateEffectiveSelectionVisibilityContainer(true);
					},
					onModelComponentChanged : function(modelComponent,
							customIdentifier) {
						if (modelComponent === null) {
							return;
						}
						if ((modelComponent === this.m_selectionStateContainer)
								|| (modelComponent === this.m_selectionTmpContainer)
								|| (modelComponent === this.m_externSelectionContainer)) {
							this.updateEffectiveSelectionContainer(true);
						}
						if ((modelComponent === this.m_selectionVisibilityContainer)
								|| (modelComponent === this.m_selectionVisibilityTmpContainer)
								|| (modelComponent === this.m_externSelectionVisibilityContainer)) {
							this
									.updateEffectiveSelectionVisibilityContainer(true);
						}
					},
					isContainerConflictingWithLocalFilter : function(
							selectionContainer) {
						var cartesianProduct;
						var i;
						var cartesianList;
						var currentDimension;
						var conflictDetected;
						if ((selectionContainer !== null)
								&& (selectionContainer.isCartesianProduct())) {
							cartesianProduct = selectionContainer
									.getCartesianProduct();
							for (i = 0; i < cartesianProduct.size(); i++) {
								cartesianList = cartesianProduct
										.getCartesianChild(i);
								currentDimension = cartesianList.getDimension();
								if (currentDimension !== null) {
									conflictDetected = this
											.isDimensionNameConflictingWithLocalFilter(currentDimension
													.getName());
									if (conflictDetected) {
										return true;
									}
								}
							}
						}
						return false;
					},
					isDimensionConflictingWithLocalFilter : function(dimension) {
						if (dimension !== null) {
							return this
									.isDimensionNameConflictingWithLocalFilter(dimension
											.getName());
						}
						return false;
					},
					isDimensionNameConflictingWithLocalFilter : function(
							dimensionName) {
						var dimensionAccessor = this.getDimensionAccessor();
						var dimension;
						var effectiveSelectionContainer;
						var cartesianProduct;
						var cartesianList;
						if ((dimensionAccessor !== null)
								&& (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(dimensionName))) {
							dimension = dimensionAccessor
									.getDimensionByName(dimensionName);
							effectiveSelectionContainer = this
									.getEffectiveSelectionContainer();
							if ((dimension !== null)
									&& (effectiveSelectionContainer !== null)
									&& (effectiveSelectionContainer.isAll())
									&& (effectiveSelectionContainer
											.isCartesianProduct())) {
								cartesianProduct = effectiveSelectionContainer
										.getFilterExpression()
										.getCartesianProduct();
								if (cartesianProduct !== null) {
									cartesianList = cartesianProduct
											.getCartesianList(dimension);
									return sap.firefly.XCollectionUtils
											.hasElements(cartesianList);
								}
							}
						}
						return false;
					},
					isDimensionConflictingWithExternFilter : function(dimension) {
						if (dimension === null) {
							return false;
						}
						return this
								.isDimensionNameConflictingWithExternFilter(dimension
										.getName());
					},
					isDimensionNameConflictingWithExternFilter : function(
							dimensionName) {
						var dimensionAccessor = this.getDimensionAccessor();
						var externSelectionContainer;
						var cartesianProduct;
						var cartesianList;
						if ((dimensionAccessor !== null)
								&& (sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(dimensionName))) {
							externSelectionContainer = this
									.getExternSelectionContainer();
							if ((externSelectionContainer !== null)
									&& (externSelectionContainer.isAll())
									&& (externSelectionContainer
											.isCartesianProduct())) {
								cartesianProduct = externSelectionContainer
										.getFilterExpression()
										.getCartesianProduct();
								if (cartesianProduct !== null) {
									cartesianList = cartesianProduct
											.getCartesianListByDimensionName(dimensionName);
									return sap.firefly.XCollectionUtils
											.hasElements(cartesianList);
								}
							}
						}
						return false;
					},
					updateEffectiveSelectionContainer : function(withEvents) {
						sap.firefly.QFilter.updateEffective(
								this.m_effectiveSelectionContainer, this
										.getSourceFilters(), withEvents);
					},
					updateEffectiveSelectionVisibilityContainer : function(
							withEvents) {
						sap.firefly.QFilter.updateEffective(
								this.m_effectiveSelectionVisibilityContainer,
								this.getSourceFiltersVisibility(), withEvents);
					},
					getSourceFilters : function() {
						var sourceFilters = sap.firefly.XList.create();
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_selectionStateContainer, sourceFilters);
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_selectionTmpContainer, sourceFilters);
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_externSelectionContainer, sourceFilters);
						return sourceFilters;
					},
					getSourceFiltersVisibility : function() {
						var sourceFilters = sap.firefly.XList.create();
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_selectionVisibilityContainer,
								sourceFilters);
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_selectionVisibilityTmpContainer,
								sourceFilters);
						sap.firefly.QFilter.addFilterExpressionIfNotNull(
								this.m_externSelectionVisibilityContainer,
								sourceFilters);
						return sourceFilters;
					},
					resetEffectiveFilter : function() {
						if (this.m_effectiveSelectionContainer !== null) {
							this.m_effectiveSelectionContainer.releaseObject();
							this.m_effectiveSelectionContainer = null;
						}
					},
					getEffectiveSelectionContainer : function() {
						if (this.m_effectiveSelectionContainer === null) {
							this.m_effectiveSelectionContainer = this
									.createSelectionContainer();
							if (this.supportsCartesianFilterIntersect()) {
								this.m_effectiveSelectionContainer
										.setSupportsComplexSelections(true);
							}
							this.m_effectiveSelectionContainer
									.setName("effectiveSelectionContainer");
							this.m_effectiveSelectionContainer.setParent(this);
							this.updateEffectiveSelectionContainer(false);
						}
						return this.m_effectiveSelectionContainer;
					},
					getEffectiveSelectionVisibilityContainer : function() {
						if (this.m_effectiveSelectionVisibilityContainer === null) {
							this.m_effectiveSelectionVisibilityContainer = this
									.createSelectionContainer();
							if (this.supportsCartesianFilterIntersect()) {
								this.m_effectiveSelectionVisibilityContainer
										.setSupportsComplexSelections(true);
							}
							this.m_effectiveSelectionVisibilityContainer
									.setName("effectiveSelectionVisibilityContainer");
							this.m_effectiveSelectionVisibilityContainer
									.setParent(this);
							this
									.updateEffectiveSelectionVisibilityContainer(false);
						}
						return this.m_effectiveSelectionVisibilityContainer;
					},
					getSelectableDimensions : function() {
						var dimensions;
						var i;
						var dimension;
						if (this.m_selectableDimensionList === null) {
							this.stopEventing();
							this.m_selectableDimensionList = sap.firefly.QDimensionList
									.createDimensionList(this.getContext(),
											this, false,
											"Selectable Dimension List");
							dimensions = this.getDimensionAccessor()
									.getDimensions();
							for (i = 0; i < dimensions.size(); i++) {
								dimension = dimensions.get(i);
								if (dimension.isSelectable()) {
									this.m_selectableDimensionList
											.add(dimension);
								}
							}
							this.resumeEventing();
						}
						return this.m_selectableDimensionList;
					},
					getDimensionCount : function() {
						return this.getSelectableDimensions()
								.getDimensionCount();
					},
					getStructureCount : function() {
						return this.getSelectableDimensions()
								.getStructureCount();
					},
					getNonStructureCount : function() {
						return this.getSelectableDimensions()
								.getNonStructureCount();
					},
					getNonMeasureDimension : function() {
						return this.getSelectableDimensions()
								.getNonMeasureDimension();
					},
					getNonMeasureDimension2 : function() {
						return this.getSelectableDimensions()
								.getNonMeasureDimension2();
					},
					getMeasureDimension : function() {
						return this.getSelectableDimensions()
								.getMeasureDimension();
					},
					getDimensionNameByType : function(type) {
						return this.getSelectableDimensions()
								.getDimensionNameByType(type);
					},
					getDimensionByType : function(type) {
						return this.getSelectableDimensions()
								.getDimensionByType(type);
					},
					getDimensionByName : function(name) {
						return this.getSelectableDimensions()
								.getDimensionByName(name);
					},
					getDimensions : function() {
						return this.getSelectableDimensions();
					},
					isComponentNode : function() {
						return true;
					},
					getNamedChildren : function() {
						var map = sap.firefly.XHashMapByString.create();
						map.putIfNotNull("SelectionSpaceContainer", this
								.getSelectionSpaceContainer());
						map.putIfNotNull("SelectionStateContainer", this
								.getSelectionStateContainer());
						map.putIfNotNull("SelectionTmpContainer", this
								.getSelectionTmpContainer());
						map.putIfNotNull("SelectionVisibilityContainer", this
								.getSelectionVisibilityContainer());
						map.putIfNotNull("SelectionVisibilityTmpContainer",
								this.getSelectionVisibilityTmpContainer());
						return map;
					},
					applyFilter : function(filterToApply) {
						var serializedFilter;
						var deserializeExt;
						if (filterToApply === null) {
							throw sap.firefly.XException
									.createIllegalStateException("filter to apply must not be null");
						}
						serializedFilter = filterToApply.serializeToElement(
								sap.firefly.QModelFormat.INA_REPOSITORY, null);
						if (serializedFilter === null) {
							throw sap.firefly.XException
									.createIllegalStateException("could not serialize filter to apply");
						}
						deserializeExt = this.deserializeFromElementExt(
								sap.firefly.QModelFormat.INA_REPOSITORY,
								serializedFilter);
						if (deserializeExt.hasErrors()) {
							throw sap.firefly.XException
									.createRuntimeException(deserializeExt
											.getSummary());
						}
					},
					assertIntersectLayersSupported : function() {
						if (!this.supportsIntersectLayers()) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					getIntersectLayer : function(name) {
						this.assertIntersectLayersSupported();
						return null;
					},
					createIntersectLayer : function(name) {
						this.assertIntersectLayersSupported();
					},
					clearIntersectLayer : function(name) {
						this.assertIntersectLayersSupported();
					},
					getIntersectLayers : function() {
						this.assertIntersectLayersSupported();
						return null;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						this.m_selectionStateContainer
								.mergeDeepRecursive(settings, otherObj
										.getSelectionStateContainer());
						this.m_selectionSpaceContainer
								.mergeDeepRecursive(settings, otherObj
										.getSelectionSpaceContainer());
					},
					isSelectionSpaceContainerInitialized : function() {
						return this.m_selectionSpaceContainer !== null;
					},
					isSelectionStateContainerInitialized : function() {
						return this.m_selectionStateContainer !== null;
					},
					isSelectionVisibilityContainerInitialized : function() {
						return this.m_selectionVisibilityContainer !== null;
					},
					supportsSelectionVisibilityContainer : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities
								.supportsSelectionVisibilityContainer();
					},
					supportsCartesianFilterIntersect : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities
								.supportsCartesianFilterIntersect();
					},
					supportsComplexSelections : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities.supportsComplexSelections();
					},
					supportsCellValueOperand : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities.supportsCellValueOperand();
					},
					supportsIntersectLayers : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities.supportsIntersectLayers();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterCapability",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_createFilterCapability : function(context,
								parentContext, field) {
							var selectionCapabilities = new sap.firefly.QFilterCapability();
							selectionCapabilities.setupFilterCapabilities(
									context, parentContext, field);
							return selectionCapabilities;
						}
					},
					m_field : null,
					m_supportedSetSigns : null,
					m_supportedComparisionOperators : null,
					copyFilterCapability : function(origin) {
						sap.firefly.QFilterCapability.$superclass.copyModelComponent
								.call(this, origin);
						this.m_supportedSetSigns
								.addAll(origin.m_supportedSetSigns);
						this.m_supportedComparisionOperators = origin.m_supportedComparisionOperators
								.createMapByStringCopy();
					},
					setupFilterCapabilities : function(context, parentContext,
							field) {
						this.setupModelComponent(context, parentContext);
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
						this.m_supportedSetSigns = sap.firefly.XListOfNameObject
								.create();
						this.m_supportedComparisionOperators = sap.firefly.XHashMapByString
								.create();
					},
					releaseObject : function() {
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						this.m_supportedSetSigns = sap.firefly.XObject
								.releaseIfNotNull(this.m_supportedSetSigns);
						this.m_supportedComparisionOperators = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_supportedComparisionOperators);
						sap.firefly.QFilterCapability.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_CAPABILITY;
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					getSupportedSetSign : function() {
						return this.m_supportedSetSigns;
					},
					addSupportedSetSign : function(setSign) {
						var operatorForSign;
						if (this.m_supportedSetSigns.contains(setSign)) {
							return;
						}
						this.m_supportedSetSigns.add(setSign);
						operatorForSign = sap.firefly.XListOfNameObject
								.create();
						this.m_supportedComparisionOperators.put(setSign
								.getName(), operatorForSign);
					},
					getModifiableSupportedComparisonOperators : function(
							setSign) {
						return this.m_supportedComparisionOperators
								.getByKey(setSign.getName());
					},
					getSupportedComparisonOperators : function(setSign) {
						return this
								.getModifiableSupportedComparisonOperators(setSign);
					},
					supportsSetSign : function(setSign) {
						return this.m_supportedSetSigns.contains(setSign);
					},
					isSelectionCapabilityGroup : function() {
						return false;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterCapabilityList",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createFilterCapabilitiesForDimension : function(
								context, dimension) {
							var capabilities = new sap.firefly.QFilterCapabilityList();
							capabilities.setupFilterCapabilities(context,
									dimension);
							return capabilities;
						},
						createFilterCapabilitiesForVariable : function(context,
								variable) {
							var selectionSignedSetCapabilities = new sap.firefly.QFilterCapabilityList();
							selectionSignedSetCapabilities
									.setupFilterCapabilities(context, variable);
							return selectionSignedSetCapabilities;
						}
					},
					m_dimension : null,
					m_selectionCapabilities : null,
					m_selectableFields : null,
					m_supportsMultipleValues : false,
					copyFilterCapabilityList : function(origin) {
						var dimension;
						var parentComponent;
						var size;
						var i;
						var origField;
						sap.firefly.QFilterCapabilityList.$superclass.copyModelComponent
								.call(this, origin);
						dimension = this.getDimension();
						if (dimension === null) {
							parentComponent = this.getParentComponent();
							if (parentComponent
									.getOlapComponentType()
									.isTypeOf(
											sap.firefly.OlapComponentType.ABSTRACT_DIMENSION)) {
								dimension = parentComponent;
							} else {
								dimension = (parentComponent).getDimension();
							}
						}
						size = origin.m_selectableFields.size();
						i = 0;
						for (i = 0; i < size; i++) {
							origField = origin.m_selectableFields.get(i);
							(this.m_selectableFields).addIfNotNull(dimension
									.getFieldByName(origField.getName()));
						}
						(this.m_selectableFields)
								.copyFieldList(origin.m_selectableFields);
						this.m_supportsMultipleValues = origin.m_supportsMultipleValues;
						this.m_selectionCapabilities = origin.m_selectionCapabilities
								.clone();
					},
					setupFilterCapabilities : function(context, deltaNode) {
						this.setupModelComponent(context, deltaNode);
						this.m_selectionCapabilities = sap.firefly.XHashMapByString
								.create();
						this.m_selectableFields = sap.firefly.QFieldList
								.createFieldList(this.getContext(), this,
										false, "Selectable Fields");
					},
					releaseObject : function() {
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_selectionCapabilities = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionCapabilities);
						this.m_selectableFields = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectableFields);
						sap.firefly.QFilterCapabilityList.$superclass.releaseObject
								.call(this);
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					setDimension : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					getSelectionCapabilitiesByField : function(field) {
						return this.m_selectionCapabilities.getByKey(field
								.getName());
					},
					getSelectableFields : function() {
						return this.m_selectableFields;
					},
					supportsMultipleValues : function() {
						return this.m_supportsMultipleValues;
					},
					setSupportsMultipleValues : function(supportsMultipleValues) {
						this.m_supportsMultipleValues = supportsMultipleValues;
					},
					createAndAddSelectionCapabilitiesForField : function(field) {
						var fieldName = field.getName();
						var selectionCapabilities;
						if (this.m_selectionCapabilities.containsKey(fieldName)) {
							return this.m_selectionCapabilities
									.getByKey(fieldName);
						}
						selectionCapabilities = sap.firefly.QFilterCapability
								._createFilterCapability(this.getContext(),
										this, field);
						this.addSelectionCapability(selectionCapabilities);
						return selectionCapabilities;
					},
					addSelectionCapability : function(capability) {
						var field = capability.getField();
						var fieldName = field.getName();
						if (this.m_selectionCapabilities.containsKey(fieldName) === false) {
							(this.m_selectableFields).addInternal(field);
						}
						this.m_selectionCapabilities.put(fieldName, capability);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterCellValueOperand",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_create : function(context, parentNode, lowValue,
								highValue, comparisonOperator) {
							var cvo = new sap.firefly.QFilterCellValueOperand();
							cvo.setupCellValueOperand(context, parentNode,
									lowValue, highValue, comparisonOperator);
							return cvo;
						},
						createWithVariable : function(context, parentNode,
								lowVariable, highVariable, comparisonOperator) {
							var cvo = new sap.firefly.QFilterCellValueOperand();
							cvo.setupCellValueOperand(context, parentNode,
									lowVariable.getName(), null,
									comparisonOperator);
							cvo.m_lowValue.setVariableValue(lowVariable);
							cvo.m_highValue.setVariableValue(highVariable);
							return cvo;
						},
						createForNullSuppression : function(context, parentNode) {
							var cvo = new sap.firefly.QFilterCellValueOperand();
							cvo.setupCellValueOperand(context, parentNode,
									null, null,
									sap.firefly.ComparisonOperator.IS_NULL);
							cvo.setIsExcluding(true);
							return cvo;
						}
					},
					m_isExcluding : false,
					m_lowValue : null,
					m_highValue : null,
					m_operator : null,
					copyCellValueOperand : function(origin) {
						sap.firefly.QFilterCellValueOperand.$superclass.copyModelComponent
								.call(this, origin);
						this.m_operator = origin.m_operator;
						this.m_isExcluding = origin.m_isExcluding;
						if (origin.m_lowValue !== null) {
							(this.getLowValue()).copyFilterValueBag(origin
									.getLowValue());
						}
						if (origin.m_highValue !== null) {
							(this.getHighValue()).copyFilterValueBag(origin
									.getHighValue());
						}
					},
					setupCellValueOperand : function(context, parentNode,
							lowValue, highValue, comparisonOperator) {
						this.setupModelComponent(context, parentNode);
						this.m_isExcluding = false;
						this.setComparisonOperator(comparisonOperator);
						this.m_lowValue = sap.firefly.QFilterValueBag._create(
								context, null, this, false);
						this.m_lowValue.setStringValue(lowValue);
						this.m_highValue = sap.firefly.QFilterValueBag._create(
								context, null, this, false);
						this.m_highValue.setStringValue(highValue);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
					},
					isEqualTo : function(other) {
						var otherCvo;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						otherCvo = other;
						if (sap.firefly.XString.isEqual(this.getLow(), otherCvo
								.getLow()) === false) {
							return false;
						}
						if (this.isLowVariable() !== otherCvo.isLowVariable()) {
							return false;
						}
						if (sap.firefly.XString.isEqual(this.getHigh(),
								otherCvo.getHigh()) === false) {
							return false;
						}
						if (this.isHighVariable() !== otherCvo.isHighVariable()) {
							return false;
						}
						if (this.getComparisonOperator() !== otherCvo
								.getComparisonOperator()) {
							return false;
						}
						if (this.isExcluding() !== otherCvo.isExcluding()) {
							return false;
						}
						return true;
					},
					releaseObject : function() {
						this.m_highValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_highValue);
						this.m_lowValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_lowValue);
						this.m_operator = null;
						sap.firefly.QFilterCellValueOperand.$superclass.releaseObject
								.call(this);
					},
					isExcluding : function() {
						return this.m_isExcluding;
					},
					setIsExcluding : function(isExcluding) {
						this.m_isExcluding = isExcluding;
					},
					getLow : function() {
						return this.m_lowValue.getStringValue();
					},
					isLowVariable : function() {
						return this.m_lowValue.getValueType() === sap.firefly.XValueType.VARIABLE;
					},
					setLow : function(lowValue) {
						this.m_lowValue.setStringValue(lowValue);
					},
					setLowVariable : function(variable) {
						if (variable === null) {
							this.setLow(null);
						} else {
							this.m_lowValue.setVariableValue(variable);
						}
					},
					getHigh : function() {
						return this.m_highValue.getStringValue();
					},
					isHighVariable : function() {
						return this.m_highValue.getValueType() === sap.firefly.XValueType.VARIABLE;
					},
					setHigh : function(highValue) {
						this.m_highValue.setStringValue(highValue);
					},
					setHighVariable : function(variable) {
						if (variable === null) {
							this.setHigh(null);
						} else {
							this.m_highValue.setVariableValue(variable);
						}
					},
					getComparisonOperator : function() {
						return this.m_operator;
					},
					setComparisonOperator : function(comparisonOperator) {
						this.m_operator = comparisonOperator;
					},
					getLowValue : function() {
						return this.m_lowValue;
					},
					getHighValue : function() {
						return this.m_highValue;
					},
					getValueByIndex : function(index) {
						if (index === 0) {
							return this.m_lowValue;
						} else {
							if (index === 1) {
								return this.m_highValue;
							} else {
								return null;
							}
						}
					},
					size : function() {
						return 2;
					},
					isEmpty : function() {
						return false;
					},
					hasElements : function() {
						return true;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterElement",
				sap.firefly.QModelComponent,
				{
					m_selection : null,
					m_uniqueId : null,
					setupFilterElement : function(context, selectionContainer,
							parentNode) {
						this.setupModelComponent(context, parentNode);
						this.setFilterExpression(selectionContainer);
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
					},
					releaseObject : function() {
						this.m_selection = sap.firefly.XObject
								.releaseIfNotNull(this.m_selection);
						this.m_uniqueId = null;
						sap.firefly.QFilterElement.$superclass.releaseObject
								.call(this);
					},
					getFilterExpression : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_selection);
					},
					setFilterExpression : function(selection) {
						this.m_selection = sap.firefly.XWeakReferenceUtil
								.getWeakRef(selection);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_ELEMENT;
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					},
					copyFilterElement : function(origin) {
						sap.firefly.QFilterElement.$superclass.copyModelComponent
								.call(this, origin);
						this.m_uniqueId = origin.m_uniqueId;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterLiteral",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_create : function(context, parentNode,
								supportsWildcard) {
							var filter = new sap.firefly.QFilterLiteral();
							filter.setupLiteralFilter(context, parentNode,
									supportsWildcard);
							return filter;
						}
					},
					m_filterValue : null,
					m_isStarWildcardEnabled : false,
					m_supportsStarWildcard : false,
					m_isManualInput : false,
					copyFilterLiteral : function(origin) {
						sap.firefly.QFilterLiteral.$superclass.copyModelComponent
								.call(this, origin);
						this.m_filterValue = origin.m_filterValue;
						this.m_isStarWildcardEnabled = origin.m_isStarWildcardEnabled;
						this.m_supportsStarWildcard = origin.m_supportsStarWildcard;
						this.m_isManualInput = origin.m_isManualInput;
					},
					setupLiteralFilter : function(context, parentNode,
							supportsWildcard) {
						sap.firefly.QFilterLiteral.$superclass.setupModelComponent
								.call(this, context, parentNode);
						this.m_supportsStarWildcard = supportsWildcard;
					},
					releaseObject : function() {
						this.m_filterValue = null;
						sap.firefly.QFilterLiteral.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_LITERAL;
					},
					getFilterValue : function() {
						return this.m_filterValue;
					},
					setFilterValue : function(filterValue) {
						if (sap.firefly.XString.isEqual(this.m_filterValue,
								filterValue) === false) {
							this.m_filterValue = filterValue;
							this.notifyNodeChanged();
						}
					},
					supportsStarWildcard : function() {
						return this.m_supportsStarWildcard;
					},
					isStarWildcardEnabled : function() {
						return this.m_isStarWildcardEnabled;
					},
					setIsStarWildcardEnabled : function(isEnabled) {
						if (this.m_isStarWildcardEnabled !== isEnabled) {
							this.m_isStarWildcardEnabled = isEnabled;
							this.notifyNodeChanged();
						}
					},
					getDimensionMember : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDimensionMember : function(member) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setFieldValue : function(fieldValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setVariableValue : function(variable) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getVariableValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setPolygonValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setPointValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getValueType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getGeometry : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPolygonValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPointValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStringValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDoubleValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getIntegerValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getBooleanValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getLongValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDateValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTimeValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTimeSpanValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setBooleanValue : function(booleanValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setStringValue : function(stringValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setIntegerValue : function(integerValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setLongValue : function(longValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDoubleValue : function(doubleValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDateValue : function(dateValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setTimeValue : function(timeValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDateTimeValue : function(dateTimeValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDateTimeValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setTimeSpanValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					copyFrom : function(source) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setPropertiesValue : function(properties) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setStructureValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setStructureListValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setFormattedValue : function(formattedValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setErrorValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPropertiesValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureListValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getErrorValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFormattedValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getField : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSupplementValues : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSupplementValueString : function(fieldName) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					addSupplementValue : function(fieldName, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setMultiPolygonValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPolygonValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setLineStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getLineStringValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setMultiLineStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiLineStringValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getNullValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setNullValue : function(nullValueType) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFilterValueType : function() {
						return null;
					},
					setFilterValueType : function(valueType) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setMultiPointValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPointValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isManualInput : function() {
						return this.m_isManualInput;
					},
					setIsManualInput : function(isManualInput) {
						this.m_isManualInput = isManualInput;
					},
					hasValue : function() {
						return this.m_filterValue !== null;
					},
					parseStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMemberNavigations : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setXValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDimension : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterValueBag",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, application,
								filterExpression, parentNode, supportsWildcard) {
							var object = new sap.firefly.QFilterValueBag();
							object.setupValueBag(context, filterExpression,
									parentNode, supportsWildcard);
							return object;
						},
						_create : function(context, filterExpression,
								parentNode, supportsWildcard) {
							var object = new sap.firefly.QFilterValueBag();
							object.setupValueBag(context, filterExpression,
									parentNode, supportsWildcard);
							return object;
						}
					},
					m_selection : null,
					m_uniqueId : null,
					m_value : null,
					m_fieldValue : null,
					m_filterValue : null,
					m_isStarWildcardEnabled : false,
					m_supportsStarWildcard : false,
					m_isManualInput : false,
					m_supplements : null,
					m_filterValueType : null,
					m_memberNavigations : null,
					copyFrom : function(source) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					copyFilterValueBag : function(origin) {
						var field;
						var originField;
						var newFieldValue;
						sap.firefly.QFilterValueBag.$superclass.copyModelComponent
								.call(this, origin);
						this.m_uniqueId = origin.m_uniqueId;
						this.m_filterValue = origin.m_filterValue;
						if (origin.m_value !== null) {
							this.m_value = origin.m_value.clone();
						}
						if (origin.m_fieldValue !== null) {
							originField = origin.m_fieldValue.getField();
							if (originField !== null) {
								field = this.getFieldAccessorSingle()
										.getFieldByName(originField.getName());
							} else {
								field = originField;
							}
							newFieldValue = sap.firefly.QFieldValue.create(this
									.getContext(), field, null);
							(newFieldValue).copyFieldValue(origin.m_fieldValue);
							this.m_fieldValue = newFieldValue;
						}
						this.m_isStarWildcardEnabled = origin.m_isStarWildcardEnabled;
						this.m_supportsStarWildcard = origin.m_supportsStarWildcard;
						this.m_isManualInput = origin.m_isManualInput;
						if (origin.m_supplements !== null) {
							this.m_supplements = origin.m_supplements
									.createListCopy();
						}
						if (origin.m_memberNavigations !== null) {
							this.m_memberNavigations = origin.m_memberNavigations
									.createListCopy();
						}
						this.m_filterValueType = origin.m_filterValueType;
					},
					setupValueBag : function(context, filterExpression,
							parentNode, supportsWildcard) {
						this.setupModelComponent(context, parentNode);
						this.setFilterExpression(filterExpression);
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
						this.m_supportsStarWildcard = supportsWildcard;
						this.m_supplements = sap.firefly.XList.create();
					},
					releaseObject : function() {
						this.m_supplements = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_supplements);
						this.m_memberNavigations = sap.firefly.XObject
								.releaseIfNotNull(this.m_memberNavigations);
						this.m_value = null;
						this.m_fieldValue = null;
						this.m_filterValue = null;
						this.m_filterValueType = null;
						this.m_selection = sap.firefly.XObject
								.releaseIfNotNull(this.m_selection);
						this.m_uniqueId = null;
						sap.firefly.QFilterValueBag.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_ELEMENT;
					},
					getFilterValueType : function() {
						return this.m_filterValueType;
					},
					setFilterValueType : function(valueType) {
						this.m_filterValueType = valueType;
					},
					getValueType : function() {
						var value;
						if (this.m_filterValueType === null) {
							value = this.getValue();
							if (value === null) {
								return null;
							}
							return value.getValueType();
						}
						return this.getFilterValueType();
					},
					getFieldValue : function() {
						return this.m_fieldValue;
					},
					setFieldValue : function(fieldValue) {
						this.m_fieldValue = fieldValue;
						this.m_value = null;
						this.notifyNodeChanged();
					},
					setDimensionMember : function(member) {
						var fieldValue;
						var dimension;
						if (member === null) {
							this.setFieldValue(null);
						} else {
							fieldValue = member.getKeyFieldValue();
							if (fieldValue === null) {
								dimension = member.getDimension();
								if (dimension !== null) {
									fieldValue = member.getFieldValue(dimension
											.getFlatKeyField());
									if (fieldValue === null) {
										fieldValue = member
												.getFieldValue(dimension
														.getHierarchyKeyField());
									}
								}
							}
							this.setFieldValue(fieldValue);
						}
					},
					getVariableValue : function() {
						var value = this.getValue();
						var valueType;
						var varValue;
						if (value !== null) {
							valueType = value.getValueType();
							if (valueType === sap.firefly.XValueType.VARIABLE) {
								varValue = (value);
								return varValue.getVariable();
							}
						}
						return null;
					},
					setVariableValue : function(variable) {
						if (variable === null) {
							this.setValue(null);
						} else {
							this.setValue(variable.newVariableValue());
						}
						this
								.setFilterValueType(sap.firefly.XValueType.VARIABLE);
					},
					getFilterValue : function() {
						return this.m_filterValue;
					},
					setFilterValue : function(filterValue) {
						if (sap.firefly.XString.isEqual(this.m_filterValue,
								filterValue) === false) {
							this.m_filterValue = filterValue;
							this.notifyNodeChanged();
						}
					},
					getSupplementValueString : function(fieldName) {
						var i;
						var pair;
						for (i = 0; i < this.m_supplements.size(); i++) {
							pair = this.m_supplements.get(i);
							if (sap.firefly.XString.isEqual(pair.getKey()
									.toString(), fieldName)) {
								return pair.getValue().toString();
							}
						}
						return null;
					},
					addSupplementValue : function(fieldName, value) {
						var pair;
						if ((fieldName !== null) && (value !== null)) {
							pair = sap.firefly.XKeyValuePair.create();
							pair.setKeyValue(sap.firefly.XStringValue
									.create(fieldName),
									sap.firefly.XStringValue.create(value));
							this.m_supplements.add(pair);
						}
					},
					getSupplementValues : function() {
						return this.m_supplements.getValuesAsReadOnlyList();
					},
					isManualInput : function() {
						return this.m_isManualInput;
					},
					setIsManualInput : function(isManualInput) {
						this.m_isManualInput = isManualInput;
					},
					getMemberNavigations : function() {
						if (this.m_memberNavigations === null) {
							this.m_memberNavigations = sap.firefly.XList
									.create();
						}
						return this.m_memberNavigations;
					},
					getFilterExpression : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_selection);
					},
					setFilterExpression : function(selection) {
						this.m_selection = sap.firefly.XWeakReferenceUtil
								.getWeakRef(selection);
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					},
					setPropertiesValue : function(properties) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setMultiPolygonValue : function(value) {
						this.setValue(value);
					},
					getMultiPolygonValue : function() {
						return this.getValue();
					},
					setLineStringValue : function(value) {
						this.setValue(value);
					},
					getLineStringValue : function() {
						return this.getValue();
					},
					setMultiLineStringValue : function(value) {
						this.setValue(value);
					},
					getMultiLineStringValue : function() {
						return this.getValue();
					},
					setMultiPointValue : function(value) {
						this.setValue(value);
					},
					getMultiPointValue : function() {
						return this.getValue();
					},
					parseStringValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setXValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setStructureListValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setFormattedValue : function(formattedValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setErrorValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPropertiesValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureListValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getErrorValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setStructureValue : function(value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getNullValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setNullValue : function(nullValueType) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStringValue : function() {
						var variable;
						if (this.getValue() === null) {
							return null;
						}
						if (this.getValueType().isSpatial()) {
							return (this.getValue()).toWKT();
						} else {
							if (this.getValueType().isVariable()) {
								variable = this.getValue();
								return variable.getVariable().getName();
							}
						}
						return this.getValue().toString();
					},
					setStringValue : function(stringValue) {
						this.setValue(sap.firefly.XStringValue
								.create(stringValue));
					},
					getIntegerValue : function() {
						return (this.getValue()).getIntegerValue();
					},
					setIntegerValue : function(integerValue) {
						if (sap.firefly.XMath.isNaN(integerValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The integer value must not be NaN!");
						}
						this.setValue(sap.firefly.XIntegerValue
								.create(integerValue));
					},
					getLongValue : function() {
						var value = this.getValue();
						var valueType;
						if (value === null) {
							return 0;
						}
						valueType = value.getValueType();
						if (valueType !== sap.firefly.XValueType.LONG) {
							throw sap.firefly.XException
									.createRuntimeException(sap.firefly.XString
											.concatenate2("Wrong type: ",
													valueType.getName()));
						}
						return (value).getLongValue();
					},
					setLongValue : function(longValue) {
						if (sap.firefly.XMath.isNaN(longValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The long value must not be NaN!");
						}
						this.setValue(sap.firefly.XLongValue.create(longValue));
					},
					getDoubleValue : function() {
						return (this.getValue()).getDoubleValue();
					},
					setDoubleValue : function(doubleValue) {
						if (sap.firefly.XMath.isNaN(doubleValue)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The doube value must not be NaN!");
						}
						this.setValue(sap.firefly.XDoubleValue
								.create(doubleValue));
					},
					getGeometry : function() {
						var value = this.getValue();
						return value;
					},
					getPolygonValue : function() {
						return this.getValue();
					},
					setPolygonValue : function(value) {
						this.setValue(value);
					},
					getPointValue : function() {
						return this.getValue();
					},
					setPointValue : function(value) {
						this.setValue(value);
					},
					getDateValue : function() {
						return this.getValue();
					},
					setDateValue : function(dateValue) {
						this.setValue(dateValue);
					},
					getTimeValue : function() {
						return this.getValue();
					},
					setTimeValue : function(timeValue) {
						this.setValue(timeValue);
					},
					getDateTimeValue : function() {
						return this.getValue();
					},
					setDateTimeValue : function(dateTimeValue) {
						this.setValue(dateTimeValue);
					},
					getTimeSpanValue : function() {
						return this.getValue();
					},
					setTimeSpanValue : function(value) {
						this.setValue(value);
					},
					getBooleanValue : function() {
						return (this.getValue()).getBooleanValue();
					},
					setBooleanValue : function(booleanValue) {
						this.setValue(sap.firefly.XBooleanValue
								.create(booleanValue));
					},
					getDimensionMember : function() {
						var varValue;
						var dimvar;
						var fieldValue;
						if (this.m_filterValueType === sap.firefly.XValueType.VARIABLE) {
							varValue = this.getVariableValue();
							if (varValue.getVariableType() === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE) {
								dimvar = varValue;
								return dimvar.getDimensionMember();
							}
						}
						fieldValue = this.getFieldValue();
						if (fieldValue === null) {
							return null;
						}
						return fieldValue.getDimensionMember();
					},
					getValue : function() {
						if ((this.m_value === null)
								&& (this.m_fieldValue !== null)) {
							return this.m_fieldValue.getValue();
						}
						return this.m_value;
					},
					setValue : function(value) {
						this.m_value = value;
						this.m_fieldValue = null;
						this.notifyNodeChanged();
					},
					hasValue : function() {
						return this.m_value !== null;
					},
					isStarWildcardEnabled : function() {
						return this.m_isStarWildcardEnabled;
					},
					setIsStarWildcardEnabled : function(isEnabled) {
						if (this.m_isStarWildcardEnabled !== isEnabled) {
							this.m_isStarWildcardEnabled = isEnabled;
							this.notifyNodeChanged();
						}
					},
					supportsStarWildcard : function() {
						return this.m_supportsStarWildcard;
					},
					getDimension : function() {
						var fieldValue = this.getFieldValue();
						if (fieldValue !== null) {
							return fieldValue.getDimension();
						} else {
							return null;
						}
					},
					getField : function() {
						var fieldValue = this.getFieldValue();
						if (fieldValue !== null) {
							return fieldValue.getField();
						} else {
							return null;
						}
					},
					getFormattedValue : function() {
						var fieldValue = this.getFieldValue();
						if (fieldValue !== null) {
							return fieldValue.getFormattedValue();
						} else {
							return null;
						}
					}
				});
$Firefly.createClass("sap.firefly.QFormulaItemAttribute",
		sap.firefly.QModelComponent, {
			$statics : {
				_createMember : function(context, parentNode) {
					var formula = new sap.firefly.QFormulaItemAttribute();
					formula.setupFormulaAttribute(context, parentNode);
					return formula;
				}
			},
			m_fieldName : null,
			setupFormulaAttribute : function(context, parentNode) {
				this.setupModelComponent(context, parentNode);
				this.m_fieldName = null;
			},
			releaseObject : function() {
				this.m_fieldName = null;
				sap.firefly.QFormulaItemAttribute.$superclass.releaseObject
						.call(this);
			},
			copyFormulaItemAttribute : function(origin) {
				this.copyModelComponent(origin);
				this.m_fieldName = origin.m_fieldName;
			},
			getOlapComponentType : function() {
				return sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE;
			},
			setFieldByName : function(fieldName) {
				this.m_fieldName = fieldName;
			},
			getFieldName : function() {
				return this.m_fieldName;
			}
		});
$Firefly.createClass("sap.firefly.QFormulaItemConstant",
		sap.firefly.QModelComponent, {
			$statics : {
				_createConstant : function(context, parentNode) {
					var formula = new sap.firefly.QFormulaItemConstant();
					formula.setupFormula(context, parentNode);
					return formula;
				}
			},
			m_constantValue : null,
			m_variableValue : null,
			m_variable : null,
			m_currency : null,
			m_unit : null,
			copyFormulaItemConstant : function(origin) {
				var variableContainer;
				var origVar;
				var origVarVal;
				var originValue;
				this.copyModelComponent(origin);
				this.m_currency = origin.m_currency;
				this.m_unit = origin.m_unit;
				if (origin.getValueType() === sap.firefly.XValueType.VARIABLE) {
					variableContainer = this.getContext()
							.getVariableContainer();
					origVar = origin.getVariable();
					if (origVar !== null) {
						this.setVariable(variableContainer.getVariables()
								.getByKey(origVar.getName()));
					} else {
						origVarVal = origin.getVariableValue();
						this.setVariableValue(sap.firefly.QVariableValue
								.create(variableContainer.getVariables()
										.getByKey(
												origVarVal.getVariable()
														.getName())));
					}
				} else {
					originValue = origin.m_constantValue.getValue();
					if (originValue !== null) {
						this.m_constantValue.copyFrom(origin.m_constantValue);
					} else {
						this.m_constantValue.releaseObject();
						this.m_constantValue = sap.firefly.XValueAccess
								.createWithType(origin.m_constantValue
										.getValueType());
					}
				}
			},
			setupFormula : function(context, parentNode) {
				this.setupModelComponent(context, parentNode);
				this.m_constantValue = sap.firefly.XValueAccess.create();
			},
			releaseObject : function() {
				if (this.m_constantValue !== null) {
					this.m_constantValue.releaseObject();
					this.m_constantValue = null;
				}
				this.m_variableValue = null;
				this.m_variable = null;
				this.m_currency = null;
				this.m_unit = null;
				sap.firefly.QFormulaItemConstant.$superclass.releaseObject
						.call(this);
			},
			isEqualTo : function(other) {
				var xOther;
				if (other === null) {
					return false;
				}
				if (this === other) {
					return true;
				}
				xOther = other;
				if (!this.getValue().isEqualTo(xOther.getValue())) {
					return false;
				}
				if (!sap.firefly.XString.isEqual(this.getCurrency(), xOther
						.getCurrency())) {
					return false;
				}
				if (!sap.firefly.XString.isEqual(this.getUnit(), xOther
						.getUnit())) {
					return false;
				}
				return true;
			},
			getOlapComponentType : function() {
				return sap.firefly.OlapComponentType.FORMULA_CONSTANT;
			},
			getValueType : function() {
				if (this.m_variable !== null) {
					return sap.firefly.XValueType.VARIABLE;
				}
				return this.m_constantValue.getValueType();
			},
			getValue : function() {
				return this.m_constantValue.getValue();
			},
			getGeometry : function() {
				var value = this.getValue();
				return value;
			},
			getPolygonValue : function() {
				return this.m_constantValue.getPolygonValue();
			},
			setPolygonValue : function(value) {
				this.m_constantValue.setPolygonValue(value);
				this.notifyNodeChanged();
			},
			getPointValue : function() {
				return this.m_constantValue.getPointValue();
			},
			setPointValue : function(value) {
				this.m_constantValue.setPointValue(value);
				this.notifyNodeChanged();
			},
			getStringValue : function() {
				return this.m_constantValue.getStringValue();
			},
			setStringValue : function(stringValue) {
				this.m_constantValue.setStringValue(stringValue);
				this.notifyNodeChanged();
			},
			getBooleanValue : function() {
				return this.m_constantValue.getBooleanValue();
			},
			setBooleanValue : function(booleanValue) {
				this.m_constantValue.setBooleanValue(booleanValue);
				this.notifyNodeChanged();
			},
			getDateValue : function() {
				return this.m_constantValue.getDateValue();
			},
			setDateValue : function(dateValue) {
				this.m_constantValue.setDateValue(dateValue);
				this.notifyNodeChanged();
			},
			getTimeValue : function() {
				return this.m_constantValue.getTimeValue();
			},
			setTimeValue : function(timeValue) {
				this.m_constantValue.setTimeValue(timeValue);
				this.notifyNodeChanged();
			},
			getTimeSpanValue : function() {
				return this.m_constantValue.getTimeSpanValue();
			},
			setTimeSpanValue : function(value) {
				this.m_constantValue.setTimeSpanValue(value);
				this.notifyNodeChanged();
			},
			setDateTimeValue : function(dateTimeValue) {
				this.m_constantValue.setDateTimeValue(dateTimeValue);
				this.notifyNodeChanged();
			},
			getDateTimeValue : function() {
				return this.m_constantValue.getDateTimeValue();
			},
			setIntegerValue : function(integerValue) {
				this.m_constantValue.setIntegerValue(integerValue);
				this.notifyNodeChanged();
			},
			getIntegerValue : function() {
				return this.m_constantValue.getIntegerValue();
			},
			setLongValue : function(longValue) {
				this.m_constantValue.setLongValue(longValue);
				this.notifyNodeChanged();
			},
			getLongValue : function() {
				return this.m_constantValue.getLongValue();
			},
			setDoubleValue : function(doubleValue) {
				this.m_constantValue.setDoubleValue(doubleValue);
				this.notifyNodeChanged();
			},
			getDoubleValue : function() {
				return this.m_constantValue.getDoubleValue();
			},
			copyFrom : function(source) {
				this.m_constantValue.copyFrom(source);
			},
			setMultiPolygonValue : function(value) {
				this.m_constantValue.setMultiPolygonValue(value);
				this.notifyNodeChanged();
			},
			getMultiPolygonValue : function() {
				return this.m_constantValue.getMultiPolygonValue();
			},
			setLineStringValue : function(value) {
				this.m_constantValue.setLineStringValue(value);
				this.notifyNodeChanged();
			},
			getLineStringValue : function() {
				return this.m_constantValue.getLineStringValue();
			},
			setMultiLineStringValue : function(value) {
				this.m_constantValue.setMultiLineStringValue(value);
				this.notifyNodeChanged();
			},
			getMultiLineStringValue : function() {
				return this.m_constantValue.getMultiLineStringValue();
			},
			getUnit : function() {
				return this.m_unit;
			},
			setUnit : function(unit) {
				this.m_unit = unit;
				this.m_currency = null;
				this.notifyNodeChanged();
			},
			getCurrency : function() {
				return this.m_currency;
			},
			setCurrency : function(currency) {
				this.m_currency = currency;
				this.m_unit = null;
				this.notifyNodeChanged();
			},
			setVariableValue : function(variableValue) {
				this.m_variableValue = sap.firefly.XWeakReferenceUtil
						.getWeakRef(variableValue);
				if (this.m_variableValue !== null) {
					this.setVariable(variableValue.getVariable());
				} else {
					this.m_variable = null;
				}
				this.notifyNodeChanged();
			},
			getVariableValue : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_variableValue);
			},
			getNullValue : function() {
				return this.m_constantValue.getNullValue();
			},
			setNullValue : function(nullValueType) {
				this.m_constantValue.setNullValue(nullValueType);
				this.notifyNodeChanged();
			},
			setVariable : function(variable) {
				this.m_variable = sap.firefly.XWeakReferenceUtil
						.getWeakRef(variable);
				this.notifyNodeChanged();
			},
			getVariable : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_variable);
			},
			setMultiPointValue : function(value) {
				this.m_constantValue.setMultiPointValue(value);
				this.notifyNodeChanged();
			},
			getMultiPointValue : function() {
				return this.m_constantValue.getMultiPointValue();
			},
			hasValue : function() {
				if (this.m_variable === null) {
					return this.m_constantValue.hasValue();
				}
				return this.getVariable().getValueByString() !== null;
			},
			parseStringValue : function(value) {
				if (this.m_variable !== null) {
					throw sap.firefly.XException
							.createUnsupportedOperationException();
				}
				return this.m_constantValue.parseStringValue(value);
			},
			setXValue : function(value) {
				this.m_constantValue.releaseObject();
				this.m_constantValue = sap.firefly.XValueAccess
						.createWithValue(value);
			}
		});
$Firefly.createClass("sap.firefly.QFormulaItemMember",
		sap.firefly.QModelComponent, {
			$statics : {
				_createMember : function(context, parentNode) {
					var formula = new sap.firefly.QFormulaItemMember();
					formula.setupModelComponent(context, parentNode);
					return formula;
				}
			},
			m_memberName : null,
			m_dimensionName : null,
			m_memberVariable : null,
			copyFormulaItemMember : function(origin) {
				this.copyModelComponent(origin);
				this.m_memberName = origin.m_memberName;
				this.m_dimensionName = origin.m_dimensionName;
				if (origin.m_memberVariable !== null) {
					this.setVariable(this.getContext().getVariableContainer()
							.getVariables().getByKey(
									origin.getVariable().getName()));
				}
			},
			releaseObject : function() {
				this.m_memberName = null;
				this.m_dimensionName = null;
				this.m_memberVariable = null;
				sap.firefly.QFormulaItemMember.$superclass.releaseObject
						.call(this);
			},
			getOlapComponentType : function() {
				return sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER;
			},
			setMember : function(member) {
				this.setMemberName(member.getName());
			},
			setMemberName : function(name) {
				this.m_memberName = name;
				this.m_memberVariable = null;
			},
			getMemberName : function() {
				return this.m_memberName;
			},
			setVariable : function(variable) {
				this.m_memberVariable = sap.firefly.XWeakReferenceUtil
						.getWeakRef(variable);
				this.m_memberName = null;
				this.m_dimensionName = variable.getDimension().getName();
			},
			getVariable : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_memberVariable);
			},
			getDimensionName : function() {
				return this.m_dimensionName;
			},
			setDimension : function(dimension) {
				if (dimension === null) {
					this.m_dimensionName = null;
				} else {
					this.m_dimensionName = dimension.getName();
				}
			},
			setDimensionName : function(dimensionName) {
				this.m_dimensionName = dimensionName;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QFormulaItemOperation",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_createOperation : function(context, parentNode) {
							var formula = new sap.firefly.QFormulaItemOperation();
							formula.setupModelComponent(context, parentNode);
							return formula;
						}
					},
					m_operator : null,
					m_leftSide : null,
					m_rightSide : null,
					copyFormulaItemOperation : function(origin) {
						this.copyModelComponent(origin);
						this.m_operator = origin.m_operator;
						if (origin.m_leftSide !== null) {
							this.m_leftSide = this.copySide(origin.m_leftSide);
						}
						if (origin.m_rightSide !== null) {
							this.m_rightSide = this
									.copySide(origin.m_rightSide);
						}
					},
					copySide : function(originItem) {
						var cloneItem;
						var originType = originItem.getOlapComponentType();
						if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
							cloneItem = sap.firefly.QFormulaItemAttribute
									._createMember(this, this);
							(cloneItem).copyFormulaItemAttribute(originItem);
						} else {
							if (originType === sap.firefly.OlapComponentType.FORMULA_CONSTANT) {
								cloneItem = sap.firefly.QFormulaItemConstant
										._createConstant(this, this);
								(cloneItem).copyFormulaItemConstant(originItem);
							} else {
								if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
									cloneItem = sap.firefly.QFormulaItemMember
											._createMember(this, this);
									(cloneItem)
											.copyFormulaItemMember(originItem);
								} else {
									if (originType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
										cloneItem = sap.firefly.QFormulaItemOperation
												._createOperation(this, this);
										(cloneItem)
												.copyFormulaItemOperation(originItem);
									} else {
										if (originType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
											cloneItem = sap.firefly.QFactory2
													.newFormulaFunction(this);
											(cloneItem)
													.copyFormulaItemFunction(originItem);
										} else {
											throw sap.firefly.XException
													.createRuntimeException(sap.firefly.XStringUtils
															.concatenate3(
																	"Unexpected component type '",
																	originType
																			.getName(),
																	"' in formula operation!"));
										}
									}
								}
							}
						}
						return cloneItem;
					},
					releaseObject : function() {
						this.m_leftSide = sap.firefly.XObject
								.releaseIfNotNull(this.m_leftSide);
						this.m_rightSide = sap.firefly.XObject
								.releaseIfNotNull(this.m_rightSide);
						this.m_operator = null;
						sap.firefly.QFormulaItemOperation.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FORMULA_OPERATION;
					},
					getOperator : function() {
						return this.m_operator;
					},
					setOperator : function(theOperator) {
						this.m_operator = theOperator;
						this.notifyNodeChanged();
					},
					getLeftSide : function() {
						return this.m_leftSide;
					},
					setLeftSide : function(item) {
						this.m_leftSide = item;
						this.notifyNodeChanged();
					},
					getRightSide : function() {
						return this.m_rightSide;
					},
					setRightSide : function(item) {
						this.m_rightSide = item;
						this.notifyNodeChanged();
					}
				});
$Firefly.createClass("sap.firefly.QHierarchy", sap.firefly.QModelComponent,
		{
			$statics : {
				create : function(context, dimension, name) {
					var object = new sap.firefly.QHierarchy();
					object.setupHierarchy(context, dimension, name);
					return object;
				}
			},
			m_uniqueName : null,
			m_hierarchyDescription : null,
			m_version : null,
			m_versionDescription : null,
			m_dateTo : null,
			m_dateFrom : null,
			m_dueDate : null,
			m_owner : null,
			m_hierId : null,
			m_hierType : null,
			m_objectVersion : null,
			m_isRemote : false,
			m_hierarchyType : null,
			copyHierarchy : function(origin) {
				this.copyModelComponent(origin);
				this.m_uniqueName = origin.m_uniqueName;
				this.m_hierarchyDescription = origin.m_hierarchyDescription;
				this.m_version = origin.m_version;
				this.m_versionDescription = origin.m_versionDescription;
				if (origin.m_dateTo !== null) {
					this.m_dateTo = origin.m_dateTo.clone();
				}
				if (origin.m_dateFrom !== null) {
					this.m_dateFrom = origin.m_dateFrom.clone();
				}
				if (origin.m_dueDate !== null) {
					this.m_dueDate = origin.m_dueDate.clone();
				}
				this.m_hierarchyType = origin.m_hierarchyType;
				this.m_owner = origin.m_owner;
				this.m_hierId = origin.m_hierId;
				this.m_hierType = origin.m_hierType;
				this.m_objectVersion = origin.m_objectVersion;
				this.m_isRemote = origin.m_isRemote;
			},
			setupHierarchy : function(context, dimension, name) {
				sap.firefly.QHierarchy.$superclass.setupModelComponent.call(
						this, context, dimension);
				this.setName(name);
			},
			releaseObject : function() {
				this.m_dateTo = sap.firefly.XObject
						.releaseIfNotNull(this.m_dateTo);
				this.m_dateFrom = sap.firefly.XObject
						.releaseIfNotNull(this.m_dateFrom);
				this.m_dueDate = sap.firefly.XObject
						.releaseIfNotNull(this.m_dueDate);
				this.m_uniqueName = null;
				this.m_hierarchyDescription = null;
				this.m_version = null;
				this.m_versionDescription = null;
				this.m_owner = null;
				this.m_hierId = null;
				this.m_hierType = null;
				this.m_objectVersion = null;
				this.m_hierarchyType = null;
				sap.firefly.QHierarchy.$superclass.releaseObject.call(this);
			},
			isEqualTo : function(other) {
				var otherHierarchy;
				if (other === null) {
					return false;
				}
				if (this === other) {
					return true;
				}
				otherHierarchy = other;
				if (sap.firefly.XString.isEqual(this.getHierarchyDescription(),
						otherHierarchy.getHierarchyDescription()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getHierarchyName(),
						otherHierarchy.getHierarchyName()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getHierarchyVersion(),
						otherHierarchy.getHierarchyVersion()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getVersionDescription(),
						otherHierarchy.getVersionDescription()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getOwner(), otherHierarchy
						.getOwner()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getHierId(),
						otherHierarchy.getHierId()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getHierType(),
						otherHierarchy.getHierType()) === false) {
					return false;
				}
				if (sap.firefly.XString.isEqual(this.getObjectVersion(),
						otherHierarchy.getObjectVersion()) === false) {
					return false;
				}
				if (this.isRemote() !== otherHierarchy.isRemote()) {
					return false;
				}
				if (this.getDateFrom() !== otherHierarchy.getDateFrom()) {
					return false;
				}
				if (this.getHierarchyDueDate() !== otherHierarchy
						.getHierarchyDueDate()) {
					return false;
				}
				if (this.getDateTo() !== otherHierarchy.getDateTo()) {
					return false;
				}
				return true;
			},
			getHierarchyName : function() {
				return this.getName();
			},
			getHierarchyDescription : function() {
				return this.m_hierarchyDescription;
			},
			setHierarchyDescription : function(hierarchyDescription) {
				this.m_hierarchyDescription = hierarchyDescription;
			},
			setVersionDescription : function(versionDescription) {
				this.m_versionDescription = versionDescription;
			},
			getVersionDescription : function() {
				return this.m_versionDescription;
			},
			getHierarchyVersion : function() {
				return this.m_version;
			},
			getVersion : function() {
				return this.getHierarchyVersion();
			},
			setHierarchyVersion : function(version) {
				this.m_version = version;
			},
			getDateTo : function() {
				return this.m_dateTo;
			},
			setDateTo : function(dateTo) {
				this.m_dateTo = dateTo;
			},
			isTimeDependent : function() {
				return false;
			},
			hasValidityTimeSpan : function() {
				return false;
			},
			supportsNoneUniqueLeaves : function() {
				return false;
			},
			getDimension : function() {
				return this.getParentComponent();
			},
			getDefaultDrillLevel : function() {
				return 0;
			},
			supportsPostedNodes : function() {
				return false;
			},
			supportsMemberOfPostedNodeVisibilityChange : function() {
				return false;
			},
			supportsMemberAccess : function() {
				return false;
			},
			getLowerLevelNodeAlignment : function() {
				return null;
			},
			hasDefaultLowerLevelNodeAlignment : function() {
				return false;
			},
			supportsLowerLevelNodeAlignment : function(alignment) {
				return false;
			},
			getDateFrom : function() {
				return this.m_dateFrom;
			},
			getOwner : function() {
				return this.m_owner;
			},
			getHierId : function() {
				return this.m_hierId;
			},
			getHierType : function() {
				return this.m_hierType;
			},
			setHierType : function(hierType) {
				this.m_hierType = hierType;
			},
			getObjectVersion : function() {
				return this.m_objectVersion;
			},
			setDateFrom : function(dateFrom) {
				this.m_dateFrom = dateFrom;
			},
			setOwner : function(owner) {
				this.m_owner = owner;
			},
			setHierId : function(hierId) {
				this.m_hierId = hierId;
			},
			setObjectVersion : function(objectVersion) {
				this.m_objectVersion = objectVersion;
			},
			isRemote : function() {
				return this.m_isRemote;
			},
			setIsRemote : function(isRemote) {
				this.m_isRemote = isRemote;
			},
			getHierarchyDueDate : function() {
				return this.m_dueDate;
			},
			getDueDate : function() {
				return this.m_dueDate;
			},
			setHierarchyDueDate : function(dueDate) {
				this.m_dueDate = dueDate;
			},
			getHierarchyUniqueName : function() {
				return this.m_uniqueName;
			},
			setHierarchyUniqueName : function(uniqueName) {
				this.m_uniqueName = uniqueName;
			},
			setHierarchyName : function(name) {
				this.setName(name);
			},
			getHierarchyType : function() {
				return this.m_hierarchyType;
			},
			setHierarchyType : function(hierarchyType) {
				this.m_hierarchyType = hierarchyType;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QHierarchyManager",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, parentNode, dimension) {
							var object = new sap.firefly.QHierarchyManager();
							object.setupHierarchy(context, parentNode,
									dimension);
							return object;
						},
						isStringSimilar : function(first, second) {
							if (sap.firefly.XString.isEqual(first, second)) {
								return true;
							} else {
								if ((first === null)
										&& sap.firefly.XString.isEqual(second,
												"")) {
									return true;
								} else {
									if ((second === null)
											&& sap.firefly.XString.isEqual(
													first, "")) {
										return true;
									} else {
										return false;
									}
								}
							}
						}
					},
					m_dimension : null,
					m_supportsHierarchy : false,
					m_hierarchySelectionName : null,
					m_hierarchySelectionVersion : null,
					m_hierarchySelectionDueDate : null,
					m_isHierarchyActive : false,
					m_lowerLevelNodeAlignment : null,
					m_memberOfPostedNodeVisibility : null,
					m_hierarchyNodeCondensation : false,
					m_hierarchyDueDateVariableName : null,
					m_useHierarchyDueDateVariable : false,
					m_assignedHierarchy : null,
					m_assignedHierarchyModCount : 0,
					m_hierarchySelectionModCount : 0,
					m_hierarchyHelp : null,
					m_hierarchies : null,
					m_defaultHierarchyName : null,
					setupHierarchy : function(context, parentNode, dimension) {
						sap.firefly.QHierarchyManager.$superclass.setupModelComponent
								.call(this, context, parentNode);
						this.setDimension(dimension);
						this.m_supportsHierarchy = true;
						this.m_lowerLevelNodeAlignment = sap.firefly.Alignment.DEFAULT_VALUE;
						this.m_memberOfPostedNodeVisibility = sap.firefly.ResultVisibility.VISIBLE;
					},
					releaseObject : function() {
						this.m_hierarchySelectionName = null;
						this.m_hierarchySelectionVersion = null;
						this.m_hierarchySelectionDueDate = null;
						this.m_lowerLevelNodeAlignment = null;
						this.m_memberOfPostedNodeVisibility = null;
						this.m_hierarchyDueDateVariableName = null;
						this.m_hierarchies = null;
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_assignedHierarchy = sap.firefly.XObject
								.releaseIfNotNull(this.m_assignedHierarchy);
						this.m_hierarchyHelp = sap.firefly.XObject
								.releaseIfNotNull(this.m_hierarchyHelp);
						this.m_defaultHierarchyName = null;
						sap.firefly.QHierarchyManager.$superclass.releaseObject
								.call(this);
					},
					copyHierarchy : function(origin) {
						var otherHierarchy;
						this.copyModelComponent(origin);
						this.m_supportsHierarchy = origin.supportsHierarchy();
						this.m_hierarchySelectionName = origin
								.getHierarchyName();
						this.m_hierarchySelectionVersion = origin
								.getHierarchyVersion();
						if (origin.getHierarchyDueDate() !== null) {
							this.m_hierarchySelectionDueDate = origin
									.getHierarchyDueDate().clone();
						}
						this.m_lowerLevelNodeAlignment = origin
								.getLowerLevelNodeAlignment();
						this.m_memberOfPostedNodeVisibility = origin
								.getMemberOfPostedNodeVisibility();
						this.m_hierarchyNodeCondensation = origin
								.hasNodeCondensation();
						this.m_hierarchyDueDateVariableName = origin
								.getHierarchyDueDateVariableName();
						this.m_useHierarchyDueDateVariable = origin
								.useHierarchyDueDateVariable();
						this.m_isHierarchyActive = origin.isHierarchyActive();
						otherHierarchy = origin.getHierarchy();
						if (otherHierarchy !== null) {
							this.m_assignedHierarchy = sap.firefly.QHierarchy
									.create(this.getContext(), this
											.getDimension(), otherHierarchy
											.getName());
							(this.m_assignedHierarchy)
									.copyHierarchy(otherHierarchy);
						}
						if (origin.getHierarchies() !== null) {
							this.m_hierarchies = origin.getHierarchies()
									.clone();
						}
						this.m_defaultHierarchyName = origin
								.getDefaultHierarchyName();
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.HIERARCHY_MANAGER;
					},
					getHierarchyValueHelp : function(syncType) {
						if (this.m_hierarchyHelp === null) {
							this.m_hierarchyHelp = sap.firefly.QHierarchyValueHelp
									.createModelComponent(this.getContext(),
											this.getDimension(),
											"Available Hierarchies", syncType);
						}
						return this.m_hierarchyHelp;
					},
					isHierarchyAssigned : function() {
						if (this.supportsHierarchy()) {
							return (this.getHierarchy() !== null);
						}
						return false;
					},
					setHierarchy : function(hierarchy) {
						var dueDate;
						this.assertHierarchyPossible();
						if ((this.isHierarchyAssigned() === false)
								|| (this.getHierarchy().isEqualTo(hierarchy) === false)) {
							this.m_isHierarchyActive = (hierarchy !== null);
							if (hierarchy === null) {
								this.setHierarchySelection(null, null);
								this.setHierarchyDueDate(null);
							} else {
								this.m_hierarchySelectionName = hierarchy
										.getName();
								this.m_hierarchySelectionVersion = hierarchy
										.getHierarchyVersion();
								dueDate = hierarchy.getHierarchyDueDate();
								if (dueDate === null) {
									dueDate = hierarchy.getDateFrom();
								}
								this.m_hierarchySelectionDueDate = dueDate;
							}
							this.m_hierarchySelectionModCount++;
							this.m_assignedHierarchyModCount = this.m_hierarchySelectionModCount;
							this.m_assignedHierarchy = hierarchy;
							this.notifyNodeChanged();
						}
					},
					getHierarchy : function() {
						if (this.supportsHierarchy()) {
							return this.m_assignedHierarchy;
						}
						return null;
					},
					supportsLowerLevelNodeAlignment : function(alignment) {
						if (alignment === sap.firefly.Alignment.CHILDREN_ABOVE_PARENT) {
							return this.supportsExpandBottomUp();
						}
						return true;
					},
					supportsExpandBottomUp : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities.supportsExpandBottomUp();
					},
					supportsHierarchy : function() {
						return this.m_supportsHierarchy;
					},
					setSupportsHierarchy : function(supportsHierarchy) {
						this.m_supportsHierarchy = supportsHierarchy;
					},
					setHierarchyVersion : function(version) {
						this.assertHierarchyPossible();
						if (sap.firefly.XString.isEqual(version, this
								.getHierarchyVersion()) === false) {
							this.m_hierarchySelectionVersion = version;
							this.m_hierarchySelectionModCount++;
						}
						this.reevaluateHierarchySelection();
					},
					getHierarchyVersion : function() {
						if (this.supportsHierarchy()) {
							return this.m_hierarchySelectionVersion;
						}
						return null;
					},
					setHierarchyDueDate : function(dueDate) {
						this.assertHierarchyPossible();
						if (dueDate !== this.getHierarchyDueDate()) {
							this.m_hierarchySelectionDueDate = dueDate;
							this.m_hierarchySelectionModCount++;
						}
						this.reevaluateHierarchySelection();
					},
					getHierarchyDueDate : function() {
						if (this.supportsHierarchy()) {
							return this.m_hierarchySelectionDueDate;
						}
						return null;
					},
					getLowerLevelNodeAlignment : function() {
						return this.m_lowerLevelNodeAlignment;
					},
					hasDefaultLowerLevelNodeAlignment : function() {
						return this.m_lowerLevelNodeAlignment === sap.firefly.Alignment.DEFAULT_VALUE;
					},
					setLowerLevelNodeAlignment : function(alignment) {
						this.m_lowerLevelNodeAlignment = alignment;
						this.notifyNodeChanged();
					},
					getMemberOfPostedNodeVisibility : function() {
						return this.m_memberOfPostedNodeVisibility;
					},
					setMemberOfPostedNodeVisibility : function(visibility) {
						this.m_memberOfPostedNodeVisibility = visibility;
						this.notifyNodeChanged();
					},
					hasNodeCondensation : function() {
						return this.m_hierarchyNodeCondensation;
					},
					setHasNodeCondensation : function(condense) {
						this.m_hierarchyNodeCondensation = condense;
						this.notifyNodeChanged();
					},
					getHierarchyDueDateVariableName : function() {
						return this.m_hierarchyDueDateVariableName;
					},
					setHierarchyDueDateVariableName : function(name) {
						this.m_hierarchyDueDateVariableName = name;
					},
					useHierarchyDueDateVariable : function() {
						return this.m_useHierarchyDueDateVariable;
					},
					setUseHierarchyDueDateVariable : function(useVariable) {
						this.m_useHierarchyDueDateVariable = useVariable;
					},
					getHierarchyName : function() {
						if (this.supportsHierarchy()) {
							return this.m_hierarchySelectionName;
						}
						return null;
					},
					setHierarchyName : function(name) {
						var dimension;
						var queryModel;
						var cmds;
						var selectorHierarchyNode;
						this.assertHierarchyPossible();
						if (sap.firefly.XString.isEqual(name, this
								.getHierarchyName()) === false) {
							dimension = this.getDimension();
							queryModel = this.getQueryModel();
							if (queryModel !== null) {
								cmds = queryModel.getConvenienceCommands();
								cmds.clearFiltersByDimension(dimension);
								cmds
										.clearVisibilityFiltersByDimension(dimension);
							}
							dimension
									.clearSelectorSelectionsByDimension(dimension);
							selectorHierarchyNode = dimension
									.getSelectorHierarchyNode();
							if ((selectorHierarchyNode !== null)
									&& (selectorHierarchyNode.getDimension() === dimension)) {
								dimension.clearSelectorHierarchyNode();
							}
							this.m_hierarchySelectionName = name;
							this.m_hierarchySelectionModCount++;
						}
						this.reevaluateHierarchySelection();
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					setDimension : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					setInitialDrillLevel : function(relativeLevelCount) {
						var drillManager = this.getDrillManager();
						drillManager.setRootExpandingLevels(
								this.getDimension(), relativeLevelCount);
					},
					getInitialDrillLevel : function() {
						var drillManager = this.getDrillManager();
						var dimension = this.getDimension();
						var rootOperation = drillManager
								.getRootExpandingLevels(dimension);
						if (rootOperation === null) {
							return 0;
						}
						return rootOperation.getRelativeLevelCount();
					},
					isHierarchyActive : function() {
						if (this.supportsHierarchy()) {
							return this.m_isHierarchyActive;
						}
						return false;
					},
					setHierarchyActive : function(active) {
						var isChanged;
						var hierarchy;
						var oldHierarchyUniqueName;
						var newHierarchyUniqueName;
						this.assertHierarchyPossible();
						isChanged = false;
						if (active) {
							if (this.isHierarchyAssigned()
									|| (this.m_hierarchySelectionModCount !== this.m_assignedHierarchyModCount)) {
								if ((this.getHierarchyName() === null)) {
									throw sap.firefly.XException
											.createIllegalArgumentException("No hierarchy name is given");
								}
								hierarchy = sap.firefly.QHierarchy.create(this
										.getContext(), this.getDimension(),
										this.getHierarchyName());
								hierarchy.setHierarchyVersion(this
										.getHierarchyVersion());
								hierarchy.setHierarchyDueDate(this
										.getHierarchyDueDate());
								if (hierarchy.isEqualTo(this.getHierarchy()) === false) {
									oldHierarchyUniqueName = this
											.getHierarchyUniqueName(this
													.getHierarchyName());
									this.getQueryModel()
											.assertHierarchyUniqueName(
													oldHierarchyUniqueName,
													false);
									this.setHierarchy(hierarchy);
									isChanged = true;
								}
								if (active !== this.isHierarchyActive()) {
									isChanged = true;
									this.m_hierarchySelectionModCount++;
								}
							}
						} else {
							if (active !== this.isHierarchyActive()) {
								isChanged = true;
								this.m_hierarchySelectionModCount++;
							}
						}
						if (isChanged) {
							newHierarchyUniqueName = this
									.getHierarchyUniqueName(this
											.getHierarchyName());
							this.getQueryModel().assertHierarchyUniqueName(
									newHierarchyUniqueName, active);
							this.m_isHierarchyActive = active;
							this.notifyNodeChanged();
						}
						return isChanged;
					},
					reevaluateHierarchySelection : function() {
						this.assertHierarchyPossible();
						if (this.m_hierarchySelectionModCount !== this.m_assignedHierarchyModCount) {
							if (this.setHierarchyActive(this
									.isHierarchyActive()) === false) {
								this.notifyNodeChanged();
							}
						}
					},
					assertHierarchyPossible : function() {
						if (this.supportsHierarchy() === false) {
							throw sap.firefly.XException
									.createIllegalStateException(sap.firefly.XString
											.concatenate2(
													"Hierarchies are not supported on the dimension ",
													this.getName()));
						}
					},
					getHierarchyUniqueName : function(hierarchyName) {
						return sap.firefly.XStringUtils.concatenate5("[", this
								.getDimension().getName(), "].[",
								hierarchyName, "]");
					},
					setHierarchySelection : function(name, version) {
						this.assertHierarchyPossible();
						this.setHierarchyName(name);
						this.setHierarchyVersion(version);
						this.reevaluateHierarchySelection();
					},
					getHierarchies : function() {
						return this.m_hierarchies;
					},
					setHierarchies : function(hierarchies) {
						this.assertHierarchyMetadataSupported();
						this.m_hierarchies = hierarchies;
					},
					supportsHierarchyMetadata : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities.supportsHierarchyMetadata();
					},
					assertHierarchyMetadataSupported : function() {
						if (this.supportsHierarchyMetadata() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					supportsHierarchyLevelMetadata : function() {
						var modelCapabilities = this.getModelCapabilities();
						if (modelCapabilities === null) {
							return false;
						}
						return modelCapabilities
								.supportsHierarchyLevelMetadata();
					},
					activateHierarchy : function(name, version, dueDate) {
						this.assertHierarchyPossible();
						this.setHierarchySelection(name, version);
						this.setHierarchyDueDate(dueDate);
						this.setHierarchyActive(true);
					},
					isHierarchyAssignedAndActive : function() {
						if (this.supportsHierarchy()) {
							return this.isHierarchyAssigned()
									&& this.isHierarchyActive();
						}
						return false;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						var hierarchyName;
						var hierarchyDueDate;
						var hierarchyVersion;
						var useHierarchyDueDateVariable;
						var delta;
						var myDueDate;
						var isoOther;
						var isoMy;
						if (this.supportsHierarchy()) {
							if (otherObj.isHierarchyActive() === false) {
								this.setHierarchyActive(false);
							} else {
								hierarchyName = otherObj.getHierarchyName();
								hierarchyDueDate = otherObj
										.getHierarchyDueDate();
								hierarchyVersion = otherObj
										.getHierarchyVersion();
								useHierarchyDueDateVariable = otherObj
										.useHierarchyDueDateVariable();
								delta = (this.isHierarchyActive() === false);
								if (delta === false) {
									delta = sap.firefly.QHierarchyManager
											.isStringSimilar(hierarchyName,
													this.getHierarchyName()) === false;
									if (delta === false) {
										delta = sap.firefly.QHierarchyManager
												.isStringSimilar(
														hierarchyVersion,
														this
																.getHierarchyVersion()) === false;
										if (delta === false) {
											myDueDate = this
													.getHierarchyDueDate();
											if ((myDueDate === null)
													&& (hierarchyDueDate === null)) {
												delta = false;
											} else {
												if ((myDueDate !== null)
														&& (hierarchyDueDate !== null)) {
													isoOther = hierarchyDueDate
															.toIsoFormat();
													isoMy = myDueDate
															.toIsoFormat();
													delta = sap.firefly.XString
															.isEqual(isoOther,
																	isoMy) === false;
												} else {
													delta = true;
												}
											}
										}
									}
								}
								if ((settings.isInitialBWMerge()) || (delta)) {
									this.activateHierarchy(hierarchyName,
											hierarchyVersion, hierarchyDueDate);
									this
											.setUseHierarchyDueDateVariable(useHierarchyDueDateVariable);
									if (useHierarchyDueDateVariable) {
										this
												.setHierarchyDueDateVariableName(otherObj
														.getHierarchyDueDateVariableName());
									}
									this.setInitialDrillLevel(otherObj
											.getInitialDrillLevel());
									this.setLowerLevelNodeAlignment(otherObj
											.getLowerLevelNodeAlignment());
								}
							}
						}
					},
					getDefaultHierarchyName : function() {
						return this.m_defaultHierarchyName;
					},
					setDefaultHierarchyName : function(defaultHierarchyName) {
						this.m_defaultHierarchyName = defaultHierarchyName;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QHierarchyValueHelp",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createModelComponent : function(context, dimensionBase,
								name, syncType) {
							var object = new sap.firefly.QHierarchyValueHelp();
							object.setupHierarchyValueHelp(context,
									dimensionBase, null,
									sap.firefly.InAConstants.VA_OBJVERS_ACTIVE,
									name, syncType);
							return object;
						},
						create : function(context, dimension, objectVersion,
								name, syncType) {
							var object = new sap.firefly.QHierarchyValueHelp();
							object.setupHierarchyValueHelp(context, null,
									dimension, objectVersion, name, syncType);
							return object;
						}
					},
					m_dimension : null,
					m_queryModelHierarchyHelp : null,
					m_objectVersion : null,
					m_hierarchies : null,
					m_isInitialized : false,
					m_syncType : null,
					setupHierarchyValueHelp : function(context, dimensionBase,
							dimension, objectVersion, name, syncType) {
						sap.firefly.QHierarchyValueHelp.$superclass.setupModelComponent
								.call(this, context, dimensionBase);
						if (dimensionBase !== null) {
							this.m_dimension = sap.firefly.XWeakReferenceUtil
									.getWeakRef(dimensionBase);
						} else {
							if (dimension !== null) {
								this.m_dimension = sap.firefly.XWeakReferenceUtil
										.getWeakRef(dimension);
							}
						}
						this.m_objectVersion = objectVersion;
						this.setName(name);
						this.m_isInitialized = false;
						this.m_syncType = syncType;
						if (this.m_syncType === null) {
							this.m_syncType = sap.firefly.SyncType.NON_BLOCKING;
						}
						this.initializeHierarchyValueHelp();
					},
					releaseObject : function() {
						if (this.m_hierarchies !== null) {
							sap.firefly.XCollectionUtils
									.releaseEntriesFromCollection(this.m_hierarchies);
							this.m_hierarchies.releaseObject();
							this.m_hierarchies = null;
						}
						this.m_dimension = null;
						this.m_objectVersion = null;
						this.m_queryModelHierarchyHelp = null;
						this.m_syncType = null;
						sap.firefly.QHierarchyValueHelp.$superclass.releaseObject
								.call(this);
					},
					initializeHierarchyValueHelp : function() {
						var dimension;
						var application;
						var systemName;
						var systemDescription;
						var serviceConfig;
						var dataSource;
						var dimensionName;
						if ((this.m_dimension === null)
								|| (this.m_isInitialized)) {
							return;
						}
						this.m_isInitialized = true;
						dimension = this.m_dimension.getReference();
						application = dimension.getApplication();
						systemName = dimension.getQueryModel().getDataSource()
								.getSystemName();
						if ((systemName === null)
								&& (application.getSystemLandscape()
										.getSystemNames().size() === 1)) {
							systemName = application.getSystemLandscape()
									.getSystemNames().get(0);
						}
						systemDescription = application.getSystemLandscape()
								.getSystemDescription(systemName);
						if (systemDescription === null) {
							throw sap.firefly.XException
									.createRuntimeException(sap.firefly.XStringUtils
											.concatenate2(
													"System Description not found. System Name: ",
													systemName));
						}
						if (sap.firefly.HierarchyCatalogUtil
								.isHierarchyCatalogSupported(systemDescription) === false) {
							throw sap.firefly.XException
									.createRuntimeException("Hierarchy Catalog Service is not supported");
						}
						serviceConfig = sap.firefly.OlapApiModule.SERVICE_TYPE_HIERARCHY_CATALOG
								.createServiceConfig(application);
						serviceConfig.setSystemName(systemName);
						dataSource = dimension.getQueryModel().getDataSource()
								.getFullQualifiedName();
						serviceConfig.setDataSourceName(dataSource);
						dimensionName = dimension.getName();
						serviceConfig.setDimensionName(dimensionName);
						serviceConfig.processHierarchyCatalogManagerCreation(
								sap.firefly.SyncType.BLOCKING, this, null);
					},
					getHierarchies : function() {
						return this.m_hierarchies;
					},
					getQueryModel : function() {
						return this.m_queryModelHierarchyHelp;
					},
					getDimension : function() {
						return this.m_dimension.getReference();
					},
					onHierarchyCatalogManagerCreated : function(extResult,
							hierarchyCatalogManager, customIdentifier) {
						if (extResult.hasErrors()
								|| (hierarchyCatalogManager === null)) {
							throw sap.firefly.XException
									.createRuntimeException(extResult
											.getSummary());
						}
						this.m_queryModelHierarchyHelp = sap.firefly.XWeakReferenceUtil
								.getWeakRef((hierarchyCatalogManager)
										.getQueryManager().getQueryModel());
						hierarchyCatalogManager
								.setSingleSelectionHierarchyObjectVersion(
										this.m_objectVersion, true);
						hierarchyCatalogManager.processGetResult(
								this.m_syncType, this, null);
					},
					onHierarchyCatalogResult : function(extResult, result,
							customIdentifier) {
						this.processHierarchyCatalogResult(result);
					},
					processHierarchyCatalogResult : function(
							hierarchyCatalogResult) {
						var catalogItems;
						var changedNodes;
						var i;
						var catalogItem;
						var dimension;
						var dimensionName;
						var hierarchy;
						if (hierarchyCatalogResult === null) {
							return;
						}
						catalogItems = sap.firefly.HierarchyCatalogUtil
								.getHierarchyItems(hierarchyCatalogResult);
						if (catalogItems.size() > 0) {
							this.m_hierarchies = sap.firefly.XList.create();
							changedNodes = sap.firefly.XList.create();
							for (i = 0; i < catalogItems.size(); i++) {
								catalogItem = catalogItems.get(i);
								dimension = this.m_dimension.getReference();
								dimensionName = catalogItem.getDimensionName();
								if (sap.firefly.XString.isEqual(dimension
										.getName(), dimensionName) === false) {
									throw sap.firefly.XException
											.createRuntimeException(sap.firefly.XStringUtils
													.concatenate4(
															"Hierarchy Catalog: different dimension names. (1)",
															dimension.getName(),
															" (2) ",
															dimensionName));
								}
								hierarchy = sap.firefly.QHierarchy.create(
										dimension.getContext(), dimension,
										catalogItem.getHierarchyName());
								hierarchy.setHierarchyDescription(catalogItem
										.getHierarchyDescription());
								hierarchy.setHierarchyVersion(catalogItem
										.getVersionName());
								hierarchy.setVersionDescription(catalogItem
										.getVersionDescription());
								hierarchy.setDateTo(catalogItem.getDateTo());
								hierarchy
										.setDateFrom(catalogItem.getDateFrom());
								hierarchy.setOwner(catalogItem.getOwner());
								hierarchy.setHierId(catalogItem.getHierId());
								hierarchy
										.setHierType(catalogItem.getHierType());
								hierarchy.setObjectVersion(catalogItem
										.getObjectVersion());
								hierarchy.setIsRemote(catalogItem.isRemote());
								this.m_hierarchies.add(hierarchy);
								changedNodes.add(this.m_hierarchies.get(i));
							}
							this.notifyNodeChanged();
						} else {
							this.m_hierarchies = null;
						}
					},
					isComponentNode : function() {
						return true;
					},
					getIndexedChildren : function() {
						var children = sap.firefly.XList.create();
						var i;
						if (this.m_hierarchies !== null) {
							for (i = 0; i < this.m_hierarchies.size(); i++) {
								children.add(this.m_hierarchies.get(i));
							}
						} else {
							if (this.m_isInitialized === false) {
								this.initializeHierarchyValueHelp();
								children.add(sap.firefly.QModelComponentNode
										.createLeave(this.getContext(),
												"Loading..."));
							}
						}
						return children.getIterator();
					},
					toString : function() {
						if (this.m_hierarchies !== null) {
							return this.m_hierarchies.toString();
						}
						return "[]";
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDataSource",
				sap.firefly.QModelComponent,
				{
					$statics : {
						META_OBJECT_TYPE : "meta_object_type",
						TEXT : "text",
						PACKAGE_NAME : "package_name",
						SCHEMA_NAME : "schema_name",
						NAME : "name",
						ENVIRONMENT : "environment",
						MODEL : "model",
						DATA_AREA : "data_area",
						SYSTEM_NAME : "system_name",
						INSTANCE_ID : "instance_id",
						RRI_NAME : "RRI_NAME",
						RRI_VALUE : "RRI_VALUE",
						RUN_AS_USER : "run_as_user",
						ALIAS : "alias",
						URI_PACKAGE_NAME : "package",
						URI_SCHEMA_NAME : "schema",
						URI_NAME : "name",
						IMPORTER_REPO : null,
						staticSetup : function() {
							sap.firefly.QDataSource.IMPORTER_REPO = sap.firefly.QInAImportFactory
									.createForRepository(null, null);
						},
						create : function() {
							var newDataSource = new sap.firefly.QDataSource();
							newDataSource.setupDataSource(null, null);
							return newDataSource;
						},
						createWithContext : function(context) {
							var newObject = new sap.firefly.QDataSource();
							newObject.setupDataSource(context, null);
							return newObject;
						}
					},
					m_properties : null,
					m_multiSources : null,
					m_blendingSources : null,
					m_mappings : null,
					m_extendedDimensions : null,
					setupDataSource : function(context, origin) {
						var multiSources;
						var i;
						var multiSource;
						this.setupModelComponent(context, null);
						this.m_multiSources = sap.firefly.XList.create();
						this.m_blendingSources = sap.firefly.XList.create();
						this.m_mappings = sap.firefly.PrList.create();
						if (origin !== null) {
							this.m_properties = sap.firefly.XProperties
									.createPropertiesCopy(origin
											.getProperties());
							multiSources = origin.getMultiSources();
							for (i = 0; i < multiSources.size(); i++) {
								multiSource = multiSources.get(i);
								this.m_multiSources.add((multiSource.clone()));
							}
							this.m_mappings.copyFrom(origin.getMappings());
						} else {
							this.m_properties = sap.firefly.XProperties
									.create();
						}
						this.m_extendedDimensions = null;
					},
					releaseObject : function() {
						this.clear();
						this.m_multiSources = sap.firefly.XObject
								.releaseIfNotNull(this.m_multiSources);
						this.m_blendingSources = sap.firefly.XObject
								.releaseIfNotNull(this.m_blendingSources);
						this.m_properties = sap.firefly.XObject
								.releaseIfNotNull(this.m_properties);
						this.m_blendingSources = sap.firefly.XObject
								.releaseIfNotNull(this.m_blendingSources);
						this.m_extendedDimensions = sap.firefly.XObject
								.releaseIfNotNull(this.m_extendedDimensions);
						sap.firefly.QDataSource.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_SOURCE;
					},
					cloneOlapComponent : function(context, parent) {
						var dataSourceClone = sap.firefly.QFactory2
								.newDataSource();
						dataSourceClone.copyFrom(this);
						return dataSourceClone;
					},
					copyFrom : function(otherDataSource) {
						var multiSources;
						var multiSourceIndex;
						var multiSource;
						var otherMappings;
						var otherExtendedDimensions;
						var myExtendedDimensions;
						var extDimIdx;
						sap.firefly.QDataSource.$superclass.copyModelComponent
								.call(this, otherDataSource);
						this.clear();
						this.m_properties = sap.firefly.XProperties
								.createPropertiesCopy(otherDataSource
										.getProperties());
						multiSources = otherDataSource.getMultiSources();
						for (multiSourceIndex = 0; multiSourceIndex < multiSources
								.size(); multiSourceIndex++) {
							multiSource = multiSources.get(multiSourceIndex);
							this.m_multiSources.add((multiSource
									.cloneOlapComponent(null, null)));
						}
						otherMappings = otherDataSource.getMappings();
						if (!sap.firefly.PrUtils.isListEmpty(otherMappings)) {
							this.m_mappings.copyFrom(otherMappings);
						}
						otherExtendedDimensions = otherDataSource
								.getExtendedDimensions();
						if (otherExtendedDimensions !== null) {
							myExtendedDimensions = this
									.getExtendedDimensionsBase();
							myExtendedDimensions.clear();
							for (extDimIdx = 0; extDimIdx < otherExtendedDimensions
									.size(); extDimIdx++) {
								myExtendedDimensions
										.add(otherExtendedDimensions
												.get(extDimIdx));
							}
						}
					},
					isEqualTo : function(other) {
						var otherDataSource;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						otherDataSource = other;
						if (!sap.firefly.XString.isEqual(this
								.getFullQualifiedName(), otherDataSource
								.getFullQualifiedName())) {
							return false;
						}
						if (!this.getExtendedDimensions().isEqualTo(
								otherDataSource.getExtendedDimensions())) {
							return false;
						}
						if (!this.getMappings().isEqualTo(
								otherDataSource.getMappings())) {
							return false;
						}
						if (!this.getMultiSources().isEqualTo(
								otherDataSource.getMultiSources())) {
							return false;
						}
						if (!this.getProperties().isEqualTo(
								otherDataSource.getProperties())) {
							return false;
						}
						return true;
					},
					getRunAsUser : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.RUN_AS_USER);
					},
					setRunAsUser : function(runAsUser) {
						this.m_properties.put(
								sap.firefly.QDataSource.RUN_AS_USER, runAsUser);
					},
					getType : function() {
						var type = this.m_properties
								.getByKey(sap.firefly.QDataSource.META_OBJECT_TYPE);
						if (type === null) {
							return null;
						}
						return sap.firefly.MetaObjectType.lookup(type);
					},
					setType : function(type) {
						if (type !== null) {
							this.m_properties.put(
									sap.firefly.QDataSource.META_OBJECT_TYPE,
									type.getName());
						}
					},
					getInstanceId : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.INSTANCE_ID);
					},
					setInstanceId : function(instanceId) {
						this.m_properties
								.put(sap.firefly.QDataSource.INSTANCE_ID,
										instanceId);
					},
					getSystemName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.SYSTEM_NAME);
					},
					setSystemName : function(systemName) {
						this.m_properties
								.put(sap.firefly.QDataSource.SYSTEM_NAME,
										systemName);
					},
					getSchemaName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.SCHEMA_NAME);
					},
					setSchemaName : function(schemaName) {
						this.m_properties
								.put(sap.firefly.QDataSource.SCHEMA_NAME,
										schemaName);
					},
					getPackageName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.PACKAGE_NAME);
					},
					setPackageName : function(packageName) {
						this.m_properties.put(
								sap.firefly.QDataSource.PACKAGE_NAME,
								packageName);
					},
					getAlias : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.ALIAS);
					},
					setAlias : function(alias) {
						this.m_properties.put(sap.firefly.QDataSource.ALIAS,
								alias);
					},
					getObjectName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.NAME);
					},
					setObjectName : function(objectName) {
						this.m_properties.put(sap.firefly.QDataSource.NAME,
								objectName);
					},
					setText : function(text) {
						this.m_properties.put(sap.firefly.QDataSource.TEXT,
								text);
					},
					getText : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.TEXT);
					},
					getName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.NAME);
					},
					setName : function(name) {
						this.m_properties.put(sap.firefly.QDataSource.NAME,
								name);
					},
					getEnvironmentName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.ENVIRONMENT);
					},
					setEnvironmentName : function(environmentName) {
						this.m_properties.put(
								sap.firefly.QDataSource.ENVIRONMENT,
								environmentName);
					},
					getModelName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.MODEL);
					},
					setModelName : function(modelName) {
						this.m_properties.put(sap.firefly.QDataSource.MODEL,
								modelName);
					},
					getDataArea : function() {
						var dataArea = this.m_properties
								.getByKey(sap.firefly.QDataSource.DATA_AREA);
						if (sap.firefly.XString
								.isEqual(
										dataArea,
										sap.firefly.PlanningConstants.DATA_AREA_DEFAULT)) {
							return null;
						}
						return dataArea;
					},
					setDataArea : function(dataArea) {
						this.m_properties.put(
								sap.firefly.QDataSource.DATA_AREA, dataArea);
					},
					getRriName : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.RRI_NAME);
					},
					getRriValue : function() {
						return this.m_properties
								.getByKey(sap.firefly.QDataSource.RRI_VALUE);
					},
					setRriName : function(rriName) {
						this.m_properties.put(sap.firefly.QDataSource.RRI_NAME,
								rriName);
					},
					setRriValue : function(rriValue) {
						this.m_properties.put(
								sap.firefly.QDataSource.RRI_VALUE, rriValue);
					},
					getProperties : function() {
						return this.m_properties;
					},
					getPropertiesBase : function() {
						return this.m_properties;
					},
					getAsScope : function() {
						var schemaName = this.getSchemaName();
						if (sap.firefly.XStringUtils.isNullOrEmpty(schemaName)) {
							return this.getAsMinimalScope();
						}
						return sap.firefly.XStringUtils.concatenate3(
								schemaName, ".", this.getAsMinimalScope());
					},
					getAsMinimalScope : function() {
						var catalogName = this.getPackageName();
						if (sap.firefly.XStringUtils.isNullOrEmpty(catalogName)) {
							return this.getObjectName();
						}
						return sap.firefly.XStringUtils.concatenate3(
								catalogName, "/", this.getObjectName());
					},
					getFullQualifiedName : function() {
						var type = this.getType();
						if ((type === sap.firefly.MetaObjectType.MULTI_SOURCE)
								|| (type === sap.firefly.MetaObjectType.BLENDING)) {
							return sap.firefly.PrToString.serialize(this
									.getFQNMulti(), true, false, 0);
						}
						return this.getFQNSingle();
					},
					getFQNMulti : function() {
						var rootStructure = sap.firefly.PrStructure.create();
						var sources;
						var multiSources;
						var i;
						var multiSource;
						rootStructure.setStringByName("DataSource", this
								.getFQNSingle());
						sources = rootStructure.setNewListByName("Sources");
						multiSources = this.getMultiSources();
						for (i = 0; i < multiSources.size(); i++) {
							multiSource = multiSources.get(i);
							if ((multiSource.getType() === sap.firefly.MetaObjectType.MULTI_SOURCE)
									|| (multiSource.getType() === sap.firefly.MetaObjectType.BLENDING)) {
								sources.add(multiSource.getFQNMulti());
							} else {
								sources.addString(multiSource.getFQNSingle());
							}
						}
						rootStructure.setElementByName("Mappings",
								sap.firefly.PrList.createDeepCopy(this
										.getMappings()));
						return rootStructure;
					},
					getFQNSingle : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var runAsUser = this.getRunAsUser();
						var alias;
						var environmentName;
						var hasEnvironmentName;
						var modelName;
						var hasModelName;
						var dataArea;
						var hasDataArea;
						var type;
						var schemaName;
						var hasSchemaName;
						var catalogName;
						var hasCatalogName;
						var objectName;
						var hasObjectName;
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(runAsUser)) {
							buffer.append("<").append(runAsUser).append(">");
						}
						alias = this.getAlias();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(alias)) {
							buffer.append("~").append(alias).append("~");
						}
						environmentName = this.getEnvironmentName();
						hasEnvironmentName = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(environmentName);
						modelName = this.getModelName();
						hasModelName = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(modelName);
						dataArea = this.getDataArea();
						hasDataArea = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(dataArea);
						type = this.getType();
						if (hasEnvironmentName || hasModelName || hasDataArea) {
							buffer.append("$[");
							if (hasEnvironmentName) {
								buffer.append(environmentName);
							}
							buffer.append("][");
							if (hasModelName) {
								buffer.append(modelName);
							}
							buffer.append("]");
							if (hasDataArea) {
								buffer.append("[").append(dataArea).append("]");
							}
							if (type !== null) {
								buffer.append("/");
							}
						}
						if (type !== null) {
							buffer.append(type.getName());
							buffer.append(":");
						}
						schemaName = this.getSchemaName();
						hasSchemaName = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(schemaName);
						catalogName = this.getPackageName();
						hasCatalogName = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(catalogName);
						objectName = this.getObjectName();
						hasObjectName = sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(objectName);
						if ((type !== null) || hasSchemaName || hasCatalogName
								|| hasObjectName) {
							buffer.append("[");
							if (hasSchemaName) {
								buffer.append(this.escape(schemaName));
							}
							buffer.append("]");
							buffer.append("[");
							if (hasCatalogName) {
								buffer.append(this.escape(catalogName));
							}
							buffer.append("]");
							buffer.append("[");
							if (hasObjectName) {
								buffer.append(this.escape(objectName));
							}
							buffer.append("]");
						}
						return buffer.toString();
					},
					extendWithDataSource : function(datasource) {
						var externalDsProperties;
						var externalDsKeyIterator;
						var key;
						var multisources;
						var existingMultiSources;
						var multiSourceIndex;
						var multisource;
						var existingMultiSource;
						var mappings;
						var existingMappings;
						var mappingIndex;
						var extendedDimensions;
						var extendedDimensionsBase;
						var extendedDimIterator;
						if (datasource === null) {
							return;
						}
						externalDsProperties = datasource.getProperties();
						externalDsKeyIterator = externalDsProperties
								.getKeysAsIteratorOfString();
						while (externalDsKeyIterator.hasNext()) {
							key = externalDsKeyIterator.next();
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(this.m_properties
											.getByKey(key))) {
								this.m_properties.put(key, externalDsProperties
										.getByKey(key));
							}
						}
						if (((this.getType() === sap.firefly.MetaObjectType.MULTI_SOURCE) && (datasource
								.getType() === sap.firefly.MetaObjectType.MULTI_SOURCE))
								|| ((this.getType() === sap.firefly.MetaObjectType.BLENDING) && (datasource
										.getType() === sap.firefly.MetaObjectType.BLENDING))) {
							multisources = datasource.getMultiSources();
							existingMultiSources = this.getMultiSourcesBase();
							if (multisources !== null) {
								for (multiSourceIndex = 0; multiSourceIndex < multisources
										.size(); multiSourceIndex++) {
									multisource = multisources
											.get(multiSourceIndex);
									if (existingMultiSources.size() > multiSourceIndex) {
										existingMultiSource = existingMultiSources
												.get(multiSourceIndex);
										existingMultiSource
												.extendWithDataSource(multisource);
									} else {
										existingMultiSources.insert(
												multiSourceIndex, (multisource
														.cloneOlapComponent(
																null, null)));
									}
								}
							}
							mappings = datasource.getMappings();
							existingMappings = this.getMappings();
							for (mappingIndex = 0; mappingIndex < sap.firefly.PrUtils
									.getListSize(mappings, 0); mappingIndex++) {
								if (sap.firefly.PrUtils.getListSize(
										existingMappings, 0) > mappingIndex) {
									existingMappings
											.setElementAt(
													sap.firefly.PrUtils
															.createDeepCopy(sap.firefly.PrUtils
																	.getElement(
																			mappings,
																			mappingIndex)),
													mappingIndex);
								} else {
									existingMappings.add(sap.firefly.PrUtils
											.createDeepCopy(sap.firefly.PrUtils
													.getElement(mappings,
															mappingIndex)));
								}
							}
						}
						extendedDimensions = datasource.getExtendedDimensions();
						if (extendedDimensions !== null) {
							extendedDimensionsBase = this
									.getExtendedDimensionsBase();
							extendedDimensionsBase.clear();
							extendedDimIterator = extendedDimensions
									.getIterator();
							while (extendedDimIterator.hasNext()) {
								extendedDimensionsBase.add(extendedDimIterator
										.next());
							}
							extendedDimIterator.releaseObject();
						}
					},
					setByUri : function(uri) {
						var type;
						var metaObjectType;
						var queryElements;
						var set;
						var i;
						this.setSystemName(uri.getHost());
						type = sap.firefly.XString.substring(uri.getPath(), 1,
								-1);
						metaObjectType = sap.firefly.MetaObjectType
								.lookup(type);
						this.setType(metaObjectType);
						queryElements = uri.getQueryElements();
						set = sap.firefly.XSetOfNameObject.create();
						for (i = 0; i < queryElements.size(); i++) {
							set.put(queryElements.get(i));
						}
						if (set.containsKey(sap.firefly.QDataSource.URI_NAME)) {
							this.setName(set.getByKey(
									sap.firefly.QDataSource.URI_NAME)
									.getValue());
						}
						if (set
								.containsKey(sap.firefly.QDataSource.URI_PACKAGE_NAME)) {
							this.setPackageName(set.getByKey(
									sap.firefly.QDataSource.URI_PACKAGE_NAME)
									.getValue());
						}
						if (set
								.containsKey(sap.firefly.QDataSource.URI_SCHEMA_NAME)) {
							this.setSchemaName(set.getByKey(
									sap.firefly.QDataSource.URI_SCHEMA_NAME)
									.getValue());
						}
					},
					setFullQualifiedName : function(name) {
						var multiSource;
						var jsonParser;
						var jsonElement;
						if ((sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(name))
								&& sap.firefly.XString.startsWith(name, "{")
								&& sap.firefly.XString.endsWith(name, "}")) {
							if (sap.firefly.XString.containsString(name, "'")) {
								multiSource = sap.firefly.XString.replace(name,
										"'", '"');
							} else {
								multiSource = name;
							}
							jsonParser = sap.firefly.JsonParserFactory
									.newInstance();
							jsonElement = jsonParser.parse(multiSource);
							if (jsonParser.hasErrors()) {
								throw sap.firefly.XException
										.createRuntimeException(jsonParser
												.getSummary());
							}
							this.setByJson(jsonElement);
						} else {
							this.setFQNSingle(name);
						}
					},
					setByJson : function(element) {
						var jsonStructure = sap.firefly.XJson
								.extractJsonContent(element);
						var dataSource;
						if (sap.firefly.PrUtils.getStringProperty(
								jsonStructure, "DataSource") !== null) {
							this.setFQNMulti(jsonStructure);
						} else {
							this.clear();
							dataSource = sap.firefly.QDataSource.IMPORTER_REPO
									.importDataSource(jsonStructure);
							if (dataSource === null) {
								throw sap.firefly.XException
										.createRuntimeException("illegal name");
							}
							this.extendWithDataSource(dataSource);
						}
					},
					setFQNMulti : function(multiStructure) {
						var type;
						var sources;
						var i;
						var multiSource;
						var source;
						this.setFQNSingle(sap.firefly.PrUtils
								.getStringValueProperty(multiStructure,
										"DataSource", null));
						type = this.getType();
						if (type === null) {
							this
									.setType(sap.firefly.MetaObjectType.MULTI_SOURCE);
						} else {
							if ((type !== sap.firefly.MetaObjectType.MULTI_SOURCE)
									&& (type !== sap.firefly.MetaObjectType.BLENDING)) {
								throw sap.firefly.XException
										.createRuntimeException("illegal type");
							}
						}
						sources = sap.firefly.PrUtils.getListProperty(
								multiStructure, "Sources");
						if (sources !== null) {
							for (i = 0; i < sources.size(); i++) {
								multiSource = sap.firefly.QFactory2
										.newDataSource();
								source = sources.getElementByIndex(i);
								if (source.getType() === sap.firefly.PrElementType.STRING) {
									multiSource.setFQNSingle((source)
											.getStringValue());
								} else {
									multiSource.setFQNMulti(source);
								}
								this.getMultiSourcesBase().add(multiSource);
							}
						}
						this.setMappings(sap.firefly.PrUtils.getListProperty(
								multiStructure, "Mappings"));
					},
					setFQNSingle : function(name) {
						var fqn;
						var startRunAsUserIndex;
						var endRunAsUserIndex;
						var startAliasIndex;
						var endAliasIndex;
						var len;
						var startIndex0;
						var startIndex1;
						var endIndex1;
						var environmentName;
						var startIndex2;
						var charAt2;
						var endIndex2;
						var modelName;
						var startIndex3;
						var charAt3;
						var endIndex3;
						var dataArea;
						var endTypeIndex;
						var typeValue;
						var startIndex5;
						var endIndex5;
						var name5;
						var startIndex6;
						var endIndex6;
						var name6;
						var startIndex7;
						var endIndex7;
						var name7;
						if (name === null) {
							return;
						}
						fqn = name;
						if (sap.firefly.XString.startsWith(fqn, "<")) {
							startRunAsUserIndex = 1;
							endRunAsUserIndex = sap.firefly.XString
									.indexOfFrom(fqn, ">", startRunAsUserIndex);
							if (endRunAsUserIndex === -1) {
								return;
							}
							this.setRunAsUser(sap.firefly.XString
									.substring(fqn, startRunAsUserIndex,
											endRunAsUserIndex));
							fqn = sap.firefly.XString.substring(fqn,
									endRunAsUserIndex + 1, sap.firefly.XString
											.size(fqn));
						}
						if (sap.firefly.XString.startsWith(fqn, "~")) {
							startAliasIndex = 1;
							endAliasIndex = sap.firefly.XString.indexOfFrom(
									fqn, "~", startAliasIndex);
							if (endAliasIndex === -1) {
								return;
							}
							this.setAlias(sap.firefly.XString.substring(fqn,
									startAliasIndex, endAliasIndex));
							fqn = sap.firefly.XString.substring(fqn,
									endAliasIndex + 1, sap.firefly.XString
											.size(fqn));
						}
						len = sap.firefly.XString.size(fqn);
						startIndex0 = 0;
						if (sap.firefly.XString.startsWith(fqn, "$[")) {
							startIndex1 = startIndex0 + 2;
							endIndex1 = this.searchEnd(fqn, startIndex1);
							environmentName = this.unescape(sap.firefly.XString
									.substring(fqn, startIndex1, endIndex1));
							this.setEnvironmentName(environmentName);
							startIndex2 = endIndex1 + 1;
							if (startIndex2 >= len) {
								return;
							}
							charAt2 = sap.firefly.XString.getCharAt(fqn,
									startIndex2);
							if (charAt2 === 47) {
								startIndex0 = startIndex2 + 1;
							} else {
								if (charAt2 === 91) {
									startIndex2++;
									endIndex2 = this
											.searchEnd(fqn, startIndex2);
									modelName = this
											.unescape(sap.firefly.XString
													.substring(fqn,
															startIndex2,
															endIndex2));
									this.setModelName(modelName);
									startIndex3 = endIndex2 + 1;
									if (startIndex3 >= len) {
										return;
									}
									charAt3 = sap.firefly.XString.getCharAt(
											fqn, startIndex3);
									if (charAt3 === 47) {
										startIndex0 = startIndex3 + 1;
									} else {
										if (charAt2 === 91) {
											startIndex3++;
											endIndex3 = this.searchEnd(fqn,
													startIndex3);
											dataArea = this
													.unescape(sap.firefly.XString
															.substring(
																	fqn,
																	startIndex3,
																	endIndex3));
											this.setDataArea(dataArea);
											startIndex0 = endIndex3 + 2;
										} else {
											return;
										}
									}
								} else {
									return;
								}
							}
						}
						if (startIndex0 < len) {
							endTypeIndex = sap.firefly.XString.indexOfFrom(fqn,
									":", startIndex0);
							typeValue = sap.firefly.MetaObjectType
									.lookup(sap.firefly.XString.substring(fqn,
											startIndex0, endTypeIndex));
							this.setType(typeValue);
							startIndex5 = endTypeIndex + 2;
							if (startIndex5 < len) {
								endIndex5 = this.searchEnd(fqn, startIndex5);
								name5 = this
										.unescape(sap.firefly.XString
												.substring(fqn, startIndex5,
														endIndex5));
								startIndex6 = endIndex5 + 2;
								if (startIndex6 < len) {
									endIndex6 = this
											.searchEnd(fqn, startIndex6);
									name6 = this.unescape(sap.firefly.XString
											.substring(fqn, startIndex6,
													endIndex6));
									startIndex7 = endIndex6 + 2;
									if (startIndex7 < len) {
										endIndex7 = this.searchEnd(fqn,
												startIndex7);
										name7 = this
												.unescape(sap.firefly.XString
														.substring(fqn,
																startIndex7,
																endIndex7));
										this.setSchemaName(name5);
										this.setPackageName(name6);
										this.setObjectName(name7);
									} else {
										this.setPackageName(name5);
										this.setObjectName(name6);
									}
								} else {
									this.setObjectName(name5);
								}
							}
						}
					},
					searchEnd : function(name, startPosition) {
						var position = startPosition;
						var len = sap.firefly.XString.size(name);
						var x1;
						var x2;
						while (position < len) {
							x1 = sap.firefly.XString.indexOfFrom(name, "]",
									position);
							x2 = sap.firefly.XString.indexOfFrom(name, "]]",
									position);
							if (x2 === -1) {
								if (x1 === -1) {
									throw sap.firefly.XException
											.createRuntimeException("#1 Qualified name format error");
								}
								return x1;
							}
							if (x1 < x2) {
								return x1;
							}
							position = x2 + 2;
						}
						throw sap.firefly.XException
								.createRuntimeException("#2 Qualified name format error");
					},
					escape : function(value) {
						var first = sap.firefly.XString.replace(value, "[",
								"[[");
						var second = sap.firefly.XString.replace(first, "]",
								"]]");
						return second;
					},
					unescape : function(value) {
						var first = sap.firefly.XString.replace(value, "[[",
								"[");
						var second = sap.firefly.XString.replace(first, "]]",
								"]");
						return second;
					},
					clear : function() {
						if (this.m_properties !== null) {
							this.m_properties.clear();
						}
						if (this.m_multiSources !== null) {
							this.m_multiSources.clear();
						}
						if (!sap.firefly.PrUtils.isListEmpty(this.m_mappings)) {
							this.m_mappings.clear();
						}
						this.m_extendedDimensions = null;
					},
					isEmpty : function() {
						return this.m_properties.isEmpty();
					},
					hasElements : function() {
						return this.m_properties.hasElements();
					},
					size : function() {
						return this.m_properties.size();
					},
					toString : function() {
						return this.m_properties.toString();
					},
					getMultiSources : function() {
						return this.m_multiSources;
					},
					getMultiSourcesBase : function() {
						return this.m_multiSources;
					},
					getMappings : function() {
						return this.m_mappings;
					},
					setMappings : function(mappings) {
						if (sap.firefly.PrUtils.isListEmpty(mappings)) {
							if (this.m_mappings.size() !== 0) {
								this.m_mappings.clear();
							}
						} else {
							this.m_mappings.copyFrom(mappings);
						}
					},
					hasText : function() {
						if (this.m_properties === null) {
							return false;
						}
						return this.m_properties
								.containsKey(sap.firefly.QDataSource.TEXT);
					},
					getExtendedDimensions : function() {
						return this.m_extendedDimensions;
					},
					getExtendedDimensionsBase : function() {
						if (this.m_extendedDimensions === null) {
							this.m_extendedDimensions = sap.firefly.XList
									.create();
						}
						return this.m_extendedDimensions;
					},
					getBlendingSources : function() {
						return this.m_blendingSources;
					},
					setBlendingSources : function(sources) {
						this.m_blendingSources.releaseObject();
						this.m_blendingSources = sources;
					}
				});
$Firefly.createClass("sap.firefly.QInfoProvider", sap.firefly.QModelComponent,
		{
			$statics : {
				createInfoProvider : function(queryModel, name, text,
						baseInfoProvider) {
					var infoProvider = new sap.firefly.QInfoProvider();
					infoProvider.setupInfoProvider(queryModel, name, text,
							baseInfoProvider);
					return infoProvider;
				}
			},
			m_baseInfoProvider : null,
			setupInfoProvider : function(queryModel, name, text,
					baseInfoProvider) {
				sap.firefly.QInfoProvider.$superclass.setupModelComponent.call(
						this, queryModel, queryModel);
				this.setName(name);
				this.setText(text);
				this.m_baseInfoProvider = baseInfoProvider;
			},
			releaseObject : function() {
				this.m_baseInfoProvider = null;
				sap.firefly.QInfoProvider.$superclass.releaseObject.call(this);
			},
			getUpdatedBy : function() {
				return null;
			},
			getCreatedBy : function() {
				return null;
			},
			getCreatedOn : function() {
				return null;
			},
			getUpdatedOn : function() {
				return null;
			},
			getDueDate : function() {
				return null;
			},
			getBaseInfoProvider : function() {
				return this.m_baseInfoProvider;
			},
			getDataRollUpMax : function() {
				return null;
			},
			getDataRollUpMin : function() {
				return null;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QProtocolCapabilities",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, queryModel) {
							var capabilities = new sap.firefly.QProtocolCapabilities();
							capabilities.setupModelComponent(context,
									queryModel);
							return capabilities;
						}
					},
					m_clientCapabilities : null,
					m_serverCapabilities : null,
					m_intersectCapabilities : null,
					copyProtocolCapabilities : function(origin) {
						sap.firefly.QProtocolCapabilities.$superclass.copyModelComponent
								.call(this, origin);
						if (origin.m_serverCapabilities !== null) {
							this
									.setServerCapabilities(origin.m_serverCapabilities
											.clone());
						}
						if (origin.m_clientCapabilities !== null) {
							this
									.setClientCapabilities(origin.m_clientCapabilities
											.clone());
						}
						if (origin.m_intersectCapabilities !== null) {
							this
									.setIntersectCapabilities(origin.m_intersectCapabilities
											.clone());
						}
					},
					releaseObject : function() {
						this.m_clientCapabilities = null;
						this.m_serverCapabilities = null;
						this.m_intersectCapabilities = null;
						sap.firefly.QProtocolCapabilities.$superclass.releaseObject
								.call(this);
					},
					getClientCapabilities : function() {
						return this.m_clientCapabilities;
					},
					getServerCapabilities : function() {
						return this.m_serverCapabilities;
					},
					getIntersectCapabilities : function() {
						return this.m_intersectCapabilities;
					},
					setClientCapabilities : function(clientCapabilities) {
						this.m_clientCapabilities = clientCapabilities;
					},
					setServerCapabilities : function(serverCapabilities) {
						this.m_serverCapabilities = serverCapabilities;
					},
					setIntersectCapabilities : function(intersectCapabilities) {
						this.m_intersectCapabilities = intersectCapabilities;
					}
				});
$Firefly.createClass("sap.firefly.QProperty", sap.firefly.QModelComponent, {
	$statics : {
		create : function(context, properties, componentType, valueType) {
			var attribute = new sap.firefly.QProperty();
			attribute.setupProperty(context, properties, componentType,
					valueType);
			return attribute;
		}
	},
	m_componentType : null,
	m_valueType : null,
	m_valueHelp : null,
	setupProperty : function(context, properties, componentType, valueType) {
		this.setupModelComponent(context, properties);
		this.m_componentType = componentType;
		this.m_valueType = valueType;
		this.m_valueHelp = sap.firefly.XList.create();
	},
	releaseObject : function() {
		if (this.m_valueHelp !== null) {
			this.m_valueHelp.releaseObject();
			this.m_valueHelp = null;
		}
		this.m_valueType = null;
		this.m_componentType = null;
		sap.firefly.QProperty.$superclass.releaseObject.call(this);
	},
	getOlapComponentType : function() {
		return this.m_componentType;
	},
	getValueType : function() {
		return this.m_valueType;
	},
	getName : function() {
		return this.m_componentType.getName();
	},
	getModelComponent : function() {
		return (this.getParentComponent()).getModelComponent();
	},
	setStringValue : function(stringValue) {
		this.getModelComponent().setPropertyStringValue(this.m_componentType,
				stringValue);
	},
	getStringValue : function() {
		return this.getModelComponent().getPropertyStringValue(
				this.m_componentType);
	},
	getConstantValue : function() {
		return this.getModelComponent().getPropertyConstantValue(
				this.m_componentType);
	},
	setConstantValue : function(constantValue) {
		this.getModelComponent().setPropertyConstantValue(this.m_componentType,
				constantValue);
	},
	addValueHelpConstant : function(valueHelpConstant) {
		this.m_valueHelp.add(valueHelpConstant);
		return this;
	},
	getValueHelpForConstant : function() {
		return this.m_valueHelp;
	}
});
$Firefly
		.createClass(
				"sap.firefly.RsDataEntryCollection",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context) {
							var newObj = new sap.firefly.RsDataEntryCollection();
							newObj.setupModelComponent(context, null);
							return newObj;
						}
					},
					m_entries : null,
					m_cellEntries : null,
					m_dataEntryDescription : null,
					releaseObject : function() {
						var maps;
						var mapIterator;
						var map;
						var dataEntries;
						var dataEntryIterator;
						var cellEntries;
						var cellEntryIterator;
						var cellEntry;
						if (this.m_entries !== null) {
							maps = this.m_entries.getValuesAsReadOnlyList();
							mapIterator = maps.getIterator();
							while (mapIterator.hasNext()) {
								map = mapIterator.next();
								dataEntries = map.getValuesAsReadOnlyList();
								dataEntryIterator = dataEntries.getIterator();
								while (dataEntryIterator.hasNext()) {
									dataEntryIterator.next().releaseObject();
								}
							}
						}
						if (this.m_cellEntries !== null) {
							cellEntries = this.m_cellEntries
									.getValuesAsReadOnlyList();
							cellEntryIterator = cellEntries.getIterator();
							while (cellEntryIterator.hasNext()) {
								cellEntry = cellEntryIterator.next();
								cellEntry.releaseObject();
							}
						}
						sap.firefly.RsDataEntryCollection.$superclass.releaseObject
								.call(this);
					},
					getDataEntriesByProcessingOrder : function() {
						var xKeysUnsorted;
						var entries;
						var i;
						var xKey;
						var cEntries;
						var yKeysUnsorted;
						var j;
						var yKey;
						var entry;
						var processingOrderInt;
						var processingOrder;
						var entriesByOrder;
						var entriesByXKey;
						if ((this.m_entries === null)
								|| (this.m_entries.isEmpty())) {
							return null;
						}
						xKeysUnsorted = this.m_entries
								.getKeysAsReadOnlyListOfString();
						if (xKeysUnsorted.isEmpty()) {
							return null;
						}
						entries = null;
						for (i = 0; i < xKeysUnsorted.size(); i++) {
							xKey = xKeysUnsorted.get(i);
							cEntries = this.m_entries.getByKey(xKey);
							yKeysUnsorted = cEntries
									.getKeysAsReadOnlyListOfString();
							if (yKeysUnsorted.isEmpty()) {
								continue;
							}
							for (j = 0; j < yKeysUnsorted.size(); j++) {
								yKey = yKeysUnsorted.get(j);
								entry = cEntries.getByKey(yKey);
								if ((entry.isNewValueForced() === false)
										&& (entry.isValueChanged() === false)
										&& (entry.isValueLockChanged() === false)
										&& (entry.isValueLocked() === false)
										&& (entry.getPlanningCommand() === null)) {
									continue;
								}
								if (entries === null) {
									entries = sap.firefly.XHashMapByString
											.create();
								}
								processingOrderInt = entry.getProcessingOrder();
								processingOrder = sap.firefly.XInteger
										.convertIntegerToString(processingOrderInt);
								entriesByOrder = entries
										.getByKey(processingOrder);
								if (entriesByOrder === null) {
									entriesByOrder = sap.firefly.XHashMapByString
											.create();
									entries
											.put(processingOrder,
													entriesByOrder);
								}
								entriesByXKey = entriesByOrder.getByKey(xKey);
								if (entriesByXKey === null) {
									entriesByXKey = sap.firefly.XHashMapByString
											.create();
									entriesByOrder.put(xKey, entriesByXKey);
								}
								if (entriesByXKey.containsKey(yKey)) {
									throw sap.firefly.XException
											.createIllegalStateException("internal error");
								}
								entriesByXKey.put(yKey, entry);
							}
						}
						return entries;
					},
					getChangedDataEntries : function() {
						var entries = this.getDataEntriesByProcessingOrder();
						var ordersUnsorted;
						var result;
						var orders;
						var orderIndex;
						var order;
						var entriesByOrder;
						var xKeysUnsorted;
						var xKeys;
						var xIndex;
						var xKey;
						var cEntries;
						var yKeysUnsorted;
						var yKeys;
						var yIndex;
						var yKey;
						var entry;
						if (entries === null) {
							return null;
						}
						ordersUnsorted = entries
								.getKeysAsReadOnlyListOfString();
						if (ordersUnsorted.isEmpty()) {
							return null;
						}
						result = null;
						orders = sap.firefly.XListOfString
								.createFromReadOnlyList(ordersUnsorted);
						orders
								.sortByDirection(sap.firefly.XSortDirection.ASCENDING);
						for (orderIndex = 0; orderIndex < orders.size(); orderIndex++) {
							order = orders.get(orderIndex);
							entriesByOrder = entries.getByKey(order);
							xKeysUnsorted = entriesByOrder
									.getKeysAsReadOnlyListOfString();
							if (xKeysUnsorted.isEmpty()) {
								continue;
							}
							xKeys = sap.firefly.XCollectionUtils
									.sortListAsIntegers(
											xKeysUnsorted,
											sap.firefly.XSortDirection.ASCENDING);
							for (xIndex = 0; xIndex < xKeys.size(); xIndex++) {
								xKey = xKeys.get(xIndex);
								cEntries = entriesByOrder.getByKey(xKey);
								yKeysUnsorted = cEntries
										.getKeysAsReadOnlyListOfString();
								if (yKeysUnsorted.isEmpty()) {
									continue;
								}
								yKeys = sap.firefly.XCollectionUtils
										.sortListAsIntegers(
												yKeysUnsorted,
												sap.firefly.XSortDirection.ASCENDING);
								for (yIndex = 0; yIndex < yKeys.size(); yIndex++) {
									yKey = yKeys.get(yIndex);
									entry = cEntries.getByKey(yKey);
									if ((entry.isNewValueForced() === false)
											&& (entry.isValueChanged() === false)
											&& (entry.isValueLockChanged() === false)
											&& (entry.isValueLocked() === false)
											&& (entry.getPlanningCommand() === null)) {
										continue;
									}
									if (result === null) {
										result = sap.firefly.XList.create();
									}
									result.add(entry);
								}
							}
						}
						return result;
					},
					getDataEntry : function(columnIndex, rowIndex, dataCell) {
						return this.getDataEntryInternal(columnIndex, rowIndex,
								dataCell, true);
					},
					getDataEntryIfExisting : function(columnIndex, rowIndex,
							dataCell) {
						return this.getDataEntryInternal(columnIndex, rowIndex,
								dataCell, false);
					},
					getDataEntryInternal : function(columnIndex, rowIndex,
							dataCell, createNew) {
						var c;
						var cEntries;
						var r;
						var entry;
						if (dataCell === null) {
							return null;
						}
						if (this.m_entries === null) {
							if (!createNew) {
								return null;
							}
							this.m_entries = sap.firefly.XHashMapByString
									.create();
						}
						c = sap.firefly.XInteger
								.convertIntegerToString(columnIndex);
						cEntries = this.m_entries.getByKey(c);
						if (cEntries === null) {
							if (!createNew) {
								return null;
							}
							cEntries = sap.firefly.XHashMapByString.create();
							this.m_entries.put(c, cEntries);
						}
						r = sap.firefly.XInteger
								.convertIntegerToString(rowIndex);
						entry = cEntries.getByKey(r);
						if (entry === null) {
							if (!createNew) {
								return null;
							}
							entry = sap.firefly.RsDataEntry.create(columnIndex,
									rowIndex, dataCell.getQueryModel(),
									dataCell.getXValue(), dataCell
											.getOriginalValueLock(), dataCell
											.getPlanningCommand(), dataCell
											.isNewValueForced());
							cEntries.put(r, entry);
						}
						return entry;
					},
					hasChangedValues : function() {
						return this.hasChanged(true, false, false, false);
					},
					hasChangedValueLocks : function() {
						return this.hasChanged(false, true, false, false);
					},
					hasPlanningCommands : function() {
						return this.hasChanged(false, false, true, false);
					},
					hasChangedDataEntries : function() {
						return this.hasChanged(false, false, false, true);
					},
					hasChanged : function(hasChangedValues,
							hasChangedValueLocks, hasPlanningCommands,
							hasChangedDataEntries) {
						var xKeys;
						var i;
						var xKey;
						var cEntries;
						var yKeys;
						var j;
						var yKey;
						var entry;
						if ((this.m_entries === null)
								|| (this.m_entries.isEmpty())) {
							return false;
						}
						xKeys = this.m_entries.getKeysAsReadOnlyListOfString();
						if (xKeys.isEmpty()) {
							return false;
						}
						for (i = 0; i < xKeys.size(); i++) {
							xKey = xKeys.get(i);
							cEntries = this.m_entries.getByKey(xKey);
							yKeys = cEntries.getKeysAsReadOnlyListOfString();
							if (yKeys.isEmpty()) {
								continue;
							}
							for (j = 0; j < yKeys.size(); j++) {
								yKey = yKeys.get(j);
								entry = cEntries.getByKey(yKey);
								if (hasChangedValues
										&& (entry.isValueChanged() || entry
												.isNewValueForced())) {
									return true;
								} else {
									if (hasChangedValueLocks
											&& (entry.isValueLockChanged() || entry
													.isValueLocked())) {
										return true;
									} else {
										if (hasPlanningCommands
												&& (entry.getPlanningCommand() !== null)) {
											return true;
										} else {
											if (hasChangedDataEntries
													&& (entry.isValueChanged()
															|| entry
																	.isNewValueForced()
															|| entry
																	.isValueLockChanged()
															|| entry
																	.isValueLocked() || (entry
															.getPlanningCommand() !== null))) {
												return true;
											}
										}
									}
								}
							}
						}
						return false;
					},
					clear : function() {
						if (this.m_entries !== null) {
							this.m_entries.clear();
						}
						if (this.m_cellEntries !== null) {
							this.m_cellEntries.clear();
						}
					},
					getDataCellEntry : function(name) {
						var cellEntry;
						if (sap.firefly.XStringUtils.isNullOrEmpty(name)) {
							return null;
						}
						if (this.m_cellEntries === null) {
							this.m_cellEntries = sap.firefly.XHashMapByString
									.create();
						}
						cellEntry = this.m_cellEntries.getByKey(name);
						if (cellEntry === null) {
							cellEntry = sap.firefly.RsDataCellEntry
									.create(name);
							this.m_cellEntries.put(name, cellEntry);
						}
						return cellEntry;
					},
					getDataCellEntryIfExisting : function(name) {
						if (sap.firefly.XStringUtils.isNullOrEmpty(name)) {
							return null;
						}
						if ((this.m_cellEntries === null)
								|| (this.m_cellEntries.isEmpty())) {
							return null;
						}
						return this.m_cellEntries.getByKey(name);
					},
					setDataCellEntryDescription : function(description) {
						this.m_dataEntryDescription = description;
					},
					getDataCellEntryDescription : function() {
						return this.m_dataEntryDescription;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QResultStructureItem",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createResultStructureItem : function(context, parent,
								element, visibility) {
							var item = new sap.firefly.QResultStructureItem();
							item.setupResultStructureItem(context, parent,
									element, visibility);
							return item;
						}
					},
					m_element : null,
					m_visibility : null,
					setupResultStructureItem : function(context, parent,
							element, visibility) {
						sap.firefly.QResultStructureItem.$superclass.setupModelComponent
								.call(this, context, parent);
						this.m_element = element;
						this.m_visibility = visibility;
					},
					releaseObject : function() {
						this.m_element = null;
						this.m_visibility = null;
						sap.firefly.QResultStructureItem.$superclass.releaseObject
								.call(this);
					},
					setResultStructureElement : function(element) {
						if (this.m_element !== element) {
							this.m_element = element;
							this.notifyNodeChanged();
						}
					},
					getResultStructureElement : function() {
						return this.m_element;
					},
					setResultVisibility : function(visibility) {
						if (this.m_visibility !== visibility) {
							this.m_visibility = visibility;
							this.notifyNodeChanged();
						}
					},
					getResultVisibility : function() {
						return this.m_visibility;
					},
					toString : function() {
						var stringBuffer;
						if ((this.m_element !== null)
								&& (this.m_visibility !== null)) {
							stringBuffer = sap.firefly.XStringBuffer.create();
							stringBuffer.append(this.m_element.getName());
							stringBuffer.append(": ");
							stringBuffer.append(this.m_visibility.getName());
							return stringBuffer.toString();
						}
						return sap.firefly.QResultStructureItem.$superclass.toString
								.call(this);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QueryProviderServiceConfig",
				sap.firefly.DfServiceConfigClassic,
				{
					$statics : {
						CLAZZ : null,
						staticSetup : function() {
							sap.firefly.QueryProviderServiceConfig.CLAZZ = sap.firefly.XClass
									.create(sap.firefly.QueryProviderServiceConfig);
						}
					},
					m_datasource : null,
					m_type : null,
					m_queryManager : null,
					getDataSource : function() {
						return this.m_datasource;
					},
					setDataSource : function(datasource) {
						this.m_datasource = datasource;
					},
					setProviderType : function(type) {
						this.m_type = type;
					},
					getProviderType : function() {
						return this.m_type;
					},
					getQueryManager : function() {
						return this.m_queryManager;
					},
					setQueryManager : function(queryManager) {
						this.m_queryManager = queryManager;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QGenericSorting",
				sap.firefly.QModelComponent,
				{
					m_direction : null,
					m_preserveGroups : false,
					setupGenericSorting : function(context, parentNode) {
						this.setupModelComponent(context, parentNode);
						this.m_direction = sap.firefly.XSortDirection.DEFAULT_VALUE;
						this.m_preserveGroups = true;
					},
					copyGenericSorting : function(origin) {
						this.copyModelComponent(origin);
						this.m_direction = origin.m_direction;
						this.m_preserveGroups = origin.m_preserveGroups;
					},
					releaseObject : function() {
						this.m_direction = null;
						sap.firefly.QGenericSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.GENERIC_SORTING;
					},
					getDirection : function() {
						return this.m_direction;
					},
					setDirection : function(direction) {
						if (this.m_direction !== direction) {
							this.m_direction = direction;
							this.notifyNodeChanged();
						}
					},
					getSortingManager : function() {
						return this.getQueryModel().getSortingManager();
					},
					getSortingType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setBreakGrouping : function(breaking) {
						this.setPreserveGrouping(!breaking);
					},
					setPreserveGrouping : function(preserve) {
						if (preserve) {
							if (this.supportsPreserveGrouping() === false) {
								throw sap.firefly.XException
										.createRuntimeException("Group preserving is not supported");
							}
						} else {
							if (this.supportsBreakGrouping() === false) {
								throw sap.firefly.XException
										.createRuntimeException("Group breaking is not supported");
							}
						}
						this.m_preserveGroups = preserve;
						this.notifyNodeChanged();
					},
					isBreakGroupingEnabled : function() {
						return !this.m_preserveGroups;
					},
					isPreserveGroupingEnabled : function() {
						return this.m_preserveGroups;
					},
					supportsPreserveGrouping : function() {
						var sortingManager = this.getSortingManager();
						var supportsPreserveGrouping = sortingManager
								.supportsPreserveGrouping(this.getSortingType());
						return supportsPreserveGrouping;
					},
					supportsBreakGrouping : function() {
						var sortingManager = this.getSortingManager();
						var supportsBreakGrouping = sortingManager
								.supportsBreakGrouping(this.getSortingType());
						return supportsBreakGrouping;
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						buffer.append(this.getOlapComponentType().getName());
						buffer.append(" - Dir: ");
						buffer.append(this.getDirection().getName());
						if (this.supportsBreakGrouping()) {
							if (this.isBreakGroupingEnabled()) {
								buffer.append(" - break grouping");
							}
						}
						return buffer.toString();
					},
					getDimension : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setDimension : function(dimension) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					supportsDimension : function() {
						return false;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QSortingManager",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, queryModel) {
							var object = new sap.firefly.QSortingManager();
							object.setupSortManager(context, queryModel);
							return object;
						}
					},
					m_sortOperations : null,
					m_supports : null,
					m_supportsBreakGrouping : null,
					setupSortManager : function(context, queryModel) {
						this.setupModelComponent(context, queryModel);
						this.m_sortOperations = sap.firefly.QModelComponentList
								.createModelComponentList(context, this, true,
										"SortOperations");
						this.m_supports = sap.firefly.XSetOfNameObject.create();
						this.m_supportsBreakGrouping = sap.firefly.XSetOfNameObject
								.create();
					},
					copySortManager : function(origin) {
						var queryModel;
						var size;
						var i;
						var originSorting;
						var originType;
						var cloneFieldSorting;
						var cloneMeasureSorting;
						var cloneDimensionSorting;
						var cloneDataCell;
						var cloneComplex;
						sap.firefly.QSortingManager.$superclass.copyModelComponent
								.call(this, origin);
						this.m_supports = origin.m_supports.createSetCopy();
						this.m_supportsBreakGrouping = origin.m_supportsBreakGrouping
								.createSetCopy();
						this.m_sortOperations.clear();
						queryModel = this.getQueryModel();
						size = origin.m_sortOperations.size();
						for (i = 0; i < size; i++) {
							originSorting = origin.m_sortOperations.get(i);
							originType = originSorting.getSortingType();
							if (originType === sap.firefly.SortType.FIELD) {
								cloneFieldSorting = this
										.newFieldSorting(queryModel
												.getFieldByName((originSorting)
														.getField().getName()));
								cloneFieldSorting
										.copyFieldSorting(originSorting);
								(this.m_sortOperations)
										.addInternal(cloneFieldSorting);
							} else {
								if (originType === sap.firefly.SortType.MEASURE) {
									cloneMeasureSorting = this
											.newMeasureSorting(queryModel
													.getMeasureDimension()
													.getStructureMember(
															(originSorting)
																	.getMeasure()
																	.getName()));
									cloneMeasureSorting
											.copyMeasureSorting(originSorting);
									(this.m_sortOperations)
											.addInternal(cloneMeasureSorting);
								} else {
									if (originSorting.getOlapComponentType() === sap.firefly.OlapComponentType.DIMENSION_SORTING) {
										cloneDimensionSorting = this
												.newDimensionSorting(queryModel
														.getDimensionByName((originSorting)
																.getDimension()
																.getName()));
										cloneDimensionSorting
												.copyDimensionSorting(originSorting);
										(this.m_sortOperations)
												.addInternal(cloneDimensionSorting);
									} else {
										if (originType === sap.firefly.SortType.DATA_CELL_VALUE) {
											cloneDataCell = this
													.newDataCellSorting(null);
											cloneDataCell
													.copyDataCellSorting(originSorting);
											(this.m_sortOperations)
													.addInternal(cloneDataCell);
										} else {
											if (originType === sap.firefly.SortType.COMPLEX) {
												cloneComplex = sap.firefly.QComplexSorting
														.create(this
																.getContext(),
																this, null);
												cloneComplex
														.copyComplexSorting(originSorting);
												(this.m_sortOperations)
														.addInternal(cloneComplex);
											}
										}
									}
								}
							}
						}
					},
					releaseObject : function() {
						this.m_sortOperations = sap.firefly.XObject
								.releaseIfNotNull(this.m_sortOperations);
						this.m_supports = sap.firefly.XObject
								.releaseIfNotNull(this.m_supports);
						this.m_supportsBreakGrouping = sap.firefly.XObject
								.releaseIfNotNull(this.m_supportsBreakGrouping);
						sap.firefly.QSortingManager.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.SORT_MANAGER;
					},
					getSortingOperations : function() {
						return this.m_sortOperations;
					},
					newDimensionSorting : function(dimension) {
						var dimBase;
						var dimSorting;
						if (this.supportsDimensionSorting(dimension, null)) {
							dimBase = dimension;
							dimSorting = sap.firefly.QDimensionSorting.create(
									this.getContext(), this, dimBase);
							return dimSorting;
						}
						throw sap.firefly.XException
								.createIllegalArgumentException(sap.firefly.XString
										.concatenate2(
												"Dimension sorting not allowed on dimension ",
												dimension.getName()));
					},
					newFieldSorting : function(field) {
						var fieldBase;
						var fieldSorting;
						if (this.supportsFieldSorting(field)) {
							fieldBase = field;
							fieldSorting = sap.firefly.QFieldSorting.create(
									this.getContext(), this, fieldBase);
							return fieldSorting;
						}
						throw sap.firefly.XException
								.createIllegalArgumentException(sap.firefly.XString
										.concatenate2(
												"Field sorting not allowed on field ",
												field.getName()));
					},
					newDataCellSorting : function(path) {
						var tupleSorting;
						if (this.supportsDataCellSorting()) {
							tupleSorting = sap.firefly.QDataCellSorting.create(
									this.getContext(), this, path);
							return tupleSorting;
						}
						throw sap.firefly.XException
								.createIllegalArgumentException("Tuple sorting not allowed");
					},
					newComplexSorting : function(path) {
						var tupleSorting;
						if (this.supportsComplexSorting()) {
							tupleSorting = sap.firefly.QComplexSorting.create(
									this.getContext(), this, path);
							return tupleSorting;
						}
						throw sap.firefly.XException
								.createIllegalArgumentException("Complex sorting not allowed");
					},
					newMeasureSorting : function(member) {
						var structureMember;
						var sorting;
						if (this.supportsMeasureSorting()) {
							structureMember = member;
							sorting = sap.firefly.QMeasureSorting.create(this
									.getContext(), this, structureMember);
							return sorting;
						}
						throw sap.firefly.XException
								.createIllegalArgumentException("Structure member sorting not allowed");
					},
					getDimensionSorting : function(dimension, createIfNotExist) {
						var result = null;
						var size;
						var i;
						var sortOperation;
						var componentType;
						var dimSorting;
						if (dimension !== null) {
							size = this.m_sortOperations.size();
							for (i = 0; i < size; i++) {
								sortOperation = this.m_sortOperations.get(i);
								componentType = sortOperation
										.getComponentType();
								if (componentType === sap.firefly.OlapComponentType.DIMENSION_SORTING) {
									dimSorting = sortOperation;
									if (dimSorting.getDimension() === dimension) {
										result = dimSorting;
										break;
									}
								}
							}
							if ((result === null) && (createIfNotExist)) {
								result = this.newDimensionSorting(dimension);
								this.addSortOperation(result);
							}
						}
						return result;
					},
					removeDimensionSorting : function(dimension) {
						var size = this.m_sortOperations.size();
						var i = 0;
						var sortOperation;
						var componentType;
						var dimSorting;
						while (i < size) {
							sortOperation = this.m_sortOperations.get(i);
							componentType = sortOperation.getComponentType();
							if (componentType === sap.firefly.OlapComponentType.DIMENSION_SORTING) {
								dimSorting = sortOperation;
								if (dimSorting.getDimension() === dimension) {
									this.m_sortOperations.removeAt(i);
									size = this.m_sortOperations.size();
									continue;
								}
							}
							i++;
						}
					},
					getFieldSorting : function(field, createIfNotExist) {
						var result = null;
						var size = this.m_sortOperations.size();
						var i;
						var sortOperation;
						var componentType;
						var fieldSorting;
						for (i = 0; i < size; i++) {
							sortOperation = this.m_sortOperations.get(i);
							componentType = sortOperation.getComponentType();
							if (componentType === sap.firefly.OlapComponentType.FIELD_SORTING) {
								fieldSorting = sortOperation;
								if (fieldSorting.getField() === field) {
									result = fieldSorting;
									break;
								}
							}
						}
						if ((result === null) && (createIfNotExist)) {
							result = this.newFieldSorting(field);
							this.addSortOperation(result);
						}
						return result;
					},
					getDataCellSorting : function(path, createIfNotExist) {
						var result = null;
						var uniqueName = sap.firefly.QComplexAndDataCellSorting
								.createPathUniqueName(path);
						var size = this.m_sortOperations.size();
						var i;
						var sortOperation;
						var componentType;
						var tupleSorting;
						var tsUniqueName;
						for (i = 0; i < size; i++) {
							sortOperation = this.m_sortOperations.get(i);
							componentType = sortOperation.getComponentType();
							if (componentType === sap.firefly.OlapComponentType.DATA_CELL_SORTING) {
								tupleSorting = sortOperation;
								tsUniqueName = tupleSorting.getPathUniqueName();
								if (sap.firefly.XString.isEqual(tsUniqueName,
										uniqueName)) {
									result = tupleSorting;
									break;
								}
							}
						}
						if ((result === null) && (createIfNotExist)) {
							result = this.newDataCellSorting(path);
							this.addSortOperation(result);
						}
						return result;
					},
					getComplexSorting : function(path, createIfNotExist) {
						var result = null;
						var uniqueName = sap.firefly.QComplexAndDataCellSorting
								.createPathUniqueName(path);
						var size = this.m_sortOperations.size();
						var i;
						var sortOperation;
						var componentType;
						var tupleSorting;
						var tsUniqueName;
						for (i = 0; i < size; i++) {
							sortOperation = this.m_sortOperations.get(i);
							componentType = sortOperation.getComponentType();
							if (componentType === sap.firefly.OlapComponentType.COMPLEX_SORTING) {
								tupleSorting = sortOperation;
								tsUniqueName = tupleSorting.getPathUniqueName();
								if (sap.firefly.XString.isEqual(tsUniqueName,
										uniqueName)) {
									result = tupleSorting;
									break;
								}
							}
						}
						if ((result === null) && (createIfNotExist)) {
							result = this.newComplexSorting(path);
							this.addSortOperation(result);
						}
						return result;
					},
					getMeasureSorting : function(member, createIfNotExist) {
						var structure = this.getQueryModel()
								.getNonMeasureDimension();
						var result;
						var size;
						var i;
						var sortOperation;
						var componentType;
						var memberSorting;
						if ((member === null)
								|| (((structure !== null) && (member
										.getDimension() === structure)))) {
							return null;
						}
						result = null;
						size = this.m_sortOperations.size();
						for (i = 0; i < size; i++) {
							sortOperation = this.m_sortOperations.get(i);
							componentType = sortOperation.getComponentType();
							if (componentType === sap.firefly.OlapComponentType.MEASURE_SORTING) {
								memberSorting = sortOperation;
								if (memberSorting.getMeasure() === member) {
									result = memberSorting;
									break;
								}
							}
						}
						if ((result === null) && (createIfNotExist)) {
							result = this.newMeasureSorting(member);
							this.addSortOperation(result);
							if (structure !== null) {
								result.setStructure(structure
										.getAllStructureMembers().get(0));
							}
						}
						return result;
					},
					addSortOperation : function(sortOperation) {
						if (sortOperation !== null) {
							this.m_sortOperations.add(sortOperation);
						}
					},
					supportsFieldSorting : function(field) {
						return this.m_supports
								.contains(sap.firefly.SortType.FIELD);
					},
					supportsDimensionSorting : function(dimension, sortType) {
						if (sortType === null) {
							if (this.m_supports
									.contains(sap.firefly.SortType.FILTER)
									|| this.m_supports
											.contains(sap.firefly.SortType.HIERARCHY)
									|| this.m_supports
											.contains(sap.firefly.SortType.MEMBER_KEY)
									|| this.m_supports
											.contains(sap.firefly.SortType.MEMBER_TEXT)) {
								return true;
							}
						} else {
							if ((sortType === sap.firefly.SortType.FILTER)
									|| (sortType === sap.firefly.SortType.HIERARCHY)
									|| (sortType === sap.firefly.SortType.MEMBER_KEY)
									|| (sortType === sap.firefly.SortType.MEMBER_TEXT)) {
								return this.m_supports.contains(sortType);
							}
						}
						return false;
					},
					supportsDataCellSorting : function() {
						return this.m_supports
								.contains(sap.firefly.SortType.DATA_CELL_VALUE);
					},
					supportsComplexSorting : function() {
						return this.m_supports
								.contains(sap.firefly.SortType.COMPLEX);
					},
					supportsMeasureSorting : function() {
						return this.m_supports
								.contains(sap.firefly.SortType.MEASURE);
					},
					clearSupportedSortType : function() {
						this.m_supports.clear();
					},
					addSupportedSortType : function(sortType) {
						if (sortType !== null) {
							this.m_supports.put(sortType);
						}
					},
					isSortTypeSupported : function(sortType) {
						return this.m_supports.contains(sortType);
					},
					supportsBreakGrouping : function(sortType) {
						return this.m_supportsBreakGrouping.contains(sortType);
					},
					addSupportedBreakGrouping : function(sortType) {
						if (sortType !== null) {
							this.m_supportsBreakGrouping.put(sortType);
						}
					},
					supportsPreserveGrouping : function(sortType) {
						return true;
					},
					getSupportedBreakGrouping : function() {
						return this.m_supportsBreakGrouping
								.getValuesAsReadOnlyList();
					},
					mergeDeepRecursive : function(settings, other) {
						var otherSort = other;
						this.copySortManager(otherSort);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QValueHelpSplitterNode",
				sap.firefly.QValueHelpNode,
				{
					$statics : {
						createSplitterNode : function(valueHelp, parentNode,
								displayLevel, startIndex, splittingSize) {
							var newObj = new sap.firefly.QValueHelpSplitterNode();
							newObj.setupSplitterNode(valueHelp, parentNode,
									displayLevel, startIndex, splittingSize);
							return newObj;
						}
					},
					m_startIndex : 0,
					setupSplitterNode : function(valueHelp, parentNode,
							displayLevel, startIndex, splittingSize) {
						sap.firefly.QValueHelpSplitterNode.$superclass.setupNode
								.call(this, valueHelp, parentNode, null,
										displayLevel, splittingSize);
						this.m_startIndex = startIndex;
					},
					getMemberType : function() {
						return sap.firefly.MemberType.VALUE_HELP_SPLITTER_NODE;
					},
					getStartIndex : function() {
						return this.m_startIndex;
					},
					processValueHelpFetch : function(syncType, listener,
							customIdentifier) {
						var parentNode = this.getParentNode();
						var type = parentNode.getMemberType();
						var processNode;
						if (type !== sap.firefly.MemberType.VALUE_HELP_SPLITTER_NODE) {
							processNode = parentNode;
							return processNode.processValueHelpFetch(syncType,
									listener, customIdentifier);
						}
						throw sap.firefly.XException
								.createRuntimeException("Cannot execute child fetch");
					},
					getName : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var startIndex;
						var endIndex;
						var firstText;
						var lastText;
						buffer.append("[#");
						startIndex = this.getStartIndex();
						buffer.appendInt(startIndex);
						if (this.m_childSetState !== sap.firefly.ChildSetState.INITIAL) {
							endIndex = this.getEndIndex();
							if (endIndex !== startIndex) {
								buffer.append("...");
								buffer.append("#");
								buffer.appendInt(endIndex);
							}
						} else {
							buffer.append("...");
						}
						buffer.append("]");
						firstText = this.getFirstText();
						if (firstText !== null) {
							buffer.append(" ");
							buffer.append(firstText);
							lastText = this.getLastText();
							if (lastText !== null) {
								buffer.append(" ... ");
								buffer.append(lastText);
							}
						}
						return buffer.toString();
					},
					getFirstText : function() {
						var size;
						var first;
						if (this.m_children !== null) {
							size = this.m_children.size();
							if (size > 0) {
								first = this.m_children.get(0);
								return first.getFirstText();
							}
						}
						return null;
					},
					getLastText : function() {
						var size;
						var first;
						if (this.m_children !== null) {
							size = this.m_children.size();
							if (size > 1) {
								first = this.m_children.get(size - 1);
								return first.getLastText();
							}
						}
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QValueHelpVarDimMember",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, dimMemberVariable) {
							var newObj = new sap.firefly.QValueHelpVarDimMember();
							newObj.setupValueHelp(context, dimMemberVariable);
							return newObj;
						}
					},
					m_dimMemberVariable : null,
					m_valueHelpManager : null,
					m_valueHelpDimension : null,
					m_rootNode : null,
					m_offsetRows : 0,
					m_maxRows : 0,
					setupValueHelp : function(context, dimMemberVariable) {
						var queryModel;
						var queryManager;
						var instanceId;
						sap.firefly.QValueHelpVarDimMember.$superclass.setupModelComponent
								.call(this, context, dimMemberVariable);
						this.m_dimMemberVariable = dimMemberVariable;
						queryModel = dimMemberVariable.getDimension()
								.getQueryModel();
						if (queryModel !== null) {
							queryManager = queryModel.getQueryManager();
							instanceId = queryModel.getDataSource()
									.getInstanceId();
							this.m_valueHelpManager = queryManager
									.cloneQueryManager();
							this.prepareQueryLayout(instanceId);
						}
						this.m_rootNode = sap.firefly.QValueHelpNode.create(
								this, null, null, 0);
					},
					prepareQueryLayout : function(instanceId) {
						var originDim = this.m_dimMemberVariable.getDimension();
						var dimName = originDim.getName();
						var valueHelpModel = this.m_valueHelpManager
								.getQueryModel();
						var sys = this.m_valueHelpManager
								.getSystemDescription();
						var systemType = sys.getSystemType();
						var dataSource;
						var variableProcessor;
						var sortingManager;
						var sortingOperations;
						var dimensions;
						var i;
						var dimension;
						var cmds;
						var hierarchyName;
						var hierarchyVersion;
						var resultSetSorting;
						var selectorReadModes;
						var defaultValueBest;
						var defaultValueFallback;
						var readMode;
						var filter;
						var selectorContainer;
						var variableManagerBase;
						var variables;
						var excludeName;
						var originVariables;
						var iterator;
						var variable;
						var name;
						if (systemType.isTypeOf(sap.firefly.SystemType.BW)) {
							dataSource = valueHelpModel.getDataSourceBase();
							dataSource.setInstanceId(instanceId);
							dataSource
									.setType(sap.firefly.MetaObjectType.QUERY_VALUEHELP);
							variableProcessor = this.m_valueHelpManager
									.getVariableProcessor();
							variableProcessor
									.setVariableProcessorState(sap.firefly.VariableProcessorState.VALUE_HELP);
						}
						sortingManager = valueHelpModel.getSortingManager();
						sortingOperations = sortingManager
								.getSortingOperations();
						sortingOperations.clear();
						dimensions = valueHelpModel.getDimensions();
						for (i = 0; i < dimensions.size(); i++) {
							dimension = dimensions.get(i);
							dimension
									.addSupportedAxis(sap.firefly.AxisType.FREE);
							dimension
									.addSupportedAxis(sap.firefly.AxisType.ROWS);
						}
						cmds = valueHelpModel.getConvenienceCommands();
						cmds.clearAxis(sap.firefly.AxisType.ROWS);
						cmds.clearAxis(sap.firefly.AxisType.COLUMNS);
						this.m_valueHelpDimension = valueHelpModel
								.getDimensionByName(dimName);
						cmds.moveDimensionToAxis(dimName,
								sap.firefly.AxisType.ROWS);
						if (this.m_valueHelpDimension.supportsHierarchy()) {
							hierarchyName = this.m_dimMemberVariable
									.getHierarchyName();
							hierarchyVersion = this.m_dimMemberVariable
									.getHierarchyVersion();
							if (hierarchyName !== null) {
								this.m_valueHelpDimension.activateHierarchy(
										hierarchyName, hierarchyVersion, null);
							} else {
								this.m_valueHelpDimension
										.setHierarchyActive(false);
							}
						}
						if (this.m_valueHelpDimension.isHierarchyActive() === false) {
							resultSetSorting = this.m_valueHelpDimension
									.getResultSetSorting();
							resultSetSorting.setSortByKey();
							resultSetSorting
									.setDirection(sap.firefly.XSortDirection.ASCENDING);
						}
						selectorReadModes = this.m_valueHelpDimension
								.getSupportedReadModes(
										sap.firefly.QContextType.SELECTOR)
								.getIterator();
						this.m_valueHelpDimension
								.clearReadModes(sap.firefly.QContextType.RESULT_SET);
						defaultValueBest = null;
						defaultValueFallback = null;
						while (selectorReadModes.hasNext()) {
							defaultValueFallback = selectorReadModes.next();
							if (defaultValueFallback
									.isTypeOf(sap.firefly.QMemberReadMode.BOOKED)) {
								defaultValueBest = defaultValueFallback;
							}
							this.m_valueHelpDimension.addSupportedReadMode(
									sap.firefly.QContextType.RESULT_SET,
									defaultValueFallback);
						}
						selectorReadModes.releaseObject();
						readMode = this.m_valueHelpDimension
								.getReadMode(sap.firefly.QContextType.SELECTOR);
						if (readMode === null) {
							if (defaultValueBest !== null) {
								readMode = defaultValueBest;
							} else {
								readMode = defaultValueFallback;
							}
						}
						this.m_valueHelpDimension.setReadMode(
								sap.firefly.QContextType.RESULT_SET, readMode);
						filter = valueHelpModel.getSelectorBase();
						selectorContainer = filter.getSelectorContainer();
						filter.setSelectionStateContainer(selectorContainer);
						if (systemType.isTypeOf(sap.firefly.SystemType.BW)) {
							variableManagerBase = valueHelpModel
									.getVariableManagerBase();
							variables = variableManagerBase.getVariables();
							excludeName = this.m_dimMemberVariable.getName();
							originVariables = sap.firefly.XList.create();
							sap.firefly.XListUtils.listAddAll(originVariables,
									variables);
							iterator = originVariables.getIterator();
							while (iterator.hasNext()) {
								variable = iterator.next();
								name = variable.getName();
								if (sap.firefly.XString.isEqual(excludeName,
										name) === false) {
									variableManagerBase.removeVariable(name);
								}
							}
						}
						this.m_valueHelpManager.applyValueHelpCapabilities();
					},
					releaseObject : function() {
						this.m_dimMemberVariable = null;
						sap.firefly.QValueHelpVarDimMember.$superclass.releaseObject
								.call(this);
					},
					setOffsetRows : function(offset) {
						this.m_offsetRows = offset;
						return null;
					},
					getOffsetRows : function() {
						return this.m_offsetRows;
					},
					setMaxRows : function(max) {
						this.m_maxRows = max;
						return null;
					},
					getMaxRows : function() {
						return this.m_maxRows;
					},
					hasMoreRowRecordsAvailable : function() {
						return false;
					},
					getValueHelpDimension : function() {
						return this.m_valueHelpDimension;
					},
					getDimension : function() {
						return this.m_dimMemberVariable.getDimension();
					},
					getVariable : function() {
						return this.m_dimMemberVariable;
					},
					process : function(syncType, listener, customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getQueryManager : function() {
						return this.m_valueHelpManager;
					},
					getValueHelpMembers : function() {
						return null;
					},
					getRootNode : function() {
						return this.m_rootNode;
					}
				});
$Firefly.createClass("sap.firefly.QVariableModelComponent",
		sap.firefly.QModelComponent, {});
$Firefly.createClass("sap.firefly.QVizManager", sap.firefly.QModelComponent, {
	$statics : {
		create : function(context, queryModel) {
			var object = new sap.firefly.QVizManager();
			object.setupSortManager(context, queryModel);
			return object;
		}
	},
	m_operations : null,
	setupSortManager : function(context, queryModel) {
		this.setupModelComponent(context, queryModel);
		this.m_operations = sap.firefly.QModelComponentList
				.createModelComponentList(context, this, true, null);
	},
	copyVizManager : function(origin) {
		sap.firefly.QVizManager.$superclass.copyModelComponent.call(this,
				origin);
	},
	releaseObject : function() {
		this.m_operations = sap.firefly.XObject
				.releaseIfNotNull(this.m_operations);
		sap.firefly.QVizManager.$superclass.releaseObject.call(this);
	},
	getOlapComponentType : function() {
		return sap.firefly.OlapComponentType.VIZ_MANAGER;
	},
	getSortingOperations : function() {
		return this.m_operations;
	}
});
$Firefly
		.createClass(
				"sap.firefly.PlanningCommand",
				sap.firefly.PlanningPropertiesObject,
				{
					$statics : {
						PLANNING_SERVICE : "PLANNING_SERVICE",
						COMMAND_TYPE : "COMMAND_TYPE",
						PLANNING_COMMAND_JSON : "PLANNING_COMMAND_JSON",
						INVALIDATE_RESULT_SET : "INVALIDATE_RESULT_SET",
						M_DEBUG_MODE : false
					},
					m_synchronizationType : null,
					m_extPlanningCommandResult : null,
					m_commandDelegate : null,
					m_analyticsCapabilities : null,
					m_servicePath : null,
					setCommandType : function(commandType) {
						this.setPropertyObject(
								sap.firefly.PlanningCommand.COMMAND_TYPE,
								commandType);
					},
					getCommandType : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommand.COMMAND_TYPE);
					},
					getPlanningService : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommand.PLANNING_SERVICE);
					},
					setPlanningService : function(planningService) {
						this.setPropertyObject(
								sap.firefly.PlanningCommand.PLANNING_SERVICE,
								planningService);
						this.setupContext(planningService.getOlapEnv()
								.getContext());
					},
					isInvalidatingResultSet : function() {
						var objectValue = this
								.getPropertyObject(sap.firefly.PlanningCommand.INVALIDATE_RESULT_SET);
						if (objectValue === null) {
							return true;
						}
						return objectValue.getBooleanValue();
					},
					setInvalidatingResultSet : function(invalidating) {
						this
								.setPropertyBoolean(
										sap.firefly.PlanningCommand.INVALIDATE_RESULT_SET,
										invalidating);
						return this;
					},
					serializeToJson : function() {
						var planningCommandJson = this
								.getPropertyObject(sap.firefly.PlanningCommand.PLANNING_COMMAND_JSON);
						if (planningCommandJson === null) {
							planningCommandJson = this.createCommandStructure();
							this
									.setPropertyObject(
											sap.firefly.PlanningCommand.PLANNING_COMMAND_JSON,
											planningCommandJson);
						}
						return planningCommandJson;
					},
					resetCommand : function() {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommand.PLANNING_COMMAND_JSON,
										null);
					},
					createCommandStructure : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createCommandResultInstance : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createCommandResult : function(callback, customIdentifier) {
						var commandResult = this.createCommandResultInstance();
						commandResult.setCustomIdentifier(customIdentifier);
						commandResult.setPlanningCommand(this);
						commandResult.setPlanningCommandCallback(callback);
						return commandResult;
					},
					getCommandDelegate : function() {
						return null;
					},
					processCommandResultDelegate : function(
							extCommandResultDelegate) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					onCommandProcessed : function(extPlanningCommandResult) {
						var commandCallback;
						if (this.m_commandDelegate === null) {
							return;
						}
						this.m_commandDelegate = null;
						commandCallback = extPlanningCommandResult.getData()
								.getPlanningCommandCallback();
						if (commandCallback !== null) {
							commandCallback
									.onCommandProcessed(extPlanningCommandResult);
						}
					},
					processCommand : function(synchronizationType, callback,
							customIdentifier) {
						var commandDelegate = this.getCommandDelegate();
						var delegateCommandResult;
						var result;
						if (commandDelegate === null) {
							return this.processCommandLocal(
									synchronizationType, callback,
									customIdentifier);
						}
						this.m_commandDelegate = commandDelegate;
						this.m_synchronizationType = synchronizationType;
						delegateCommandResult = this.createCommandResult(
								callback, customIdentifier);
						commandDelegate.processCommand(synchronizationType,
								delegateCommandResult, this);
						result = null;
						if (synchronizationType === sap.firefly.SyncType.BLOCKING) {
							result = this.m_extPlanningCommandResult;
							this.m_extPlanningCommandResult = null;
						}
						return result;
					},
					processCommandLocal : function(synchronizationType,
							callback, customIdentifier) {
						var planningCommandResult = this.createCommandResult(
								callback, customIdentifier);
						var result;
						this.m_synchronizationType = synchronizationType;
						this.doProcessCommand(synchronizationType,
								planningCommandResult);
						result = null;
						if (synchronizationType === sap.firefly.SyncType.BLOCKING) {
							result = this.m_extPlanningCommandResult;
							this.m_extPlanningCommandResult = null;
						}
						return result;
					},
					getCapabilities : function() {
						var connection;
						var serverMetadata;
						if (this.m_analyticsCapabilities === null) {
							connection = this.getConnection();
							serverMetadata = connection.getServerMetadata();
							this.m_analyticsCapabilities = serverMetadata
									.getMetadataForService(sap.firefly.ServerService.ANALYTIC);
						}
						return this.m_analyticsCapabilities;
					},
					getServicePath : function() {
						var connection;
						var systemDescription;
						var systemType;
						var path;
						var fastPathCap;
						if (this.m_servicePath === null) {
							connection = this.getConnection();
							systemDescription = connection
									.getSystemDescription();
							systemType = systemDescription.getSystemType();
							path = systemDescription.getServicePath();
							if (path === null) {
								fastPathCap = this
										.getCapabilities()
										.getByKey(
												sap.firefly.InACapabilities.AV_CAPABILITY_FAST_PATH);
								if (fastPathCap !== null) {
									path = fastPathCap.getValue();
								}
							}
							if (path === null) {
								path = sap.firefly.ConnectionConstants
										.getInAPath(systemType);
							}
							this.m_servicePath = path;
						}
						return this.m_servicePath;
					},
					getConnection : function() {
						var planningService = this.getPlanningService();
						var connection = planningService
								.getPlanningServiceConfig()
								.getConnectionContainer();
						var systemName;
						var connectionPool;
						if (connection === null) {
							systemName = planningService.getServiceConfig()
									.getSystemName();
							connectionPool = planningService.getApplication()
									.getConnectionPool();
							connection = connectionPool
									.getConnection(systemName);
						}
						return connection;
					},
					doProcessCommand : function(synchronizationType,
							planningCommandResult) {
						var connection = this.getConnection();
						var servicePath = this.getServicePath();
						var ocpFunction = connection
								.newRpcFunction(servicePath);
						var request = ocpFunction.getRequest();
						var requestStructure = this.serializeToJson();
						var sentStr;
						request.setRequestStructure(requestStructure);
						if (sap.firefly.PlanningCommand.M_DEBUG_MODE) {
							sentStr = sap.firefly.XStringBuffer.create();
							sentStr.append("Planning: sent request");
							sentStr.appendNewLine();
							sentStr.append(requestStructure.toString());
							sap.firefly.XLogger.println(sentStr.toString());
						}
						ocpFunction.processFunctionExecution(
								synchronizationType, this,
								planningCommandResult);
					},
					onFunctionExecuted : function(extResult, response,
							customIdentifier) {
						var planningCommandResult = customIdentifier;
						var extPlanningCommandResult = null;
						var sentStr;
						var rootStructure;
						var responseStructure;
						var receivedStr;
						var messageManager;
						if (extResult.hasErrors()) {
							if (sap.firefly.PlanningCommand.M_DEBUG_MODE) {
								sentStr = sap.firefly.XStringBuffer.create();
								sentStr.append("Planning: received response");
								sentStr.appendNewLine();
								sentStr.append(extResult.getSummary());
								sap.firefly.XLogger.println(sentStr.toString());
							}
							extPlanningCommandResult = sap.firefly.ExtResult
									.create(planningCommandResult, extResult);
						} else {
							rootStructure = response.getRootElement();
							responseStructure = sap.firefly.PrStructure
									.createDeepCopy(rootStructure);
							if (sap.firefly.PlanningCommand.M_DEBUG_MODE) {
								receivedStr = sap.firefly.XStringBuffer
										.create();
								receivedStr
										.append("Planning: received response");
								receivedStr.appendNewLine();
								receivedStr
										.append(responseStructure.toString());
								sap.firefly.XLogger.println(receivedStr
										.toString());
							}
							messageManager = sap.firefly.MessageManager
									.createMessageManager();
							this.updatePlanningContext(responseStructure,
									messageManager);
							planningCommandResult.processResponseStructrue(
									responseStructure, messageManager);
							extPlanningCommandResult = sap.firefly.ExtResult
									.create(planningCommandResult,
											messageManager);
						}
						this.onCommandExecuted(extPlanningCommandResult);
					},
					updatePlanningContext : function(responseStructure,
							messageManager) {
						var planningService;
						var application;
						var serviceConfig;
						var systemName;
						if (responseStructure === null) {
							return;
						}
						planningService = this.getPlanningService();
						if (planningService === null) {
							return;
						}
						application = planningService.getApplication();
						if (application === null) {
							return;
						}
						serviceConfig = planningService.getServiceConfig();
						if (serviceConfig === null) {
							return;
						}
						systemName = serviceConfig.getSystemName();
						sap.firefly.PlanningState.update(application,
								systemName, responseStructure, messageManager);
					},
					onCommandExecuted : function(extPlanningCommandResult) {
						var commandCallback;
						if (this.m_synchronizationType === sap.firefly.SyncType.BLOCKING) {
							this.m_extPlanningCommandResult = extPlanningCommandResult;
						}
						commandCallback = extPlanningCommandResult.getData()
								.getPlanningCommandCallback();
						if (commandCallback !== null) {
							commandCallback
									.onCommandProcessed(extPlanningCommandResult);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCommandResult",
				sap.firefly.PlanningPropertiesObject,
				{
					$statics : {
						PLANNING_COMMAND : "PLANNING_COMMAND",
						CUSTOM_IDENTIFIER : "CUSTOM_IDENTIFIER",
						PLANNING_COMMAND_CALLBACK : "PLANNING_COMMAND_CALLBACK"
					},
					getPlanningCommand : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandResult.PLANNING_COMMAND);
					},
					setPlanningCommand : function(planningCommand) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandResult.PLANNING_COMMAND,
										planningCommand);
					},
					getCustomIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandResult.CUSTOM_IDENTIFIER);
					},
					setCustomIdentifier : function(customIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandResult.CUSTOM_IDENTIFIER,
										customIdentifier);
					},
					getPlanningCommandCallback : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandResult.PLANNING_COMMAND_CALLBACK);
					},
					setPlanningCommandCallback : function(
							planningCommandCallback) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandResult.PLANNING_COMMAND_CALLBACK,
										planningCommandCallback);
					},
					cloneOlapComponent : function(context, parent) {
						var command = this.getPlanningCommand();
						var copy = command.createCommandResultInstance();
						copy.setProperties(this.getPropertiesCopy());
						return copy;
					},
					processResponseStructrue : function(responseStructure,
							messageManager) {
						this.initResponseStructureCommand(responseStructure,
								messageManager);
						if (this.isValidResponseStructure(responseStructure,
								messageManager)) {
							this.processResponseStructureCommand(
									responseStructure, messageManager,
									messageManager.hasErrors());
						}
						(this.getPlanningCommand()).resetCommand();
						this.checkErrorState();
					},
					initResponseStructureCommand : function(responseStructure,
							messageManager) {
						return;
					},
					processResponseStructureCommand : function(
							responseStructure, messageManager, hasErrors) {
						return;
					},
					checkErrorState : function() {
						return;
					},
					onCommandProcessed : function(extPlanningCommandResult) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isValidResponseStructure : function(responseStructure,
							messageManager) {
						var hasErrors;
						if (responseStructure === null) {
							return false;
						}
						if (messageManager === null) {
							return false;
						}
						hasErrors = sap.firefly.InAHelper.importMessages(
								responseStructure, messageManager);
						if (hasErrors) {
							if (this.useStrictErrorHandling() === false) {
								return false;
							}
						}
						return true;
					},
					useStrictErrorHandling : function() {
						var command = this.getPlanningCommand();
						var planningService = command.getPlanningService();
						var planningContext;
						if (planningService.isInitialized() === false) {
							return true;
						}
						planningContext = planningService.getPlanningContext();
						return planningContext.supportsStrictErrorHandling();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningCommandIdentifier",
				sap.firefly.PlanningPropertiesObject,
				{
					$statics : {
						PLANNING_COMMAND_TYPE : "PLANNING_COMMAND_TYPE",
						COMMAND_ID : "COMMAND_ID"
					},
					getPlanningCommandType : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandIdentifier.PLANNING_COMMAND_TYPE);
					},
					setPlanningCommandType : function(planningCommandType) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandIdentifier.PLANNING_COMMAND_TYPE,
										planningCommandType);
					},
					getCommandId : function() {
						return this
								.getPropertyString(sap.firefly.PlanningCommandIdentifier.COMMAND_ID);
					},
					setCommandId : function(commandId) {
						this
								.setPropertyString(
										sap.firefly.PlanningCommandIdentifier.COMMAND_ID,
										commandId);
					}
				});
$Firefly.createClass("sap.firefly.QAttribute", sap.firefly.QFieldContainer, {
	$statics : {
		createAttribute : function(context, dimension) {
			var attribute = new sap.firefly.QAttribute();
			attribute.setupAttribute(context, dimension);
			return attribute;
		}
	},
	m_childAttributes : null,
	copyAttribute : function(origin) {
		var thisDimension;
		var thisContext;
		var size;
		var i;
		var origChild;
		var cloneChild;
		this.copyFieldContainer(origin);
		if (origin.m_childAttributes !== null) {
			thisDimension = this.getDimension();
			thisContext = this.getContext();
			size = origin.m_childAttributes.size();
			for (i = 0; i < size; i++) {
				origChild = origin.m_childAttributes.get(i);
				cloneChild = sap.firefly.QAttribute.createAttribute(
						thisContext, thisDimension);
				cloneChild.copyAttribute(origChild);
				this.addChildAttribute(cloneChild);
			}
		}
	},
	setupAttribute : function(context, dimension) {
		this.setupFieldContainer(context, dimension, "Fields");
	},
	addDefaultResultSetField : function(field) {
		sap.firefly.QAttribute.$superclass.addDefaultResultSetField.call(this,
				field);
		(this.m_selectorFields).addInternal(field);
		(this.m_resultSetFields).addInternal(field);
	},
	addField : function(field) {
		sap.firefly.QAttribute.$superclass.addField.call(this, field);
		field.setAttribute(this);
	},
	addFieldInternal : function(field) {
		sap.firefly.QAttribute.$superclass.addFieldInternal.call(this, field);
		field.setAttribute(this);
	},
	releaseObject : function() {
		this.m_childAttributes = sap.firefly.XCollectionUtils
				.releaseEntriesAndCollectionIfNotNull(this.m_childAttributes);
		sap.firefly.QAttribute.$superclass.releaseObject.call(this);
	},
	getOlapComponentType : function() {
		return sap.firefly.OlapComponentType.ATTRIBUTE;
	},
	getFieldLayoutType : function() {
		return sap.firefly.FieldLayoutType.ATTRIBUTE_BASED;
	},
	getChildAttributes : function() {
		return this.m_childAttributes;
	},
	addChildAttribute : function(childAttribute) {
		if (this.m_childAttributes === null) {
			this.m_childAttributes = sap.firefly.XList.create();
		}
		this.m_childAttributes.add(childAttribute);
	}
});
$Firefly.createClass("sap.firefly.OlapCatalogItem", sap.firefly.QDataSource,
		{
			$statics : {
				createCatalogItem : function() {
					var metaObjectId = new sap.firefly.OlapCatalogItem();
					metaObjectId.setupDataSource(null, null);
					metaObjectId.setText(null);
					metaObjectId.setBaseDataSource(null);
					metaObjectId.setPlanQuery(false);
					metaObjectId
							.setHasMdxFlag(sap.firefly.TriStateBool._DEFAULT);
					return metaObjectId;
				}
			},
			m_isPlanQuery : false,
			m_hasMdxFlag : null,
			m_baseDataSource : null,
			m_planningModelName : null,
			m_planningModelSchemaName : null,
			m_dataCategory : null,
			m_internalType : null,
			releaseObject : function() {
				this.m_baseDataSource = null;
				this.m_planningModelName = null;
				this.m_planningModelSchemaName = null;
				this.m_dataCategory = null;
				this.m_internalType = null;
				sap.firefly.OlapCatalogItem.$superclass.releaseObject
						.call(this);
			},
			getBaseDataSource : function() {
				return this.m_baseDataSource;
			},
			setBaseDataSource : function(baseDataSource) {
				this.m_baseDataSource = baseDataSource;
			},
			isPlanQuery : function() {
				return this.m_isPlanQuery;
			},
			setPlanQuery : function(isPlanQuery) {
				this.m_isPlanQuery = isPlanQuery;
			},
			hasMdxFlag : function() {
				return this.m_hasMdxFlag.getBoolean();
			},
			hasMdxFlagExt : function() {
				return this.m_hasMdxFlag;
			},
			setHasMdxFlag : function(hasMdxFlag) {
				this.m_hasMdxFlag = hasMdxFlag;
			},
			getPlanningModelName : function() {
				return this.m_planningModelName;
			},
			setPlanningModelName : function(planningModelName) {
				this.m_planningModelName = planningModelName;
			},
			getPlanningModelSchemaName : function() {
				return this.m_planningModelSchemaName;
			},
			setPlanningModelSchemaName : function(planningModelSchemaName) {
				this.m_planningModelSchemaName = planningModelSchemaName;
			},
			getDataCategory : function() {
				return this.m_dataCategory;
			},
			setDataCategory : function(dataCategory) {
				this.m_dataCategory = dataCategory;
			},
			getInternalType : function() {
				return this.m_internalType;
			},
			setInternalType : function(internalType) {
				this.m_internalType = internalType;
			},
			getPlanningModelDataSource : function() {
				var dataSource;
				if (sap.firefly.XStringUtils
						.isNullOrEmpty(this.m_planningModelName)) {
					return null;
				}
				dataSource = sap.firefly.QFactory2.newDataSource();
				dataSource.setType(sap.firefly.MetaObjectType.PLANNING_MODEL);
				if (sap.firefly.XStringUtils
						.isNotNullAndNotEmpty(this.m_planningModelSchemaName)) {
					dataSource.setSchemaName(this.m_planningModelSchemaName);
				}
				dataSource.setObjectName(this.m_planningModelName);
				return dataSource;
			},
			getTagValue : function(tagName) {
				return null;
			},
			getContentElement : function() {
				return this;
			},
			getContentConstant : function() {
				return null;
			},
			isNode : function() {
				return false;
			},
			toString : function() {
				var sb = sap.firefly.XStringBuffer.create();
				var fullQualifiedName = this.getFullQualifiedName();
				var planningModelDataSource;
				if (sap.firefly.XStringUtils
						.isNotNullAndNotEmpty(fullQualifiedName)) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append(fullQualifiedName);
				}
				if (sap.firefly.XStringUtils.isNotNullAndNotEmpty(this
						.getText())) {
					if (sap.firefly.XString.isEqual(this.getText(), this
							.getName())) {
						sb.append(" - ");
					} else {
						sb.append(" + ");
					}
					sb.append(this.getText());
				}
				if (sap.firefly.XStringUtils
						.isNotNullAndNotEmpty(this.m_internalType)) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append("Internal Type: ");
					sb.append(this.m_internalType);
				}
				if (this.m_isPlanQuery) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append("Is Planning Query");
				}
				planningModelDataSource = this.getPlanningModelDataSource();
				if ((planningModelDataSource !== null)
						&& (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(planningModelDataSource
										.getFullQualifiedName()))) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append(planningModelDataSource.getFullQualifiedName());
				}
				if ((this.m_baseDataSource !== null)
						&& (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(this.m_baseDataSource
										.getFullQualifiedName()))) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append("Base Data Source: ");
					sb.append(this.m_baseDataSource.getFullQualifiedName());
				}
				if (sap.firefly.XStringUtils
						.isNotNullAndNotEmpty(this.m_dataCategory)) {
					this.appendDelimiterIfNotEmpty(sb);
					sb.append("Data Category: ");
					sb.append(this.m_dataCategory);
				}
				return sb.toString();
			},
			appendDelimiterIfNotEmpty : function(buffer) {
				if (buffer.length() > 0) {
					buffer.append(" | ");
				}
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QConvenienceCommands",
				sap.firefly.QCmdAbstract,
				{
					$statics : {
						create : function(olapApplication, component) {
							var cmds = new sap.firefly.QConvenienceCommands();
							cmds.m_olapEnvironment = olapApplication;
							cmds.m_activeComponent = component;
							return cmds;
						},
						addFunction : function(calls, functionCall) {
							calls.put(functionCall.getName(), functionCall);
						}
					},
					m_activeComponent : null,
					m_olapEnvironment : null,
					m_tmxReplacementVariables : null,
					m_tmxVarPrefix : null,
					m_tmxVarPostfix : null,
					m_tmxLookupNamespace : null,
					m_tmxVarPrefixSize : 0,
					m_tmxVarPostfixSize : 0,
					releaseObject : function() {
						this.m_activeComponent = null;
						this.m_tmxReplacementVariables = null;
						this.m_tmxVarPrefix = null;
						this.m_tmxVarPostfix = null;
						this.m_tmxLookupNamespace = null;
						this.m_olapEnvironment = null;
						sap.firefly.QConvenienceCommands.$superclass.releaseObject
								.call(this);
					},
					getComponentType : function() {
						return this.getOlapComponentType();
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.CONVENIENCE_CMDS;
					},
					getSession : function() {
						return this.getApplication().getSession();
					},
					getApplication : function() {
						return this.getOlapEnv().getApplication();
					},
					getOlapEnv : function() {
						return this.m_olapEnvironment;
					},
					setActiveComponent : function(component) {
						var olapComponentType = component.getComponentType();
						if ((olapComponentType === sap.firefly.OlapComponentType.QUERY_MODEL)
								|| (olapComponentType === sap.firefly.OlapComponentType.QUERY_MANAGER)
								|| (olapComponentType === sap.firefly.OlapComponentType.OLAP_DATA_PROVIDER)) {
							this.m_activeComponent = component;
							return true;
						}
						this.m_activeComponent = null;
						return false;
					},
					getQueryManager : function() {
						var olapComponentType = this.m_activeComponent
								.getOlapComponentType();
						var dp;
						var qm;
						if (olapComponentType === sap.firefly.OlapComponentType.QUERY_MANAGER) {
							return this.m_activeComponent;
						}
						if (olapComponentType === sap.firefly.OlapComponentType.OLAP_DATA_PROVIDER) {
							dp = this.m_activeComponent;
							qm = dp.getQueryManager();
							return qm;
						}
						return null;
					},
					getQueryModel : function() {
						var olapComponentType = this.m_activeComponent
								.getOlapComponentType();
						var qm;
						var dp;
						var qm2;
						if (olapComponentType === sap.firefly.OlapComponentType.QUERY_MODEL) {
							return this.m_activeComponent;
						}
						if (olapComponentType === sap.firefly.OlapComponentType.QUERY_MANAGER) {
							qm = this.m_activeComponent;
							return qm.getQueryModel();
						}
						if (olapComponentType === sap.firefly.OlapComponentType.OLAP_DATA_PROVIDER) {
							dp = this.m_activeComponent;
							qm2 = dp.getQueryManager();
							if (qm2 !== null) {
								return qm2.getQueryModel();
							}
						}
						return null;
					},
					getDataSource : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getDataSource();
					},
					getModelCapabilities : function() {
						return this.getQueryModel().getModelCapabilities();
					},
					getDimensionsContainingValueType : function(valueType) {
						var dimList = sap.firefly.XList.create();
						var dimensions = this.getQueryModel().getDimensions();
						var count = dimensions.getDimensionCount();
						var idxDim;
						var dim;
						var attributesOfDimList;
						var idxField;
						var attribute;
						for (idxDim = 0; idxDim < count; idxDim++) {
							dim = dimensions.getDimensionByIndex(idxDim);
							attributesOfDimList = dim.getFields();
							for (idxField = 0; idxField < attributesOfDimList
									.size(); idxField++) {
								attribute = attributesOfDimList
										.getFieldByIndex(idxField);
								if (attribute.getValueType() === valueType) {
									if (dimList.contains(dim) === false) {
										dimList.add(dim);
										break;
									}
								}
							}
						}
						return dimList;
					},
					getFirstDimensionWithType : function(dimensionType) {
						var dimensions = this.getQueryModel().getDimensions();
						var i;
						var dimension;
						if (dimensions === null) {
							return null;
						}
						for (i = 0; i < dimensions.size(); i++) {
							dimension = dimensions.get(i);
							if (dimension.getDimensionType() === dimensionType) {
								return dimension;
							}
						}
						return null;
					},
					checkAndReplace : function(name) {
						if (this.m_tmxReplacementVariables === null) {
							return name;
						}
						return this.m_tmxReplacementVariables
								.getStringByNameWithDefault(name, name);
					},
					getDimensionNames : function() {
						var queryModel = this.getQueryModel();
						var dimensions = queryModel.getDimensions();
						var dimensionNames = sap.firefly.XListOfString.create();
						var namesIndex;
						for (namesIndex = 0; namesIndex < dimensions.size(); namesIndex++) {
							dimensionNames.add(dimensions.get(namesIndex)
									.getName());
						}
						return dimensionNames;
					},
					getDimension : function(dimName) {
						var value = this.checkAndReplace(dimName);
						return this.getQueryModel().getDimensionByName(value);
					},
					getDimensionAccessor : function() {
						return this.getQueryModel().getDimensionAccessor();
					},
					select : function(sigSelExpression) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					resolveDimension : function(dimType, dimName) {
						var resolvedDimName = this.resolveDimName(dimType,
								dimName);
						var dimension = this.getDimensionAccessor()
								.getDimensionByName(resolvedDimName);
						return dimension;
					},
					resolveDimName : function(dimType, dimName) {
						var theDimName = dimName;
						var dimension;
						if (theDimName === null) {
							if (dimType !== null) {
								dimension = this.getDimensionAccessor()
										.getDimensionByType(dimType);
								if (dimension !== null) {
									theDimName = dimension.getName();
								}
							}
						} else {
							theDimName = this.checkAndReplace(theDimName);
						}
						return theDimName;
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterChangedListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSenderBindings : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getReceiverBindings : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					newSenderBinding : function(type) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					newReceiverBinding : function(type) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					reset : function() {
						var queryModel = this.getQueryModel();
						var selector;
						var selectionStateContainer;
						var selectionVisibilityContainer;
						var measureStructure;
						var accountDimension;
						var allDimensions;
						var i;
						var dimension;
						var allPreQueries;
						var j;
						var preQuery;
						var conditionManager;
						this.clearAxis(sap.firefly.AxisType.ROWS);
						this.clearAxis(sap.firefly.AxisType.COLUMNS);
						selector = queryModel.getSelector();
						selectionStateContainer = selector
								.getSelectionStateContainer();
						if (selectionStateContainer.isLocked() === false) {
							if (selectionStateContainer.isCartesianProduct()) {
								selectionStateContainer.getCartesianProduct()
										.clear();
							} else {
								if (selectionStateContainer
										.isComplexSelection()) {
									selectionStateContainer
											.setComplexSelection(null);
								}
							}
						}
						if (selector.supportsSelectionVisibilityContainer()) {
							selectionVisibilityContainer = selector
									.getSelectionVisibilityContainer();
							if (selectionVisibilityContainer.isLocked() === false) {
								if (selectionVisibilityContainer
										.isCartesianProduct()) {
									selectionVisibilityContainer
											.getCartesianProduct().clear();
								} else {
									if (selectionVisibilityContainer
											.isComplexSelection()) {
										selectionVisibilityContainer
												.setComplexSelection(null);
									}
								}
							}
						}
						measureStructure = queryModel.getMeasureDimension();
						if (measureStructure !== null) {
							measureStructure.removeCustomMembers();
						}
						accountDimension = queryModel
								.getDimensionByType(sap.firefly.DimensionType.ACCOUNT);
						if (accountDimension !== null) {
							accountDimension.removeCustomMembers();
						}
						allDimensions = queryModel.getDimensions();
						for (i = allDimensions.size() - 1; i >= 0; i--) {
							dimension = allDimensions.get(i);
							if (dimension.getDimensionType() === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
								queryModel
										.removeCalculatedDimensionByName(dimension
												.getName());
							}
						}
						allPreQueries = queryModel.getPreQueries();
						if (allPreQueries !== null) {
							for (j = allPreQueries.size() - 1; j >= 0; j--) {
								preQuery = allPreQueries.get(j);
								queryModel.removePreQueryByName(preQuery
										.getName());
							}
						}
						queryModel.getDrillManager()
								.removeAllContextDrillOperations();
						conditionManager = queryModel.getConditionManager();
						if (conditionManager !== null) {
							conditionManager.clear();
						}
						queryModel.getExceptionManager().clear();
						queryModel.getSortingManager().getSortingOperations()
								.clear();
					},
					resetToDefault : function() {
						var queryModel = this.getQueryModel();
						var importer = sap.firefly.QInAImportFactory
								.createForData(this.getApplication(),
										queryModel.getProtocolCapabilities()
												.getIntersectCapabilities());
						importer.importQueryModel(queryModel
								.getServerBaseSerialization(), queryModel);
					},
					addFilter : function(filterLayer, dimType, dimName,
							presentationType, fieldName, lowValue, highValue,
							comparisonOperator) {
						var dimension = this.resolveDimension(dimType, dimName);
						var field;
						var selectionStateContainer;
						var memberSelection;
						var element;
						var numberOfParameters;
						var theLowValue;
						var theHighValue;
						var valueType;
						var valueAccess;
						if (dimension !== null) {
							field = this.resolveField(dimension,
									presentationType, fieldName);
							if (field !== null) {
								if (field.isFilterable()) {
									selectionStateContainer = this
											.getSelectionContainer(filterLayer);
									memberSelection = selectionStateContainer
											.getCartesianListByField(field);
									if (memberSelection !== null) {
										if (memberSelection.isEmpty()) {
											memberSelection.setField(field);
										}
										if (memberSelection.getField() === field) {
											memberSelection.queueEventing();
											element = memberSelection
													.addNewCartesianElement();
											numberOfParameters = comparisonOperator
													.getNumberOfParameters();
											theLowValue = null;
											theHighValue = null;
											if (numberOfParameters > 0) {
												valueType = field
														.getValueType();
												valueAccess = sap.firefly.XValueAccess
														.createWithType(valueType);
												valueAccess
														.parseStringValue(lowValue);
												theLowValue = valueAccess
														.getValue();
												if (numberOfParameters === 1) {
													element
															.configureSingleParameterExpression(
																	theLowValue,
																	comparisonOperator);
												} else {
													if (numberOfParameters > 1) {
														valueAccess
																.parseStringValue(highValue);
														theHighValue = valueAccess
																.getValue();
														element
																.configureDoubleParameterExpression(
																		theLowValue,
																		theHighValue,
																		comparisonOperator);
													}
												}
											}
											if (dimension.isHierarchyActive()) {
												memberSelection
														.setHierarchyName(dimension
																.getHierarchyName());
											}
											memberSelection.resumeEventing();
											return element;
										}
									}
								}
							}
						}
						return null;
					},
					addIntervallFilterByValues : function(dimensionName,
							lowValue, highValue) {
						var dimension = this.getDimension(dimensionName);
						var field;
						if (dimension === null) {
							return null;
						}
						field = dimension.getKeyField();
						return this.addFilterByField(field, lowValue,
								highValue, null,
								sap.firefly.ComparisonOperator.BETWEEN, false);
					},
					addWithinDistanceFilter : function(dimension, fieldName,
							point, distance, unit) {
						var field = dimension.getFieldByName(fieldName);
						return this
								.addFilterByField(
										field,
										point,
										sap.firefly.XDoubleValue
												.create(distance),
										sap.firefly.XStringValue.create(unit),
										sap.firefly.SpatialComparisonOperator.WITHIN_DISTANCE,
										false);
					},
					addSingleNodeFilter : function(node, comparisonOperator) {
						var selectionContainer = this
								.getSelectionContainer(sap.firefly.FilterLayer.DYNAMIC);
						return selectionContainer.addSingleNodeSelection(node,
								comparisonOperator);
					},
					addSingleMemberFilter : function(filterLayer, dimType,
							dimName, memberName, comparisonOperator) {
						var dimNameResolved = this.resolveDimName(dimType,
								dimName);
						var selectionContainer = this
								.getSelectionContainer(filterLayer);
						var theMemberName = this.checkAndReplace(memberName);
						return selectionContainer
								.addSingleMemberSelectionByName(
										dimNameResolved, theMemberName,
										comparisonOperator);
					},
					addDoubleFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var field = this.getFieldFromDimension(dimensionName,
								fieldName);
						return this.addDoubleFilterByField(field, filterValue,
								comparisonOperator);
					},
					addDoubleFilterByField : function(field, filterValue,
							comparisonOperator) {
						return this.addFilterByField(field,
								sap.firefly.XDoubleValue.create(filterValue),
								null, null, comparisonOperator, false);
					},
					clearSingleMemberFilterByName : function(dimName,
							memberName, comparisonOperator) {
						var selectionStateContainer = this
								.getSelectionContainer(sap.firefly.FilterLayer.DYNAMIC);
						selectionStateContainer
								.removeSingleMemberSelectionByName(dimName,
										memberName, comparisonOperator);
						return this;
					},
					addStringFilterByName : function(dimensionName, fieldName,
							filterValue, comparisonOperator) {
						var field = this.getFieldFromDimension(dimensionName,
								fieldName);
						return this.addStringFilterByField(field, filterValue,
								comparisonOperator);
					},
					addStringFilterByPresentation : function(dimensionName,
							presentationType, filterValue, comparisonOperator) {
						var dimension = this.getDimension(dimensionName);
						var field;
						if (dimension === null) {
							return null;
						}
						field = dimension.getFirstFieldByType(presentationType);
						return this.addStringFilterByField(field, filterValue,
								comparisonOperator);
					},
					addStringFilterByFieldNameAndOperator : function(
							dimensionName, fieldName, filterValue,
							comparisonOperator) {
						return this.addStringFilterByName(dimensionName,
								fieldName, filterValue, comparisonOperator);
					},
					addStringFilterByField : function(field, filterValue,
							comparisonOperator) {
						return this.addFilterByField(field,
								sap.firefly.XStringValue.create(filterValue),
								null, null, comparisonOperator, false);
					},
					addFilterByFieldAndValue : function(field, filterValue,
							comparisonOperator) {
						return this.addFilterByField(field, filterValue, null,
								null, comparisonOperator, false);
					},
					addIntFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var field = this.getFieldFromDimension(dimensionName,
								fieldName);
						return this.addIntFilterByField(field, filterValue,
								comparisonOperator);
					},
					addIntFilterByField : function(field, filterValue,
							comparisonOperator) {
						return this.addFilterByField(field,
								sap.firefly.XIntegerValue.create(filterValue),
								null, null, comparisonOperator, false);
					},
					addLongFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var field = this.getFieldFromDimension(dimensionName,
								fieldName);
						return this.addLongFilterByField(field, filterValue,
								comparisonOperator);
					},
					addLongFilterByField : function(field, filterValue,
							comparisonOperator) {
						return this.addFilterByField(field,
								sap.firefly.XLongValue.create(filterValue),
								null, null, comparisonOperator, false);
					},
					clearVariableSelections : function(dynamicFilter,
							inspectLists) {
						var cartesianProduct = dynamicFilter
								.getCartesianProduct();
						var filterIdsFromVariables;
						var idxProd;
						var cartesianList;
						var idxList;
						var cartesianElement;
						if (cartesianProduct === null) {
							return;
						}
						filterIdsFromVariables = (dynamicFilter)
								.getFilterIdsFromVariables();
						if (sap.firefly.XCollectionUtils
								.hasElements(filterIdsFromVariables)) {
							idxProd = 0;
							while (idxProd < cartesianProduct.size()) {
								cartesianList = cartesianProduct
										.getCartesianChild(idxProd);
								if (filterIdsFromVariables
										.contains(cartesianList.getUniqueId())) {
									if (inspectLists) {
										idxList = 0;
										while (idxList < cartesianList.size()) {
											cartesianElement = cartesianList
													.getOp(idxList);
											if (filterIdsFromVariables
													.contains(cartesianElement
															.getUniqueId())) {
												idxList++;
											} else {
												cartesianList.removeAt(idxList);
											}
										}
									}
									idxProd++;
								} else {
									cartesianProduct.removeAt(idxProd);
								}
							}
						} else {
							cartesianProduct.clear();
						}
					},
					clearFiltersByDimensionExt : function(filterLayer, dimType,
							dimName) {
						var theDimName = this.resolveDimName(dimType, dimName);
						var filterExpression;
						if (theDimName !== null) {
							if (filterLayer !== null) {
								filterExpression = this
										.getSelectionContainer(filterLayer);
								this.clearSelectionsInContainerByDimension(
										theDimName, filterExpression);
							}
						}
						return this;
					},
					clearAllFiltersExt : function(filterLayer,
							filterScopeVariables) {
						var selectionContainer;
						if (filterLayer === sap.firefly.FilterLayer.ALL) {
							this.clearAllFiltersExt(
									sap.firefly.FilterLayer.DYNAMIC,
									filterScopeVariables);
							this.clearAllFiltersExt(
									sap.firefly.FilterLayer.VISIBILITY,
									filterScopeVariables);
						} else {
							selectionContainer = this
									.getSelectionContainer(filterLayer);
							if (filterScopeVariables === sap.firefly.FilterScopeVariables.IGNORE) {
								this._clearAllSelections(selectionContainer);
							} else {
								if (filterScopeVariables === sap.firefly.FilterScopeVariables.NOT_AFFECTED_BY_VARIABLES) {
									this.clearVariableSelections(
											selectionContainer, false);
								} else {
									if (filterScopeVariables === sap.firefly.FilterScopeVariables.NOT_CREATED_BY_VARIABLES) {
										this.clearVariableSelections(
												selectionContainer, true);
									}
								}
							}
						}
						return this;
					},
					_clearAllSelections : function(selectionContainer) {
						var cartesianProduct;
						var complexSelectionRoot;
						if (selectionContainer === null) {
							return;
						}
						cartesianProduct = selectionContainer
								.getCartesianProduct();
						if (cartesianProduct !== null) {
							cartesianProduct.clear();
						}
						complexSelectionRoot = selectionContainer
								.getComplexSelectionRoot();
						if (complexSelectionRoot !== null) {
							selectionContainer.setComplexSelection(null);
							complexSelectionRoot.releaseObject();
						}
					},
					clearSelectionsInContainerByDimension : function(dimName,
							container) {
						var cartesianProduct = container.getCartesianProduct();
						var complexSelectionRoot;
						var componentType;
						var filterOp;
						var complexCartesianList;
						var memberSelection;
						if (cartesianProduct === null) {
							complexSelectionRoot = container
									.getComplexSelectionRoot();
							if (complexSelectionRoot !== null) {
								componentType = complexSelectionRoot
										.getComponentType();
								if (componentType === sap.firefly.FilterComponentType.OPERATION) {
									filterOp = complexSelectionRoot;
									if (sap.firefly.XString.isEqual(dimName,
											filterOp.getDimension().getName())) {
										container.setComplexSelection(null);
									}
								} else {
									if ((componentType === sap.firefly.FilterComponentType.AND)
											|| (componentType === sap.firefly.FilterComponentType.OR)) {
										this
												.removeComplexSelectionByDimensionName(
														complexSelectionRoot,
														dimName);
									} else {
										if (componentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
											complexCartesianList = complexSelectionRoot;
											if (sap.firefly.XString
													.isEqual(
															complexCartesianList
																	.getDimension()
																	.getName(),
															dimName)) {
												complexCartesianList.clear();
											}
										}
									}
								}
							}
						} else {
							memberSelection = cartesianProduct
									.getCartesianListByDimensionName(dimName);
							if (memberSelection !== null) {
								memberSelection.clear();
								cartesianProduct.removeByDimensionName(dimName);
							}
						}
					},
					removeComplexSelectionByDimensionName : function(
							filterElement, dimensionName) {
						var componentType = filterElement.getComponentType();
						var filterOp;
						var filterAlgebra;
						var idxFilterOp;
						var iqFilterElement;
						var removeComplexSelectionByDimensionName;
						var complexCartesianList;
						if (componentType === sap.firefly.FilterComponentType.OPERATION) {
							filterOp = filterElement;
							if (sap.firefly.XString.isEqual(dimensionName,
									filterOp.getDimension().getName())) {
								return true;
							}
						} else {
							if ((componentType === sap.firefly.FilterComponentType.AND)
									|| (componentType === sap.firefly.FilterComponentType.OR)) {
								filterAlgebra = filterElement;
								idxFilterOp = 0;
								while (idxFilterOp < filterAlgebra.size()) {
									iqFilterElement = filterAlgebra
											.get(idxFilterOp);
									removeComplexSelectionByDimensionName = this
											.removeComplexSelectionByDimensionName(
													iqFilterElement,
													dimensionName);
									if (removeComplexSelectionByDimensionName) {
										filterAlgebra.removeAt(idxFilterOp);
									} else {
										idxFilterOp++;
									}
								}
							} else {
								if (componentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
									complexCartesianList = filterElement;
									if (sap.firefly.XString.isEqual(
											complexCartesianList.getDimension()
													.getName(), dimensionName)) {
										return true;
									}
								}
							}
						}
						return false;
					},
					addDisjointGeometryFilter : function(dimension, fieldName,
							geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this.addFilterByField(field, geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.DISJOINT,
								false);
					},
					addOverlapsGeometryFilter : function(dimension, fieldName,
							geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this.addFilterByField(field, geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.OVERLAPS,
								false);
					},
					addTouchesGeometryFilter : function(dimension, fieldName,
							geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this.addFilterByField(field, geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.TOUCHES,
								false);
					},
					addWithinGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this.addFilterByField(dimension
								.getFieldByName(fieldName), geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.WITHIN,
								false);
					},
					addFilterByField : function(field, firstValue, secondValue,
							thirdValue, comparisonOperator, isVisibility) {
						var filterLayer;
						var dimension;
						var selectionStateContainer;
						var memberSelection;
						var element;
						var numberOfParameters;
						if ((field === null) || !field.isFilterable()) {
							return null;
						}
						if ((isVisibility)
								&& (this.getQueryModel().getSelector()
										.supportsSelectionVisibilityContainer() === false)) {
							return null;
						}
						if (isVisibility === true) {
							filterLayer = sap.firefly.FilterLayer.VISIBILITY;
						} else {
							filterLayer = sap.firefly.FilterLayer.DYNAMIC;
						}
						dimension = field.getDimension();
						selectionStateContainer = this
								.getSelectionContainer(filterLayer);
						memberSelection = selectionStateContainer
								.getCartesianListByField(field);
						if (memberSelection !== null) {
							if (memberSelection.isEmpty()) {
								memberSelection.setField(field);
							} else {
								if (memberSelection.getField() !== field) {
									return null;
								}
							}
							memberSelection.queueEventing();
							element = memberSelection.addNewCartesianElement();
							numberOfParameters = comparisonOperator
									.getNumberOfParameters();
							if (numberOfParameters === 3) {
								element.configureTripleParameterExpression(
										firstValue, secondValue, thirdValue,
										comparisonOperator);
							} else {
								element.configureDoubleParameterExpression(
										firstValue, secondValue,
										comparisonOperator);
							}
							if (dimension.isHierarchyActive()) {
								memberSelection.setHierarchyName(dimension
										.getHierarchyName());
							}
							memberSelection.resumeEventing();
						}
						return memberSelection;
					},
					addIntersectsRectFilter : function(dimension, fieldName,
							lowerLeft, upperRight) {
						var field = dimension.getFieldByName(fieldName);
						return this
								.addFilterByField(
										field,
										lowerLeft,
										upperRight,
										null,
										sap.firefly.SpatialComparisonOperator.INTERSECTS_RECT,
										false);
					},
					addContainsGeometryFilter : function(dimension, fieldName,
							geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this.addFilterByField(field, geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.CONTAINS,
								false);
					},
					addIntersectsGeometryFilter : function(dimension,
							fieldName, geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this
								.addFilterByField(
										field,
										geometry,
										null,
										null,
										sap.firefly.SpatialComparisonOperator.INTERSECTS,
										false);
					},
					addCoversGeometryFilter : function(dimension, fieldName,
							geometry) {
						var field = dimension.getFieldByName(fieldName);
						return this.addFilterByField(field, geometry, null,
								null,
								sap.firefly.SpatialComparisonOperator.COVERS,
								false);
					},
					addCrossesLinestringFilter : function(dimension, fieldName,
							geometry) {
						var field;
						if ((geometry.getValueType() === sap.firefly.XValueType.LINE_STRING)
								|| (geometry.getValueType() === sap.firefly.XValueType.MULTI_LINE_STRING)) {
							field = dimension.getFieldByName(fieldName);
							return this
									.addFilterByField(
											field,
											geometry,
											null,
											null,
											sap.firefly.SpatialComparisonOperator.COVERS,
											false);
						}
						return null;
					},
					setSearchTerm : function(searchTerm) {
						var globalLiteralFilter = this.getQueryModel()
								.getSelector().getSelectionStateContainer()
								.getGlobalLiteralFilter();
						globalLiteralFilter.setFilterValue(searchTerm);
						return this;
					},
					getSelectionContainer : function(filterLayer) {
						var selector = this.getQueryModel().getSelector();
						if (filterLayer === sap.firefly.FilterLayer.VISIBILITY) {
							return selector.getSelectionVisibilityContainer();
						}
						return selector.getSelectionStateContainer();
					},
					getFilterById : function(uniqueId) {
						return this.getSelectionContainer(
								sap.firefly.FilterLayer.DYNAMIC).getFilterById(
								uniqueId);
					},
					clearFilterByIdExt : function(filterLayer, uniqueId) {
						var selectionContainer;
						if (filterLayer === sap.firefly.FilterLayer.ALL) {
							this.clearFilterByIdExt(
									sap.firefly.FilterLayer.DYNAMIC, uniqueId);
							this.clearFilterByIdExt(
									sap.firefly.FilterLayer.VISIBILITY,
									uniqueId);
						} else {
							selectionContainer = this
									.getSelectionContainer(filterLayer);
							selectionContainer.removeFilterById(uniqueId);
						}
						return this;
					},
					getVisibilityFilterById : function(uniqueId) {
						return this.getSelectionContainer(
								sap.firefly.FilterLayer.VISIBILITY)
								.getFilterById(uniqueId);
					},
					setVariable : function(name, value) {
						var variable = this.getQueryManager().getVariables()
								.getByKey(name);
						var variableType;
						var hnv;
						var hnodev;
						var dimMember;
						var simpleType;
						if (variable !== null) {
							if (variable.isInputEnabled()) {
								variableType = variable.getVariableType();
								if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
									hnv = variable;
									hnv.setValueByString(value);
								} else {
									if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
										hnodev = variable;
										hnodev.setValueByString(value);
									} else {
										if (variableType === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE) {
											dimMember = variable;
											dimMember.setValueByString(value);
										} else {
											if (variableType === sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE) {
												simpleType = variable;
												simpleType
														.setValueByString(value);
											}
										}
									}
								}
							}
						}
						return this;
					},
					submitVariables : function() {
						return this.getQueryManager().submitVariables(
								sap.firefly.SyncType.BLOCKING, null, null);
					},
					getVariable : function(name) {
						var variables = this.getQueryManager().getQueryModel()
								.getVariableContainer().getVariables();
						return variables.getByKey(name);
					},
					getVariablesNameAndText : function() {
						var map = sap.firefly.XHashMapOfStringByString.create();
						var variables = this.getQueryManager().getVariables();
						var variableSize = variables.size();
						var i;
						var variable;
						for (i = 0; i < variableSize; i++) {
							variable = variables.get(i);
							map.put(variable.getName(), variable.getText());
						}
						return map;
					},
					getVariableContainer : function() {
						return this.getQueryModel().getVariableContainer();
					},
					switchAxes : function() {
						var queryModel = this.getQueryModel();
						var rowsAxis;
						var rows;
						var colsAxis;
						var cols;
						var i;
						var j;
						if (queryModel !== null) {
							rowsAxis = queryModel.getRowsAxis();
							rows = rowsAxis.createListCopy();
							colsAxis = queryModel.getColumnsAxis();
							cols = colsAxis.createListCopy();
							for (i = 0; i < rows.size(); i++) {
								colsAxis.add(rows.get(i));
							}
							for (j = 0; j < cols.size(); j++) {
								rowsAxis.add(cols.get(j));
							}
						}
						return this;
					},
					moveDimensionExt : function(dimType, dimName, targetAxis,
							index) {
						var dimension = this.resolveDimension(dimType, dimName);
						var queryModel;
						var axis;
						if (dimension !== null) {
							queryModel = this.getQueryModel();
							axis = queryModel.getAxis(targetAxis);
							if (axis !== null) {
								if (index === -1) {
									axis.add(dimension);
								} else {
									axis.insert(index, dimension);
								}
							}
						}
						return dimension;
					},
					getFirstGISDimension : function() {
						var dimList = this
								.getDimensionsContainingValueType(sap.firefly.XValueType.POINT);
						if (dimList.isEmpty()) {
							dimList = this
									.getDimensionsContainingValueType(sap.firefly.XValueType.MULTI_POINT);
						}
						if (dimList.isEmpty()) {
							dimList = this
									.getDimensionsContainingValueType(sap.firefly.XValueType.POLYGON);
						}
						if (dimList.isEmpty()) {
							dimList = this
									.getDimensionsContainingValueType(sap.firefly.XValueType.MULTI_POLYGON);
						}
						if (dimList.isEmpty()) {
							dimList = this
									.getDimensionsContainingValueType(sap.firefly.XValueType.LINE_STRING);
						}
						if (dimList.isEmpty()) {
							dimList = this
									.getDimensionsContainingValueType(sap.firefly.XValueType.MULTI_LINE_STRING);
						}
						if (dimList.hasElements()) {
							return dimList.get(0);
						}
						return null;
					},
					getGISAttributesForDimension : function(dim) {
						var attrList = sap.firefly.XList.create();
						var attributesOfDimList = dim.getFields();
						var idxField;
						var attribute;
						for (idxField = 0; idxField < attributesOfDimList
								.size(); idxField++) {
							attribute = attributesOfDimList
									.getFieldByIndex(idxField);
							if (attribute.getValueType().isSpatial()) {
								attrList.add(attribute);
							}
						}
						return attrList;
					},
					clearAxis : function(targetAxis) {
						var queryModel = this.getQueryModel();
						queryModel.getAxis(targetAxis).clear();
						return this;
					},
					addAllDimensions : function() {
						var queryModel = this.getQueryModel();
						var dimensions;
						var dimensionNames;
						var i;
						var dimensionName;
						var dimension;
						this.clearAxis(sap.firefly.AxisType.ROWS);
						this.clearAxis(sap.firefly.AxisType.COLUMNS);
						dimensions = queryModel.getDimensions();
						dimensionNames = this.getDimensionNames();
						dimensionNames
								.sortByDirection(sap.firefly.XSortDirection.ASCENDING);
						for (i = 0; i < dimensionNames.size(); i++) {
							dimensionName = dimensionNames.get(i);
							dimension = dimensions.getByKey(dimensionName);
							if (dimension.isSelectable() === false) {
								continue;
							}
							if (sap.firefly.XString.isEqual(
									dimension.getName(), "$$All$$")) {
								continue;
							}
							if (sap.firefly.XString.startsWith(dimension
									.getName(), "$$")) {
								continue;
							}
							if (dimension.isMeasureStructure()) {
								if (dimension
										.isAxisSupported(sap.firefly.AxisType.COLUMNS)) {
									this.moveDimensionToColumns(dimensionName);
								}
							} else {
								if (dimension
										.isAxisSupported(sap.firefly.AxisType.ROWS)) {
									this.moveDimensionToRows(dimensionName);
								}
							}
						}
						return this;
					},
					setDimensionsAndMeasures : function(dimNames, measures) {
						var dimIdx;
						var dimension;
						var selectionStateContainer;
						var measureIdx;
						var measure;
						this.clearAxis(sap.firefly.AxisType.COLUMNS);
						this.clearAxis(sap.firefly.AxisType.ROWS);
						for (dimIdx = 0; dimIdx < dimNames.size(); dimIdx++) {
							dimension = dimNames.get(dimIdx);
							this.moveDimensionToRows(dimension);
						}
						selectionStateContainer = this
								.getSelectionContainer(sap.firefly.FilterLayer.DYNAMIC);
						if (selectionStateContainer.isCartesianProduct()) {
							selectionStateContainer.getCartesianProduct()
									.clear();
						}
						for (measureIdx = 0; measureIdx < measures.size(); measureIdx++) {
							measure = measures.get(measureIdx);
							this.addMeasure(measure);
						}
						return this;
					},
					setDimensionAndMeasure : function(dimName, measure) {
						var dimensions = sap.firefly.XListOfString.create();
						var measures;
						dimensions.add(dimName);
						measures = sap.firefly.XListOfString.create();
						measures.add(measure);
						this.setDimensionsAndMeasures(dimensions, measures);
						return this;
					},
					addAttributeToResultSet : function(dimName, attributeName) {
						var dimension = this.getDimension(dimName);
						var attributeContainer;
						var attribute;
						var resultSetAttributes;
						if (dimension !== null) {
							attributeContainer = dimension
									.getAttributeContainer();
							attribute = attributeContainer
									.getAttributeByName(attributeName);
							if (attribute !== null) {
								resultSetAttributes = attributeContainer
										.getResultSetAttributes();
								resultSetAttributes.add(attribute);
								return attribute;
							}
						}
						return null;
					},
					removeAttributeFromResultSet : function(dimName,
							attributeName) {
						var dimension = this.getDimension(dimName);
						var attributeContainer;
						var attribute;
						var resultSetAttributes;
						if (dimension !== null) {
							attributeContainer = dimension
									.getAttributeContainer();
							attribute = attributeContainer
									.getAttributeByName(attributeName);
							if (attribute !== null) {
								resultSetAttributes = attributeContainer
										.getResultSetAttributes();
								resultSetAttributes.removeElement(attribute);
								return attribute;
							}
						}
						return null;
					},
					removeField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var dimension = this.resolveDimension(dimType, dimName);
						var field = null;
						var resolvedFieldName;
						var fields;
						if (dimension !== null) {
							resolvedFieldName = this.resolveFieldName(dimension
									.getName(), presentationType, fieldName);
							field = dimension.getFieldByName(resolvedFieldName);
							fields = this.getFieldList(dimension, contextType);
							if (fields.isFixed() === false) {
								if (field !== null) {
									fields.removeElement(field);
								}
							}
						}
						return field;
					},
					addField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var dimension = this.resolveDimension(dimType, dimName);
						var field = null;
						var resolvedFieldName;
						var fields;
						if (dimension !== null) {
							resolvedFieldName = this.resolveFieldName(dimension
									.getName(), presentationType, fieldName);
							field = dimension.getFieldByName(resolvedFieldName);
							fields = this.getFieldList(dimension, contextType);
							if (fields.isFixed() === false) {
								if (field !== null) {
									fields.add(field);
								}
							}
						}
						return field;
					},
					setField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var dimension = this.resolveDimension(dimType, dimName);
						var field = null;
						var resolvedFieldName;
						var fields;
						if (dimension !== null) {
							resolvedFieldName = this.resolveFieldName(dimension
									.getName(), presentationType, fieldName);
							field = dimension.getFieldByName(resolvedFieldName);
							fields = this.getFieldList(dimension, contextType);
							if (fields.isFixed() === false) {
								if (field !== null) {
									fields.queueEventing();
									fields.clear();
									fields.add(field);
									fields.resumeEventing();
								}
							}
						}
						return field;
					},
					clearFields : function(dimType, dimName, contextType) {
						var dimension = this.getDimension(dimName);
						var fields;
						if (dimension !== null) {
							fields = this.getFieldList(dimension, contextType);
							fields.clear();
						}
						return this;
					},
					getFieldList : function(dimension, contextType) {
						var fieldLayoutType = dimension.getFieldLayoutType();
						var fields = null;
						if (fieldLayoutType === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
							fields = dimension.getMainAttribute().getFieldsExt(
									contextType);
						} else {
							fields = dimension.getFieldsExt(contextType);
						}
						return fields;
					},
					containsField : function(dimName, fieldName, contextType) {
						var dimension = this.getDimension(dimName);
						var field;
						var fieldList;
						if (dimension !== null) {
							field = dimension.getFieldByName(fieldName);
							if (field !== null) {
								if (contextType === sap.firefly.QContextType.RESULT_SET) {
									fieldList = dimension.getResultSetFields();
								} else {
									fieldList = dimension.getSelectorFields();
								}
								return fieldList.contains(field);
							}
						}
						return false;
					},
					containsResultSetFieldByType : function(dimName,
							presentationType) {
						var dimension = this.getDimension(dimName);
						var attribute;
						if (dimension === null) {
							return false;
						}
						attribute = dimension
								.getFirstFieldByType(presentationType);
						if (attribute === null) {
							return false;
						}
						return this.containsResultSetField(dimName, attribute
								.getName());
					},
					containsSelectorFieldByType : function(dimName,
							presentationType) {
						var dimension = this.getDimension(dimName);
						var attribute;
						if (dimension === null) {
							return false;
						}
						attribute = dimension
								.getFirstFieldByType(presentationType);
						if (attribute === null) {
							return false;
						}
						return this.containsSelectorField(dimName, attribute
								.getName());
					},
					addAllFieldsOfDimensionToModelArea : function(dimName,
							contextType) {
						if (contextType === sap.firefly.QContextType.RESULT_SET) {
							this.addAllFieldsToResultSetOrToSelector(dimName,
									true);
						} else {
							if (contextType === sap.firefly.QContextType.SELECTOR) {
								this.addAllFieldsToResultSetOrToSelector(
										dimName, false);
							}
						}
						return this;
					},
					addAllFieldsToResultSetOrToSelector : function(
							dimensionName, isResultSet) {
						var dimension = this.getDimension(dimensionName);
						var fields;
						var fieldNames;
						var hasHierarchy;
						var i;
						var fieldName;
						var field;
						var usageType;
						var fieldList;
						if (dimension === null) {
							return;
						}
						fields = dimension.getFields();
						fieldNames = fields.getKeysAsReadOnlyListOfString();
						hasHierarchy = dimension.isHierarchyAssignedAndActive();
						for (i = 0; i < fieldNames.size(); i++) {
							fieldName = fieldNames.get(i);
							field = fields.getByKey(fieldName);
							usageType = field.getUsageType();
							if (hasHierarchy
									&& (usageType === sap.firefly.FieldUsageType.FLAT)) {
								continue;
							}
							if (usageType === sap.firefly.FieldUsageType.HIERARCHY) {
								continue;
							}
							if (isResultSet) {
								fieldList = dimension.getResultSetFields();
							} else {
								fieldList = dimension.getSelectorFields();
							}
							if (fieldList.isFixed() === false) {
								fieldList.add(field);
							}
						}
					},
					getField : function(name) {
						var value = this.checkAndReplace(name);
						return this.getQueryModel().getFieldByName(value);
					},
					addAllFieldsToModelArea : function(contextType) {
						var queryModel = this.getQueryModel();
						var dimensions = queryModel.getDimensions();
						var i;
						var dimension;
						var dimName;
						for (i = 0; i < dimensions.size(); i++) {
							dimension = dimensions.get(i);
							if (dimension.isSelectable() === false) {
								continue;
							} else {
								if (sap.firefly.XString.startsWith(dimension
										.getName(), "$$")) {
									continue;
								} else {
									dimName = dimension.getName();
									if (contextType === sap.firefly.QContextType.SELECTOR) {
										this.addAllFieldsToSelector(dimName);
									} else {
										if (contextType === sap.firefly.QContextType.RESULT_SET) {
											this
													.addAllFieldsToResultSet(dimName);
										}
									}
								}
							}
						}
						return this;
					},
					clearAllFieldsFromModelArea : function(contextType) {
						var queryModel = this.getQueryModel();
						var dimensions = queryModel.getDimensions();
						var i;
						var dimension;
						var dimName;
						for (i = 0; i < dimensions.size(); i++) {
							dimension = dimensions.get(i);
							dimName = dimension.getName();
							if (contextType === sap.firefly.QContextType.RESULT_SET) {
								this.clearAllResultSetFields(dimName);
							} else {
								if (contextType === sap.firefly.QContextType.SELECTOR) {
									this.clearAllSelectorFields(dimName);
								}
							}
						}
						return this;
					},
					resolveField : function(dimension, presentationType,
							fieldName) {
						var field = null;
						var theFieldName;
						if (fieldName === null) {
							if (presentationType !== null) {
								field = dimension
										.getFieldByPresentationType(presentationType);
							} else {
								field = dimension.getKeyField();
							}
						} else {
							theFieldName = this.checkAndReplace(fieldName);
							field = dimension.getFieldByName(theFieldName);
						}
						return field;
					},
					resolveFieldName : function(dimName, presentationType,
							fieldName) {
						var theFieldName = fieldName;
						var dimension;
						var field;
						if (fieldName === null) {
							if ((presentationType !== null)
									&& (dimName !== null)) {
								dimension = this.getDimensionAccessor()
										.getDimensionByName(dimName);
								if (dimension !== null) {
									field = dimension
											.getFieldByPresentationType(presentationType);
									if (field !== null) {
										theFieldName = field.getName();
									} else {
										theFieldName = null;
									}
								}
							}
						} else {
							theFieldName = this.checkAndReplace(fieldName);
						}
						return theFieldName;
					},
					getFieldAccessorSingle : function() {
						return null;
					},
					getFieldFromDimension : function(dimensionName, fieldName) {
						var dimension = this.getDimension(dimensionName);
						if (dimension === null) {
							return null;
						}
						return dimension.getFieldByName(fieldName);
					},
					getDrillManager : function() {
						return this.getQueryModel().getDrillManager();
					},
					setDimensionHierarchy : function(dimName, hierarchyName,
							hierarchyActive, initialDrillLevel) {
						var dimension = this.getDimension(dimName);
						if (dimension !== null) {
							dimension.setHierarchyName(hierarchyName);
							dimension.setHierarchyActive(hierarchyActive);
							dimension.setInitialDrillLevel(initialDrillLevel);
						}
						return this;
					},
					sort : function(sortType, dimType, dimName,
							presentationType, fieldName, memberName, direction) {
						var sortingManager = this.getQueryModel()
								.getSortingManager();
						var resolvedDimName;
						var dimension;
						var dimensionSorting;
						var member;
						var measureSorting;
						var resolvedFieldName;
						var field;
						var fieldSorting;
						sortingManager.queueEventing();
						resolvedDimName = this.resolveDimName(dimType, dimName);
						if ((sortType === sap.firefly.SortType.MEMBER_KEY)
								|| (sortType === sap.firefly.SortType.MEMBER_TEXT)
								|| (sortType === sap.firefly.SortType.HIERARCHY)) {
							dimension = this.getDimension(resolvedDimName);
							if (dimension !== null) {
								dimensionSorting = sortingManager
										.getDimensionSorting(dimension, true);
								if (sortType === sap.firefly.SortType.MEMBER_KEY) {
									dimensionSorting
											.setSortingPresentationType(sap.firefly.PresentationType.KEY);
								} else {
									if (sortType === sap.firefly.SortType.MEMBER_TEXT) {
										dimensionSorting
												.setSortingPresentationType(sap.firefly.PresentationType.TEXT);
									} else {
										if (sortType === sap.firefly.SortType.HIERARCHY) {
											dimensionSorting
													.setSortByHierarchy();
										}
									}
								}
								dimensionSorting.setDirection(direction);
							}
						} else {
							if (sortType === sap.firefly.SortType.MEASURE) {
								member = this.getMeasure(memberName);
								if (member !== null) {
									measureSorting = sortingManager
											.getMeasureSorting(member, true);
									measureSorting.setDirection(direction);
								}
							} else {
								if (sortType === sap.firefly.SortType.FIELD) {
									resolvedFieldName = this.resolveFieldName(
											resolvedDimName, presentationType,
											fieldName);
									field = this.getField(resolvedFieldName);
									if (field !== null) {
										fieldSorting = sortingManager
												.getFieldSorting(field, true);
										fieldSorting.setDirection(direction);
									}
								}
							}
						}
						sortingManager.resumeEventing();
						return this;
					},
					clearSort : function(sortType, name) {
						var queryModel = this.getQueryModel();
						var sortingManager = queryModel.getSortingManager();
						var sortingOperations = sortingManager
								.getSortingOperations();
						var dimension;
						var i;
						var sorting;
						if (sortType === null) {
							sortingOperations.clear();
						} else {
							if (sortType === sap.firefly.SortType.ABSTRACT_DIMENSION_SORT) {
								dimension = this.getDimension(name);
								if (dimension !== null) {
									sortingManager
											.removeDimensionSorting(dimension);
								}
							} else {
								sortingOperations.queueEventing();
								for (i = sortingOperations.size() - 1; i >= 0; i--) {
									sorting = sortingOperations.get(i);
									if (sorting.getSortingType() === sortType) {
										if (name === null) {
											sortingOperations.removeAt(i);
										} else {
											if (sap.firefly.XString.isEqual(
													name, sorting.getName())) {
												sortingOperations.removeAt(i);
											}
										}
									}
								}
								sortingOperations.resumeEventing();
							}
						}
						return this;
					},
					setTotalsVisible : function(modelLevel, name, visibility) {
						var totalsController = this.getTotalsController(
								modelLevel, name);
						if (totalsController !== null) {
							totalsController.setResultVisibility(visibility);
						}
						return this;
					},
					alignTotals : function(modelLevel, name, alignment) {
						var totalsController = this.getTotalsController(
								modelLevel, name);
						if (totalsController !== null) {
							if (alignment !== null) {
								totalsController.setResultAlignment(alignment);
							} else {
								totalsController
										.restoreTotalsAlignment(
												sap.firefly.RestoreAction.DEFAULT_VALUE,
												false);
							}
						}
						return this;
					},
					getTotalsController : function(modelLevel, name) {
						var totalsController = null;
						var queryModel = this.getQueryModel();
						var type;
						if (modelLevel === sap.firefly.QModelLevel.QUERY) {
							totalsController = queryModel;
						} else {
							if (modelLevel === sap.firefly.QModelLevel.AXES) {
								type = sap.firefly.AxisType.lookup(name);
								if (type !== null) {
									totalsController = queryModel.getAxis(type);
								}
							} else {
								if (modelLevel === sap.firefly.QModelLevel.DIMENSIONS) {
									totalsController = queryModel
											.getDimensionByName(name);
								}
							}
						}
						return totalsController;
					},
					addMeasure : function(measure) {
						var measureStructure = this
								.moveMeasureDimensionToAxis(sap.firefly.AxisType.COLUMNS);
						measureStructure.setReadMode(
								sap.firefly.QContextType.RESULT_SET,
								sap.firefly.QMemberReadMode.BOOKED);
						this.addSingleStructureMemberFilterByType(
								sap.firefly.DimensionType.MEASURE_STRUCTURE,
								measure, sap.firefly.ComparisonOperator.EQUAL);
						return measureStructure.getStructureMember(measure);
					},
					getMeasure : function(name) {
						var value = this.checkAndReplace(name);
						return this.getQueryModel().getMeasureDimension()
								.getStructureMember(value);
					},
					addNewRestrictedMeasure : function(dimType, name, text,
							member, targetDim, targetMember) {
						var dim = this.getFirstDimensionWithType(dimType);
						var restrictedMeasure = dim.addNewRestrictedMeasure(
								name, text);
						var filter = restrictedMeasure.getFilter();
						var targetDimObj;
						filter.addSingleMemberFilterByDimension(dim, member,
								sap.firefly.ComparisonOperator.EQUAL);
						targetDimObj = this.getDimension(targetDim);
						filter.addSingleMemberFilterByDimension(targetDimObj,
								targetMember,
								sap.firefly.ComparisonOperator.EQUAL);
						return this;
					},
					addNewRestrictedMeasureOnNode : function(dimType, name,
							text, member, targetDim, targetHierarchyName,
							targetNode) {
						var measure = this.getFirstDimensionWithType(dimType);
						var targetDimObj = this.getDimension(targetDim);
						var restrictedMeasure = measure
								.addNewRestrictedMeasure(name, text);
						var filter = restrictedMeasure.getFilter();
						var context = this.getQueryModel();
						var andFilter = sap.firefly.QFactory2
								.newFilterAnd(context);
						var measureOp;
						var restriction;
						filter.setComplexSelection(andFilter);
						measureOp = sap.firefly.QFactory2
								.newFilterOperation(context);
						measureOp.setField(measure.getKeyField());
						measureOp
								.setComparisonOperator(sap.firefly.ComparisonOperator.EQUAL);
						measureOp.getLow().setStringValue(member);
						andFilter.add(measureOp);
						restriction = sap.firefly.QFactory2
								.newFilterOperation(context);
						restriction.setField(targetDimObj
								.getHierarchyKeyField());
						restriction
								.setComparisonOperator(sap.firefly.ComparisonOperator.EQUAL);
						restriction.setHierarchyName(targetHierarchyName);
						restriction.getLow().setStringValue(targetNode);
						andFilter.add(restriction);
						return this;
					},
					tmx : function(expression) {
						var adaptedExpr = expression;
						var startIndex;
						var endIndex;
						var varName;
						var buffer;
						if (this.m_tmxReplacementVariables !== null) {
							while (true) {
								startIndex = sap.firefly.XString.indexOf(
										adaptedExpr, this.m_tmxVarPrefix);
								if (startIndex === -1) {
									break;
								}
								endIndex = sap.firefly.XString.indexOfFrom(
										adaptedExpr, this.m_tmxVarPostfix,
										startIndex + this.m_tmxVarPrefixSize);
								if (endIndex === -1) {
									break;
								}
								varName = sap.firefly.XString.substring(
										adaptedExpr, startIndex
												+ this.m_tmxVarPrefixSize,
										endIndex);
								buffer = sap.firefly.XStringBuffer.create();
								buffer.append(sap.firefly.XString.substring(
										adaptedExpr, 0, startIndex));
								buffer
										.append(this.m_tmxReplacementVariables
												.getStringByNameWithDefault(
														sap.firefly.XString
																.concatenate2(
																		this.m_tmxLookupNamespace,
																		varName),
														"[???]"));
								buffer
										.append(sap.firefly.XString
												.substring(
														adaptedExpr,
														endIndex
																+ this.m_tmxVarPostfixSize,
														-1));
								adaptedExpr = buffer.toString();
								buffer.releaseObject();
							}
						}
						return sap.firefly.TmxParser.applyTmx(this
								.getQueryModel(), adaptedExpr);
					},
					setTmxReplacementVariables : function(variables, varPrefix,
							varPostfix, lookupNamespace) {
						this.m_tmxReplacementVariables = variables;
						this.m_tmxVarPrefix = varPrefix;
						this.m_tmxVarPostfix = varPostfix;
						this.m_tmxVarPrefixSize = sap.firefly.XString
								.size(this.m_tmxVarPrefix);
						this.m_tmxVarPostfixSize = sap.firefly.XString
								.size(this.m_tmxVarPostfix);
						this.m_tmxLookupNamespace = lookupNamespace;
					},
					executeCode : function(structure) {
						var queryModel = this.getQueryModel();
						var calls = sap.firefly.XHashMapByString.create();
						var cmdSeq;
						var count;
						var context;
						var i;
						var currentElement;
						var callName;
						var callObject;
						sap.firefly.QConvenienceCommands.addFunction(calls,
								sap.firefly.CsPrint.create());
						sap.firefly.QConvenienceCommands.addFunction(calls,
								sap.firefly.CsGetVersion.create());
						cmdSeq = structure.getListByName("cmdSeq");
						count = cmdSeq.size();
						context = sap.firefly.CsContext.create();
						context.setThis(queryModel);
						for (i = 0; i < count; i++) {
							currentElement = cmdSeq.getStructureByIndex(i);
							if (currentElement.hasValueByName("cmd")) {
								currentElement.getStringByName("cmd");
							} else {
								if (currentElement.hasValueByName("call")) {
									callName = currentElement
											.getStringByName("call");
									callObject = calls.getByKey(callName);
									if (callObject !== null) {
										callObject.execute(context);
									}
								}
							}
						}
					},
					setOffsetColumns : function(offset) {
						this.getQueryManager().setOffsetColumns(offset);
						return this;
					},
					setMaxColumns : function(max) {
						this.getQueryManager().setMaxColumns(max);
						return this;
					},
					setMaxResultRecords : function(maxResultRecords) {
						this.getQueryManager().setMaxResultRecords(
								maxResultRecords);
						return this;
					},
					resetMaxResultRecords : function() {
						this.getQueryManager().resetMaxResultRecords();
						return this;
					},
					getOffsetColumns : function() {
						return this.getQueryManager().getOffsetColumns();
					},
					getMaxColumns : function() {
						return this.getQueryManager().getMaxColumns();
					},
					getOffsetRows : function() {
						return this.getQueryManager().getOffsetRows();
					},
					getMaxRows : function() {
						return this.getQueryManager().getMaxRows();
					},
					setOffsetRows : function(offset) {
						this.getQueryManager().setOffsetRows(offset);
						return this;
					},
					setMaxRows : function(max) {
						this.getQueryManager().setMaxRows(max);
						return this;
					},
					getMaxResultRecords : function() {
						return this.getQueryManager().getMaxResultRecords();
					},
					setExecuteRequestOnOldResultSet : function(
							executeRequestOnOldResultSet) {
						this.getQueryManager().setExecuteRequestOnOldResultSet(
								executeRequestOnOldResultSet);
						return this;
					},
					setResultSetPersistanceTargetSchema : function(
							resultSetPersistanceSchema) {
						this.getQueryManager()
								.setResultSetPersistanceTargetSchema(
										resultSetPersistanceSchema);
						return this;
					},
					setResultSetPersistanceTargetTable : function(
							resultSetPersistanceTable) {
						this.getQueryManager()
								.setResultSetPersistanceTargetTable(
										resultSetPersistanceTable);
						return this;
					},
					setResultSetPersistanceIdentifier : function(
							resultSetPersistanceIdentifier) {
						this.getQueryManager()
								.setResultSetPersistanceIdentifier(
										resultSetPersistanceIdentifier);
						return this;
					},
					setResultSetTransportEnabled : function(isEnabled) {
						this.getQueryManager().setResultSetTransportEnabled(
								isEnabled);
						return this;
					},
					hasMoreColumnRecordsAvailable : function() {
						return this.getQueryManager()
								.hasMoreColumnRecordsAvailable();
					},
					getExecuteRequestOnOldResultSet : function() {
						return this.getQueryManager()
								.getExecuteRequestOnOldResultSet();
					},
					getResultSetPersistanceSchema : function() {
						return this.getQueryManager()
								.getResultSetPersistanceSchema();
					},
					getResultSetPersistanceTable : function() {
						return this.getQueryManager()
								.getResultSetPersistanceTable();
					},
					getResultSetPersistanceIdentifier : function() {
						return this.getQueryManager()
								.getResultSetPersistanceIdentifier();
					},
					isResultSetTransportEnabled : function() {
						return this.getQueryManager()
								.isResultSetTransportEnabled();
					},
					hasMoreRowRecordsAvailable : function() {
						return this.getQueryManager()
								.hasMoreRowRecordsAvailable();
					},
					refresh : function() {
						return this.processQueryExecution(
								sap.firefly.SyncType.NON_BLOCKING, null, null);
					},
					processQueryExecution : function(syncType, listener,
							customIdentifier) {
						var queryManager = this.getQueryManager();
						if (queryManager !== null) {
							queryManager.processQueryExecution(syncType,
									listener, customIdentifier);
						}
						return this;
					},
					setResultSetPersistanceEnabled : function(
							resultSetPersistanceEnabled) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isResultSetPersistanceEnabled : function() {
						return false;
					},
					getReferenceGrid : function(withDetails) {
						var queryManager = this.getQueryManager();
						var rs;
						if (queryManager === null) {
							return null;
						}
						rs = queryManager.getClassicResultSet();
						if (withDetails) {
							return sap.firefly.ReferenceGrid
									.createWithDetails(rs);
						}
						return sap.firefly.ReferenceGrid.create(rs);
					},
					getAbstractRendering : function(type) {
						var queryManager = this.getQueryManager();
						if (queryManager === null) {
							return null;
						}
						return queryManager.getAbstractRendering(type);
					},
					queueEventing : function() {
						this.m_activeComponent.queueEventing();
					},
					stopEventing : function() {
						this.m_activeComponent.stopEventing();
					},
					isEventingStopped : function() {
						return this.m_activeComponent.isEventingStopped();
					},
					resumeEventing : function() {
						this.m_activeComponent.resumeEventing();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimension",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_create : function(context, parentNode, type) {
							var dim = new sap.firefly.QDimension();
							dim.setupDimension(context, parentNode, type);
							return dim;
						}
					},
					m_axis : null,
					m_externalName : null,
					m_attributeViewName : null,
					m_supportedAxesTypes : null,
					m_defaultAxisType : null,
					m_fieldLayoutType : null,
					m_defaultFieldLayoutType : null,
					m_selectorFieldLayoutType : null,
					m_fieldContainer : null,
					m_attributeContainer : null,
					m_supportedFieldLayoutType : null,
					m_supportsCalculatedBeforeAggregation : false,
					m_supportsLowerCase : false,
					m_hierarchyNavigationDeltaMode : false,
					m_isIgnoredOnExport : false,
					m_isOwnerDimension : false,
					m_skip : 0,
					m_top : 0,
					m_resultStructureController : null,
					m_type : null,
					m_resultMemberTotal : null,
					m_resultMemberTotalIncluded : null,
					m_resultMemberTotalRemaining : null,
					m_readModes : null,
					m_selectionCapabilities : null,
					m_hierarchyManager : null,
					m_supportsCumulative : false,
					m_isCumulative : false,
					m_isGroupingDimension : false,
					m_nameValuePairs : null,
					m_selector : null,
					m_groupingDimensions : null,
					m_allStructureMembers : null,
					m_structureLayout : null,
					m_memberLayoutWrapper : null,
					m_alternativeFieldValues : null,
					m_canBeAggregated : false,
					m_isCompound : null,
					m_isEnforcedDynamicValue : false,
					cloneOlapComponent : function(context, parent) {
						var clone = sap.firefly.QDimension._create(context,
								null, this.getDimensionType());
						(clone).copyDimension(this);
						(clone).copyDimensionMember(this);
						return clone;
					},
					copyDimension : function(origin) {
						var contextName;
						sap.firefly.QDimension.$superclass.copyModelComponent
								.call(this, origin);
						this.m_externalName = origin.m_externalName;
						this.m_attributeViewName = origin.m_attributeViewName;
						this.m_supportedAxesTypes = origin.m_supportedAxesTypes
								.createSetCopy();
						this.m_defaultAxisType = origin.m_defaultAxisType;
						this.m_supportedFieldLayoutType = origin.m_supportedFieldLayoutType
								.createSetCopy();
						(this.m_fieldContainer)
								.copyFieldContainer(origin.m_fieldContainer);
						(this.m_attributeContainer)
								.copyAttributeContainer(origin.m_attributeContainer);
						this.m_fieldLayoutType = origin.m_fieldLayoutType;
						this.m_defaultFieldLayoutType = origin.m_defaultFieldLayoutType;
						this.m_selectorFieldLayoutType = origin.m_selectorFieldLayoutType;
						this.m_supportsCalculatedBeforeAggregation = origin.m_supportsCalculatedBeforeAggregation;
						this.m_supportsLowerCase = origin.m_supportsLowerCase;
						this.m_hierarchyNavigationDeltaMode = origin.m_hierarchyNavigationDeltaMode;
						this.m_isOwnerDimension = origin.m_isOwnerDimension;
						this.m_skip = origin.m_skip;
						this.m_top = origin.m_top;
						(this.m_resultStructureController)
								.copyResultStructureController(origin.m_resultStructureController);
						if (origin.m_resultMemberTotal !== null) {
							this
									.createResultMember(sap.firefly.MemberType.RESULT);
						}
						if (origin.m_resultMemberTotalIncluded !== null) {
							this
									.createResultMember(sap.firefly.MemberType.CONDITION_RESULT);
						}
						if (origin.m_resultMemberTotalRemaining !== null) {
							this
									.createResultMember(sap.firefly.MemberType.CONDITION_OTHERS_RESULT);
						}
						contextName = sap.firefly.QContextType.RESULT_SET
								.getName();
						this.m_readModes.getByKey(contextName)
								.copyDimensionReadMode(
										origin.m_readModes
												.getByKey(contextName));
						contextName = sap.firefly.QContextType.SELECTOR
								.getName();
						this.m_readModes.getByKey(contextName)
								.copyDimensionReadMode(
										origin.m_readModes
												.getByKey(contextName));
						contextName = sap.firefly.QContextType.VARIABLE
								.getName();
						this.m_readModes.getByKey(contextName)
								.copyDimensionReadMode(
										origin.m_readModes
												.getByKey(contextName));
						(this.m_selectionCapabilities)
								.copyFilterCapabilityList(origin.m_selectionCapabilities);
						this.m_supportsCumulative = origin.m_supportsCumulative;
						this.m_isCumulative = origin.m_isCumulative;
						this.m_isGroupingDimension = origin.m_isGroupingDimension;
						this.m_canBeAggregated = origin.m_canBeAggregated;
						this.m_isCompound = origin.m_isCompound;
						if (origin.m_nameValuePairs !== null) {
							this.m_nameValuePairs = origin.m_nameValuePairs
									.createMapByStringCopy();
						}
						if (origin.m_groupingDimensions !== null) {
							this.m_groupingDimensions = origin.m_groupingDimensions
									.createSetCopy();
						}
						this.m_isIgnoredOnExport = origin.m_isIgnoredOnExport;
						this.m_hierarchyManager.copyHierarchy(origin
								.getHierarchyManager());
						this.m_isEnforcedDynamicValue = origin.m_isEnforcedDynamicValue;
					},
					copyDimensionMember : function(origin) {
						var context;
						var i;
						var size;
						var origMeasure;
						var originType;
						var cloneBasicMeasure;
						var cloneFormulaMeasure;
						var cloneRestrictedMeasure;
						var newSortedList;
						var n;
						var currentMemberOrigin;
						var foundMember;
						if (origin.m_allStructureMembers !== null) {
							context = this.getContext();
							size = origin.m_allStructureMembers.size();
							for (i = 0; i < size; i++) {
								origMeasure = origin.m_allStructureMembers
										.get(i);
								originType = origMeasure.getMemberType();
								if (originType === sap.firefly.MemberType.BASIC_MEASURE) {
									cloneBasicMeasure = sap.firefly.QBasicMeasure
											._createBasicMeasure(context, this);
									cloneBasicMeasure
											.copyBasicMeasure(origMeasure);
									this.addMeasureInternal(cloneBasicMeasure);
								} else {
									if (originType === sap.firefly.MemberType.FORMULA) {
										cloneFormulaMeasure = sap.firefly.QFormulaMeasure
												._createFormulaMeasure(context,
														this.getQueryModel(),
														this);
										cloneFormulaMeasure
												.copyFormulaMeasure(origMeasure);
										this
												.addMeasureInternal(cloneFormulaMeasure);
										this
												.addQueryDataCells(cloneFormulaMeasure);
									} else {
										if (originType === sap.firefly.MemberType.RESTRICTED_MEASURE) {
											cloneRestrictedMeasure = sap.firefly.QRestrictedMeasure
													._createRestrictedMeasure(
															context, this);
											cloneRestrictedMeasure
													.copyRestrictedMeasure(origMeasure);
											this
													.addMeasureInternal(cloneRestrictedMeasure);
											this
													.addQueryDataCells(cloneRestrictedMeasure);
										}
									}
								}
							}
							if (origin.m_structureLayout.isEmpty()) {
								this.m_structureLayout.clear();
							}
							newSortedList = sap.firefly.QModelComponentWithNameList
									.createModelComponentWithNameList(context,
											this, false, "Structure Layout");
							for (n = 0; n < origin.m_structureLayout.size(); n++) {
								currentMemberOrigin = origin.m_structureLayout
										.get(n);
								foundMember = this.getMemberyByName(
										this.m_structureLayout,
										currentMemberOrigin.getName());
								if (foundMember !== null) {
									newSortedList.add(foundMember);
								}
							}
							this.m_structureLayout = newSortedList;
							if (origin.m_alternativeFieldValues !== null) {
								this.m_alternativeFieldValues = origin.m_alternativeFieldValues
										.createMapByStringCopy();
							}
						}
					},
					getMemberyByName : function(list, name) {
						var size = list.size();
						var i;
						var currentMember;
						for (i = 0; i < size; i++) {
							currentMember = list.get(i);
							if (sap.firefly.XString.isEqual(currentMember
									.getName(), name)) {
								return currentMember;
							}
						}
						return null;
					},
					setupDimension : function(context, parentNode, type) {
						sap.firefly.QDimension.$superclass.setupModelComponent
								.call(this, context, parentNode);
						this.m_hierarchyManager = sap.firefly.QHierarchyManager
								.create(context, this, this);
						this.m_supportedAxesTypes = sap.firefly.XSetOfNameObject
								.create();
						this.m_supportedFieldLayoutType = sap.firefly.XHashSetOfString
								.create();
						this.m_supportedFieldLayoutType
								.put(sap.firefly.FieldLayoutType.FIELD_BASED
										.getName());
						this.m_selectorFieldLayoutType = sap.firefly.FieldLayoutType.FIELD_BASED;
						this.m_fieldLayoutType = sap.firefly.FieldLayoutType.FIELD_BASED;
						this.m_fieldContainer = sap.firefly.QFieldContainer
								.create(context, this);
						this.m_attributeContainer = sap.firefly.QAttributeContainer
								.create(context, this);
						this.m_readModes = sap.firefly.XHashMapByString
								.create();
						this.m_readModes.put(
								sap.firefly.QContextType.RESULT_SET.getName(),
								sap.firefly.QDimensionReadMode.create());
						this.m_readModes.put(sap.firefly.QContextType.SELECTOR
								.getName(), sap.firefly.QDimensionReadMode
								.create());
						this.m_readModes.put(sap.firefly.QContextType.VARIABLE
								.getName(), sap.firefly.QDimensionReadMode
								.create());
						this.m_selectionCapabilities = sap.firefly.QFilterCapabilityList
								.createFilterCapabilitiesForDimension(context,
										this);
						this.m_resultStructureController = sap.firefly.QResultStructureController
								._create(context, this,
										sap.firefly.QModelLevel.DIMENSIONS);
						this.m_isCompound = sap.firefly.TriStateBool._DEFAULT;
						this.setDimensionType(type);
					},
					setName : function(name) {
						if (this.m_readModes !== null) {
							this.m_readModes.getByKey(
									sap.firefly.QContextType.RESULT_SET
											.getName()).setDimensionName(name);
							this.m_readModes
									.getByKey(
											sap.firefly.QContextType.SELECTOR
													.getName())
									.setDimensionName(name);
							this.m_readModes
									.getByKey(
											sap.firefly.QContextType.VARIABLE
													.getName())
									.setDimensionName(name);
						}
						sap.firefly.QDimension.$superclass.setName.call(this,
								name);
					},
					releaseObject : function() {
						var memberSize;
						var measureIdx;
						var iqStructureMember;
						this.m_externalName = null;
						this.m_defaultAxisType = null;
						this.m_fieldLayoutType = null;
						this.m_defaultFieldLayoutType = null;
						this.m_selectorFieldLayoutType = null;
						this.m_type = null;
						this.m_attributeViewName = null;
						this.m_isCompound = null;
						if (this.supportsCustomMembers()) {
							memberSize = this.m_allStructureMembers.size();
							for (measureIdx = 0; measureIdx < memberSize; measureIdx++) {
								iqStructureMember = this.m_allStructureMembers
										.get(measureIdx);
								if ((iqStructureMember.getMemberType() === sap.firefly.MemberType.FORMULA)
										|| (iqStructureMember.getMemberType() === sap.firefly.MemberType.RESTRICTED_MEASURE)) {
									iqStructureMember.releaseObject();
								}
							}
						}
						this.m_alternativeFieldValues = sap.firefly.XObject
								.releaseIfNotNull(this.m_alternativeFieldValues);
						this.m_resultStructureController = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultStructureController);
						this.m_resultMemberTotal = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultMemberTotal);
						this.m_resultMemberTotalIncluded = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultMemberTotalIncluded);
						this.m_resultMemberTotalRemaining = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultMemberTotalRemaining);
						this.m_selector = sap.firefly.XObject
								.releaseIfNotNull(this.m_selector);
						this.m_supportedAxesTypes = sap.firefly.XObject
								.releaseIfNotNull(this.m_supportedAxesTypes);
						this.m_supportedFieldLayoutType = sap.firefly.XObject
								.releaseIfNotNull(this.m_supportedFieldLayoutType);
						this.m_fieldContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_fieldContainer);
						this.m_attributeContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_attributeContainer);
						this.m_readModes = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_readModes);
						this.m_selectionCapabilities = sap.firefly.XObject
								.releaseIfNotNull(this.m_selectionCapabilities);
						this.m_nameValuePairs = sap.firefly.XObject
								.releaseIfNotNull(this.m_nameValuePairs);
						this.m_groupingDimensions = sap.firefly.XObject
								.releaseIfNotNull(this.m_groupingDimensions);
						this.m_allStructureMembers = sap.firefly.XObject
								.releaseIfNotNull(this.m_allStructureMembers);
						this.m_structureLayout = sap.firefly.XObject
								.releaseIfNotNull(this.m_structureLayout);
						this.m_memberLayoutWrapper = sap.firefly.XObject
								.releaseIfNotNull(this.m_memberLayoutWrapper);
						sap.firefly.QDimension.$superclass.releaseObject
								.call(this);
					},
					setAxis : function(axis) {
						this.m_axis = sap.firefly.XWeakReferenceUtil
								.getWeakRef(axis);
					},
					getAxis : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_axis);
					},
					getAxisBase : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_axis);
					},
					getIndexOnAxis : function() {
						return this.getAxis().getDimensionList().getIndex(this);
					},
					getResultSetFields : function() {
						return this.m_fieldContainer.getResultSetFields();
					},
					getFieldsExt : function(context) {
						return this.m_fieldContainer.getFieldsExt(context);
					},
					getFields : function() {
						return this.m_fieldContainer.getFields();
					},
					getFieldIterator : function() {
						return this.m_fieldContainer.getFieldIterator();
					},
					getFieldByName : function(name) {
						return this.m_fieldContainer.getFieldByName(name);
					},
					getFieldByNameOrAlias : function(name) {
						return this.m_fieldContainer
								.getFieldByNameOrAlias(name);
					},
					getFirstFieldByType : function(type) {
						return this.m_fieldContainer.getFirstFieldByType(type);
					},
					addNewField : function(usageType, type, name, text) {
						return this.m_fieldContainer.addNewField(usageType,
								type, name, text);
					},
					addField : function(field) {
						this.m_fieldContainer.addField(field);
					},
					addFieldInternal : function(field) {
						this.m_fieldContainer.addFieldInternal(field);
					},
					getFieldByPresentationType : function(presentationType) {
						var mainAttribute = this.getMainAttribute();
						if (mainAttribute === null) {
							return this.m_fieldContainer
									.getFieldByPresentationType(presentationType);
						}
						return mainAttribute
								.getFieldByPresentationType(presentationType);
					},
					getKeyField : function() {
						return this.m_fieldContainer.getKeyField();
					},
					getKeyFieldExt : function(context) {
						return this.m_fieldContainer.getKeyFieldExt(context);
					},
					getTextField : function() {
						return this.m_fieldContainer.getTextField();
					},
					getDisplayKeyField : function() {
						return this.m_fieldContainer.getDisplayKeyField();
					},
					setFlatKeyField : function(field) {
						this.m_fieldContainer.setFlatKeyField(field);
					},
					setFlatTextField : function(field) {
						this.m_fieldContainer.setFlatTextField(field);
					},
					setFlatDisplayKeyField : function(field) {
						this.m_fieldContainer.setFlatDisplayKeyField(field);
					},
					setHierachyKeyField : function(field) {
						this.m_fieldContainer.setHierachyKeyField(field);
					},
					setHierarchyTextField : function(field) {
						this.m_fieldContainer.setHierarchyTextField(field);
					},
					setHierarchyDisplayKeyField : function(field) {
						this.m_fieldContainer
								.setHierarchyDisplayKeyField(field);
					},
					getFlatKeyField : function() {
						return this.m_fieldContainer.getFlatKeyField();
					},
					getFlatTextField : function() {
						return this.m_fieldContainer.getFlatTextField();
					},
					getFlatDisplayKeyField : function() {
						return this.m_fieldContainer.getFlatDisplayKeyField();
					},
					getHierarchyKeyField : function() {
						return this.m_fieldContainer.getHierarchyKeyField();
					},
					getHierarchyTextField : function() {
						return this.m_fieldContainer.getHierarchyTextField();
					},
					getHierarchyDisplayKeyField : function() {
						return this.m_fieldContainer
								.getHierarchyDisplayKeyField();
					},
					findKeyField : function() {
						var field = this.getKeyField();
						if (field === null) {
							throw sap.firefly.XException
									.createIllegalStateException(sap.firefly.XString
											.concatenate2(
													"Cannot find key field for dimension ",
													this.getName()));
						}
						return field;
					},
					getDimensionMember : function(name, validate) {
						var structureMember;
						if (this.supportsBasicStructureMembers()) {
							structureMember = this.m_allStructureMembers
									.getByKey(name);
							if ((structureMember !== null)
									|| (this.m_type !== sap.firefly.DimensionType.ACCOUNT)) {
								return structureMember;
							}
						}
						return this.getDimensionMemberWithFormat(name,
								validate, null);
					},
					getDimensionMemberWithValue : function(name, validate,
							field) {
						var valueType;
						var dimensionMember;
						if (validate) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						valueType = field.getValueType();
						if (valueType !== name.getValueType()) {
							throw sap.firefly.XException
									.createIllegalStateException("incompatible value types");
						}
						dimensionMember = sap.firefly.QDimensionMember
								.createDimensionMember(this.getContext(), this);
						if (dimensionMember.createAndAddFieldWithValue(field,
								name) === null) {
							throw sap.firefly.XException
									.createIllegalStateException("internal error");
						}
						return dimensionMember;
					},
					getDimensionMemberWithFormat : function(name, validate,
							valueFormat) {
						var dimensionMember;
						var field;
						var valueType;
						var dateValue;
						var timeValue;
						var dateTimeValue;
						var intValue;
						var longValue;
						var doubleValue;
						if (validate) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						dimensionMember = sap.firefly.QDimensionMember
								.createDimensionMember(this.getContext(), this);
						field = this.findKeyField();
						valueType = field.getValueType();
						dimensionMember.setName(name);
						if (valueType === sap.firefly.XValueType.STRING) {
							dimensionMember.createAndAddFieldValueWithString(
									field, name);
						} else {
							if (valueType === sap.firefly.XValueType.DATE) {
								dateValue = sap.firefly.XDate
										.createDateFromString(name, valueFormat);
								dimensionMember.createAndAddFieldValueWithDate(
										field, dateValue);
							} else {
								if (valueType === sap.firefly.XValueType.TIME) {
									timeValue = sap.firefly.XTime
											.createTimeFromString(name,
													valueFormat);
									dimensionMember
											.createAndAddFieldValueWithTime(
													field, timeValue);
								} else {
									if (valueType === sap.firefly.XValueType.DATE_TIME) {
										dateTimeValue = sap.firefly.XDateTime
												.createDateTimeFromString(name,
														valueFormat);
										dimensionMember
												.createAndAddFieldValueWithDateTime(
														field, dateTimeValue);
									} else {
										if (valueType === sap.firefly.XValueType.INTEGER) {
											intValue = sap.firefly.XInteger
													.convertStringToInteger(name);
											dimensionMember
													.createAndAddFieldValueWithInteger(
															field, intValue);
										} else {
											if (valueType === sap.firefly.XValueType.LONG) {
												longValue = sap.firefly.XLong
														.convertStringToLong(name);
												dimensionMember
														.createAndAddFieldValueWithLong(
																field,
																longValue);
											} else {
												if ((valueType === sap.firefly.XValueType.DOUBLE)
														|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
													doubleValue = sap.firefly.XDouble
															.convertStringToDouble(name);
													dimensionMember
															.createAndAddFieldValueWithDouble(
																	field,
																	doubleValue);
												} else {
													throw sap.firefly.XException
															.createIllegalStateException(sap.firefly.XString
																	.concatenate2(
																			"Value type not supported: ",
																			valueType
																					.getName()));
												}
											}
										}
									}
								}
							}
						}
						return dimensionMember;
					},
					getDimensionMemberByInt : function(keyValue, validate) {
						return this.getDimensionMemberWithFormat(
								sap.firefly.XInteger
										.convertIntegerToString(keyValue),
								false, null);
					},
					getDimensionMemberByLong : function(keyValue, validate) {
						return this
								.getDimensionMemberWithFormat(sap.firefly.XLong
										.convertLongToString(keyValue), false,
										null);
					},
					getDimensionMemberByDouble : function(keyValue, validate) {
						return this.getDimensionMemberWithFormat(
								sap.firefly.XDouble
										.convertDoubleToString(keyValue),
								false, null);
					},
					getDimensionMemberByDate : function(keyValue, validate) {
						return this.getDimensionMemberWithFormat(keyValue
								.toIsoFormat(), false,
								sap.firefly.XValueFormat.ISO_DATE);
					},
					getResultMember : function(type) {
						if ((type === sap.firefly.MemberType.RESULT)
								&& (this.m_resultMemberTotal !== null)) {
							return this.m_resultMemberTotal;
						}
						if ((type === sap.firefly.MemberType.CONDITION_RESULT)
								&& (this.m_resultMemberTotalIncluded !== null)) {
							return this.m_resultMemberTotalIncluded;
						}
						if ((type === sap.firefly.MemberType.CONDITION_OTHERS_RESULT)
								&& (this.m_resultMemberTotalRemaining !== null)) {
							return this.m_resultMemberTotalRemaining;
						}
						return this.createResultMember(type);
					},
					createResultMember : function(type) {
						if (type === sap.firefly.MemberType.RESULT) {
							if (this.m_resultMemberTotal === null) {
								this.m_resultMemberTotal = sap.firefly.QDimensionMemberResult
										.createQDimensionMember(this
												.getContext(), this, type);
							}
							return this.m_resultMemberTotal;
						}
						if (type === sap.firefly.MemberType.CONDITION_RESULT) {
							if (this.m_resultMemberTotalIncluded === null) {
								this.m_resultMemberTotalIncluded = sap.firefly.QDimensionMemberResult
										.createQDimensionMember(this
												.getContext(), this, type);
							}
							return this.m_resultMemberTotalIncluded;
						}
						if (type === sap.firefly.MemberType.CONDITION_OTHERS_RESULT) {
							if (this.m_resultMemberTotalRemaining === null) {
								this.m_resultMemberTotalRemaining = sap.firefly.QDimensionMemberResult
										.createQDimensionMember(this
												.getContext(), this, type);
							}
							return this.m_resultMemberTotalRemaining;
						}
						return null;
					},
					createSelectionComponentList : function() {
						var hierarchyName = null;
						if (this.isHierarchyActive()) {
							hierarchyName = this.getHierarchyName();
						}
						return sap.firefly.QFilterCartesianList._create(this
								.getContext(), null, this.getKeyField(),
								hierarchyName);
					},
					getResultSetSorting : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getSortingManager()
								.getDimensionSorting(this, true);
					},
					hasSorting : function() {
						var queryModel = this.getQueryModel();
						var sortManager;
						var dimSorting;
						if (queryModel === null) {
							return false;
						}
						sortManager = queryModel.getSortingManager();
						dimSorting = sortManager.getDimensionSorting(this,
								false);
						return dimSorting !== null;
					},
					getSupportedReadModes : function(context) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						return readModeContainer.getSupportedReadModes();
					},
					supportsReadMode : function(context, readMode) {
						return this.getSupportedReadModes(context).contains(
								readMode);
					},
					getReadModeDefault : function(context) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						return readModeContainer.getDefaultReadMode();
					},
					getReadMode : function(context) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						return readModeContainer.getActiveReadMode();
					},
					setReadMode : function(context, mode) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						readModeContainer.setActiveReadMode(mode);
						this.notifyNodeChanged();
					},
					setReadModeGraceful : function(context, mode) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						var bestReadMode = readModeContainer
								.determineBestReadMode(mode);
						readModeContainer.setActiveReadMode(bestReadMode);
						this.notifyNodeChanged();
						return bestReadMode;
					},
					determineBestReadMode : function(context, mode) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						return readModeContainer.determineBestReadMode(mode);
					},
					addSupportedReadMode : function(context, mode) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						readModeContainer.addSupportedReadMode(mode);
					},
					clearReadModes : function(context) {
						this.m_readModes.getByKey(context.getName())
								.clearReadmode();
					},
					setReadModeDefault : function(context, mode) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						readModeContainer.setDefaultReadMode(mode);
					},
					getBaseInfoObjectName : function() {
						return null;
					},
					isCompound : function() {
						var isNotCompoundField;
						if (this.m_isCompound === sap.firefly.TriStateBool._DEFAULT) {
							isNotCompoundField = this
									.getFirstFieldByType(sap.firefly.PresentationType.DISPLAY_KEY_NOT_COMPOUND) !== null;
							if (isNotCompoundField === false) {
								isNotCompoundField = this
										.getFirstFieldByType(sap.firefly.PresentationType.KEY_NOT_COMPOUND) !== null;
							}
							if (isNotCompoundField === false) {
								isNotCompoundField = this
										.getFirstFieldByType(sap.firefly.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT) !== null;
							}
							this.m_isCompound = sap.firefly.TriStateBool
									.lookup(isNotCompoundField);
						}
						return this.m_isCompound.getBoolean();
					},
					getSupportedAxesTypes : function() {
						return this.m_supportedAxesTypes;
					},
					addSupportedAxis : function(axisType) {
						this.m_supportedAxesTypes.put(axisType);
					},
					isAxisSupported : function(axisType) {
						return this.m_supportedAxesTypes.contains(axisType);
					},
					isSelectable : function() {
						var axis;
						var axesTypes;
						var i;
						var axesType;
						if ((this.m_supportedAxesTypes === null)
								|| (this.m_supportedAxesTypes.isEmpty())) {
							axis = this.getAxis();
							if (axis !== null) {
								if (axis.getType() === sap.firefly.AxisType.REPOSITORY) {
									return false;
								}
							}
						} else {
							axesTypes = this.m_supportedAxesTypes
									.getValuesAsReadOnlyList();
							for (i = 0; i < axesTypes.size(); i++) {
								axesType = axesTypes.get(i);
								if (axesType !== sap.firefly.AxisType.REPOSITORY) {
									return true;
								}
							}
							return false;
						}
						return true;
					},
					getDimensionType : function() {
						return this.m_type;
					},
					setDimensionType : function(type) {
						this.m_type = type;
						if (type !== null) {
							if (this.isStructure()) {
								this.m_resultStructureController
										.setSupportsTotals(false);
							}
							if (this.supportsCustomMembers()) {
								this.m_allStructureMembers = sap.firefly.XListOfNameObject
										.create();
								this.m_structureLayout = sap.firefly.QModelComponentWithNameList
										.createModelComponentWithNameList(this
												.getContext(), this, false,
												"Structure Layout");
								this.m_memberLayoutWrapper = sap.firefly.QListWrapper
										.create(this.m_structureLayout);
							}
						}
					},
					getOlapComponentType : function() {
						return this.m_type;
					},
					getTotalsStructure : function() {
						return this.m_resultStructureController
								.getTotalsStructure();
					},
					setResultVisibility : function(visibility) {
						this.m_resultStructureController
								.setResultVisibility(visibility);
					},
					setResultVisibilityByElement : function(element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElement(element,
										visibility);
					},
					setResultVisibilityByElementAndAlignment : function(
							alignment, element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElementAndAlignment(
										alignment, element, visibility);
					},
					getResultVisibility : function() {
						return this.m_resultStructureController
								.getResultVisibility();
					},
					getResultVisibilitySettings : function() {
						return this.m_resultStructureController
								.getResultVisibilitySettings();
					},
					clearResultVisibilitySettings : function() {
						this.m_resultStructureController
								.clearResultVisibilitySettings();
					},
					getResultVisibilityByElement : function(element) {
						return this.m_resultStructureController
								.getResultVisibilityByElement(element);
					},
					getResultVisibilityByElementAndAlignment : function(
							alignment, element) {
						return this.m_resultStructureController
								.getResultVisibilityByElementAndAlignment(
										alignment, element);
					},
					setResultAlignment : function(alignment) {
						this.m_resultStructureController
								.setResultAlignment(alignment);
					},
					getResultAlignment : function() {
						return this.m_resultStructureController
								.getResultAlignment();
					},
					getAdvancedResultStructure : function() {
						return this.m_resultStructureController
								.getAdvancedResultStructure();
					},
					getSupportedResultAlignmentLevel : function() {
						return this.m_resultStructureController
								.getSupportedResultAlignmentLevel();
					},
					getSupportedResultVisibilityLevel : function() {
						return this.m_resultStructureController
								.getSupportedResultVisibilityLevel();
					},
					getSupportedResultAlignments : function() {
						return this.m_resultStructureController
								.getSupportedResultAlignments();
					},
					supportsResultAlignmentType : function(resultAlignment) {
						return this.m_resultStructureController
								.supportsResultAlignmentType(resultAlignment);
					},
					supportsConditionalResults : function() {
						return this.m_resultStructureController
								.supportsConditionalResults();
					},
					getSupportedConditionalResults : function() {
						return this.m_resultStructureController
								.getSupportedConditionalResults();
					},
					getResultStructureReorderingCapability : function() {
						return this.m_resultStructureController
								.getResultStructureReorderingCapability();
					},
					supportsConditionalResultVisibility : function() {
						return this.m_resultStructureController
								.supportsConditionalResultVisibility();
					},
					getParentResultStructureController : function() {
						var axis = this.getAxis();
						var queryModel;
						if (axis !== null) {
							return axis.getResultStructureController();
						}
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.getResultStructureController();
						}
						return null;
					},
					getResultStructureController : function() {
						return this.m_resultStructureController;
					},
					getResultStructureControllerBase : function() {
						return this.m_resultStructureController;
					},
					getResultStructureChildren : function() {
						return null;
					},
					supportsTotals : function() {
						return this.m_resultStructureController
								.supportsTotals();
					},
					isTotalsAlignmentOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsAlignmentOnDefault();
					},
					isTotalsVisibilityOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsVisibilityOnDefault();
					},
					isTotalsStructureOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsStructureOnDefault();
					},
					restoreTotalsAlignment : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsAlignment(restoreAction,
										recurseChildren);
					},
					restoreTotalsVisibility : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsVisibility(restoreAction,
										recurseChildren);
					},
					restoreTotalsStructure : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsStructure(restoreAction,
										recurseChildren);
					},
					getModelLevel : function() {
						return this.m_resultStructureController.getModelLevel();
					},
					getSelectionCapabilities : function() {
						return this.m_selectionCapabilities;
					},
					getSelectionCapabilitiesBase : function() {
						return this.m_selectionCapabilities;
					},
					setIsOwnerDimension : function(isOwnerDimension) {
						this.m_isOwnerDimension = isOwnerDimension;
					},
					isOwnerDimension : function() {
						return this.m_isOwnerDimension;
					},
					getFieldLayoutType : function() {
						return this.m_fieldLayoutType;
					},
					getFieldLayoutTypeExt : function(context) {
						if (context === sap.firefly.QContextType.RESULT_SET) {
							return this.m_fieldLayoutType;
						}
						return this.m_selectorFieldLayoutType;
					},
					assertFieldLayoutTypeSupported : function(type) {
						if (this.m_supportedFieldLayoutType.contains(type
								.getName()) === false) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XString
											.concatenate2(
													"Field layout type is not supported ",
													type.getName()));
						}
					},
					setFieldLayoutType : function(type) {
						if ((this.m_supportedFieldLayoutType !== null)
								&& (type !== null)) {
							this.assertFieldLayoutTypeSupported(type);
							if (this.m_fieldLayoutType !== type) {
								this.m_fieldLayoutType = type;
								this.notifyNodeChanged();
							}
						}
					},
					setDefaultFieldLayoutType : function(type) {
						this.m_defaultFieldLayoutType = type;
					},
					getDefaultFieldLayoutType : function() {
						return this.m_defaultFieldLayoutType;
					},
					getSelectorFieldLayoutType : function() {
						return this.m_selectorFieldLayoutType;
					},
					setSelectorFieldLayoutType : function(type) {
						if ((this.m_selectorFieldLayoutType !== null)
								&& (type !== null)) {
							this.assertFieldLayoutTypeSupported(type);
							if (this.m_selectorFieldLayoutType !== type) {
								this.m_selectorFieldLayoutType = type;
								this.notifyNodeChanged();
							}
						}
					},
					supportsFieldLayoutType : function(type) {
						return this.m_supportedFieldLayoutType.contains(type
								.getName());
					},
					addSupportedFieldLayoutType : function(type) {
						this.m_supportedFieldLayoutType.put(type.getName());
					},
					getFieldContainer : function() {
						return this.m_fieldContainer;
					},
					getAttributeContainer : function() {
						return this.m_attributeContainer;
					},
					getAttributeContainerBase : function() {
						return this.m_attributeContainer;
					},
					getMainAttribute : function() {
						return this.m_attributeContainer.getMainAttribute();
					},
					getDimension : function() {
						return this;
					},
					getResultSetAttributes : function() {
						return this.m_attributeContainer
								.getResultSetAttributes();
					},
					getAttributes : function() {
						return this.m_attributeContainer.getAttributes();
					},
					getAttributeByName : function(name) {
						return this.m_attributeContainer
								.getAttributeByName(name);
					},
					getDefaultResultSetAttributes : function() {
						return this.m_attributeContainer
								.getDefaultResultSetAttributes();
					},
					setIsCumulative : function(isEnabled) {
						if (this.supportsCumulative() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						this.m_isCumulative = isEnabled;
					},
					isCumulative : function() {
						if (this.supportsCumulative() === false) {
							return false;
						}
						return this.m_isCumulative;
					},
					supportsCumulative : function() {
						return this.m_supportsCumulative;
					},
					setSupportsCumulative : function(supportsCumulative) {
						this.m_supportsCumulative = supportsCumulative;
					},
					isGroupingDimension : function() {
						return this.m_isGroupingDimension;
					},
					setIsGroupingDimension : function(isGroupingDimension) {
						this.m_isGroupingDimension = isGroupingDimension;
					},
					isComponentNode : function() {
						return true;
					},
					getIndexedChildren : function() {
						var children = sap.firefly.XList.create();
						var i;
						var structureMember;
						if (this.m_allStructureMembers !== null) {
							for (i = 0; i < this.m_allStructureMembers.size(); i++) {
								structureMember = this.m_allStructureMembers
										.get(i);
								if (structureMember.getMemberType() === sap.firefly.MemberType.RESTRICTED_MEASURE) {
									children.add(structureMember);
								}
							}
						}
						return children.getIterator();
					},
					getNamedChildren : function() {
						var map = sap.firefly.XHashMapByString.create();
						if (this.m_fieldContainer !== null) {
							map.put("FieldContainer", this.m_fieldContainer);
						}
						if (this.m_attributeContainer !== null) {
							map.put("AttributeContainer",
									this.m_attributeContainer);
						}
						return map;
					},
					configureProperties : function(properties) {
						var signPres;
						var lowerLevel;
						sap.firefly.QDimension.$superclass.configureProperties
								.call(this, properties);
						if (this.m_resultStructureController
								.supportsResultAlignment()) {
							signPres = properties.addProperty(
									sap.firefly.OlapProperty.RESULT_ALIGNMENT,
									sap.firefly.XValueType.ENUM_CONSTANT);
							signPres
									.addValueHelpConstant(sap.firefly.ResultAlignment.TOP);
							signPres
									.addValueHelpConstant(sap.firefly.ResultAlignment.BOTTOM);
							signPres
									.addValueHelpConstant(sap.firefly.ResultAlignment.TOPBOTTOM);
							signPres
									.addValueHelpConstant(sap.firefly.ResultAlignment.NONE);
						}
						lowerLevel = properties
								.addProperty(
										sap.firefly.OlapProperty.LOWER_LEVEL_NODE_ALIGNMENT,
										sap.firefly.XValueType.ENUM_CONSTANT);
						lowerLevel
								.addValueHelpConstant(sap.firefly.Alignment.CHILDREN_ABOVE_PARENT);
						lowerLevel
								.addValueHelpConstant(sap.firefly.Alignment.CHILDREN_BELOW_PARENT);
						lowerLevel
								.addValueHelpConstant(sap.firefly.Alignment.DEFAULT_VALUE);
					},
					getPropertyConstantValue : function(type) {
						if (type === sap.firefly.OlapProperty.RESULT_ALIGNMENT) {
							return this.m_resultStructureController
									.getResultAlignment();
						}
						if (type === sap.firefly.OlapProperty.LOWER_LEVEL_NODE_ALIGNMENT) {
							return this.getLowerLevelNodeAlignment();
						}
						return sap.firefly.QDimension.$superclass.getPropertyConstantValue
								.call(this, type);
					},
					getAllDimensionMembers : function() {
						var member = sap.firefly.XList.create();
						var allStructureMembers;
						var structureIterator;
						var allDimensionMembers;
						if (this.isMeasureStructure()) {
							allStructureMembers = this.getAllStructureMembers();
							structureIterator = allStructureMembers
									.getIterator();
							while (structureIterator.hasNext()) {
								member.add(structureIterator.next());
							}
							structureIterator.releaseObject();
						} else {
							allDimensionMembers = this.processMemberHelp(
									sap.firefly.SyncType.BLOCKING, null, null)
									.getData();
							member = this.nodeToMember(allDimensionMembers);
						}
						return member;
					},
					nodeToMember : function(list) {
						var member = sap.firefly.XList.create();
						var iterator = list.getIterator();
						while (iterator.hasNext()) {
							member.add(iterator.next().getDimensionMember());
						}
						iterator.releaseObject();
						return member;
					},
					processVariableHelp : function(variableName, syncType,
							listener, customIdentifier) {
						var isValid = true;
						var extResult = null;
						var queryModel = this.getQueryModelBase();
						var queryManager;
						var variable;
						var variableType;
						var memberVariable;
						if (queryModel === null) {
							extResult = sap.firefly.ExtResult
									.createWithErrorMessage("Valuehelp is not supported in this context");
							isValid = false;
						} else {
							queryManager = queryModel.getQueryManagerBase();
							if (queryManager.supportsReInitVariables()
									&& queryManager.isSubmitted()) {
								extResult = sap.firefly.ExtResult
										.createWithErrorMessage("Valuehelp for variables is not allowed if variables are already submitted.");
								isValid = false;
							} else {
								variable = queryManager.getVariableProcessor()
										.getVariables().getByKey(variableName);
								if (variable !== null) {
									variableType = variable.getVariableType();
									if (variableType
											.isTypeOf(sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)) {
										memberVariable = variable;
										if (memberVariable.supportsValueHelp()) {
											extResult = queryManager
													.getValueHelpProvider()
													.processVariablehelp(this,
															memberVariable,
															syncType, listener,
															customIdentifier);
										} else {
											extResult = sap.firefly.ExtResult
													.createWithErrorMessage(sap.firefly.XStringUtils
															.concatenate3(
																	"Variable '",
																	variableName,
																	"' does not support valuehelp."));
											isValid = false;
										}
									} else {
										extResult = sap.firefly.ExtResult
												.createWithErrorMessage(sap.firefly.XStringUtils
														.concatenate2(
																"Valuehelp is not supported for variables of the type ",
																variableType
																		.getName()));
										isValid = false;
									}
								} else {
									extResult = sap.firefly.ExtResult
											.createWithErrorMessage(sap.firefly.XStringUtils
													.concatenate3("Variable '",
															variableName,
															"' is null."));
									isValid = false;
								}
							}
						}
						if ((isValid === false)
								&& (syncType === sap.firefly.SyncType.NON_BLOCKING)) {
							listener.onValuehelpExecuted(extResult, null,
									customIdentifier);
						}
						return extResult;
					},
					processIsNodeChildOfParent : function(nodeName, parentName,
							syncType, listener, customIdentifier) {
						return this.getSelector().processIsNodeChildOfParent(
								nodeName, parentName, syncType, listener,
								customIdentifier);
					},
					processMemberHelp : function(syncType, listener,
							customIdentifier) {
						var isValid = true;
						var extResult = null;
						var queryModel = this.getQueryModelBase();
						var queryManager;
						if (queryModel === null) {
							extResult = sap.firefly.ExtResult
									.createWithErrorMessage("Valuehelp is not supported in this context");
							isValid = false;
						} else {
							if (queryModel.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING) {
								extResult = sap.firefly.ExtResult
										.createWithErrorMessage("Valuehelp is not supported for Blending");
								isValid = false;
							} else {
								if (this.isStructure()) {
									extResult = (this.getSelector())
											.processMeasureHelp();
									if (listener !== null) {
										listener.onValuehelpExecuted(extResult,
												null, customIdentifier);
									}
									return extResult;
								}
								queryManager = queryModel.getQueryManagerBase();
								extResult = queryManager.getValueHelpProvider()
										.processMemberHelp(this, syncType,
												listener, customIdentifier);
							}
						}
						if ((isValid === false)
								&& (syncType === sap.firefly.SyncType.NON_BLOCKING)
								&& (listener !== null)) {
							listener.onValuehelpExecuted(extResult, null,
									customIdentifier);
						}
						return extResult;
					},
					getNameValuePairs : function() {
						if (this.m_nameValuePairs === null) {
							return sap.firefly.XList.create();
						}
						return this.m_nameValuePairs.getValuesAsReadOnlyList();
					},
					addNameValuePair : function(nameValuePair) {
						if (this.m_nameValuePairs === null) {
							this.m_nameValuePairs = sap.firefly.XHashMapByString
									.create();
						}
						if ((nameValuePair !== null)
								&& (!this.m_nameValuePairs
										.containsKey(nameValuePair.getName()))) {
							this.m_nameValuePairs.put(nameValuePair.getName(),
									nameValuePair);
						}
					},
					getNameValuePair : function(name) {
						if ((this.m_nameValuePairs !== null)
								&& this.m_nameValuePairs.containsKey(name)) {
							return this.m_nameValuePairs.getByKey(name);
						}
						return null;
					},
					getEffectiveResultSetFields : function() {
						var resultSetAttributes;
						var result;
						var i;
						var attribute;
						if (this.m_fieldLayoutType === sap.firefly.FieldLayoutType.FIELD_BASED) {
							return this.m_fieldContainer.getResultSetFields();
						}
						resultSetAttributes = this.m_attributeContainer
								.getResultSetAttributes();
						result = sap.firefly.XListOfNameObject.create();
						for (i = 0; i < resultSetAttributes.size(); i++) {
							attribute = resultSetAttributes.get(i);
							result.addAll(attribute.getResultSetFields());
						}
						return result;
					},
					getAttributesExt : function(context) {
						return this.m_attributeContainer
								.getAttributesExt(context);
					},
					getSelectorAttributes : function() {
						return this.m_attributeContainer
								.getSelectorAttributes();
					},
					setSelectorOrder : function(direction) {
						this.getSelector().setSelectorOrder(direction);
					},
					getSelectorOrder : function() {
						return this.getSelector().getSelectorOrder();
					},
					setSelectorPaging : function(start, end) {
						this.getSelector().setSelectorPaging(start, end);
					},
					getSelectorPagingStart : function() {
						return this.getSelector().getSelectorPagingStart();
					},
					getSelectorPagingEnd : function() {
						return this.getSelector().getSelectorPagingEnd();
					},
					setSelectorPagingDefault : function() {
						this.getSelector().setSelectorPagingDefault();
					},
					setSelectorPagingStart : function(start) {
						this.getSelector().setSelectorPagingStart(start);
					},
					setSelectorPagingEnd : function(end) {
						this.getSelector().setSelectorPagingEnd(end);
					},
					getFlatFieldsList : function() {
						return this.m_fieldContainer.getFlatFieldsList();
					},
					getHierarchyFieldsList : function() {
						return this.m_fieldContainer.getHierarchyFieldsList();
					},
					getFieldsListByActiveUsageType : function() {
						if (this.isHierarchyAssignedAndActive()) {
							return this.m_fieldContainer
									.getHierarchyFieldsList();
						}
						return this.m_fieldContainer.getFlatFieldsList();
					},
					getFieldsListByActiveUsageTypeExt : function(context) {
						if (context === sap.firefly.QContextType.RESULT_SET) {
							return this.getFieldsListByActiveUsageType();
						}
						return null;
					},
					getSelector : function() {
						if (this.m_selector === null) {
							this.m_selector = sap.firefly.QDimensionSelector
									.create(this);
						}
						return this.m_selector;
					},
					getSelectorContainer : function() {
						return this.getSelector().getSelectorContainer();
					},
					addSelectorSelectionForKey : function(filterValue,
							comparisonOperator) {
						return this.getSelector().addSelectorSelectionForKey(
								filterValue, comparisonOperator);
					},
					addSelectorSelectionIntervalForKey : function(lowValue,
							highValue, comparisonOperator) {
						return this.getSelector()
								.addSelectorSelectionIntervalForKey(lowValue,
										highValue, comparisonOperator);
					},
					addSelectorSelection : function(filterValue, field,
							comparisonOperator) {
						return this.getSelector().addSelectorSelection(
								filterValue, field, comparisonOperator);
					},
					addSelectorSelectionInterval : function(lowValue,
							highValue, field, comparisonOperator) {
						return this.getSelector().addSelectorSelectionInterval(
								lowValue, highValue, field, comparisonOperator);
					},
					clearSelectorSelections : function() {
						this.getSelector().clearSelectorSelections();
					},
					getSelectorFilterUsage : function() {
						return this.getSelector().getSelectorFilterUsage();
					},
					setSelectorFilterUsage : function(queryFilterUsage) {
						this.getSelector().setSelectorFilterUsage(
								queryFilterUsage);
					},
					setSelectorHierarchyNode : function(parent) {
						this.getSelector().setSelectorHierarchyNode(parent);
					},
					clearSelectorHierarchyNode : function() {
						this.getSelector().clearSelectorHierarchyNode();
					},
					getSelectorHierarchyNode : function() {
						return this.getSelector().getSelectorHierarchyNode();
					},
					getFilter : function() {
						var queryModel = this.getQueryModel();
						var selectionStateContainer;
						var complexSelectionRoot;
						var cartesianProduct;
						if (queryModel === null) {
							return null;
						}
						selectionStateContainer = queryModel.getSelector()
								.getSelectionStateContainer();
						complexSelectionRoot = selectionStateContainer
								.getFilterRootElement();
						if ((complexSelectionRoot === null)
								|| selectionStateContainer.isCartesianProduct()) {
							cartesianProduct = selectionStateContainer
									.getCartesianProductWithDefault();
							return cartesianProduct
									.getCartesianListByDimensionName(this
											.getName());
						}
						if (selectionStateContainer.isComplexSelection()) {
							return this
									.getFilterFromComplexSelection(complexSelectionRoot);
						}
						return null;
					},
					getFilterFromComplexSelection : function(
							complexSelectionRoot) {
						var cartesianList = null;
						var selectionIterator;
						var component;
						if (complexSelectionRoot.getOlapComponentType() === sap.firefly.FilterComponentType.AND) {
							selectionIterator = complexSelectionRoot
									.getChildrenIterator();
							while (selectionIterator.hasNext()) {
								component = selectionIterator.next();
								if ((component.getOlapComponentType() === sap.firefly.FilterComponentType.CARTESIAN_LIST)
										|| (component.getOlapComponentType() === sap.firefly.FilterComponentType.CARTESIAN_SPATIAL_LIST)) {
									if ((component).getDimension() === this) {
										if (cartesianList !== null) {
											return null;
										}
										cartesianList = component;
									}
								}
							}
						}
						return cartesianList;
					},
					setSelectorRootExpandingLevels : function(
							relativeLevelCount) {
						this.getSelector().setSelectorRootExpandingLevels(
								relativeLevelCount);
					},
					getSelectorRootLevel : function() {
						return this.getSelector().getSelectorRootLevel();
					},
					setSelectorHierarchyActive : function(isActive) {
						this.getSelector().setSelectorHierarchyActive(isActive);
					},
					isSelectorHierarchyActive : function() {
						return this.getSelector().isSelectorHierarchyActive();
					},
					getSelectorKeyField : function() {
						return this.getSelector().getSelectorKeyField();
					},
					getSelectorTextField : function() {
						return this.getSelector().getSelectorTextField();
					},
					getSelectorFields : function() {
						return this.m_fieldContainer.getSelectorFields();
					},
					setSkipEntries : function(amount) {
						this.m_skip = amount;
						this.notifyNodeChanged();
					},
					getSkipEntries : function() {
						return this.m_skip;
					},
					setTopEntries : function(amount) {
						this.m_top = amount;
						this.notifyNodeChanged();
					},
					getTopEntries : function() {
						return this.m_top;
					},
					getSelectorDisplayKeyField : function() {
						return this.getSelector().getSelectorDisplayKeyField();
					},
					setSelectorFilterOnDisplayKey : function(isUsingDisplayKey) {
						this.getSelector().setSelectorFilterOnDisplayKey(
								isUsingDisplayKey);
					},
					isSelectorFilteringOnDisplayKey : function() {
						return this.getSelector()
								.isSelectorFilteringOnDisplayKey();
					},
					addSelectorSelectionForText : function(filterValue,
							comparisonOperator) {
						return this.getSelector().addSelectorSelectionForText(
								filterValue, comparisonOperator);
					},
					setSelectorGettingInterval : function(doGetInterval) {
						return this.getSelector().setSelectorGettingInterval(
								doGetInterval);
					},
					isSelectorGettingInterval : function() {
						return this.getSelector().isSelectorGettingInterval();
					},
					getGroupingDimensions : function() {
						var dimensionAccessor = this.getQueryModel();
						var groupingDimensions;
						var dimensionNames;
						var dimension;
						if (dimensionAccessor === null) {
							dimensionAccessor = this.getDimensionAccessor();
						}
						groupingDimensions = sap.firefly.XList.create();
						if ((dimensionAccessor !== null)
								&& (this.m_groupingDimensions !== null)) {
							dimensionNames = this.m_groupingDimensions
									.getIterator();
							while (dimensionNames.hasNext()) {
								dimension = dimensionAccessor
										.getDimensionByName(dimensionNames
												.next());
								if (dimension !== null) {
									groupingDimensions.add(dimension);
								}
							}
						}
						return groupingDimensions;
					},
					addGroupingDimension : function(groupingDimension) {
						if (this.m_groupingDimensions === null) {
							this.m_groupingDimensions = sap.firefly.XHashSetOfString
									.create();
						}
						if (this.m_groupingDimensions
								.contains(groupingDimension)) {
							return;
						}
						this.m_groupingDimensions.put(groupingDimension);
					},
					getGroupedDimensions : function() {
						var dimensionAccessor = this.getQueryModel();
						var groupedDimensions;
						var dimensions;
						var i;
						var dimension;
						var groupingDimensions;
						var j;
						var groupingDimension;
						if (dimensionAccessor === null) {
							dimensionAccessor = this.getDimensionAccessor();
						}
						groupedDimensions = sap.firefly.XList.create();
						if (this.isGroupingDimension()) {
							dimensions = dimensionAccessor.getDimensions();
							for (i = 0; i < dimensions.size(); i++) {
								dimension = dimensions.get(i);
								if (dimension === this) {
									continue;
								}
								groupingDimensions = dimension
										.getGroupingDimensions();
								if (groupingDimensions !== null) {
									for (j = 0; j < groupingDimensions.size(); j++) {
										groupingDimension = groupingDimensions
												.get(j);
										if (groupingDimension !== this) {
											continue;
										}
										if (groupedDimensions
												.contains(dimension) === false) {
											groupedDimensions.add(dimension);
										}
									}
								}
							}
						}
						return groupedDimensions;
					},
					getLeveledHierarchies : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getQueryManager().getMetadataModel()
								.getLeveledHierarchiesByDimension(this);
					},
					clearSelectorSelectionsByDimension : function(dimension) {
						this.getSelector().clearSelectorSelectionsByDimension(
								dimension);
					},
					getExternalName : function() {
						return this.m_externalName;
					},
					setExternalName : function(externalName) {
						this.m_externalName = externalName;
					},
					supportsLowerCase : function() {
						return this.m_supportsLowerCase;
					},
					setSupportsLowerCase : function(supportsLowerCase) {
						this.m_supportsLowerCase = supportsLowerCase;
					},
					setSelectorHierarchyNodeByName : function(parent) {
						this.getSelector().setSelectorHierarchyNodeByName(
								parent);
					},
					getSelectorHierarchyNodeName : function() {
						return this.getSelector()
								.getSelectorHierarchyNodeName();
					},
					getHierarchyPathField : function() {
						return this.m_fieldContainer.getHierarchyPathField();
					},
					setHierarchyPathField : function(field) {
						this.m_fieldContainer.setHierarchyPathField(field);
					},
					setSelectorComplexSelectionRoot : function(complexSelection) {
						this.getSelector().setSelectorComplexSelectionRoot(
								complexSelection);
					},
					newHierarchy : function(name) {
						return sap.firefly.QHierarchy.create(this.getContext(),
								this, name);
					},
					getDefaultAxisType : function() {
						return this.m_defaultAxisType;
					},
					setDefaultAxisType : function(axisType) {
						this.m_defaultAxisType = axisType;
					},
					getDefaultResultSetFields : function() {
						return this.m_fieldContainer
								.getDefaultResultSetFields();
					},
					addDefaultResultSetField : function(field) {
						this.m_fieldContainer.addDefaultResultSetField(field);
					},
					clearDefaultResultSetFields : function() {
						this.m_fieldContainer.clearDefaultResultSetFields();
					},
					setHasFixedResultSetFields : function(
							hasFixedResultSetFields) {
						this.m_fieldContainer
								.setHasFixedResultSetFields(hasFixedResultSetFields);
					},
					hasFixedResultSetFields : function() {
						return this.m_fieldContainer.hasFixedResultSetFields();
					},
					convertToFieldLayoutType : function(type) {
						var effectiveResultSetFields;
						var fields;
						if (this.m_fieldLayoutType !== type) {
							if (this.m_supportedFieldLayoutType.contains(type
									.getName())) {
								if (type === sap.firefly.FieldLayoutType.FIELD_BASED) {
									effectiveResultSetFields = this
											.getEffectiveResultSetFields();
									fields = this.getResultSetFields();
									fields.queueEventing();
									fields.clear();
									fields.addAll(effectiveResultSetFields);
									fields.resumeEventing();
									this.setFieldLayoutType(type);
								}
							}
						}
					},
					getNavigationNodes : function() {
						return this.getSelector().getNavigationNodes();
					},
					getAllStructureMembers : function() {
						return this.m_allStructureMembers;
					},
					getStructureLayout : function() {
						if (this.supportsBasicStructureMembers()) {
							return this.m_structureLayout;
						}
						return null;
					},
					getMemberLayout : function() {
						if (this.supportsMemberLayout()) {
							return this.m_memberLayoutWrapper;
						}
						return null;
					},
					supportsMemberLayout : function() {
						return this.isStructure();
					},
					isStructure : function() {
						if (this.m_type === null) {
							return false;
						}
						return this.m_type
								.isTypeOf(sap.firefly.DimensionType.ABSTRACT_STRUCTURE);
					},
					isMeasureStructure : function() {
						return this.m_type === sap.firefly.DimensionType.MEASURE_STRUCTURE;
					},
					containsMeasures : function() {
						return this.m_type === sap.firefly.DimensionType.MEASURE_STRUCTURE;
					},
					getStructureMember : function(name) {
						if (this.m_allStructureMembers === null) {
							return null;
						}
						return this.m_allStructureMembers.getByKey(name);
					},
					supportsResultVisibility : function() {
						if (this.isStructure()) {
							return false;
						}
						return this.m_resultStructureController
								.supportsResultVisibility();
					},
					supportsResultAlignment : function() {
						if (this.isStructure()) {
							return false;
						}
						return this.m_resultStructureController
								.supportsResultAlignment();
					},
					supportsAdvancedResultStructure : function() {
						if (this.isStructure()) {
							return false;
						}
						return this.m_resultStructureController
								.supportsAdvancedResultStructure();
					},
					addNewBasicMeasure : function(name, text) {
						var member;
						if (this.supportsBasicStructureMembers()) {
							member = sap.firefly.QBasicMeasure
									._createBasicMeasure(this.getContext(),
											this);
							member.setName(name);
							member.setText(text);
							this.addMeasureInternal(member);
							return member;
						}
						return null;
					},
					addNewFormulaMeasure : function(name, text) {
						var newMember;
						if (this.supportsCustomMembers()) {
							newMember = sap.firefly.QFormulaMeasure
									._createFormulaMeasure(this.getContext(),
											this.getQueryModelBase(), this);
							newMember.setName(name);
							newMember.setText(text);
							this.addMeasureInternal(newMember);
							this.addQueryDataCells(newMember);
							return newMember;
						}
						return null;
					},
					addNewRestrictedMeasure : function(name, text) {
						var newMember;
						if (this.supportsCustomMembers()) {
							newMember = sap.firefly.QRestrictedMeasure
									._createRestrictedMeasure(
											this.getContext(), this);
							newMember.setName(name);
							newMember.setText(text);
							this.addMeasureInternal(newMember);
							this.addQueryDataCells(newMember);
							return newMember;
						}
						return null;
					},
					addQueryDataCells : function(member) {
						var queryModel = this.getQueryModelBase();
						var queryManager = queryModel.getQueryManager();
						var systemType = queryManager.getSystemDescription()
								.getSystemType();
						var allDataCells;
						var nonMeasureDimension;
						var allStructureMembers;
						var membersIterator;
						var newDataCell;
						var dataCell;
						if (systemType.isTypeOf(sap.firefly.SystemType.BW)
								&& this.getModelCapabilities()
										.supportsRestrictedMeasures()) {
							this.removeQueryDataCells(member);
							allDataCells = queryModel.getQueryDataCellsBase();
							nonMeasureDimension = queryModel
									.getNonMeasureDimension();
							if (nonMeasureDimension !== null) {
								allStructureMembers = nonMeasureDimension
										.getAllStructureMembers();
								membersIterator = allStructureMembers
										.getIterator();
								while (membersIterator.hasNext()) {
									newDataCell = allDataCells
											.newQueryDataCell(null);
									newDataCell
											.addDimensionMemberReference(member
													.getName());
									newDataCell
											.addDimensionMemberReference(membersIterator
													.next().getName());
								}
							} else {
								dataCell = allDataCells.newQueryDataCell(null);
								dataCell.addDimensionMemberReference(member
										.getName());
							}
						}
					},
					removeQueryDataCells : function(member) {
						var dataCellsWithMemberRef = this.getQueryDataCells(
								member).getIterator();
						var allDataCells = this.getQueryModelBase()
								.getQueryDataCellsBase();
						while (dataCellsWithMemberRef.hasNext()) {
							allDataCells.removeElement(dataCellsWithMemberRef
									.next());
						}
					},
					getQueryDataCells : function(member) {
						var cells = sap.firefly.XList.create();
						var allDataCells = this.getQueryModelBase()
								.getQueryDataCells();
						var size = allDataCells.size();
						var i;
						var dataCell;
						for (i = 0; i < size; i++) {
							dataCell = allDataCells.get(i);
							if (dataCell.hasMemberReference(member)) {
								cells.add(dataCell);
							}
						}
						return cells;
					},
					addMeasure : function(newMeasure) {
						if ((this.supportsBasicStructureMembers() && (newMeasure
								.getMemberType() === sap.firefly.MemberType.BASIC_MEASURE))
								|| this.supportsCustomMembers()) {
							this.addMeasureInternal(newMeasure);
						}
					},
					addMeasureInternal : function(newMeasure) {
						var measureBase;
						if (newMeasure !== null) {
							measureBase = newMeasure;
							this.assertMemberUniqueName(measureBase.getName());
							measureBase.setParent(this);
							measureBase.initializeFieldValues();
							this.m_allStructureMembers.add(newMeasure);
							this.m_structureLayout.add(newMeasure);
						}
					},
					removeMeasure : function(name) {
						var member;
						var memberType;
						var sortingManager;
						var measureSorting;
						var filter;
						var i;
						var filterElement;
						var comparisonOperator;
						var dimensionMember;
						if (this.supportsCustomMembers()) {
							member = this.m_allStructureMembers.getByKey(name);
							if (member !== null) {
								memberType = member.getMemberType();
								if ((memberType !== sap.firefly.MemberType.FORMULA)
										&& (memberType !== sap.firefly.MemberType.RESTRICTED_MEASURE)) {
									throw sap.firefly.XException
											.createIllegalArgumentException(sap.firefly.XString
													.concatenate2(
															"Structure member cannot be removed: ",
															name));
								}
								this.removeQueryDataCells(member);
								sortingManager = this.getQueryModel()
										.getSortingManager();
								measureSorting = sortingManager
										.getMeasureSorting(member, false);
								if (measureSorting !== null) {
									sortingManager.getSortingOperations()
											.removeElement(measureSorting);
								}
							}
							filter = this.getFilter();
							if (filter !== null) {
								for (i = 0; i < filter.size(); i++) {
									filterElement = filter.getOp(i);
									comparisonOperator = filterElement
											.getComparisonOperator();
									if (comparisonOperator
											.getNumberOfParameters() === 1) {
										dimensionMember = filterElement
												.getLow().getDimensionMember();
										if ((dimensionMember !== null)
												&& sap.firefly.XString.isEqual(
														dimensionMember
																.getName(),
														name)) {
											filter.removeAt(i);
											break;
										}
									}
								}
							}
							this.m_allStructureMembers.removeElement(member);
							this.m_structureLayout.removeElement(member);
						}
					},
					removeOverdefinedAccount : function(name) {
						var member;
						var dimMember;
						var memberType;
						var filter;
						var i;
						var filterElement;
						var comparisonOperator;
						var dimensionMember;
						if (this.m_type === sap.firefly.DimensionType.ACCOUNT) {
							member = this.m_allStructureMembers.getByKey(name);
							dimMember = this.getDimensionMemberWithFormat(name,
									false, null);
							if (member === null) {
								return;
							}
							memberType = member.getMemberType();
							if ((memberType !== sap.firefly.MemberType.FORMULA)
									&& (memberType !== sap.firefly.MemberType.RESTRICTED_MEASURE)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XString
												.concatenate2(
														"Structure member cannot be removed: ",
														name));
							}
							filter = this.getFilter();
							if (filter !== null) {
								for (i = 0; i < filter.size(); i++) {
									filterElement = filter.getOp(i);
									comparisonOperator = filterElement
											.getComparisonOperator();
									if (comparisonOperator
											.getNumberOfParameters() === 1) {
										dimensionMember = filterElement
												.getLow().getDimensionMember();
										if (dimensionMember === member) {
											filterElement.getLow()
													.setDimensionMember(
															dimMember);
											break;
										}
									}
								}
							}
							this.m_allStructureMembers.removeElement(member);
							this.m_structureLayout.removeElement(member);
						}
					},
					removeCustomMembers : function() {
						var measureIdx;
						var iqStructureMember;
						if (this.supportsCustomMembers()) {
							this.m_structureLayout.queueEventing();
							for (measureIdx = 0; measureIdx < this.m_allStructureMembers
									.size(); measureIdx++) {
								iqStructureMember = this.m_allStructureMembers
										.get(measureIdx);
								if ((iqStructureMember.getMemberType() === sap.firefly.MemberType.FORMULA)
										|| (iqStructureMember.getMemberType() === sap.firefly.MemberType.RESTRICTED_MEASURE)) {
									this.removeMeasure(iqStructureMember
											.getName());
									measureIdx--;
								}
							}
							this.m_structureLayout.resumeEventing();
						}
					},
					supportsCustomMembers : function() {
						return ((this.isStructure()) || (this.m_type === sap.firefly.DimensionType.ACCOUNT));
					},
					getStructureMembers : function(getBasicMembers) {
						var list = sap.firefly.XListOfNameObject.create();
						var i;
						var member;
						for (i = 0; i < this.m_allStructureMembers.size(); i++) {
							member = this.m_allStructureMembers.get(i);
							if ((member.getMemberType() === sap.firefly.MemberType.BASIC_MEASURE) === getBasicMembers) {
								list.add(member);
							}
						}
						list
								.sortByDirection(sap.firefly.XSortDirection.ASCENDING);
						return list;
					},
					getBasicStructureMembers : function() {
						if (this.supportsBasicStructureMembers()) {
							return this.getStructureMembers(true);
						}
						return null;
					},
					supportsBasicStructureMembers : function() {
						return this.isStructure()
								|| (this.m_type === sap.firefly.DimensionType.ACCOUNT);
					},
					getExtendedStructureMembers : function() {
						if (this.isStructure()) {
							return this.getStructureMembers(false);
						}
						return null;
					},
					assertMemberUniqueName : function(name) {
						if (name === null) {
							throw sap.firefly.XException
									.createRuntimeException("The measure has no name");
						}
						if (this.m_allStructureMembers.containsKey(name)) {
							throw sap.firefly.XException
									.createRuntimeException(sap.firefly.XStringUtils
											.concatenate3(
													"The MeasureStructure already has a measure '",
													name,
													"' defined. You can call removeMeasure(String name) to remove a custom measure previously defined."));
						}
					},
					containsStructureMember : function(name) {
						if (this.m_allStructureMembers === null) {
							return false;
						}
						return this.m_allStructureMembers.containsKey(name);
					},
					supportsCalculatedBeforeAggregation : function() {
						return this.m_supportsCalculatedBeforeAggregation;
					},
					setSupportsCalculatedBeforeAggregation : function(
							supportsCalculatedBeforeAggregation) {
						this.m_supportsCalculatedBeforeAggregation = supportsCalculatedBeforeAggregation;
					},
					setHierarchyNavigationDeltaMode : function(isDeltaMode) {
						if (isDeltaMode
								&& (this.getQueryModel()
										.supportsHierarchyNavigationDeltaMode() === false)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						this.m_hierarchyNavigationDeltaMode = isDeltaMode;
					},
					isHierarchyNavigationDeltaMode : function() {
						return this.m_hierarchyNavigationDeltaMode;
					},
					getCubeBlendingPropertiesField : function() {
						return this.m_fieldContainer
								.getCubeBlendingPropertiesField();
					},
					setCubeBlendingPropertiesField : function(
							blendingPropertiesField) {
						this.m_fieldContainer
								.setCubeBlendingPropertiesField(blendingPropertiesField);
					},
					newValueHelpMembers : function() {
						return null;
					},
					setAlternativeFieldValue : function(hierarchyKey,
							memberKey, fieldName, value, language) {
						var internalLanguage;
						var keyTypeStringRepresentation;
						var keyMap;
						var fieldMap;
						var languageMap;
						if (language === null) {
							internalLanguage = "";
						} else {
							internalLanguage = language;
						}
						if (this.m_alternativeFieldValues === null) {
							this.m_alternativeFieldValues = sap.firefly.XHashMapByString
									.create();
						}
						keyTypeStringRepresentation = sap.firefly.XBoolean
								.convertBooleanToString(hierarchyKey);
						keyMap = this.m_alternativeFieldValues
								.getByKey(keyTypeStringRepresentation);
						if (keyMap === null) {
							keyMap = sap.firefly.XHashMapByString.create();
							this.m_alternativeFieldValues.put(
									keyTypeStringRepresentation, keyMap);
						}
						fieldMap = keyMap.getByKey(memberKey);
						if (fieldMap === null) {
							fieldMap = sap.firefly.XHashMapByString.create();
							keyMap.put(memberKey, fieldMap);
						}
						languageMap = fieldMap.getByKey(fieldName);
						if (languageMap === null) {
							languageMap = sap.firefly.XHashMapByString.create();
							fieldMap.put(fieldName, languageMap);
						}
						languageMap.put(internalLanguage, value);
					},
					getAlternativeFieldValue : function(hierarchyKey,
							memberKey, fieldName, language) {
						var keyMap;
						var fieldMap;
						var languageMap;
						var value;
						if (this.m_alternativeFieldValues !== null) {
							keyMap = this.m_alternativeFieldValues
									.getByKey(sap.firefly.XBoolean
											.convertBooleanToString(hierarchyKey));
							if (keyMap !== null) {
								fieldMap = keyMap.getByKey(memberKey);
								if (fieldMap !== null) {
									languageMap = fieldMap.getByKey(fieldName);
									if (languageMap !== null) {
										if (sap.firefly.XStringUtils
												.isNullOrEmpty(language)) {
											return languageMap.getByKey("");
										}
										value = languageMap.getByKey(language);
										if (value === null) {
											return languageMap.getByKey("");
										}
										return value;
									}
								}
							}
						}
						return null;
					},
					getAlternativeFieldValueMemberKeys : function(hierarchyKey) {
						var keyMap;
						if (this.m_alternativeFieldValues !== null) {
							keyMap = this.m_alternativeFieldValues
									.getByKey(sap.firefly.XBoolean
											.convertBooleanToString(hierarchyKey));
							if (keyMap !== null) {
								return keyMap.getKeysAsReadOnlyListOfString();
							}
						}
						return null;
					},
					getAlternativeFieldValueFields : function(hierarchyKey,
							memberKey) {
						var keyMap;
						var fieldMap;
						if (this.m_alternativeFieldValues !== null) {
							keyMap = this.m_alternativeFieldValues
									.getByKey(sap.firefly.XBoolean
											.convertBooleanToString(hierarchyKey));
							if (keyMap !== null) {
								fieldMap = keyMap.getByKey(memberKey);
								if (fieldMap !== null) {
									return fieldMap
											.getKeysAsReadOnlyListOfString();
								}
							}
						}
						return null;
					},
					getAlternativeFieldValueLanguages : function(hierarchyKey,
							memberKey, fieldName) {
						var keyMap;
						var fieldMap;
						var languageMap;
						if (this.m_alternativeFieldValues !== null) {
							keyMap = this.m_alternativeFieldValues
									.getByKey(sap.firefly.XBoolean
											.convertBooleanToString(hierarchyKey));
							if (keyMap !== null) {
								fieldMap = keyMap.getByKey(memberKey);
								if (fieldMap !== null) {
									languageMap = fieldMap.getByKey(fieldName);
									if (languageMap !== null) {
										return languageMap
												.getKeysAsReadOnlyListOfString();
									}
								}
							}
						}
						return null;
					},
					canBeAggregated : function() {
						return this.m_canBeAggregated;
					},
					setCanBeAggregated : function(canBeAggregated) {
						this.m_canBeAggregated = canBeAggregated;
					},
					getAttributeViewName : function() {
						return this.m_attributeViewName;
					},
					setAttributeViewName : function(attributeViewName) {
						this.m_attributeViewName = attributeViewName;
					},
					setIgnoreOnOptimizedExport : function(isIgnored) {
						this.m_isIgnoredOnExport = isIgnored;
					},
					isIgnoredOnOptimizedExport : function() {
						return this.m_isIgnoredOnExport;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherDim = other;
						var otherFieldLayout;
						var attributeContainer;
						var otherAttributeContainer;
						var selector;
						var allStructureMembers;
						var memberSize;
						var i;
						var otherStructureMember;
						var structureMember;
						this.m_hierarchyManager.mergeDeepRecursive(settings,
								otherDim);
						if (settings.isInitialBWMerge()) {
							if (this.getFieldLayoutType() === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
								otherFieldLayout = otherDim
										.getFieldLayoutType();
								this.setFieldLayoutType(otherFieldLayout);
								if (otherFieldLayout === sap.firefly.FieldLayoutType.ATTRIBUTE_BASED) {
									attributeContainer = this
											.getAttributeContainerBase();
									otherAttributeContainer = otherDim
											.getAttributeContainer();
									attributeContainer.mergeDeepRecursive(
											settings, otherAttributeContainer);
								}
							}
						}
						selector = this.getSelector();
						selector.mergeDeepRecursive(settings, otherDim
								.getSelector());
						this.setNewReadModes(otherDim,
								sap.firefly.QContextType.RESULT_SET);
						this.setNewReadModes(otherDim,
								sap.firefly.QContextType.SELECTOR);
						this.setNewReadModes(otherDim,
								sap.firefly.QContextType.VARIABLE);
						allStructureMembers = otherDim.getAllStructureMembers();
						if (this.isStructure()) {
							memberSize = allStructureMembers.size();
							for (i = 0; i < memberSize; i++) {
								otherStructureMember = allStructureMembers
										.get(i);
								structureMember = this.m_allStructureMembers
										.getByKey(otherStructureMember
												.getName());
								if (structureMember !== null) {
									structureMember.mergeDeepRecursive(
											settings, otherStructureMember);
								}
							}
						}
					},
					setNewReadModes : function(otherDim, context) {
						var readModeContainer = this.m_readModes
								.getByKey(context.getName());
						var supportedReadModes;
						var size;
						var idx;
						var activeReadMode;
						var defaultReadMode;
						readModeContainer.clearReadmode();
						supportedReadModes = otherDim.getSupportedReadModes(
								context).getValuesAsReadOnlyList();
						size = supportedReadModes.size();
						for (idx = 0; idx < size; idx++) {
							readModeContainer
									.addSupportedReadMode(supportedReadModes
											.get(idx));
						}
						activeReadMode = otherDim.getReadMode(context);
						defaultReadMode = otherDim.getReadModeDefault(context);
						readModeContainer.setDefaultReadMode(defaultReadMode);
						if (activeReadMode === null) {
							readModeContainer
									.setActiveReadMode(defaultReadMode);
						} else {
							readModeContainer.setActiveReadMode(activeReadMode);
						}
					},
					activateHierarchy : function(name, version, dueDate) {
						this.m_hierarchyManager.activateHierarchy(name,
								version, dueDate);
					},
					setHierarchySelection : function(name, version) {
						this.m_hierarchyManager.setHierarchySelection(name,
								version);
					},
					getHierarchyUniqueName : function(hierarchyName) {
						return this.m_hierarchyManager
								.getHierarchyUniqueName(hierarchyName);
					},
					setHierarchyName : function(name) {
						this.m_hierarchyManager.setHierarchyName(name);
					},
					setHierarchyVersion : function(version) {
						this.m_hierarchyManager.setHierarchyVersion(version);
					},
					setHierarchyDueDate : function(dueDate) {
						this.m_hierarchyManager.setHierarchyDueDate(dueDate);
					},
					setHierarchyActive : function(active) {
						return this.m_hierarchyManager
								.setHierarchyActive(active);
					},
					getHierarchyVersion : function() {
						return this.m_hierarchyManager.getHierarchyVersion();
					},
					getHierarchyDueDate : function() {
						return this.m_hierarchyManager.getHierarchyDueDate();
					},
					isHierarchyActive : function() {
						return this.m_hierarchyManager.isHierarchyActive();
					},
					getHierarchy : function() {
						return this.m_hierarchyManager.getHierarchy();
					},
					setHierarchy : function(hierarchy) {
						this.m_hierarchyManager.setHierarchy(hierarchy);
					},
					getHierarchyName : function() {
						return this.m_hierarchyManager.getHierarchyName();
					},
					isHierarchyAssigned : function() {
						return this.m_hierarchyManager.isHierarchyAssigned();
					},
					isHierarchyAssignedAndActive : function() {
						return this.m_hierarchyManager
								.isHierarchyAssignedAndActive();
					},
					getLowerLevelNodeAlignment : function() {
						return this.m_hierarchyManager
								.getLowerLevelNodeAlignment();
					},
					hasDefaultLowerLevelNodeAlignment : function() {
						return this.m_hierarchyManager
								.hasDefaultLowerLevelNodeAlignment();
					},
					setLowerLevelNodeAlignment : function(alignment) {
						this.m_hierarchyManager
								.setLowerLevelNodeAlignment(alignment);
					},
					supportsLowerLevelNodeAlignment : function(alignment) {
						return this.m_hierarchyManager
								.supportsLowerLevelNodeAlignment(alignment);
					},
					hasNodeCondensation : function() {
						return this.m_hierarchyManager.hasNodeCondensation();
					},
					setHasNodeCondensation : function(condense) {
						this.m_hierarchyManager
								.setHasNodeCondensation(condense);
					},
					getMemberOfPostedNodeVisibility : function() {
						return this.m_hierarchyManager
								.getMemberOfPostedNodeVisibility();
					},
					setMemberOfPostedNodeVisibility : function(visibility) {
						this.m_hierarchyManager
								.setMemberOfPostedNodeVisibility(visibility);
					},
					getHierarchyValueHelp : function(syncType) {
						return this.m_hierarchyManager
								.getHierarchyValueHelp(syncType);
					},
					getInitialDrillLevel : function() {
						return this.m_hierarchyManager.getInitialDrillLevel();
					},
					setInitialDrillLevel : function(relativeLevelCount) {
						this.m_hierarchyManager
								.setInitialDrillLevel(relativeLevelCount);
					},
					getHierarchyDueDateVariableName : function() {
						return this.m_hierarchyManager
								.getHierarchyDueDateVariableName();
					},
					setHierarchyDueDateVariableName : function(name) {
						this.m_hierarchyManager
								.setHierarchyDueDateVariableName(name);
					},
					useHierarchyDueDateVariable : function() {
						return this.m_hierarchyManager
								.useHierarchyDueDateVariable();
					},
					setUseHierarchyDueDateVariable : function(useVariable) {
						this.m_hierarchyManager
								.setUseHierarchyDueDateVariable(useVariable);
					},
					supportsHierarchy : function() {
						return this.m_hierarchyManager.supportsHierarchy();
					},
					getHierarchies : function() {
						return this.m_hierarchyManager.getHierarchies();
					},
					supportsHierarchyMetadata : function() {
						return this.m_hierarchyManager
								.supportsHierarchyMetadata();
					},
					supportsHierarchyLevelMetadata : function() {
						return this.m_hierarchyManager
								.supportsHierarchyLevelMetadata();
					},
					supportsExpandBottomUp : function() {
						return this.m_hierarchyManager.supportsExpandBottomUp();
					},
					getHierarchyManager : function() {
						return this.m_hierarchyManager;
					},
					getHierarchyManagerBase : function() {
						return this.m_hierarchyManager;
					},
					getOrderedStructureMemberNames : function() {
						if ((this.m_allStructureMembers === null)
								|| this.m_allStructureMembers.isEmpty()) {
							return null;
						}
						return this.m_allStructureMembers
								.getKeysAsReadOnlyListOfString();
					},
					reOrderStructureMembers : function(
							orderedStructureMemberNames) {
						var existingOrder;
						var orderIsEqual;
						var i;
						var memberName;
						var tmpStructureMembers;
						var orderedNamesIndex;
						var structureMember;
						if (this.m_allStructureMembers === null) {
							return;
						}
						if (orderedStructureMemberNames === null) {
							return;
						}
						if (this.m_allStructureMembers.size() !== orderedStructureMemberNames
								.size()) {
							return;
						}
						existingOrder = this.m_allStructureMembers
								.getKeysAsReadOnlyListOfString();
						if (existingOrder.size() !== orderedStructureMemberNames
								.size()) {
							return;
						}
						orderIsEqual = true;
						for (i = 0; i < orderedStructureMemberNames.size(); i++) {
							memberName = orderedStructureMemberNames.get(i);
							if (sap.firefly.XString.isEqual(memberName,
									existingOrder.get(i)) === false) {
								orderIsEqual = false;
								break;
							}
						}
						if (orderIsEqual) {
							return;
						}
						tmpStructureMembers = sap.firefly.XListOfNameObject
								.create();
						for (orderedNamesIndex = 0; orderedNamesIndex < orderedStructureMemberNames
								.size(); orderedNamesIndex++) {
							structureMember = this.m_allStructureMembers
									.getByKey(orderedStructureMemberNames
											.get(orderedNamesIndex));
							if (structureMember === null) {
								continue;
							}
							tmpStructureMembers.add(structureMember);
						}
						if (this.m_allStructureMembers.size() !== tmpStructureMembers
								.size()) {
							tmpStructureMembers.releaseObject();
							return;
						}
						this.m_allStructureMembers.releaseObject();
						this.m_allStructureMembers = tmpStructureMembers;
					},
					removeFieldByName : function(fieldName) {
						this.m_fieldContainer.removeFieldByName(fieldName);
					},
					getDefaultHierarchyName : function() {
						return this.m_hierarchyManager
								.getDefaultHierarchyName();
					},
					isEnforcedDynamicValue : function() {
						return this.m_isEnforcedDynamicValue;
					},
					setEnforceDynamicValue : function(enforceDynamicValue) {
						this.m_isEnforcedDynamicValue = enforceDynamicValue;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionMember",
				sap.firefly.QAbstractDimensionMember,
				{
					$statics : {
						createDimensionMember : function(context, dimension) {
							var member = new sap.firefly.QDimensionMember();
							member.setupDimensionMember(context, dimension);
							return member;
						}
					},
					m_attributeMemberMap : null,
					m_nameValueException : null,
					m_resultVisibility : null,
					copyDimensionMember : function(origin) {
						sap.firefly.QDimensionMember.$superclass.copyAbstractDimensionMember
								.call(this, origin);
						this.m_attributeMemberMap = origin.m_attributeMemberMap
								.createMapByStringCopy();
						this.m_nameValueException = origin.m_nameValueException;
						this.m_resultVisibility = origin.m_resultVisibility;
					},
					setupDimensionMember : function(context, dimension) {
						this.setupAbstractDimensionMember(context, dimension);
						this.setType(sap.firefly.MemberType.MEMBER);
						this.m_attributeMemberMap = sap.firefly.XHashMapByString
								.create();
					},
					releaseObject : function() {
						this.m_attributeMemberMap = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_attributeMemberMap);
						this.m_nameValueException = null;
						this.m_resultVisibility = null;
						sap.firefly.QDimensionMember.$superclass.releaseObject
								.call(this);
					},
					isEqualTo : function(other) {
						var otherMember;
						if (other === null) {
							return false;
						}
						if (this === other) {
							return true;
						}
						otherMember = other;
						if (sap.firefly.XString.isEqual(this.getName(),
								otherMember.getName()) === false) {
							return false;
						}
						if (sap.firefly.XString.isEqual(this.getText(),
								otherMember.getText()) === false) {
							return false;
						}
						return true;
					},
					compareTo : function(objectToCompare) {
						var otherMember;
						var compare;
						if (objectToCompare === null) {
							return -1;
						}
						if (objectToCompare === this) {
							return 0;
						}
						otherMember = objectToCompare;
						compare = sap.firefly.XString.compare(this.getName(),
								otherMember.getName());
						if (compare === 0) {
							compare = sap.firefly.XString.compare(this
									.getText(), otherMember.getText());
						}
						return compare;
					},
					getFormattedValue : function() {
						var dimension = this.getDimension();
						var attributeByType;
						var attributeMember;
						if (dimension !== null) {
							attributeByType = dimension
									.getFirstFieldByType(sap.firefly.PresentationType.KEY);
							if (attributeByType !== null) {
								attributeMember = this.m_attributeMemberMap
										.getByKey(attributeByType.getName());
								if (attributeMember !== null) {
									return attributeMember.getFormattedValue();
								}
							}
						}
						return null;
					},
					getValue : function() {
						var keyField = this.getDimension().getKeyField();
						var value;
						if (keyField === null) {
							return sap.firefly.XStringValue.create(this
									.getName());
						}
						value = this.getFieldValue(keyField).getValue();
						if (value === null) {
							throw sap.firefly.XException
									.createIllegalStateException("Value is null");
						}
						return value;
					},
					getFieldValue : function(field) {
						if (field === null) {
							return null;
						}
						return this.m_attributeMemberMap.getByKey(field
								.getName());
					},
					getAllFieldValues : function() {
						return this.m_attributeMemberMap;
					},
					getResultSetFieldValues : function() {
						var rsAttributeMembers = sap.firefly.XList.create();
						var resultSetAttributes = this.getDimension()
								.getResultSetFields();
						var i;
						var field;
						var fieldValue;
						for (i = 0; i < resultSetAttributes.size(); i++) {
							field = resultSetAttributes.getFieldByIndex(i);
							fieldValue = this.getFieldValue(field);
							rsAttributeMembers.add(fieldValue);
						}
						return rsAttributeMembers;
					},
					addFieldValue : function(fieldValue) {
						this.addFieldValueInternal(fieldValue.getField(),
								fieldValue);
					},
					createAndAddField : function(field) {
						var newMember = sap.firefly.QFieldValue.create(field
								.getContext(), field, this);
						this.addFieldValueInternal(field, newMember);
						return newMember;
					},
					createAndAddFieldWithXvalue : function(field, value) {
						var newMember = sap.firefly.QFieldValue.create(field
								.getContext(), field, this);
						newMember.setValue(value);
						this.addFieldValueInternal(field, newMember);
						return newMember;
					},
					createAndAddFieldWithValue : function(field, value) {
						if (value === null) {
							return null;
						}
						if (value.getValueType() === sap.firefly.XValueType.STRING) {
							return this.createAndAddFieldValueWithString(field,
									(value).getStringValue());
						} else {
							if (value.getValueType() === sap.firefly.XValueType.AMOUNT) {
								return this.createAndAddFieldValueWithAmount(
										field, (value).getAmountValue());
							} else {
								if (value.getValueType() === sap.firefly.XValueType.INTEGER) {
									return this
											.createAndAddFieldValueWithInteger(
													field, (value)
															.getIntegerValue());
								} else {
									if (value.getValueType() === sap.firefly.XValueType.LONG) {
										return this
												.createAndAddFieldValueWithLong(
														field, (value)
																.getLongValue());
									} else {
										if (value.getValueType() === sap.firefly.XValueType.DOUBLE) {
											return this
													.createAndAddFieldValueWithDouble(
															field,
															(value)
																	.getDoubleValue());
										} else {
											if (value.getValueType() === sap.firefly.XValueType.BOOLEAN) {
												return this
														.createAndAddFieldValueWithBoolean(
																field,
																(value)
																		.getBooleanValue());
											} else {
												if (value.getValueType() === sap.firefly.XValueType.DATE) {
													return this
															.createAndAddFieldValueWithDate(
																	field,
																	value);
												} else {
													if (value.getValueType() === sap.firefly.XValueType.DATE_TIME) {
														return this
																.createAndAddFieldValueWithDateTime(
																		field,
																		value);
													} else {
														if (value
																.getValueType() === sap.firefly.XValueType.TIME) {
															return this
																	.createAndAddFieldValueWithTime(
																			field,
																			value);
														} else {
															if (value
																	.getValueType()
																	.isSpatial()) {
																return this
																		.createAndAddFieldWithXvalue(
																				field,
																				value);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						return null;
					},
					createAndAddFieldValueWithString : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XStringValue.create(value));
					},
					createAndAddFieldValueWithAmount : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XAmountValue.create(value));
					},
					createAndAddFieldValueWithInteger : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XIntegerValue.create(value));
					},
					createAndAddFieldValueWithLong : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XLongValue.create(value));
					},
					createAndAddFieldValueWithDouble : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XDoubleValue.create(value));
					},
					createAndAddFieldValueWithDate : function(field, value) {
						return this.createAndAddFieldWithXvalue(field, value);
					},
					createAndAddFieldValueWithDateTime : function(field, value) {
						return this.createAndAddFieldWithXvalue(field, value);
					},
					createAndAddFieldValueWithTime : function(field, value) {
						return this.createAndAddFieldWithXvalue(field, value);
					},
					createAndAddFieldValueWithBoolean : function(field, value) {
						return this.createAndAddFieldWithXvalue(field,
								sap.firefly.XBooleanValue.create(value));
					},
					getText : function() {
						var dimension = this.getDimension();
						var textField;
						var textFieldName;
						var name;
						var hierarchyAssignedAndActive;
						var altFieldValue;
						if (dimension !== null) {
							textField = dimension.getTextField();
							if (textField !== null) {
								textFieldName = textField.getName();
								name = this.getName();
								hierarchyAssignedAndActive = dimension
										.isHierarchyAssignedAndActive();
								altFieldValue = dimension
										.getAlternativeFieldValue(
												hierarchyAssignedAndActive,
												name, textFieldName, this
														.getActualLanguage());
								if (altFieldValue !== null) {
									return altFieldValue
											.getStringRepresentation();
								}
								altFieldValue = dimension
										.getAlternativeFieldValue(
												hierarchyAssignedAndActive,
												name, textFieldName, null);
								if (altFieldValue !== null) {
									return altFieldValue
											.getStringRepresentation();
								}
							}
						}
						return sap.firefly.QDimensionMember.$superclass.getText
								.call(this);
					},
					addFieldValueInternal : function(field, newMember) {
						var fieldName = field.getName();
						var dimension = this.getDimension();
						var language;
						var altFieldValue;
						if (dimension !== null) {
							language = this.getActualLanguage();
							altFieldValue = dimension.getAlternativeFieldValue(
									dimension.isHierarchyAssignedAndActive(),
									this.getName(), fieldName, language);
							if (altFieldValue !== null) {
								newMember.setValue(altFieldValue);
								newMember.setFormattedValue(altFieldValue
										.getStringRepresentation());
							}
						}
						this.m_attributeMemberMap.put(field.getName(),
								newMember);
					},
					getActualLanguage : function() {
						var language = null;
						var queryModel = this.getQueryModelBase();
						var queryManager;
						var connection;
						var serverMetadata;
						if (queryModel !== null) {
							queryManager = queryModel.getQueryManagerBase();
							if (queryManager !== null) {
								connection = queryManager.getConnection();
								if (connection !== null) {
									serverMetadata = connection
											.getServerMetadata();
									if (serverMetadata !== null) {
										language = serverMetadata
												.getUserLanguage();
									}
								}
								if (language === null) {
									language = queryManager.getServiceConfig()
											.getSystemDescription()
											.getLanguage();
								}
							}
						}
						return language;
					},
					createSelection : function() {
						var selection = sap.firefly.QFilterOperation._create(
								this.getContext(), null, null);
						selection.setField(this.getDimension().getKeyField());
						return selection;
					},
					getValueAsString : function() {
						var value = this.getValue();
						var valueType = value.getValueType();
						var stringValue;
						var dateValue;
						var timeValue;
						var dateTimeValue;
						var integerValue;
						var longValue;
						var doubleValue;
						if (valueType === sap.firefly.XValueType.STRING) {
							stringValue = value;
							return stringValue.getStringValue();
						} else {
							if (valueType === sap.firefly.XValueType.DATE) {
								dateValue = value;
								return dateValue.toIsoFormat();
							} else {
								if (valueType === sap.firefly.XValueType.TIME) {
									timeValue = value;
									return timeValue.toIsoFormat();
								} else {
									if (valueType === sap.firefly.XValueType.DATE_TIME) {
										dateTimeValue = value;
										return dateTimeValue.toIsoFormat();
									} else {
										if (valueType === sap.firefly.XValueType.INTEGER) {
											integerValue = value;
											return sap.firefly.XInteger
													.convertIntegerToString(integerValue
															.getIntegerValue());
										} else {
											if (valueType === sap.firefly.XValueType.LONG) {
												longValue = value;
												return sap.firefly.XLong
														.convertLongToString(longValue
																.getLongValue());
											} else {
												if ((valueType === sap.firefly.XValueType.DOUBLE)
														|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
													doubleValue = value;
													return sap.firefly.XDouble
															.convertDoubleToString(doubleValue
																	.getDoubleValue());
												} else {
													throw sap.firefly.XException
															.createIllegalStateException(sap.firefly.XString
																	.concatenate2(
																			"Value type not supported: ",
																			valueType
																					.getName()));
												}
											}
										}
									}
								}
							}
						}
					},
					getDoubleValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.DOUBLE);
						return (value).getDoubleValue();
					},
					getIntegerValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.INTEGER);
						return (value).getIntegerValue();
					},
					getLongValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.LONG);
						return (value).getLongValue();
					},
					getDateValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.DATE);
						return value;
					},
					getTimeValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.TIME);
						return value;
					},
					getTimeSpanValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.TIMESPAN);
						return value;
					},
					getLineStringValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.LINE_STRING);
						return value;
					},
					getMultiLineStringValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_LINE_STRING);
						return value;
					},
					getGeometry : function() {
						var value = this.getValue();
						return value;
					},
					getPolygonValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.POLYGON);
						return value;
					},
					getMultiPolygonValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POLYGON);
						return value;
					},
					getPointValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.POINT);
						return value;
					},
					getStringValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.STRING);
						return (value).getStringValue();
					},
					getStructureValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.STRUCTURE);
						return value;
					},
					getStructureListValue : function() {
						var value = this.getValue();
						this
								.assertValueType(value,
										sap.firefly.XValueType.LIST);
						return value;
					},
					getPropertiesValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.PROPERTIES);
						return value;
					},
					getErrorValue : function() {
						return null;
					},
					getIntByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getIntegerValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getIntegerValue();
					},
					getDoubleByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getDoubleValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getDoubleValue();
					},
					getDateByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getDateValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getDateValue();
					},
					getStringByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getStringValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getStringValue();
					},
					getTimeSpanByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getTimeSpanValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getTimeSpanValue();
					},
					getPolygonByPresentation : function(presentation) {
						var attributeMember;
						if (presentation === sap.firefly.PresentationType.SELF) {
							return this.getPolygonValue();
						}
						attributeMember = this
								.getAttributeMemberByPresentation(presentation);
						return attributeMember.getPolygonValue();
					},
					getValueType : function() {
						return this.getValue().getValueType();
					},
					getKeyFieldValue : function() {
						var keyField = this.getDimension().getKeyField();
						return this.getFieldValue(keyField);
					},
					getBooleanValue : function() {
						return false;
					},
					getSelectValue : function() {
						var fieldValue = this.getFieldValue(this
								.getSelectField());
						return fieldValue.getSelectValue();
					},
					getSelectField : function() {
						return this.getDimension().getFlatKeyField();
					},
					getSelectHierarchyName : function() {
						return null;
					},
					getDateTimeValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.DATE_TIME);
						return value;
					},
					getNullValue : function() {
						return null;
					},
					setResultVisibility : function(memberVisibility) {
						if (this.getQueryModel().supportsMemberVisibility() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						this.m_resultVisibility = memberVisibility;
						this.notifyNodeChanged();
					},
					getResultVisibility : function() {
						return this.m_resultVisibility;
					},
					getDimensionMemberNameValueException : function() {
						return this.m_nameValueException;
					},
					setDimensionMemberNameValueException : function(
							valueException) {
						this.m_nameValueException = valueException;
					},
					getMultiPointValue : function() {
						var value = this.getValue();
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POINT);
						return value;
					},
					hasValue : function() {
						return this.getKeyFieldValue() !== null;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherMember = other;
						var keys = otherMember.m_attributeMemberMap
								.getKeysAsIteratorOfString();
						var key;
						var otherValue;
						var myValue;
						while (keys.hasNext()) {
							key = keys.next();
							otherValue = otherMember.m_attributeMemberMap
									.getByKey(key);
							myValue = this.m_attributeMemberMap.getByKey(key);
							if (myValue !== null) {
								myValue
										.mergeDeepRecursive(settings,
												otherValue);
							}
						}
						this.setText(otherMember.getText());
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionMemberResult",
				sap.firefly.QAbstractDimensionMember,
				{
					$statics : {
						createQDimensionMember : function(context, dimension,
								resultMemberType) {
							var member = new sap.firefly.QDimensionMemberResult();
							member.setupQDimensionMember(context, dimension,
									resultMemberType);
							return member;
						}
					},
					m_resultStructureElement : null,
					m_value : null,
					m_fieldValues : null,
					setupQDimensionMember : function(context, dimension,
							resultMemberType) {
						var literalFieldValue;
						this.setupAbstractDimensionMember(context, dimension);
						this.setType(resultMemberType);
						literalFieldValue = sap.firefly.QFieldValue
								.createLiteral(this.getContext(), dimension
										.getKeyField());
						literalFieldValue.setValue(this.m_value);
						this.m_fieldValues = sap.firefly.XHashMapByString
								.create();
						this.m_fieldValues.put(dimension.getKeyField()
								.getName(), literalFieldValue);
					},
					releaseObject : function() {
						this.m_resultStructureElement = null;
						this.m_value = sap.firefly.XObject
								.releaseIfNotNull(this.m_value);
						this.m_fieldValues = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_fieldValues);
						sap.firefly.QDimensionMemberResult.$superclass.releaseObject
								.call(this);
					},
					setType : function(type) {
						if (type.isTypeOf(sap.firefly.MemberType.RESULT) === false) {
							throw sap.firefly.XException
									.createIllegalStateException("Invalid member type for result member!");
						}
						if (type === sap.firefly.MemberType.RESULT) {
							this.m_value = sap.firefly.XStringValue
									.create(sap.firefly.InAConstants.QY_TOTAL);
						} else {
							if (type === sap.firefly.MemberType.CONDITION_RESULT) {
								this.m_value = sap.firefly.XStringValue
										.create(sap.firefly.InAConstants.QY_TOTAL_INCLUDING);
							} else {
								this.m_value = sap.firefly.XStringValue
										.create(sap.firefly.InAConstants.QY_TOTAL_REMAINING);
							}
						}
						this.m_memberType = type;
						this.m_resultStructureElement = sap.firefly.ResultStructureElement
								.getStructureElementByMemberType(type);
					},
					getFormattedValue : function() {
						return this.m_value.getStringValue();
					},
					getIntByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDoubleByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDateByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStringByPresentation : function(presentation) {
						return this.m_value.getStringValue();
					},
					getPolygonByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTimeSpanByPresentation : function(presentation) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldValue : function(field) {
						return this.m_fieldValues.getValuesAsReadOnlyList()
								.get(0);
					},
					getKeyFieldValue : function() {
						return this.m_fieldValues.getValuesAsReadOnlyList()
								.get(0);
					},
					getPropertiesValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStructureListValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getErrorValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getValueType : function() {
						return sap.firefly.XValueType.STRING;
					},
					getValue : function() {
						return this.m_value;
					},
					getDateValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTimeValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getGeometry : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPolygonValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPointValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTimeSpanValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getStringValue : function() {
						return this.m_value.getStringValue();
					},
					getDoubleValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getIntegerValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getLongValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddField : function(field) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldWithValue : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithString : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithAmount : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithBoolean : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithInteger : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithLong : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithDouble : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithDate : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithDateTime : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createAndAddFieldValueWithTime : function(field, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					createSelection : function() {
						return null;
					},
					getAllFieldValues : function() {
						return this.m_fieldValues;
					},
					getResultSetFieldValues : function() {
						return this.m_fieldValues.getValuesAsReadOnlyList();
					},
					addFieldValue : function(fieldValue) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getValueAsString : function() {
						return this.m_value.getStringValue();
					},
					getBooleanValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSelectValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSelectField : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSelectHierarchyName : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDateTimeValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPolygonValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getLineStringValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiLineStringValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getNullValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setResultVisibility : function(memberVisibility) {
						this.getDimension()
								.setResultVisibilityByElement(
										this.m_resultStructureElement,
										memberVisibility);
					},
					getResultVisibility : function() {
						return this.getDimension()
								.getResultVisibilityByElement(
										this.m_resultStructureElement);
					},
					getDimensionMemberNameValueException : function() {
						return sap.firefly.ValueException.NORMAL;
					},
					setDimensionMemberNameValueException : function(
							valueException) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getMultiPointValue : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					hasValue : function() {
						return this.m_value !== null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterCapabilityGroup",
				sap.firefly.QModelComponent,
				{
					$statics : {
						_createFilterCapabilityGroup : function(context,
								parentContext, field) {
							var selectionCapabilities = new sap.firefly.QFilterCapabilityGroup();
							selectionCapabilities.setupSelectionCapabilities(
									context, parentContext, field);
							return selectionCapabilities;
						}
					},
					m_field : null,
					m_group : null,
					copyFilterCapabilityGroup : function(origin) {
						sap.firefly.QFilterCapabilityGroup.$superclass.copyModelComponent
								.call(this, origin);
						this.m_group = origin.m_group;
					},
					setupSelectionCapabilities : function(context,
							parentContext, field) {
						this.setupModelComponent(context, parentContext);
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					releaseObject : function() {
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						this.m_group = null;
						sap.firefly.QFilterCapabilityGroup.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_CAPABILITY_GROUP;
					},
					getGroup : function() {
						return this.m_group;
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					getSupportedSetSign : function() {
						var setSignList = null;
						if ((this.m_group === null)
								|| (this.m_group.getSetSigns() === null)) {
							setSignList = sap.firefly.XListOfNameObject
									.create();
						} else {
							setSignList = this.m_group.getSetSigns();
						}
						return setSignList;
					},
					supportsSetSign : function(setSign) {
						if (this.m_group === null) {
							return false;
						}
						return this.m_group.getSetSigns().contains(setSign);
					},
					getSupportedComparisonOperators : function(setSign) {
						var operatorList = null;
						if ((this.m_group === null)
								|| (this.m_group
										.getComparisonOperatorsForSign(setSign) === null)) {
							operatorList = sap.firefly.XListOfNameObject
									.create();
						} else {
							operatorList = this.m_group
									.getComparisonOperatorsForSign(setSign);
						}
						return operatorList;
					},
					isSelectionCapabilityGroup : function() {
						return true;
					},
					setGroup : function(group) {
						this.m_group = group;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterExpression",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(context, selector) {
							var selection = new sap.firefly.QFilterExpression();
							selection.setupFilterExpression(context, selector);
							return selection;
						},
						_createByApplication : function(context, parentNode) {
							var selection = new sap.firefly.QFilterExpression();
							selection
									.setupFilterExpression(context, parentNode);
							return selection;
						},
						compareFilterSelection : function(s1, s2) {
							if ((s1 === null) || (s2 === null)) {
								throw sap.firefly.XException
										.createRuntimeException("null comparison");
							}
							if (s1.getComparisonOperator() !== s2
									.getComparisonOperator()) {
								return false;
							}
							if (s1.getExactness() !== s2.getExactness()) {
								return false;
							}
							if (sap.firefly.QFilterExpression.compareField(s1
									.getField(), s2.getField()) === false) {
								return false;
							}
							if (s1.hasDepth() !== s2.hasDepth()) {
								return false;
							}
							if (s1.hasDepth()
									&& (s1.getDepth() !== s2.getDepth())) {
								return false;
							}
							if (s1.hasLevelOffset() !== s2.hasLevelOffset()) {
								return false;
							}
							if (s1.getLevelOffset() !== s2.getLevelOffset()) {
								return false;
							}
							if (sap.firefly.QFilterExpression
									.compareFilterValueBag(s1.getHigh(), s2
											.getHigh()) === false) {
								return false;
							}
							if (sap.firefly.QFilterExpression
									.compareFilterValueBag(s1.getLow(), s2
											.getLow()) === false) {
								return false;
							}
							return true;
						},
						compareFilterValueBag : function(b1, b2) {
							var starWildcard1;
							var starWildcard2;
							if (b1 === b2) {
								return false;
							}
							if ((b1 === null) || (b2 === null)) {
								return false;
							}
							starWildcard1 = (b1.supportsStarWildcard() && b1
									.isStarWildcardEnabled());
							starWildcard2 = (b2.supportsStarWildcard() && b2
									.isStarWildcardEnabled());
							if (starWildcard1 !== starWildcard2) {
								return false;
							}
							if (sap.firefly.QFilterExpression.compareValue(b1
									.getValue(), b2.getValue()) === false) {
								return false;
							}
							return true;
						},
						compareValue : function(v1, v2) {
							if (v1 === v2) {
								return true;
							}
							if ((v1 === null) || (v2 === null)) {
								return false;
							}
							if (v1.getValueType() !== v2.getValueType()) {
								return false;
							}
							return v1.isEqualTo(v2);
						},
						compareField : function(f1, f2) {
							if (f1 === f2) {
								return true;
							}
							if ((f1 === null) || (f2 === null)) {
								return false;
							}
							if (sap.firefly.QFilterExpression.compareDimension(
									f1.getDimension(), f2.getDimension()) === false) {
								return false;
							}
							return true;
						},
						compareDimension : function(d1, d2) {
							if (d1 === d2) {
								return true;
							}
							if ((d1 === null) || (d2 === null)) {
								return false;
							}
							if (d1.getQueryModel() !== d2.getQueryModel()) {
								return false;
							}
							if (sap.firefly.XString.isEqual(d1.getName(), d2
									.getName()) === false) {
								return false;
							}
							return true;
						}
					},
					m_filterRootElement : null,
					m_supportsComplexSelections : false,
					m_supportsCellValueOperand : false,
					m_isLocked : false,
					m_isSuppressingNulls : false,
					m_literalFilter : null,
					m_cellValueOperands : null,
					m_uniqueId : null,
					m_filterIdsFromVariables : null,
					copyFilterExpression : function(origin) {
						var originType;
						var originList;
						var queryModel;
						var size;
						var i;
						var origCellValueOp;
						var cloneCellValueOp;
						sap.firefly.QFilterExpression.$superclass.copyModelComponent
								.call(this, origin);
						if (origin.m_filterRootElement !== null) {
							originType = origin.m_filterRootElement
									.getOlapComponentType();
							if (originType === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT) {
								this.m_filterRootElement = sap.firefly.QFilterCartesianProduct
										._create(this, this);
								(this.m_filterRootElement)
										.copyCartesianProduct(origin.m_filterRootElement);
							} else {
								if (originType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
									originList = origin.m_filterRootElement;
									queryModel = this.getQueryModel();
									this.m_filterRootElement = sap.firefly.QFilterCartesianList
											._create(this, this, queryModel
													.getFieldByName(originList
															.getField()
															.getName()),
													originList
															.getHierarchyName());
									(this.m_filterRootElement)
											.copyCartesianList(originList);
								} else {
									if (originType === sap.firefly.FilterComponentType.OPERATION) {
										this.m_filterRootElement = sap.firefly.QFilterOperation
												._create(this, this, this);
										(this.m_filterRootElement)
												.copyFilterOperation(origin.m_filterRootElement);
									} else {
										if (originType === sap.firefly.FilterComponentType.TUPLE) {
											this.m_filterRootElement = sap.firefly.QFactory2
													.newFilterTuple(this);
											(this.m_filterRootElement)
													.copyTupleOperand(origin.m_filterRootElement);
										} else {
											if (originType === sap.firefly.FilterComponentType.AND) {
												this.m_filterRootElement = sap.firefly.QFactory2
														.newFilterAnd(this);
											} else {
												if (originType === sap.firefly.FilterComponentType.OR) {
													this.m_filterRootElement = sap.firefly.QFactory2
															.newFilterOr(this);
												} else {
													if (originType === sap.firefly.FilterComponentType.NOT) {
														this.m_filterRootElement = sap.firefly.QFactory2
																.newFilterNot(this);
													} else {
														throw sap.firefly.XException
																.createRuntimeException(originType
																		.getName());
													}
												}
											}
											(this.m_filterRootElement)
													.copyFilterAlgebra(origin.m_filterRootElement);
										}
									}
								}
							}
						}
						this.m_supportsComplexSelections = origin.m_supportsComplexSelections;
						this.m_supportsCellValueOperand = origin.m_supportsCellValueOperand;
						this.m_isSuppressingNulls = origin.m_isSuppressingNulls;
						this.m_isLocked = origin.m_isLocked;
						this.m_uniqueId = origin.m_uniqueId;
						(this.m_literalFilter)
								.copyFilterLiteral(origin.m_literalFilter);
						if (origin.m_cellValueOperands !== null) {
							size = origin.m_cellValueOperands.size();
							for (i = 0; i < size; i++) {
								origCellValueOp = origin.m_cellValueOperands
										.get(i);
								cloneCellValueOp = sap.firefly.QFilterCellValueOperand
										.createForNullSuppression(this, this);
								cloneCellValueOp
										.copyCellValueOperand(origCellValueOp);
								this.m_cellValueOperands.add(cloneCellValueOp);
							}
						}
					},
					setupFilterExpression : function(context, parentNode) {
						var filter;
						this.setupModelComponent(context, parentNode);
						this.m_isLocked = false;
						this.m_literalFilter = sap.firefly.QFilterLiteral
								._create(this.getContext(), this, true);
						this.m_isSuppressingNulls = false;
						this.m_cellValueOperands = sap.firefly.XList.create();
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
						filter = parentNode;
						if (filter === null) {
							this.m_supportsComplexSelections = false;
							this.m_supportsCellValueOperand = false;
						} else {
							this.m_supportsComplexSelections = filter
									.supportsComplexSelections();
							this.m_supportsCellValueOperand = filter
									.supportsCellValueOperand();
						}
					},
					releaseObject : function() {
						this.m_cellValueOperands = sap.firefly.XObject
								.releaseIfNotNull(this.m_cellValueOperands);
						this.m_literalFilter = sap.firefly.XObject
								.releaseIfNotNull(this.m_literalFilter);
						this.m_filterRootElement = null;
						this.m_uniqueId = null;
						this.m_filterIdsFromVariables = sap.firefly.XObject
								.releaseIfNotNull(this.m_filterIdsFromVariables);
						sap.firefly.QFilterExpression.$superclass.releaseObject
								.call(this);
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FILTER_EXPRESSION;
					},
					isAll : function() {
						return this.isCartesianProduct()
								|| this.isComplexSelection();
					},
					isLocked : function() {
						return this.m_isLocked;
					},
					setIsLocked : function(isLocked) {
						this.m_isLocked = isLocked;
					},
					setParent : function(parent) {
						sap.firefly.QFilterExpression.$superclass.setParent
								.call(this, parent);
					},
					supportsCellValueOperands : function() {
						return this.m_supportsCellValueOperand;
					},
					setSupportsComplexSelections : function(
							supportsComplexSelections) {
						this.m_supportsComplexSelections = supportsComplexSelections;
					},
					supportsComplexSelections : function() {
						return this.m_supportsComplexSelections;
					},
					supportsOnlyCartesianProduct : function() {
						return this.supportsComplexSelections() === false;
					},
					isCartesianProduct : function() {
						return ((this.m_filterRootElement !== null) && (this.m_filterRootElement
								.getOlapComponentType() === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT));
					},
					isComplexSelection : function() {
						return ((this.m_filterRootElement !== null) && (this.m_filterRootElement
								.getOlapComponentType() !== sap.firefly.FilterComponentType.CARTESIAN_PRODUCT));
					},
					setComplexSelection : function(complexSelection) {
						if (((complexSelection !== null) && (this
								.supportsComplexSelections() === false))
								&& (complexSelection.getOlapComponentType() !== sap.firefly.FilterComponentType.CARTESIAN_PRODUCT)) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Only cartesian product allowed!");
						}
						this.m_filterRootElement = complexSelection;
						this.notifyChildAttached(this.m_filterRootElement);
					},
					getCartesianProductWithDefault : function() {
						if (this.isComplexSelection()) {
							throw sap.firefly.XException
									.createIllegalStateException("A complex selection already exists");
						}
						if (this.m_filterRootElement === null) {
							this.setCartesianProduct(sap.firefly.QFactory2
									.newFilterCartesianProduct(this));
						}
						return this.m_filterRootElement;
					},
					getComplexSelectionRoot : function() {
						if (this.isComplexSelection()) {
							return this.m_filterRootElement;
						}
						return null;
					},
					getCartesianProduct : function() {
						if (this.isCartesianProduct()) {
							return this.m_filterRootElement;
						}
						return null;
					},
					getFilterRootElement : function() {
						return this.m_filterRootElement;
					},
					getCartesianProductShell : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setCartesianProduct : function(cartesianProduct) {
						this.m_filterRootElement = cartesianProduct;
						this.notifyChildAttached(cartesianProduct);
					},
					copyContent : function(selectionContainer) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					addSingleMemberSelectionByType : function(structureType,
							memberName, theOperator) {
						var dimension = this.getDimensionAccessor()
								.getDimensionByType(structureType);
						return this.addSingleMemberSelectionByDimension(
								dimension, memberName, theOperator);
					},
					addSingleMemberSelectionByName : function(dimensionName,
							memberName, theOperator) {
						var dimension = this.getDimensionAccessor()
								.getDimensionByName(dimensionName);
						if (dimension === null) {
							return null;
						}
						return this.addSingleMemberSelectionByDimension(
								dimension, memberName, theOperator);
					},
					addSingleMemberSelectionByDimension : function(dimension,
							memberName, theOperator) {
						return this.addSingleMemberFilterByDimension(dimension,
								memberName, theOperator);
					},
					addSingleMemberFilterByDimension : function(dimension,
							memberName, theOperator) {
						var dimensionMember = dimension.getDimensionMember(
								memberName, false);
						if (dimensionMember === null) {
							return null;
						}
						return this.addSingleMemberSelectionByDimensionMember(
								dimensionMember, theOperator);
					},
					addSingleMemberSelectionByDimensionMember : function(
							dimensionMember, theOperator) {
						var isParentRestrictedMeasure;
						var isMeasureNotSelectable;
						var forbiddenDimensionNames;
						var queryModel;
						var measureDimension;
						var cartesianMeasureList;
						var sizeMeasureList;
						var idxMeasureList;
						var op;
						var low;
						var selectedStructure;
						var dimension;
						var selectionComponentList;
						var cartesianProduct;
						var singleMemberSelection;
						var size;
						var i;
						var sms;
						if (dimensionMember === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The DimensionMember must not be null!");
						}
						isParentRestrictedMeasure = (this.getParentComponent() !== null)
								&& this
										.getParentComponent()
										.getOlapComponentType()
										.isTypeOf(
												sap.firefly.MemberType.RESTRICTED_MEASURE);
						isMeasureNotSelectable = (dimensionMember
								.getMemberType().isTypeOf(
										sap.firefly.MemberType.MEASURE) && ((dimensionMember)
								.isSelectionCandidate() === false));
						if (isParentRestrictedMeasure && isMeasureNotSelectable) {
							return null;
						}
						forbiddenDimensionNames = sap.firefly.XListOfString
								.create();
						queryModel = this.getQueryModel();
						if ((queryModel !== null)
								&& queryModel.getSystemType().isTypeOf(
										sap.firefly.SystemType.ABAP)
								&& (this.getFilterRootElement() !== null)) {
							measureDimension = queryModel.getMeasureDimension();
							cartesianMeasureList = this
									.getCartesianList(measureDimension);
							if (cartesianMeasureList !== null) {
								sizeMeasureList = cartesianMeasureList.size();
								for (idxMeasureList = 0; idxMeasureList < sizeMeasureList; idxMeasureList++) {
									op = cartesianMeasureList
											.getOp(idxMeasureList);
									low = op.getLow();
									selectedStructure = low
											.getDimensionMember();
									if (selectedStructure === null) {
										selectedStructure = measureDimension
												.getStructureMember(low
														.getStringValue());
									}
									forbiddenDimensionNames
											.addAll(selectedStructure
													.getDefaultSelectedDimensionNames());
								}
							}
						}
						dimension = dimensionMember.getDimension();
						if (dimension === null) {
							return null;
						}
						if (forbiddenDimensionNames.contains(dimension
								.getName())) {
							return null;
						}
						if ((dimension.getKeyField().isFilterable() === false)
								&& queryModel
										.supportsCustomDimensionFilterCapability()) {
							return null;
						}
						if (((queryModel !== null) && (queryModel
								.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING))
								&& (queryModel.getBlendingDefinition()
										.getMappingByAliasName(
												dimension.getName())
										.getLinkType() === sap.firefly.BlendingLinkType.COEXIST)
								&& dimension.isHierarchyActive()) {
							throw sap.firefly.XException
									.createRuntimeException("Adding a hierarchy filter to a coexist blended dimension is currently not supported");
						}
						selectionComponentList = null;
						if (this.isComplexSelection()) {
							selectionComponentList = this
									.getCartesianListWithDefault(dimension);
						} else {
							cartesianProduct = this.getCartesianProduct();
							if (cartesianProduct === null) {
								cartesianProduct = sap.firefly.QFactory2
										.newFilterCartesianProduct(this);
								this.setCartesianProduct(cartesianProduct);
							}
							selectionComponentList = cartesianProduct
									.getCartesianList(dimension);
							if (selectionComponentList === null) {
								selectionComponentList = dimension
										.createSelectionComponentList();
								cartesianProduct.add(selectionComponentList);
							}
						}
						if (dimension.isHierarchyActive()) {
							selectionComponentList.setHierarchyName(dimension
									.getHierarchyName());
						} else {
							selectionComponentList.setHierarchyName(null);
						}
						singleMemberSelection = dimensionMember
								.createSelection();
						singleMemberSelection.getLow().setDimensionMember(
								dimensionMember);
						singleMemberSelection
								.setComparisonOperator(theOperator);
						size = selectionComponentList.size();
						for (i = 0; i < size; i++) {
							sms = selectionComponentList.getOp(i);
							if (sap.firefly.QFilterExpression
									.compareFilterSelection(
											singleMemberSelection, sms)) {
								if (singleMemberSelection.getSetSign() !== sms
										.getSetSign()) {
									sms.setSetSign(singleMemberSelection
											.getSetSign());
								}
								return sms;
							}
						}
						selectionComponentList.add(singleMemberSelection);
						return singleMemberSelection;
					},
					isComplexSelectionWithCartesianListsOnly : function() {
						var filterRootElement = this.getFilterRootElement();
						var children;
						var component;
						if (filterRootElement.getOlapComponentType() !== sap.firefly.FilterComponentType.AND) {
							return false;
						}
						children = filterRootElement.getChildrenIterator();
						while (children.hasNext()) {
							component = children.next();
							if ((component.getOlapComponentType() !== sap.firefly.FilterComponentType.CARTESIAN_LIST)
									&& (component.getOlapComponentType() !== sap.firefly.FilterComponentType.CARTESIAN_SPATIAL_LIST)) {
								return false;
							}
						}
						return true;
					},
					getCartesianList : function(dimension) {
						var children;
						var component;
						var isList;
						if (this.getFilterRootElement() !== null) {
							children = this.getFilterRootElement()
									.getChildrenIterator();
							while (children.hasNext()) {
								component = children.next();
								isList = (component.getOlapComponentType() === sap.firefly.FilterComponentType.CARTESIAN_LIST)
										|| (component.getOlapComponentType() === sap.firefly.FilterComponentType.CARTESIAN_SPATIAL_LIST);
								if (isList
										&& ((component).getDimension() === dimension)) {
									return component;
								}
							}
						}
						return null;
					},
					getCartesianListWithDefault : function(dimension) {
						var list;
						if (!this.isComplexSelectionWithCartesianListsOnly()) {
							throw sap.firefly.XException
									.createIllegalStateException("Retrieving from or adding cartesian list to complex product only supported if filter root is 'and' and only contains cartesian lists");
						}
						list = this.getCartesianList(dimension);
						if (list === null) {
							list = dimension.createSelectionComponentList();
							(this.getFilterRootElement()).add(list);
						}
						return list;
					},
					getCartesianListByField : function(field) {
						var list;
						if (this.isComplexSelection()) {
							list = this.getCartesianListWithDefault(field
									.getDimension());
							if (list.getField() === field) {
								return list;
							}
							return null;
						}
						return this.getCartesianProductWithDefault()
								.getCartesianListByField(field);
					},
					addSingleNodeSelection : function(node, theOperator) {
						if (node === null) {
							throw sap.firefly.XException
									.createIllegalArgumentException("The node must not be null!");
						}
						if (this.isComplexSelection()) {
							throw sap.firefly.XException
									.createIllegalStateException("Adding single member selection to complex product currently not supported");
						}
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					removeSingleMemberSelectionByName : function(dimensionName,
							memberName, theOperator) {
						var dimension = this.getDimensionAccessor()
								.getDimensionByName(dimensionName);
						if (dimension !== null) {
							this.removeSingleMemberSelectionByDimension(
									dimension, memberName, theOperator);
						}
					},
					removeSingleMemberSelectionByDimension : function(
							dimension, memberName, theOperator) {
						var dimensionMember = dimension.getDimensionMember(
								memberName, false);
						this.removeSingleMemberSelectionByMember(
								dimensionMember, theOperator);
					},
					removeSingleMemberSelectionByMember : function(member,
							theOperator) {
						var cartesianProduct = null;
						var selectionComponentList = null;
						var dimension;
						var valueToRemove;
						var len;
						var i;
						var sms;
						var valueInFilter;
						if (this.isCartesianProduct()) {
							cartesianProduct = this.getCartesianProduct();
							if (cartesianProduct !== null) {
								dimension = member.getDimension();
								selectionComponentList = (cartesianProduct)
										.getCartesianList(dimension);
							}
						} else {
							if (this.isComplexSelection()
									&& (this.getFilterRootElement()
											.getOlapComponentType() === sap.firefly.FilterComponentType.AND)) {
								cartesianProduct = this
										.getComplexSelectionRoot();
								selectionComponentList = this
										.getCartesianList(member.getDimension());
							}
						}
						if ((cartesianProduct !== null)
								&& (selectionComponentList !== null)) {
							valueToRemove = member.getKeyFieldValue()
									.getStringValue();
							len = selectionComponentList.size();
							for (i = 0; i < len; i++) {
								sms = selectionComponentList.getOp(i);
								valueInFilter = sms.getLow().getStringValue();
								if (sap.firefly.XString.isEqual(valueInFilter,
										valueToRemove)
										&& (sms.getComparisonOperator() === theOperator)) {
									if (len === 1) {
										cartesianProduct
												.removeElement(selectionComponentList);
									} else {
										selectionComponentList.removeAt(i);
									}
									return;
								}
							}
						}
					},
					supportsGlobalLiteralFilter : function() {
						return true;
					},
					getGlobalLiteralFilter : function() {
						return this.m_literalFilter;
					},
					isComponentNode : function() {
						return true;
					},
					getIndexedChildren : function() {
						var list = sap.firefly.XList.create();
						list.add(this.m_filterRootElement);
						return list.getIterator();
					},
					isSuppressingNulls : function() {
						return this.m_isSuppressingNulls;
					},
					assertCellValueOperandSupported : function() {
						if (this.supportsCellValueOperands() === false) {
							throw sap.firefly.XException
									.createRuntimeException("CellValueOperand is not supported");
						}
					},
					setIsSuppressingNulls : function(isSuppressingNulls) {
						this.assertCellValueOperandSupported();
						this.m_isSuppressingNulls = isSuppressingNulls;
						this.notifyNodeChanged();
					},
					addNewCellValueSelection : function(lowValue, highValue,
							comparisonOperator) {
						var newSelection;
						this.assertCellValueOperandSupported();
						newSelection = sap.firefly.QFilterCellValueOperand
								._create(this.getContext(), this, lowValue,
										highValue, comparisonOperator);
						this.m_cellValueOperands.add(newSelection);
						this.notifyNodeChanged();
						return newSelection;
					},
					removeCellValueSelection : function(cellValueOperand) {
						this.assertCellValueOperandSupported();
						this.m_cellValueOperands
								.removeElement(cellValueOperand);
						this.notifyNodeChanged();
					},
					getCellValueOperands : function() {
						this.assertCellValueOperandSupported();
						return this.m_cellValueOperands;
					},
					addCellValueSelection : function(cellValueOperand) {
						this.assertCellValueOperandSupported();
						this.m_cellValueOperands.add(cellValueOperand);
						this.notifyNodeChanged();
					},
					clearCellValueSelections : function() {
						this.assertCellValueOperandSupported();
						this.m_cellValueOperands.clear();
						this.notifyNodeChanged();
					},
					addNewCellValueSelectionVariable : function(lowVariable,
							highVariable, comparisonOperator) {
						var newSelection;
						this.assertCellValueOperandSupported();
						newSelection = sap.firefly.QFilterCellValueOperand
								.createWithVariable(this.getContext(), this,
										lowVariable, highVariable,
										comparisonOperator);
						this.m_cellValueOperands.add(newSelection);
						this.notifyNodeChanged();
						return newSelection;
					},
					getFilter : function() {
						var parent = this.getParentComponent();
						var olapComponentType;
						var filter;
						if (parent !== null) {
							olapComponentType = parent.getOlapComponentType();
							if (olapComponentType === sap.firefly.OlapComponentType.SELECTOR) {
								filter = parent;
								return filter;
							}
						}
						return null;
					},
					getFilterExpression : function() {
						return this;
					},
					mergeDynamicFilter : function(otherDynamicFilter) {
						var otherQueryModel;
						var queryModel;
						var otherCartesianProduct;
						var size;
						var idx;
						var otherSelectionList;
						var dimension;
						var selectionList;
						var idsBeforeMerge;
						var childrenIterator;
						var uniqueId;
						if (otherDynamicFilter.isCartesianProduct()) {
							otherQueryModel = otherDynamicFilter
									.getQueryModel();
							queryModel = this.getQueryModel();
							if ((queryModel !== null)
									&& (otherQueryModel !== null)) {
								if (this.m_filterIdsFromVariables === null) {
									this.m_filterIdsFromVariables = sap.firefly.XHashSetOfString
											.create();
								} else {
									this.m_filterIdsFromVariables.clear();
								}
								otherCartesianProduct = otherDynamicFilter
										.getCartesianProduct();
								size = otherCartesianProduct.size();
								for (idx = 0; idx < size; idx++) {
									otherSelectionList = otherCartesianProduct
											.getCartesianChild(idx);
									dimension = queryModel
											.getDimensionByName(otherSelectionList
													.getDimension().getName());
									selectionList = this
											.getCartesianList(dimension);
									if (selectionList === null) {
										selectionList = this
												.getCartesianProductWithDefault()
												.getCartesianListWithDefault(
														dimension);
									}
									idsBeforeMerge = sap.firefly.XHashSetOfString
											.create();
									childrenIterator = selectionList
											.getIterator();
									while (childrenIterator.hasNext()) {
										idsBeforeMerge.put(childrenIterator
												.next().getUniqueId());
									}
									(selectionList)
											.copyCartesianList(otherSelectionList);
									childrenIterator = selectionList
											.getIterator();
									while (childrenIterator.hasNext()) {
										uniqueId = childrenIterator.next()
												.getUniqueId();
										if (!idsBeforeMerge.contains(uniqueId)) {
											this.m_filterIdsFromVariables
													.put(uniqueId);
											this.m_filterIdsFromVariables
													.put(selectionList
															.getUniqueId());
										}
									}
								}
							}
						} else {
							this.m_filterRootElement = null;
							this.copyFilterExpression(otherDynamicFilter);
						}
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						this.m_filterRootElement = null;
						if (sap.firefly.XString.isEqual(this.getName(),
								"selectionStateContainer")) {
							this.mergeDynamicFilter(otherObj);
						} else {
							this.copyFilterExpression(otherObj);
						}
					},
					getFilterById : function(uniqueId) {
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(uniqueId)
								&& (this.m_filterRootElement !== null)) {
							if (sap.firefly.XString.isEqual(this.m_uniqueId,
									uniqueId)) {
								return this;
							}
							if (sap.firefly.XString.isEqual(
									this.m_filterRootElement.getUniqueId(),
									uniqueId)) {
								return this.m_filterRootElement;
							}
							return this.getChildById(this.m_filterRootElement,
									uniqueId);
						}
						return null;
					},
					getChildById : function(parent, uniqueId) {
						var iterator = parent.getChildrenIterator();
						var filterElement;
						var element;
						while (iterator.hasNext()) {
							filterElement = iterator.next();
							if (sap.firefly.XString.isEqual(filterElement
									.getUniqueId(), uniqueId)) {
								return filterElement;
							}
							element = this
									.getChildById(filterElement, uniqueId);
							if (element !== null) {
								return element;
							}
						}
						return null;
					},
					removeFilterById : function(uniqueId) {
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(uniqueId)
								&& (this.m_filterRootElement !== null)
								&& !sap.firefly.XString.isEqual(
										this.m_uniqueId, uniqueId)) {
							if (sap.firefly.XString.isEqual(
									this.m_filterRootElement.getUniqueId(),
									uniqueId)) {
								this.setComplexSelection(null);
							} else {
								this.removeChildById(this.m_filterRootElement,
										uniqueId);
							}
						}
					},
					removeChildById : function(parent, uniqueId) {
						var iterator = parent.getChildrenIterator();
						var filterElement;
						while (iterator.hasNext()) {
							filterElement = iterator.next();
							if (sap.firefly.XString.isEqual(filterElement
									.getUniqueId(), uniqueId)) {
								(parent).removeElement(filterElement);
								return;
							}
							this.removeChildById(filterElement, uniqueId);
						}
					},
					getFilterIdsFromVariables : function() {
						return this.m_filterIdsFromVariables;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterOperation",
				sap.firefly.QFilterElement,
				{
					$statics : {
						_create : function(context, selectionContainer,
								parentNode) {
							var object = new sap.firefly.QFilterOperation();
							object.setupFilterOperation(context,
									selectionContainer, parentNode);
							return object;
						}
					},
					m_comparisonOperator : null,
					m_field : null,
					m_firstValue : null,
					m_secondValue : null,
					m_thirdValue : null,
					m_dataSource : null,
					m_hierarchyName : null,
					m_convertToFlatSelection : false,
					m_exactness : 0,
					m_lowNavigations : null,
					m_levelOffset : 0,
					m_hasLevelOffset : false,
					m_depth : 0,
					m_hasDepth : false,
					m_setSign : null,
					copyFilterOperation : function(origin) {
						var originField;
						var name;
						var theField;
						sap.firefly.QFilterOperation.$superclass.copyFilterElement
								.call(this, origin);
						if (origin.m_firstValue !== null) {
							(this.getLow())
									.copyFilterValueBag(origin.m_firstValue);
						}
						if (origin.m_secondValue !== null) {
							(this.getHigh())
									.copyFilterValueBag(origin.m_secondValue);
						}
						if (origin.m_thirdValue !== null) {
							(this.getThird())
									.copyFilterValueBag(origin.m_thirdValue);
						}
						this.m_comparisonOperator = origin.m_comparisonOperator;
						if (origin.m_field !== null) {
							originField = origin.getField();
							name = originField.getName();
							theField = this.getFieldAccessorSingle()
									.getFieldByName(name);
							this.setField(theField);
						}
						this.m_setSign = origin.m_setSign;
						this.m_hasDepth = origin.m_hasDepth;
						this.m_depth = origin.m_depth;
						this.m_hasLevelOffset = origin.hasLevelOffset();
						this.m_levelOffset = origin.m_levelOffset;
						this.m_exactness = origin.m_exactness;
						this.m_convertToFlatSelection = origin.m_convertToFlatSelection;
						this.m_hierarchyName = origin.m_hierarchyName;
						if (origin.m_lowNavigations !== null) {
							this.m_lowNavigations = origin.m_lowNavigations
									.createListCopy();
						}
					},
					setupFilterOperation : function(context,
							selectionContainer, parentNode) {
						sap.firefly.QFilterOperation.$superclass.setupFilterElement
								.call(this, context, selectionContainer,
										parentNode);
						this.m_setSign = sap.firefly.SetSign.INCLUDING;
					},
					releaseObject : function() {
						this.m_firstValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_firstValue);
						this.m_secondValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_secondValue);
						this.m_thirdValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_thirdValue);
						this.m_lowNavigations = sap.firefly.XObject
								.releaseIfNotNull(this.m_lowNavigations);
						this.m_dataSource = sap.firefly.XObject
								.releaseIfNotNull(this.m_dataSource);
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						this.m_setSign = null;
						this.m_hierarchyName = null;
						this.m_comparisonOperator = null;
						sap.firefly.QFilterOperation.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.FilterComponentType.OPERATION;
					},
					setComparisonOperator : function(comparisonOperator) {
						if (this.m_comparisonOperator !== comparisonOperator) {
							this.m_comparisonOperator = comparisonOperator;
							this.notifyNodeChanged();
						}
					},
					getComparisonOperator : function() {
						return this.m_comparisonOperator;
					},
					getLow : function() {
						if (this.m_firstValue === null) {
							this.m_firstValue = sap.firefly.QFilterValueBag
									._create(this.getContext(), this
											.getFilterExpression(), this, false);
						}
						return this.m_firstValue;
					},
					getLowNavigations : function() {
						if (this.m_lowNavigations === null) {
							this.m_lowNavigations = sap.firefly.XList.create();
						}
						return this.m_lowNavigations;
					},
					getHigh : function() {
						if (this.m_secondValue === null) {
							this.m_secondValue = sap.firefly.QFilterValueBag
									._create(this.getContext(), this
											.getFilterExpression(), this, false);
						}
						return this.m_secondValue;
					},
					setField : function(field) {
						var ignoreSelectableFlag = false;
						var applySelectableFlag = false;
						var context = this.getContext();
						var componentType;
						var queryModel;
						if (context !== null) {
							componentType = context.getComponentType();
							if (componentType !== null) {
								ignoreSelectableFlag = componentType
										.isTypeOf(sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)
										|| componentType
												.isTypeOf(sap.firefly.OlapComponentType.VARIABLE_MANAGER);
							}
							queryModel = context.getQueryModel();
							if ((queryModel === null) && (field !== null)) {
								queryModel = field.getQueryModel();
							}
							if (queryModel !== null) {
								applySelectableFlag = queryModel
										.supportsCustomDimensionFilterCapability();
							}
							if ((field !== null)
									&& field
											.getPresentationType()
											.isTypeOf(
													sap.firefly.PresentationType.ABSTRACT_KEY)) {
								applySelectableFlag = false;
							}
						}
						if ((ignoreSelectableFlag === false)
								&& (applySelectableFlag) && (field !== null)
								&& (field.isFilterable() === false)) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3("The field '", field
													.getName(),
													"' is not selectable!"));
						}
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
						if ((field !== null) && (context === null)) {
							context = field.getContext();
							this.setContext(context);
						}
					},
					getField : function() {
						var parentComponent;
						var parentType;
						var cartesianList;
						if (this.m_field === null) {
							parentComponent = this.getParentComponent();
							if (parentComponent !== null) {
								parentType = parentComponent.getComponentType();
								if (parentType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
									cartesianList = parentComponent;
									this.m_field = sap.firefly.XWeakReferenceUtil
											.getWeakRef(cartesianList
													.getField());
								}
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					getDimension : function() {
						return this.getField().getDimension();
					},
					getHierarchyName : function() {
						return this.m_hierarchyName;
					},
					setHierarchyName : function(name) {
						if (sap.firefly.XString.isEqual(name,
								this.m_hierarchyName) === false) {
							this.notifyNodeChanged();
						}
						this.m_hierarchyName = name;
					},
					getExactness : function() {
						return this.m_exactness;
					},
					setExactness : function(exactness) {
						this.m_exactness = exactness;
					},
					getSetSign : function() {
						return this.m_setSign;
					},
					setSetSign : function(setSign) {
						if (setSign !== this.m_setSign) {
							this.m_setSign = setSign;
							this.notifyNodeChanged();
						}
					},
					hasLevelOffsetChanged : function(levelOffset,
							hasLevelOffSet) {
						return (this.m_levelOffset !== levelOffset)
								|| (this.m_hasLevelOffset !== hasLevelOffSet);
					},
					hasDepthChanged : function(depth, hasDepth) {
						return (this.m_depth !== depth)
								|| (this.m_hasDepth !== hasDepth);
					},
					setLevelOffset : function(levelOffset) {
						var supportsHierarchyLevelOffsetFilter = this
								.getQueryModel()
								.supportsHierarchyLevelOffsetFilter();
						var supportsHierarchyTrapezoidFilter = this
								.getQueryModel()
								.supportsHierarchyTrapezoidFilter();
						if (!supportsHierarchyTrapezoidFilter
								&& !supportsHierarchyLevelOffsetFilter) {
							throw sap.firefly.XException
									.createIllegalStateException("LevelOffset is not supported by backend!");
						}
						if (supportsHierarchyLevelOffsetFilter
								|| supportsHierarchyTrapezoidFilter) {
							if (this.hasLevelOffsetChanged(levelOffset, true)) {
								this.m_levelOffset = levelOffset;
								this.m_hasLevelOffset = true;
								this.notifyNodeChanged();
							}
						}
					},
					getLevelOffset : function() {
						return this.m_levelOffset;
					},
					hasLevelOffset : function() {
						return this.m_hasLevelOffset;
					},
					resetLevelOffset : function() {
						if (this.hasLevelOffsetChanged(0, false)) {
							this.m_levelOffset = 0;
							this.m_hasLevelOffset = false;
							this.notifyNodeChanged();
						}
					},
					setDepth : function(depth) {
						if (!this.getQueryModel()
								.supportsHierarchyTrapezoidFilter()) {
							throw sap.firefly.XException
									.createIllegalStateException("Depth is not supported by backend!");
						}
						if (this.hasDepthChanged(depth, true)) {
							this.m_depth = depth;
							this.m_hasDepth = true;
							this.notifyNodeChanged();
						}
					},
					getDepth : function() {
						return this.m_depth;
					},
					hasDepth : function() {
						return this.m_hasDepth;
					},
					resetDepth : function() {
						if (this.hasDepthChanged(-1, false)) {
							this.m_depth = -1;
							this.m_hasDepth = false;
							this.notifyNodeChanged();
						}
					},
					getThird : function() {
						if (this.m_thirdValue === null) {
							this.m_thirdValue = sap.firefly.QFilterValueBag
									._create(this.getContext(), this
											.getFilterExpression(), this, false);
						}
						return this.m_thirdValue;
					},
					getDataSource : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dataSource);
					},
					setDataSource : function(dataSource) {
						this.m_dataSource = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dataSource);
					},
					isConvertToFlatSelection : function() {
						return this.m_convertToFlatSelection;
					},
					setConvertToFlatSelection : function(convertToFlatSelection) {
						if (this.m_convertToFlatSelection !== convertToFlatSelection) {
							this.notifyNodeChanged();
						}
						this.m_convertToFlatSelection = convertToFlatSelection;
					},
					configureBetweenWithMembers : function(firstMember,
							secondMember) {
						this
								.setComparisonOperator(sap.firefly.ComparisonOperator.BETWEEN);
						this.getLow().setDimensionMember(firstMember);
						this.getHigh().setDimensionMember(secondMember);
					},
					configureSingleParameterExpression : function(value,
							comparisonOperator) {
						this.setComparisonOperator(comparisonOperator);
						this.getLow().setValue(value);
					},
					configureDoubleParameterExpression : function(firstValue,
							secondValue, comparisonOperator) {
						this.setComparisonOperator(comparisonOperator);
						this.getLow().setValue(firstValue);
						this.getHigh().setValue(secondValue);
					},
					configureTripleParameterExpression : function(firstValue,
							secondValue, thirdValue, comparisonOperator) {
						this.setComparisonOperator(comparisonOperator);
						this.getLow().setValue(firstValue);
						this.getHigh().setValue(secondValue);
						this.getThird().setValue(thirdValue);
					},
					getValueByIndex : function(index) {
						if (index === 0) {
							return this.getLow();
						} else {
							if (index === 1) {
								return this.getHigh();
							} else {
								if (index === 2) {
									return this.getThird();
								}
							}
						}
						return null;
					},
					size : function() {
						var comparisonOperator = this.getComparisonOperator();
						if (comparisonOperator === null) {
							return 0;
						}
						return comparisonOperator.getNumberOfParameters();
					},
					isEmpty : function() {
						return this.size() === 0;
					},
					hasElements : function() {
						return this.size() > 0;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterTuple",
				sap.firefly.QFilterElement,
				{
					$statics : {
						_create : function(context, selectionContainer) {
							var object = new sap.firefly.QFilterTuple();
							object.setupFilterElement(context,
									selectionContainer, null);
							object.m_fieldNames = sap.firefly.XListOfString
									.create();
							object.m_tuples = sap.firefly.XList.create();
							return object;
						}
					},
					m_fieldNames : null,
					m_tuples : null,
					setTuples : function(m_tuples) {
						this.m_tuples = m_tuples;
					},
					copyTupleOperand : function(origin) {
						var clonedFieldNames;
						var clonedTupleValues;
						sap.firefly.QFilterTuple.$superclass.copyFilterElement
								.call(this, origin);
						clonedFieldNames = origin.getFieldNames()
								.createListOfStringCopy();
						clonedTupleValues = origin.getTuples().createListCopy();
						this.setFieldNames(clonedFieldNames);
						this.setTuples(clonedTupleValues);
					},
					getOlapComponentType : function() {
						return sap.firefly.FilterComponentType.TUPLE;
					},
					setFieldNames : function(fieldNames) {
						this.m_fieldNames.addAll(fieldNames);
					},
					addTupleCriteria : function(tupleCriteria) {
						if (tupleCriteria.size() !== this.getNumberOfFields()) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Tuple Criteria size has to be the same as the number of FieldNames.");
						}
						this.m_tuples.add(tupleCriteria);
					},
					releaseObject : function() {
						sap.firefly.QFilterTuple.$superclass.releaseObject
								.call(this);
						this.m_fieldNames = sap.firefly.XObject
								.releaseIfNotNull(this.m_fieldNames);
						this.m_tuples = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_tuples);
					},
					getNumberOfFields : function() {
						return this.m_fieldNames.size();
					},
					getFieldNames : function() {
						return this.m_fieldNames;
					},
					getTuples : function() {
						return this.m_tuples;
					}
				});
$Firefly.createClass("sap.firefly.QLeveledHierarchy",
		sap.firefly.QModelComponent, {
			$statics : {
				create : function(context, dimension, name) {
					var object = new sap.firefly.QLeveledHierarchy();
					object.setupLeveledHierarchy(context, dimension, name);
					return object;
				}
			},
			m_dateFrom : null,
			m_dateTo : null,
			m_dueDate : null,
			m_hierarchyDescription : null,
			m_hierId : null,
			m_hierType : null,
			m_isRemote : false,
			m_level : null,
			m_objectVersion : null,
			m_owner : null,
			m_uniqueName : null,
			m_version : null,
			m_versionDescription : null,
			m_hierarchyType : null,
			isEqualTo : function(other) {
				var xOther;
				if (other === null) {
					return false;
				}
				if (this === other) {
					return true;
				}
				xOther = other;
				if ((this.getHierarchyUniqueName() !== null)
						&& (xOther.getHierarchyUniqueName() !== null)) {
					if (sap.firefly.XString.isEqual(this
							.getHierarchyUniqueName(), xOther
							.getHierarchyUniqueName()) === false) {
						return false;
					}
				}
				if (sap.firefly.XString.isEqual(this.getHierarchyName(), xOther
						.getHierarchyName()) === false) {
					return false;
				}
				return true;
			},
			cloneOlapComponent : function(context, parent) {
				var clone = sap.firefly.QLeveledHierarchy.create(context, null,
						this.getName());
				var iterator;
				if (this.getDateFrom() !== null) {
					clone.setDateFrom(this.getDateFrom().clone());
				}
				if (this.getDateTo() !== null) {
					clone.setDateTo(this.getDateTo().clone());
				}
				if (this.getHierarchyDueDate() !== null) {
					clone.setHierarchyDueDate(this.getHierarchyDueDate()
							.clone());
				}
				clone.setHierarchyDescription(this.getHierarchyDescription());
				clone.setHierarchyUniqueName(this.getHierarchyUniqueName());
				clone.setHierId(this.getHierId());
				clone.setHierType(this.getHierType());
				clone.setIsRemote(this.isRemote());
				clone.setObjectVersion(this.getObjectVersion());
				clone.setOwner(this.getOwner());
				clone.setHierarchyVersion(this.getHierarchyVersion());
				clone.setVersionDescription(this.getVersionDescription());
				clone.setHierarchyType(this.getHierarchyType());
				iterator = this.m_level.getIterator();
				while (iterator.hasNext()) {
					clone.getAllLevelBase().add(iterator.next().clone());
				}
				iterator.releaseObject();
				return clone;
			},
			setupLeveledHierarchy : function(context, dimension, name) {
				sap.firefly.QLeveledHierarchy.$superclass.setupModelComponent
						.call(this, context, dimension);
				this.setName(name);
				this.m_level = sap.firefly.XList.create();
			},
			releaseObject : function() {
				this.m_level = sap.firefly.XCollectionUtils
						.releaseEntriesAndCollectionIfNotNull(this.m_level);
				this.m_dateFrom = sap.firefly.XObject
						.releaseIfNotNull(this.m_dateFrom);
				this.m_dateTo = sap.firefly.XObject
						.releaseIfNotNull(this.m_dateTo);
				this.m_dueDate = sap.firefly.XObject
						.releaseIfNotNull(this.m_dueDate);
				this.m_hierarchyDescription = null;
				this.m_hierId = null;
				this.m_hierType = null;
				this.m_objectVersion = null;
				this.m_owner = null;
				this.m_uniqueName = null;
				this.m_version = null;
				this.m_versionDescription = null;
				this.m_hierarchyType = null;
				sap.firefly.QLeveledHierarchy.$superclass.releaseObject
						.call(this);
			},
			getAllLevel : function() {
				return this.m_level;
			},
			getAllLevelBase : function() {
				return this.m_level;
			},
			getDateFrom : function() {
				return this.m_dateFrom;
			},
			getDateTo : function() {
				return this.m_dateTo;
			},
			getDefaultDrillLevel : function() {
				return 0;
			},
			getDimension : function() {
				return this.getParentComponent();
			},
			getHierarchyDueDate : function() {
				return this.m_dueDate;
			},
			getDueDate : function() {
				return this.m_dueDate;
			},
			getHierarchyDescription : function() {
				return this.m_hierarchyDescription;
			},
			getHierarchyName : function() {
				return this.getName();
			},
			getHierarchyUniqueName : function() {
				return this.m_uniqueName;
			},
			getHierId : function() {
				return this.m_hierId;
			},
			getHierType : function() {
				return this.m_hierType;
			},
			getLevel : function(level) {
				var lvlIt = this.m_level.getIterator();
				var lvl;
				while (lvlIt.hasNext()) {
					lvl = lvlIt.next();
					if (lvl.getLevelNumber() === level) {
						lvlIt.releaseObject();
						return lvl;
					}
				}
				lvlIt.releaseObject();
				return null;
			},
			getLevelByType : function(type) {
				var lvlIt = this.m_level.getIterator();
				var lvl;
				while (lvlIt.hasNext()) {
					lvl = lvlIt.next();
					if (lvl.getLevelType().isEqualTo(type)) {
						lvlIt.releaseObject();
						return lvl;
					}
				}
				lvlIt.releaseObject();
				return null;
			},
			getLowerLevelNodeAlignment : function() {
				return null;
			},
			getObjectVersion : function() {
				return this.m_objectVersion;
			},
			getOwner : function() {
				return this.m_owner;
			},
			getHierarchyVersion : function() {
				return this.m_version;
			},
			getVersion : function() {
				return this.m_version;
			},
			getVersionDescription : function() {
				return this.m_versionDescription;
			},
			hasDefaultLowerLevelNodeAlignment : function() {
				return false;
			},
			hasValidityTimeSpan : function() {
				return false;
			},
			isRemote : function() {
				return this.m_isRemote;
			},
			isTimeDependent : function() {
				return false;
			},
			setDateFrom : function(dateFrom) {
				this.m_dateFrom = dateFrom;
			},
			setDateTo : function(dateTo) {
				this.m_dateTo = dateTo;
			},
			setHierarchyDueDate : function(dueDate) {
				this.m_dueDate = dueDate;
			},
			setHierarchyDescription : function(hierarchyDescription) {
				this.m_hierarchyDescription = hierarchyDescription;
			},
			setHierarchyUniqueName : function(uniqueName) {
				this.m_uniqueName = uniqueName;
			},
			setHierId : function(hierId) {
				this.m_hierId = hierId;
			},
			setHierType : function(hierType) {
				this.m_hierType = hierType;
			},
			setIsRemote : function(isRemote) {
				this.m_isRemote = isRemote;
			},
			setObjectVersion : function(objectVersion) {
				this.m_objectVersion = objectVersion;
			},
			setOwner : function(owner) {
				this.m_owner = owner;
			},
			setHierarchyVersion : function(version) {
				this.m_version = version;
			},
			setHierarchyName : function(name) {
				this.setName(name);
			},
			setVersionDescription : function(versionDescription) {
				this.m_versionDescription = versionDescription;
			},
			supportsLowerLevelNodeAlignment : function(alignment) {
				return false;
			},
			supportsMemberAccess : function() {
				return false;
			},
			supportsMemberOfPostedNodeVisibilityChange : function() {
				return false;
			},
			supportsNoneUniqueLeaves : function() {
				return false;
			},
			supportsPostedNodes : function() {
				return false;
			},
			getHierarchyType : function() {
				return this.m_hierarchyType;
			},
			setHierarchyType : function(hierarchyType) {
				this.m_hierarchyType = hierarchyType;
			}
		});
$Firefly.createClass("sap.firefly.QListWrapper", sap.firefly.XObject, {
	$statics : {
		create : function(origin) {
			var newObject = new sap.firefly.QListWrapper();
			newObject.m_origin = origin;
			return newObject;
		}
	},
	m_origin : null,
	releaseObject : function() {
		this.m_origin = null;
		sap.firefly.QListWrapper.$superclass.releaseObject.call(this);
	},
	moveElement : function(fromIndex, toIndex) {
		this.m_origin.moveElement(fromIndex, toIndex);
	},
	sortByDirection : function(sortDirection) {
		this.m_origin.sortByDirection(sortDirection);
	},
	removeAt : function(index) {
		return this.m_origin.removeAt(index);
	},
	size : function() {
		return this.m_origin.size();
	},
	isEmpty : function() {
		return this.m_origin.isEmpty();
	},
	hasElements : function() {
		return this.m_origin.hasElements();
	},
	clear : function() {
		this.m_origin.clear();
	},
	get : function(index) {
		return this.m_origin.get(index);
	},
	getByKey : function(key) {
		return this.m_origin.getByKey(key);
	},
	containsKey : function(key) {
		return this.m_origin.containsKey(key);
	},
	getKeysAsReadOnlyListOfString : function() {
		return this.m_origin.getKeysAsReadOnlyListOfString();
	},
	getKeysAsIteratorOfString : function() {
		return this.m_origin.getKeysAsIteratorOfString();
	},
	removeElement : function(element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getIterator : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	contains : function(element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getIndex : function(element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	set : function(index, element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	add : function(element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	addAll : function(otherList) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	insert : function(index, element) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	createArrayCopy : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	sortByComparator : function(comparator) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	createListCopy : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	sublist : function(beginIndex, endIndex) {
		throw sap.firefly.XException.createUnsupportedOperationException();
	},
	getValuesAsReadOnlyList : function() {
		throw sap.firefly.XException.createUnsupportedOperationException();
	}
});
$Firefly
		.createClass(
				"sap.firefly.QueryManager",
				sap.firefly.DfService,
				{
					m_lifeCycleState : null,
					m_systemDescription : null,
					m_queryModel : null,
					m_activeContainer : null,
					m_convenienceCmds : null,
					m_metadataModel : null,
					m_directVariableTransferConsumer : false,
					m_mode : null,
					m_previousVariableProcessorState : null,
					m_variableProcessorState : null,
					m_processorStateListeners : null,
					m_activeReturnedDataSelections : null,
					m_inactiveReturnedDataSelections : null,
					m_planningActionSequenceSettingsMode : null,
					m_allPlanningVersionSettings : null,
					m_versionRestrictionType : null,
					m_queryExecutedListener : null,
					m_isPublicVersionEditPossible : false,
					setupValues : function() {
						var olapEnvironmentBase;
						var defaultArea;
						this.m_lifeCycleState = sap.firefly.LifeCycleState.INITIAL;
						this.m_activeContainer = sap.firefly.ResultSetContainer
								.create(this, null);
						this.m_variableProcessorState = sap.firefly.VariableProcessorState.CHANGEABLE_STARTUP;
						olapEnvironmentBase = this.getOlapEnvironmentBase();
						defaultArea = olapEnvironmentBase.getDefaultArea();
						defaultArea.registerQueryManager(this);
						this.m_planningActionSequenceSettingsMode = sap.firefly.PlanningVersionSettingsMode.SERVER_DEFAULT;
						this.m_allPlanningVersionSettings = sap.firefly.XList
								.create();
						this.m_queryExecutedListener = sap.firefly.XSimpleMap
								.create();
						this.m_activeReturnedDataSelections = sap.firefly.XHashSetOfString
								.create();
						this.m_inactiveReturnedDataSelections = sap.firefly.XHashSetOfString
								.create();
					},
					getLifeCycleState : function() {
						return this.m_lifeCycleState;
					},
					setLifeCycleState : function(desiredLifeCycleState) {
						var buffer;
						if ((desiredLifeCycleState === sap.firefly.LifeCycleState.TERMINATED)
								&& (this.m_lifeCycleState === sap.firefly.LifeCycleState.RELEASED)) {
							return;
						}
						if (desiredLifeCycleState.getCode() < this.m_lifeCycleState
								.getCode()) {
							buffer = sap.firefly.XStringBuffer.create();
							buffer
									.append("QueryManager: cannot change lifeCycle from ");
							buffer.append(this.m_lifeCycleState.getName())
									.append(" to ");
							buffer.append(desiredLifeCycleState.getName());
							throw sap.firefly.XException
									.createIllegalStateException(buffer
											.toString());
						}
						this.m_lifeCycleState = desiredLifeCycleState;
					},
					processShutdown : function(syncType, listener,
							customIdentifier) {
						return sap.firefly.QmShutdownAction.createAndRun(
								syncType, listener, customIdentifier, this);
					},
					releaseObject : function() {
						var olapEnvironmentBase = this.getOlapEnvironmentBase();
						var defaultArea;
						if (olapEnvironmentBase !== null) {
							defaultArea = olapEnvironmentBase.getDefaultArea();
							defaultArea.unregisterQueryManager(this);
						}
						this.m_convenienceCmds = sap.firefly.XObject
								.releaseIfNotNull(this.m_convenienceCmds);
						this.m_activeReturnedDataSelections = sap.firefly.XObject
								.releaseIfNotNull(this.m_activeReturnedDataSelections);
						this.m_inactiveReturnedDataSelections = sap.firefly.XObject
								.releaseIfNotNull(this.m_inactiveReturnedDataSelections);
						this.m_activeContainer = sap.firefly.XObject
								.releaseIfNotNull(this.m_activeContainer);
						this.m_processorStateListeners = sap.firefly.XObject
								.releaseIfNotNull(this.m_processorStateListeners);
						this.m_queryModel = sap.firefly.XObject
								.releaseIfNotNull(this.m_queryModel);
						this
								.setLifeCycleState(sap.firefly.LifeCycleState.RELEASED);
						this.m_metadataModel = sap.firefly.XObject
								.releaseIfNotNull(this.m_metadataModel);
						this.m_systemDescription = null;
						this.m_previousVariableProcessorState = null;
						this.m_variableProcessorState = null;
						this.m_queryExecutedListener = null;
						sap.firefly.QueryManager.$superclass.releaseObject
								.call(this);
					},
					assertLifeCycleActive : function() {
						if ((this.m_lifeCycleState !== sap.firefly.LifeCycleState.ACTIVE)
								&& (this.m_lifeCycleState !== sap.firefly.LifeCycleState.STARTING_UP)) {
							throw sap.firefly.XException
									.createIllegalStateException("Query manager is not active");
						}
					},
					setupClone : function(origin, cloneMode) {
						var application = origin.getApplication();
						var serviceConfig = origin.getServiceConfig();
						var serviceConfigClone = serviceConfig.clone();
						var connectionPool;
						var origSystemDescription;
						var originConnection;
						var variableVariants;
						var sizeVariants;
						var idxVariants;
						var originQueryModel;
						var capabilities;
						var serverBaseSerialization;
						var serializer;
						var inaQueryModel;
						var deserializer;
						var deserializer2;
						var dimensions;
						var dimensionIndex;
						var dimension;
						var cloneDimension;
						var instanceId;
						var dataSourceBase;
						sap.firefly.QueryManager.$superclass.setupService.call(
								this, serviceConfigClone);
						connectionPool = application.getConnectionPool();
						origSystemDescription = origin.getSystemDescription();
						originConnection = origin.getConnection();
						if (originConnection.useSessionUrlRewrite()
								&& (connectionPool
										.getMaximumSharedConnections(origSystemDescription
												.getName()) > 1)) {
							this.setConnection(connectionPool.getConnectionExt(
									origSystemDescription.getName(), false,
									originConnection.getName()));
						} else {
							this.setConnection(originConnection);
						}
						this.setSystemDescription(origSystemDescription);
						this.setupValues();
						this.initQueryModel();
						this.m_lifeCycleState = sap.firefly.LifeCycleState.STARTING_UP;
						this.m_mode = origin.getMode();
						this.m_activeContainer = sap.firefly.ResultSetContainer
								.create(this, origin
										.getActiveResultSetContainer());
						this.m_metadataModel = origin.getMetadataModel()
								.cloneOlapComponent(null, null);
						this.setOffsetColumns(origin.getOffsetColumns());
						this.setOffsetRows(origin.getOffsetRows());
						this.setMaxRows(origin.getMaxRows());
						this.setMaxColumns(origin.getMaxColumns());
						if (origin.supportsReturnedDataSelection()) {
							this.m_activeReturnedDataSelections = sap.firefly.XHashSetOfString
									.create();
							this.m_activeReturnedDataSelections.putAll(origin
									.getAllEnabledReturnedDataSelections());
							this.m_inactiveReturnedDataSelections = sap.firefly.XHashSetOfString
									.create();
							this.m_inactiveReturnedDataSelections.putAll(origin
									.getAllDisabledReturnedDataSelections());
						}
						variableVariants = origin.getVariableVariants();
						if (variableVariants !== null) {
							sizeVariants = variableVariants.size();
							for (idxVariants = 0; idxVariants < sizeVariants; idxVariants++) {
								this.addVariableVariant(variableVariants.get(
										idxVariants).clone());
							}
						}
						originQueryModel = origin.getQueryModel();
						if (originQueryModel !== null) {
							capabilities = this.getMainCapabilities();
							serverBaseSerialization = originQueryModel
									.getServerBaseSerialization();
							if ((cloneMode === sap.firefly.QueryCloneMode.CURRENT_STATE_INA)
									|| (cloneMode === sap.firefly.QueryCloneMode.CURRENT_STATE)) {
								if (cloneMode === sap.firefly.QueryCloneMode.CURRENT_STATE) {
									(this.m_queryModel)
											.copyQueryModel(originQueryModel);
								} else {
									serializer = sap.firefly.QInAExportFactory
											.createForCloning(application,
													capabilities);
									inaQueryModel = serializer
											.exportQueryModel(originQueryModel,
													true, true);
									deserializer = sap.firefly.QInAImportFactory
											.createForCloning(application,
													capabilities);
									deserializer.importQueryModel(
											inaQueryModel, this.m_queryModel);
									if (deserializer.hasErrors()) {
										throw sap.firefly.XException
												.createRuntimeException(sap.firefly.XStringUtils
														.concatenate2(
																"Cloning failed: ",
																deserializer
																		.getSummary()));
									}
								}
							} else {
								if (cloneMode === sap.firefly.QueryCloneMode.BASE_STATE) {
									deserializer2 = sap.firefly.QInAImportFactory
											.create(
													application,
													sap.firefly.QModelFormat.INA_METADATA,
													capabilities);
									deserializer2.importQueryModel(
											serverBaseSerialization,
											this.m_queryModel);
								} else {
									throw sap.firefly.XException
											.createRuntimeException(sap.firefly.XStringUtils
													.concatenate2(
															"Mode not yet supported: ",
															cloneMode
																	.toString()));
								}
							}
							this
									.getQueryModel()
									.getDrillManager()
									.setValidateContextFreeNavigations(
											originQueryModel
													.getDrillManager()
													.isValidatingContextFreeNavigations());
							this.m_queryModel
									.setServerBaseSerialization(serverBaseSerialization);
							this.m_queryModel
									.setServerBaseSerializationFormat(sap.firefly.QModelFormat.INA_METADATA);
							dimensions = originQueryModel.getDimensions();
							if (dimensions !== null) {
								for (dimensionIndex = 0; dimensionIndex < dimensions
										.size(); dimensionIndex++) {
									dimension = dimensions.get(dimensionIndex);
									if (dimension === null) {
										continue;
									}
									cloneDimension = this.m_queryModel
											.getDimensionByName(dimension
													.getName());
									if (cloneDimension === null) {
										continue;
									}
									cloneDimension
											.reOrderStructureMembers(dimension
													.getOrderedStructureMemberNames());
								}
							}
						}
						instanceId = (serviceConfigClone).getInstanceId();
						dataSourceBase = this.m_queryModel.getDataSourceBase();
						dataSourceBase.setInstanceId(instanceId);
						this
								.setLifeCycleState(sap.firefly.LifeCycleState.ACTIVE);
					},
					cloneOlapComponent : function(context, parent) {
						return this
								.cloneQueryManagerExt(sap.firefly.QueryCloneMode.CURRENT_STATE);
					},
					cloneQueryManagerExt : function(cloneMode) {
						var clone;
						if (this.getMode() === sap.firefly.QueryManagerMode.BLENDING) {
							clone = this.cloneQueryManager();
							if (cloneMode === sap.firefly.QueryCloneMode.BASE_STATE) {
								clone.getQueryModel().getConvenienceCommands()
										.resetToDefault();
							}
							return clone;
						}
						return this.cloneQueryManagerBase(cloneMode);
					},
					cloneQueryManager : function() {
						var serviceConfig;
						var blendingDefinition;
						var blendingServiceConfig;
						var extBlendingManager;
						var clone;
						var cloneQueryModel;
						var queryModel;
						var originalModel;
						var deserializeExt;
						var dimensions;
						var dimensionIndex;
						var dimension;
						var cloneDimension;
						if (this.getMode() === sap.firefly.QueryManagerMode.BLENDING) {
							serviceConfig = this.getServiceConfig();
							blendingDefinition = serviceConfig
									.getBlendingDefinition();
							blendingServiceConfig = sap.firefly.QueryServiceConfig
									.createWithBlendingDefinition(this
											.getApplication(),
											blendingDefinition
													.cloneBlendingDefinition());
							blendingServiceConfig
									.activateExperimentalFeatureSet(serviceConfig
											.getExperimentalFeatureSet());
							extBlendingManager = blendingServiceConfig
									.processQueryManagerCreation(
											sap.firefly.SyncType.BLOCKING,
											null, null);
							if (extBlendingManager.hasErrors()) {
								throw sap.firefly.XException
										.createRuntimeException(extBlendingManager
												.getSummary());
							}
							clone = extBlendingManager.getData();
							cloneQueryModel = clone.getQueryModel();
							queryModel = this.getQueryModel();
							cloneQueryModel
									.getDrillManager()
									.setValidateContextFreeNavigations(
											queryModel
													.getDrillManager()
													.isValidatingContextFreeNavigations());
							originalModel = queryModel.serialize(
									sap.firefly.QModelFormat.INA_REPOSITORY,
									null);
							deserializeExt = cloneQueryModel.deserializeExt(
									sap.firefly.QModelFormat.INA_REPOSITORY,
									originalModel);
							dimensions = queryModel.getDimensions();
							if (dimensions !== null) {
								for (dimensionIndex = 0; dimensionIndex < dimensions
										.size(); dimensionIndex++) {
									dimension = dimensions.get(dimensionIndex);
									if (dimension === null) {
										continue;
									}
									cloneDimension = cloneQueryModel
											.getDimensionByName(dimension
													.getName());
									if (cloneDimension === null) {
										continue;
									}
									cloneDimension
											.reOrderStructureMembers(dimension
													.getOrderedStructureMemberNames());
								}
							}
							if (deserializeExt.hasErrors()) {
								throw sap.firefly.XException
										.createRuntimeException(deserializeExt
												.getSummary());
							}
							return clone;
						}
						return this
								.cloneQueryManagerBase(sap.firefly.QueryCloneMode.CURRENT_STATE_INA);
					},
					getCapabilitiesBase : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					initQueryModel : function() {
						var capabilities = this.getCapabilitiesBase();
						var dataSource;
						this.m_queryModel = sap.firefly.QueryModel.create(this
								.getOlapEnv(), this, this, capabilities);
						dataSource = this.getDataSource();
						if (dataSource !== null) {
							this.m_queryModel.getDataSourceBase().copyFrom(
									dataSource);
						}
						return this.m_queryModel;
					},
					invalidateState : function() {
						this.getQueryModelBase().notifyNodeChanged();
					},
					lazyLoadMetadataModel : function() {
						if (this.m_metadataModel === null) {
							this.m_metadataModel = sap.firefly.QMetadataModel
									.create(this.m_queryModel);
						}
					},
					getMetadataModelBase : function() {
						this.lazyLoadMetadataModel();
						return this.m_metadataModel;
					},
					getMetadataModel : function() {
						this.lazyLoadMetadataModel();
						return this.m_metadataModel;
					},
					processQueryExecution : function(syncType, listener,
							customIdentifier) {
						var sequence;
						var submitAction;
						var resultAction;
						this.assertLifeCycleActive();
						if (syncType === sap.firefly.SyncType.REGISTER) {
							this.m_queryExecutedListener.put(listener,
									sap.firefly.XPair.create(listener,
											customIdentifier));
							this.m_activeContainer.attachListener(listener,
									sap.firefly.ListenerType.SPECIFIC,
									customIdentifier);
							return null;
						} else {
							if (syncType === sap.firefly.SyncType.UNREGISTER) {
								this.m_queryExecutedListener.remove(listener);
								return null;
							} else {
								if (this.variablesRequireImplicitSubmit()) {
									sequence = sap.firefly.SyncActionSequence
											.create(this);
									submitAction = this.submitVariables(
											sap.firefly.SyncType.DELAYED, null,
											null);
									sequence.addAction(submitAction);
									resultAction = this.m_activeContainer
											.processExecution(
													sap.firefly.SyncType.DELAYED,
													null, null);
									sequence.setMainAction(resultAction);
									sequence
											.attachAllListeners(this.m_queryExecutedListener
													.getValuesAsReadOnlyList());
									return sequence.processSyncAction(syncType,
											listener, customIdentifier);
								}
								this.m_activeContainer
										.attachAllListeners(this.m_queryExecutedListener
												.getValuesAsReadOnlyList());
								return this.m_activeContainer.processExecution(
										syncType, listener, customIdentifier);
							}
						}
					},
					onModelChange : function(phase) {
						if (phase === sap.firefly.QDeltaBroadcastPhase.BEFORE_EVENTS_BROADCAST) {
							this.getResultsetContainer(true);
						}
					},
					getResultsetContainer : function(enforceOutOfSync) {
						if ((this.m_activeContainer === null)
								|| ((enforceOutOfSync) && (this.m_activeContainer
										.getSyncState() !== sap.firefly.SyncState.OUT_OF_SYNC))) {
							this.m_activeContainer = sap.firefly.ResultSetContainer
									.create(this, this.m_activeContainer);
						}
						return this.m_activeContainer;
					},
					getClassicResultSet : function() {
						this.assertLifeCycleActive();
						return this.m_activeContainer.getClassicResultSet();
					},
					isClassicResultSetAvailable : function() {
						this.assertLifeCycleActive();
						return this.m_activeContainer
								.isClassicResultSetAvailable();
					},
					getCursorResultSet : function() {
						this.assertLifeCycleActive();
						return this.m_activeContainer.getCursorResultSet();
					},
					getAbstractRendering : function(type) {
						this.assertLifeCycleActive();
						return this.m_activeContainer
								.getAbstractRendering(type);
					},
					isCursorResultSetAvailable : function() {
						this.assertLifeCycleActive();
						return this.m_activeContainer
								.isCursorResultSetAvailable();
					},
					setOffsetRows : function(offset) {
						this.getResultsetContainer(true).setOffsetRows(offset);
						return null;
					},
					getOffsetRows : function() {
						return this.getResultsetContainer(false)
								.getOffsetRows();
					},
					setOffsetColumns : function(offset) {
						this.getResultsetContainer(true).setOffsetColumns(
								offset);
						return null;
					},
					getOffsetColumns : function() {
						return this.getResultsetContainer(false)
								.getOffsetColumns();
					},
					setMaxRows : function(max) {
						this.getResultsetContainer(true).setMaxRows(max);
						return null;
					},
					getMaxRows : function() {
						return this.getResultsetContainer(false).getMaxRows();
					},
					setMaxColumns : function(max) {
						this.getResultsetContainer(true).setMaxColumns(max);
						return null;
					},
					getMaxColumns : function() {
						return this.getResultsetContainer(false)
								.getMaxColumns();
					},
					getMaxResultRecords : function() {
						return this.getResultsetContainer(false)
								.getMaxResultRecords();
					},
					setMaxResultRecords : function(maxResultRecords) {
						this.getResultsetContainer(true).setMaxResultRecords(
								maxResultRecords);
						return null;
					},
					resetMaxResultRecords : function() {
						this.getResultsetContainer(true)
								.resetMaxResultRecords();
						return null;
					},
					setResultSetPersistanceTargetSchema : function(
							resultSetPersistanceSchema) {
						this.getResultsetContainer(true)
								.setResultSetPersistanceTargetSchema(
										resultSetPersistanceSchema);
						return null;
					},
					setResultSetPersistanceTargetTable : function(
							resultSetPersistanceTable) {
						this.getResultsetContainer(true)
								.setResultSetPersistanceTargetTable(
										resultSetPersistanceTable);
						return null;
					},
					setResultSetPersistanceIdentifier : function(
							resultSetPersistanceIdentifier) {
						this.getResultsetContainer(true)
								.setResultSetPersistanceIdentifier(
										resultSetPersistanceIdentifier);
						return null;
					},
					setResultSetPersistanceEnabled : function(
							resultSetPersistanceEnabled) {
						this.getResultsetContainer(true)
								.setResultSetPersistanceEnabled(true);
						return null;
					},
					getResultSetPersistanceSchema : function() {
						return this.getResultsetContainer(false)
								.getResultSetPersistanceSchema();
					},
					getResultSetPersistanceTable : function() {
						return this.getResultsetContainer(false)
								.getResultSetPersistanceTable();
					},
					getResultSetPersistanceIdentifier : function() {
						return this.getResultsetContainer(false)
								.getResultSetPersistanceIdentifier();
					},
					isResultSetPersistanceEnabled : function() {
						return this.getResultsetContainer(false)
								.isResultSetPersistanceEnabled();
					},
					setExecuteRequestOnOldResultSet : function(
							executeRequestOnOldResultSet) {
						this.getResultsetContainer(true)
								.setExecuteRequestOnOldResultSet(
										executeRequestOnOldResultSet);
						return null;
					},
					isResultSetTransportEnabled : function() {
						return this.getResultsetContainer(false)
								.isResultSetTransportEnabled();
					},
					setResultSetTransportEnabled : function(isEnabled) {
						this.getResultsetContainer(true)
								.setResultSetTransportEnabled(isEnabled);
						return null;
					},
					setDataRefreshEnabled : function(dataRefreshEnabled) {
						this.getResultsetContainer(true).setDataRefreshEnabled(
								dataRefreshEnabled);
					},
					getDataRefreshEnabled : function() {
						return this.getResultsetContainer(false)
								.getDataRefreshEnabled();
					},
					getExecuteRequestOnOldResultSet : function() {
						return this.m_activeContainer
								.getExecuteRequestOnOldResultSet();
					},
					getActiveResultSetContainer : function() {
						return this.m_activeContainer;
					},
					getResultSetSyncState : function() {
						return this.m_activeContainer.getResultSetSyncState();
					},
					getResultSetMessages : function() {
						return this.m_activeContainer;
					},
					hasChangedValues : function() {
						var dataEntryCollection = this.m_activeContainer
								.getDataEntryCollection();
						if (dataEntryCollection === null) {
							return false;
						}
						return dataEntryCollection.hasChangedValues();
					},
					hasChangedValueLocks : function() {
						var dataEntryCollection = this.m_activeContainer
								.getDataEntryCollection();
						if (dataEntryCollection === null) {
							return false;
						}
						return dataEntryCollection.hasChangedValueLocks();
					},
					hasChangedCells : function() {
						var dataEntryCollection = this.m_activeContainer
								.getDataEntryCollection();
						if (dataEntryCollection === null) {
							return false;
						}
						return dataEntryCollection.hasChangedDataEntries();
					},
					transferNewValues : function() {
						var resultSetId = this.m_activeContainer.getId();
						var dataEntryCollection = this.m_activeContainer
								.getDataEntryCollection();
						this.m_activeContainer.setDataEntryCollection(null);
						this.invalidateState();
						this.m_activeContainer.setId(resultSetId);
						this.m_activeContainer
								.setDataEntryCollection(dataEntryCollection);
					},
					resetNewValues : function() {
						this.m_activeContainer.resetDataEntryCollection();
					},
					hasNewValues : function() {
						var dataEntryCollection = this.m_activeContainer
								.getDataEntryCollection();
						if ((dataEntryCollection !== null)
								&& (dataEntryCollection.hasChangedDataEntries())) {
							return true;
						}
						return false;
					},
					setDataEntryReadOnly : function(dataEntryReadOnly) {
						this.getQueryModel().setDataEntryReadOnly(
								dataEntryReadOnly);
					},
					isDataEntryReadOnly : function() {
						return this.getQueryModel().isDataEntryReadOnly();
					},
					setDataEntryEnabled : function(dataEntryEnabled) {
						this.getQueryModelBase().setDataEntryEnabled(
								dataEntryEnabled);
					},
					isDataEntryEnabled : function() {
						return this.getQueryModel().isDataEntryEnabled();
					},
					initializeDataAreaState : function() {
						var msgMgr = sap.firefly.MessageManager
								.createMessageManager();
						var systemDescription;
						var systemType;
						var systemName;
						var dataArea;
						var dataAreaState;
						if (this.isDataEntryEnabled()) {
							systemDescription = this.getSystemDescription();
							if (systemDescription !== null) {
								systemType = systemDescription.getSystemType();
								if (systemType
										.isTypeOf(sap.firefly.SystemType.BW)) {
									systemName = systemDescription.getName();
									dataArea = this.getDataAreaName();
									dataAreaState = sap.firefly.DataAreaState
											.getDataAreaStateByName(this
													.getApplication(),
													systemName, dataArea);
									if (dataAreaState === null) {
										dataAreaState = sap.firefly.DataAreaState
												.createDataAreaState(this
														.getApplication(),
														systemName, dataArea,
														null, null, null);
										if (dataAreaState === null) {
											msgMgr
													.addError(
															sap.firefly.ErrorCodes.INVALID_STATE,
															"illegal data area");
										}
									} else {
										if (dataAreaState.isSubmitted() === false) {
											msgMgr
													.addErrorExt(
															sap.firefly.OriginLayer.DRIVER,
															0,
															"illegal data area",
															dataAreaState);
										}
									}
								}
							}
						}
						return msgMgr;
					},
					getDataAreaName : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getDataArea();
					},
					getConvenienceCommands : function() {
						if (this.m_convenienceCmds === null) {
							this.m_convenienceCmds = this.getOlapEnv()
									.selectCmds(this);
						}
						return this.m_convenienceCmds;
					},
					getSystemDescription : function() {
						var initSettings;
						var systemDescription;
						if (this.m_systemDescription === null) {
							initSettings = this.getInitSettings();
							systemDescription = initSettings
									.getSystemDescription();
							this.m_systemDescription = sap.firefly.XWeakReferenceUtil
									.getWeakRef(systemDescription);
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_systemDescription);
					},
					setSystemDescription : function(systemDescription) {
						this.m_systemDescription = sap.firefly.XWeakReferenceUtil
								.getWeakRef(systemDescription);
					},
					getDataSource : function() {
						return this.getInitSettings().getDataSource();
					},
					setDataSource : function(dataSource) {
						this.getInitSettings().setDataSource(dataSource);
					},
					getResultSetAccessMode : function() {
						return this.getInitSettings().getResultSetAccessMode();
					},
					getMode : function() {
						if (this.m_mode === null) {
							this.m_mode = this.getInitSettings().getMode();
						}
						return this.m_mode;
					},
					setMode : function(mode) {
						this.m_mode = mode;
					},
					getInstanceId : function() {
						return this.getInitSettings().getInstanceId();
					},
					isOpenForEdit : function() {
						return this.getInitSettings().isOpenForEdit();
					},
					getProviderType : function() {
						return this.getInitSettings().getProviderType();
					},
					getDefinitionType : function() {
						return this.getInitSettings().getDefinitionType();
					},
					getDefinitionAsJson : function() {
						return this.getInitSettings().getDefinitionAsJson();
					},
					getDefinitionAsNative : function() {
						return this.getInitSettings().getDefinitionAsNative();
					},
					getDefinitionAsStructure : function() {
						return this.getInitSettings()
								.getDefinitionAsStructure();
					},
					getServerCustomizations : function() {
						return this.getInitSettings().getServerCustomizations();
					},
					getInitSettings : function() {
						return this.getServiceConfig();
					},
					hasVariables : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel.hasVariables();
					},
					hasMandatoryVariables : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel.hasMandatoryVariables();
					},
					getVariables : function() {
						this.assertLifeCycleActive();
						return this.getQueryModel().getVariables();
					},
					getInputEnabledVariables : function() {
						this.assertLifeCycleActive();
						return this.getQueryModel().getInputEnabledVariables();
					},
					addVariable : function(variable) {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						variableManagerBase.addVariable(variable);
					},
					getVariableBaseByIndex : function(index) {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						return variableManagerBase
								.getVariableBaseByIndex(index);
					},
					getVariableBaseByName : function(name) {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						return variableManagerBase.getVariableBaseByName(name);
					},
					getVariable : function(name) {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						return variableManagerBase.getVariableBaseByName(name);
					},
					removeVariable : function(name) {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						variableManagerBase.removeVariable(name);
					},
					clearVariables : function() {
						var variableManagerBase;
						this.assertLifeCycleActive();
						variableManagerBase = this.getQueryModelBase()
								.getVariableManagerBase();
						variableManagerBase.clearVariables();
					},
					registerVariableProcessorStateChangedListener : function(
							listener, customIdentifier) {
						if (this.m_processorStateListeners === null) {
							this.m_processorStateListeners = sap.firefly.XList
									.create();
						}
						this.m_processorStateListeners
								.add(sap.firefly.ListenerPair.create(listener,
										customIdentifier));
					},
					unregisterVariableProcessorStateChangedListener : function(
							listener) {
						var i;
						var listenerPair;
						if (this.m_processorStateListeners !== null) {
							for (i = 0; i < this.m_processorStateListeners
									.size();) {
								listenerPair = this.m_processorStateListeners
										.get(i);
								if (listenerPair.getListener() === listener) {
									this.m_processorStateListeners.removeAt(i);
								} else {
									i++;
								}
							}
						}
					},
					setVariableProcessorState : function(variableProcessorState) {
						var i;
						var listenerPair;
						var listener;
						if (variableProcessorState === sap.firefly.VariableProcessorState.VALUE_HELP) {
							this.m_previousVariableProcessorState = variableProcessorState;
							this.m_variableProcessorState = variableProcessorState;
						} else {
							if (this.m_variableProcessorState !== variableProcessorState) {
								this.m_previousVariableProcessorState = this.m_variableProcessorState;
								this.m_variableProcessorState = variableProcessorState;
								if (this.m_processorStateListeners !== null) {
									for (i = 0; i < this.m_processorStateListeners
											.size(); i++) {
										listenerPair = this.m_processorStateListeners
												.get(i);
										listener = listenerPair.getListener();
										if (listener !== null) {
											listener
													.onVariableProcessorStateChanged(
															this,
															listenerPair
																	.getCustomIdentifier());
										}
									}
								}
							}
						}
					},
					getVariableProcessorState : function() {
						return this.m_variableProcessorState;
					},
					isSubmitNeeded : function() {
						return this.getVariableProcessorState()
								.isSubmitNeeded();
					},
					isReinitNeeded : function() {
						return this.getVariableProcessorState()
								.isReinitNeeded();
					},
					isCancelNeeded : function() {
						return this.getVariableProcessorState()
								.isCancelNeeded();
					},
					isSubmitted : function() {
						return this.m_variableProcessorState
								.isTypeOf(sap.firefly.VariableProcessorState.SUBMITTED);
					},
					setVariablesProcessed : function(areVariablesProcessed) {
						if (areVariablesProcessed) {
							this
									.setVariableProcessorState(sap.firefly.VariableProcessorState.SUBMITTED);
						} else {
							this.returnToPreviousProcessorState();
						}
					},
					returnToPreviousProcessorState : function() {
						var tmp;
						if (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.PROCESSING_REINIT) {
							this.m_previousVariableProcessorState = sap.firefly.VariableProcessorState.CHANGEABLE_REINIT;
						} else {
							if ((this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.PROCESSING_SUBMIT)
									|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.PROCESSING_SUBMIT_AFTER_REINIT)) {
								this.m_previousVariableProcessorState = sap.firefly.VariableProcessorState.SUBMITTED;
							}
						}
						if ((this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_STARTUP)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.SUBMITTED)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.VALUE_HELP)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER)) {
							tmp = this.m_previousVariableProcessorState;
							this.setVariableProcessorState(tmp);
							this.m_previousVariableProcessorState = null;
						} else {
							if (this.m_previousVariableProcessorState === null) {
								throw sap.firefly.XException
										.createIllegalStateException("Not allowed to return to previous state: [null]");
							}
							throw sap.firefly.XException
									.createIllegalStateException(sap.firefly.XString
											.concatenate2(
													"Not allowed to return to previous state: ",
													this.m_previousVariableProcessorState
															.getName()));
						}
					},
					getVariableContainer : function() {
						return this.getVariableContainerBase();
					},
					getVariableContainerBase : function() {
						var queryModelBase = this.getQueryModelBase();
						if (queryModelBase === null) {
							return null;
						}
						return queryModelBase.getVariableManagerBase();
					},
					reInitVariablesAfterSubmit : function(syncType, listener,
							customIdentifier) {
						return this.processReInitVariableAfterSubmit(syncType,
								listener, customIdentifier);
					},
					submitVariables : function(syncType, listener,
							customIdentifier) {
						if (this.isDirectVariableTransferEnabled()) {
							throw sap.firefly.XException
									.createIllegalStateException("submit not allowed if direct variable transfer is enabled");
						}
						return this.processVariableSubmit(syncType, listener,
								customIdentifier);
					},
					cancelReInitVariables : function(syncType, listener,
							customIdentifier) {
						return this.processVariableCancel(syncType, listener,
								customIdentifier);
					},
					isDirectVariableTransferEnabled : function() {
						return this.m_directVariableTransferConsumer;
					},
					setDirectVariableTransferEnabled : function(
							directVariableTransfer) {
						if (this.m_directVariableTransferConsumer !== directVariableTransfer) {
							if (this.supportsDirectVariableTransfer()) {
								this.m_directVariableTransferConsumer = directVariableTransfer;
								this
										.setDirectVariableTransfer(directVariableTransfer);
								this
										.setIsVariableSubmitNeeded(!this.m_directVariableTransferConsumer);
								if (this.getQueryModelBase() !== null) {
									this.getQueryModelBase()
											.notifyNodeChanged();
								}
								if (this.m_directVariableTransferConsumer) {
									this
											.setVariableProcessorState(sap.firefly.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER);
								} else {
									this
											.setVariableProcessorState(sap.firefly.VariableProcessorState.CHANGEABLE_REINIT);
								}
							}
						}
					},
					checkVariables : function(syncType, listener,
							customIdentifier) {
						return this.processCheckVariables(syncType, listener,
								customIdentifier);
					},
					variablesRequireImplicitSubmit : function() {
						if (this.isDirectVariableTransferEnabled()) {
							return false;
						}
						if (this.hasVariables() === false) {
							return false;
						}
						if (this.isSubmitted()) {
							return false;
						}
						return true;
					},
					getVariableProcessor : function() {
						return this;
					},
					getVariableProcessorBase : function() {
						return this;
					},
					setVariableProcessorBase : function(processor) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getValueHelpProvider : function() {
						return this;
					},
					getOlapEnvironmentBase : function() {
						var application = this.getApplication();
						if (application === null) {
							return null;
						}
						return application.getOlapEnvironment();
					},
					getName : function() {
						return null;
					},
					getTagging : function() {
						return (this.getServiceConfig()).getTagging();
					},
					getSelectionTagging : function() {
						return null;
					},
					enableReturnedDataSelection : function(dataSelection) {
						var name;
						if (this.supportsReturnedDataSelection()) {
							if (dataSelection === sap.firefly.ReturnedDataSelection.INPUT_READINESS_STATES) {
								if (this.supportsInputReadinessStates() === false) {
									return;
								}
							}
							name = dataSelection.getName();
							this.m_activeReturnedDataSelections.put(name);
							this.m_inactiveReturnedDataSelections
									.removeElement(name);
						}
					},
					getAllEnabledReturnedDataSelections : function() {
						if (this.supportsReturnedDataSelection()) {
							return this.m_activeReturnedDataSelections
									.getValuesAsReadOnlyListOfString();
						}
						return null;
					},
					clearDataSelections : function() {
						this.m_activeReturnedDataSelections.clear();
						this.m_inactiveReturnedDataSelections.clear();
					},
					disableReturnedDataSelection : function(dataSelection) {
						var name;
						if (this.supportsReturnedDataSelection()) {
							if (dataSelection === sap.firefly.ReturnedDataSelection.INPUT_READINESS_STATES) {
								if (this.supportsInputReadinessStates() === false) {
									return;
								}
							}
							name = dataSelection.getName();
							this.m_inactiveReturnedDataSelections.put(name);
							this.m_activeReturnedDataSelections
									.removeElement(name);
						}
					},
					getAllDisabledReturnedDataSelections : function() {
						if (this.supportsReturnedDataSelection()) {
							return this.m_inactiveReturnedDataSelections
									.getValuesAsReadOnlyListOfString();
						}
						return null;
					},
					getPlanningMode : function() {
						return this.getQueryModel().getPlanningMode();
					},
					setPlanningMode : function(planningMode) {
						this.getQueryModel().setPlanningMode(planningMode);
					},
					getPlanningRestriction : function() {
						return this.m_versionRestrictionType;
					},
					setPlanningRestriction : function(restrictionType) {
						this.m_versionRestrictionType = restrictionType;
					},
					supportsDirectVariableTransfer : function() {
						return this.getCapabilitiesBase()
								.supportsDirectVariableTransfer();
					},
					supportsCheckVariables : function() {
						return this.getCapabilitiesBase()
								.supportsCheckVariables();
					},
					supportsReInitVariables : function() {
						return this.getCapabilitiesBase()
								.supportsReInitVariables();
					},
					supportsHierarchyPath : function() {
						return this.getCapabilitiesBase()
								.supportsHierarchyPath();
					},
					supportsReturnedDataSelection : function() {
						return this.getCapabilitiesBase()
								.supportsReturnedDataSelection();
					},
					supportsInputReadinessStates : function() {
						return this.getCapabilitiesBase()
								.supportsInputReadinessStates();
					},
					supportsShutdown : function() {
						return this.getCapabilitiesBase().supportsShutdown();
					},
					supportsDataEntryReadOnly : function() {
						return this.getQueryModel().supportsDataEntryReadOnly();
					},
					supportsAnalyticCapability : function(capabilityName) {
						var application;
						var systemDescription;
						var connectionPool;
						var connectionContainer;
						var serverMetadata;
						var capabilityContainer;
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(capabilityName)) {
							return false;
						}
						application = this.getApplication();
						if (application === null) {
							return false;
						}
						systemDescription = this.getSystemDescription();
						if (systemDescription === null) {
							return false;
						}
						connectionPool = application.getConnectionPool();
						if (connectionPool === null) {
							return false;
						}
						connectionContainer = this.getConnection();
						if (connectionContainer === null) {
							return false;
						}
						serverMetadata = connectionContainer
								.getServerMetadata();
						if (serverMetadata === null) {
							return false;
						}
						capabilityContainer = serverMetadata
								.getMetadataForService(sap.firefly.ServerService.ANALYTIC);
						if (capabilityContainer === null) {
							return false;
						}
						return capabilityContainer.containsKey(capabilityName);
					},
					supportsAnalyticCapabilityActive : function(capabilityName) {
						var capabilityContainer = this.getMainCapabilities();
						if (capabilityContainer === null) {
							return false;
						}
						return capabilityContainer.containsKey(capabilityName);
					},
					getPlanningVersionIdentifier : function(versionId,
							sharedVersion, versionOwner) {
						return sap.firefly.PlanningVersionIdentifier.create(
								versionId, sharedVersion, versionOwner);
					},
					getPlanningVersionSettings : function(versionIdentifier,
							sequenceId, useExternalView) {
						return sap.firefly.PlanningVersionSettings.create(
								versionIdentifier, sequenceId, useExternalView);
					},
					addPlanningVersionSettings : function(sequenceSettings) {
						var deleteCandidate;
						var addCandidate;
						if (sequenceSettings === null) {
							return null;
						}
						deleteCandidate = this
								.deletePlanningActionSequenceSettingsInternal(
										sequenceSettings, false);
						addCandidate = this.getPlanningVersionSettings(
								sequenceSettings, sequenceSettings
										.getActionSequenceId(),
								sequenceSettings.getUseExternalView());
						if (this.isPlanningVersionSettingsEqual(
								deleteCandidate, addCandidate)) {
							return deleteCandidate;
						}
						this.deletePlanningActionSequenceSettingsInternal(
								sequenceSettings, true);
						this.m_allPlanningVersionSettings.add(addCandidate);
						this.invalidateState();
						return addCandidate;
					},
					isPlanningVersionSettingsEqual : function(s1, s2) {
						if (s1 === s2) {
							return true;
						}
						if ((s1 === null) || (s2 === null)) {
							return false;
						}
						if (sap.firefly.XString.isEqual(s1
								.getVersionUniqueName(), s2
								.getVersionUniqueName()) === false) {
							return false;
						}
						if (sap.firefly.XString.isEqual(s1
								.getActionSequenceId(), s2
								.getActionSequenceId()) === false) {
							return false;
						}
						if (s1.getUseExternalView() !== s2.getUseExternalView()) {
							return false;
						}
						if (s1.getIsRestrictionEnabled() !== s2
								.getIsRestrictionEnabled()) {
							return false;
						}
						return true;
					},
					deletePlanningActionSequenceSettingsInternal : function(
							versionIdentifier, deleteSettings) {
						var result;
						var versionUniqueName;
						var i;
						var settings;
						if (versionIdentifier === null) {
							return null;
						}
						result = null;
						versionUniqueName = versionIdentifier
								.getVersionUniqueName();
						for (i = 0; i < this.m_allPlanningVersionSettings
								.size(); i++) {
							settings = this.m_allPlanningVersionSettings.get(i);
							if (sap.firefly.XString.isEqual(settings
									.getVersionUniqueName(), versionUniqueName)) {
								result = settings;
								if (deleteSettings) {
									this.m_allPlanningVersionSettings
											.removeAt(i);
								}
								break;
							}
						}
						return result;
					},
					deletePlanningVersionSettings : function(versionIdentifier) {
						return this
								.deletePlanningActionSequenceSettingsInternal(
										versionIdentifier, true);
					},
					getAllPlanningVersionSettings : function() {
						return this.m_allPlanningVersionSettings;
					},
					setPlanningVersionSettingsMode : function(settingsMode) {
						if (settingsMode === null) {
							this.m_planningActionSequenceSettingsMode = sap.firefly.PlanningVersionSettingsMode.SERVER_DEFAULT;
						} else {
							this.m_planningActionSequenceSettingsMode = settingsMode;
						}
					},
					getPlanningVersionSettingsMode : function() {
						if (this.m_planningActionSequenceSettingsMode === null) {
							return sap.firefly.PlanningVersionSettingsMode.SERVER_DEFAULT;
						}
						return this.m_planningActionSequenceSettingsMode;
					},
					getComponentType : function() {
						return this.getOlapComponentType();
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.QUERY_MANAGER;
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					unregisterChangedListener : function(listener) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getPlanningModel : function() {
						var application;
						var systemDescription;
						var dataSource;
						var planningService;
						var planningContext;
						if (this.isReleased()) {
							return null;
						}
						application = this.getApplication();
						if (application === null) {
							return null;
						}
						systemDescription = this.getSystemDescription();
						if (systemDescription === null) {
							return null;
						}
						dataSource = this.getDataSource();
						if (dataSource === null) {
							return null;
						}
						planningService = sap.firefly.PlanningModelUtil
								.getPlanningServiceFromQueryDataSource(
										application, systemDescription
												.getName(), dataSource);
						if (planningService === null) {
							return null;
						}
						planningContext = planningService.getPlanningContext();
						if (planningContext === null) {
							return null;
						}
						return planningContext;
					},
					getDataArea : function() {
						var dataAreaName = this.getDataAreaName();
						var application;
						var systemDescription;
						var planningService;
						var planningContext;
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(dataAreaName)) {
							return null;
						}
						application = this.getApplication();
						if (application === null) {
							return null;
						}
						systemDescription = this.getSystemDescription();
						if (systemDescription === null) {
							return null;
						}
						planningService = sap.firefly.DataAreaUtil
								.getPlanningService(application,
										systemDescription.getName(),
										dataAreaName);
						if (planningService === null) {
							return null;
						}
						planningContext = planningService.getPlanningContext();
						if (planningContext === null) {
							return null;
						}
						return planningContext;
					},
					getContext : function() {
						return this;
					},
					getOlapEnv : function() {
						var application = this.getApplication();
						if (application !== null) {
							return application.getOlapEnvironment();
						}
						return null;
					},
					getQueryManager : function() {
						return this;
					},
					getQueryModel : function() {
						return this.m_queryModel;
					},
					getQueryModelBase : function() {
						return this.m_queryModel;
					},
					getModelCapabilities : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.getModelCapabilities();
						}
						return null;
					},
					getFieldAccessorSingle : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.getFieldAccessorSingle();
						}
						return null;
					},
					getDimensionAccessor : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.getDimensionAccessor();
						}
						return null;
					},
					getDrillManager : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.getDrillManager();
						}
						return null;
					},
					queueEventing : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							queryModel.queueEventing();
						}
					},
					stopEventing : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							queryModel.stopEventing();
						}
					},
					isEventingStopped : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							return queryModel.isEventingStopped();
						}
						return false;
					},
					resumeEventing : function() {
						var queryModel;
						this.assertLifeCycleActive();
						queryModel = this.getQueryModel();
						if (queryModel !== null) {
							queryModel.resumeEventing();
						}
					},
					isPublicVersionEditPossible : function() {
						return this.m_isPublicVersionEditPossible
								&& (this.getPlanningMode() === sap.firefly.PlanningMode.FORCE_PLANNING);
					},
					setPublicVersionEditPossible : function(publicVersionEdit) {
						this.m_isPublicVersionEditPossible = publicVersionEdit;
					},
					processMemberHelp : function(arg1, arg2, arg3, arg4) {
					},
					processVariablehelp : function(arg1, arg2, arg3, arg4, arg5) {
					},
					getDataRequest : function() {
					},
					getDataRequestAsString : function() {
					},
					hasMoreRowRecordsAvailable : function() {
					},
					hasMoreColumnRecordsAvailable : function() {
					},
					getHierarchyNameVariable : function(arg1) {
					},
					getHierarchyNodeVariable : function(arg1) {
					},
					getInputEnabledVariable : function(arg1) {
					},
					getVariableMode : function() {
					},
					activateVariableVariant : function(arg1, arg2, arg3, arg4) {
					},
					transferVariables : function(arg1, arg2, arg3) {
					},
					transferVariablesByVariable : function(arg1, arg2, arg3,
							arg4) {
					},
					processSpatialClustering : function(arg1, arg2, arg3, arg4) {
					},
					fillPaging : function(arg1) {
					},
					getMetadataResponseRaw : function() {
					},
					getRriTargetManager : function() {
					},
					getVariableVariantByName : function(arg1) {
					},
					getVariableVariants : function() {
					},
					processModelInitialization : function(arg1, arg2, arg3) {
					},
					addVariableVariant : function(arg1) {
					},
					applyValueHelpCapabilities : function() {
					},
					cloneQueryManagerBase : function(arg1) {
					},
					getPreQueryName : function() {
					},
					getResultSetProviderFactory : function() {
					},
					isMetadataCached : function() {
					},
					setIsMetadataCached : function() {
					},
					setPreQueryName : function(arg1) {
					},
					getMainCapabilities : function() {
					},
					processProviderCancelThreads : function(arg1, arg2, arg3) {
					},
					processProviderShutdown : function(arg1, arg2, arg3) {
					},
					processRriTargetSync : function(arg1, arg2) {
					},
					exportVariables : function(arg1, arg2) {
					},
					importVariables : function(arg1, arg2) {
					},
					isDirectVariableTransfer : function() {
					},
					isVariableSubmitNeeded : function() {
					},
					isVariableValuesRuntimeNeeded : function() {
					},
					processActivateVariableVariant : function(arg1, arg2, arg3,
							arg4) {
					},
					processCheckVariables : function(arg1, arg2, arg3) {
					},
					processReInitVariableAfterSubmit : function(arg1, arg2,
							arg3) {
					},
					processRetrieveVariableRuntimeInformation : function(arg1,
							arg2, arg3) {
					},
					processSetGetVariableValues : function(arg1, arg2, arg3) {
					},
					processVariableCancel : function(arg1, arg2, arg3) {
					},
					processVariableSubmit : function(arg1, arg2, arg3) {
					},
					setDirectVariableTransfer : function(arg1) {
					},
					setIsVariableSubmitNeeded : function(arg1) {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QueryModel",
				sap.firefly.QModelComponent,
				{
					$statics : {
						create : function(application, manager, listener,
								capabilities) {
							var query = new sap.firefly.QueryModel();
							query
									.setupQuery(application, manager,
											capabilities);
							query.setNotificationListener(listener);
							return query;
						}
					},
					m_preQueries : null,
					m_isMetadataExportReduced : false,
					m_application : null,
					m_queryManager : null,
					m_queryCapabilities : null,
					m_protocolCapabilities : null,
					m_metadataProperties : null,
					m_definitionName : null,
					m_keepOriginalTexts : false,
					m_dataSource : null,
					m_baseDataSource : null,
					m_infoProvider : null,
					m_blendingDefinition : null,
					m_serverBaseSerializationKey : null,
					m_serverBaseSerializationFormat : null,
					m_signPresentation : null,
					m_accessMode : null,
					m_dataCells : null,
					m_supportsDataEntryReadOnly : false,
					m_dataEntryEnabled : false,
					m_dataEntryReadOnly : false,
					m_planningMode : null,
					m_hasProcessingStep : false,
					m_axesManager : null,
					m_dimensionManager : null,
					m_filterManager : null,
					m_drillManager : null,
					m_variableManager : null,
					m_sortManager : null,
					m_vizManager : null,
					m_exceptionManager : null,
					m_conditionManager : null,
					m_resultStructureController : null,
					m_uniqueHierarchyNames : null,
					m_optimizerHints : null,
					cloneOlapComponent : function(context, parent) {
						var olapEnv = context.getOlapEnv();
						var queryManager = context.getQueryManager();
						var capabilities = queryManager.getCapabilitiesBase();
						var clone = sap.firefly.QueryModel.create(olapEnv,
								queryManager, queryManager, capabilities);
						clone.copyQueryModel(this);
						return clone;
					},
					copyQueryModel : function(origin) {
						var size;
						var i;
						var originDataCell;
						var cloneDataCell;
						this.stopEventing();
						sap.firefly.QueryModel.$superclass.copyModelComponent
								.call(this, origin);
						if (this.m_queryCapabilities !== origin.m_queryCapabilities) {
							this.m_queryCapabilities = origin.m_queryCapabilities;
						}
						this.m_isMetadataExportReduced = origin.m_isMetadataExportReduced;
						this.m_protocolCapabilities
								.copyProtocolCapabilities(origin.m_protocolCapabilities);
						this.m_definitionName = origin.m_definitionName;
						this.m_keepOriginalTexts = origin.m_keepOriginalTexts;
						this.m_dataSource.copyFrom(origin.m_dataSource);
						if (origin.m_baseDataSource !== null) {
							this.setBaseDataSource(origin.m_baseDataSource);
							this.setInfoProvider(sap.firefly.QInfoProvider
									.createInfoProvider(this,
											this.m_baseDataSource
													.getObjectName(),
											this.m_baseDataSource
													.getObjectName(), null));
						}
						(this.m_resultStructureController)
								.copyResultStructureController(origin.m_resultStructureController);
						(this.m_dimensionManager)
								.copyDimensionManager(origin.m_dimensionManager);
						(this.m_variableManager)
								.copyVariableManager(origin.m_variableManager);
						(this.m_dimensionManager)
								.copyDimensionManagerMember(origin.m_dimensionManager);
						(this.m_filterManager)
								.copyFilterManager(origin.m_filterManager);
						(this.m_axesManager)
								.copyAxesManager(origin.m_axesManager);
						(this.m_sortManager)
								.copySortManager(origin.m_sortManager);
						(this.m_vizManager).copyVizManager(origin.m_vizManager);
						(this.m_drillManager)
								.copyDrillManager(origin.m_drillManager);
						(this.m_exceptionManager)
								.copyExceptionManager(origin.m_exceptionManager);
						if (origin.m_conditionManager !== null) {
							(this.getConditionManager())
									.copyConditionManager(origin.m_conditionManager);
						}
						if (origin.m_dataCells !== null) {
							this.m_dataCells = sap.firefly.QDataCellList
									.createQueryDataCellList(this, this);
							size = origin.m_dataCells.size();
							for (i = 0; i < size; i++) {
								originDataCell = origin.m_dataCells.get(i);
								cloneDataCell = this.m_dataCells
										.newQueryDataCell(originDataCell
												.getName());
								cloneDataCell.copyDataCell(originDataCell);
							}
						}
						this.m_uniqueHierarchyNames = origin.m_uniqueHierarchyNames
								.createSetCopy();
						if (origin.m_optimizerHints !== null) {
							this.m_optimizerHints = origin.m_optimizerHints
									.createMapByStringCopy();
						}
						this.m_metadataProperties = sap.firefly.XProperties
								.createPropertiesCopy(origin.m_metadataProperties);
						this.m_supportsDataEntryReadOnly = origin.m_supportsDataEntryReadOnly;
						this.m_dataEntryEnabled = origin.m_dataEntryEnabled;
						this.m_dataEntryReadOnly = origin.m_dataEntryReadOnly;
						this.m_planningMode = origin.m_planningMode;
						if (origin.m_preQueries !== null) {
							this.m_preQueries = sap.firefly.XListOfNameObject
									.create();
							this.m_preQueries.addAll(origin.m_preQueries);
						}
						this.resumeEventing();
					},
					setupQuery : function(application, queryManager,
							capabilities) {
						this
								.setupModelComponent(application.getContext(),
										null);
						this.m_application = sap.firefly.XWeakReferenceUtil
								.getWeakRef(application);
						if (capabilities !== null) {
							this.m_queryCapabilities = capabilities;
						} else {
							this.m_queryCapabilities = sap.firefly.QCapabilities
									.create();
						}
						this.m_dataSource = sap.firefly.QFactory2
								.newDataSourceExt(this);
						this.m_queryManager = sap.firefly.XWeakReferenceUtil
								.getWeakRef(queryManager);
						this.m_dimensionManager = sap.firefly.QDimensionManager
								.create(this, this);
						this.m_drillManager = sap.firefly.QDrillManager.create(
								this, this);
						this.m_sortManager = sap.firefly.QSortingManager
								.create(this, this);
						this.m_vizManager = sap.firefly.QVizManager.create(
								this, this);
						this.m_metadataProperties = sap.firefly.XProperties
								.create();
						this.m_axesManager = sap.firefly.QAxesManager.create(
								this, this);
						this.m_exceptionManager = sap.firefly.QExceptionManager
								.createExceptionManager(this, this);
						this.m_filterManager = sap.firefly.QFilter.create(this);
						this.m_signPresentation = sap.firefly.SignPresentation.BEFORE_NUMBER;
						this.m_accessMode = sap.firefly.QMemberReadMode.DEFAULT_VALUE;
						this.m_variableManager = sap.firefly.QVariableManager
								.create(this, this);
						this.m_protocolCapabilities = sap.firefly.QProtocolCapabilities
								.create(this, this);
						this.m_resultStructureController = sap.firefly.QResultStructureController
								._create(this, this,
										sap.firefly.QModelLevel.QUERY);
						this.m_planningMode = sap.firefly.PlanningMode.FOR_PRIVATE_VERSIONS_ONLY;
						this.m_uniqueHierarchyNames = sap.firefly.XHashSetOfString
								.create();
					},
					releaseObject : function() {
						if (this.isReleased() === false) {
							this.m_preQueries = sap.firefly.XObject
									.releaseIfNotNull(this.m_preQueries);
							this.m_definitionName = null;
							this.m_infoProvider = null;
							this.m_blendingDefinition = null;
							this.m_serverBaseSerializationFormat = null;
							this.m_signPresentation = null;
							this.m_accessMode = null;
							if (this.supportsCeScenarioParams()) {
								this.m_optimizerHints = sap.firefly.XCollectionUtils
										.releaseEntriesAndCollectionIfNotNull(this.m_optimizerHints);
							}
							this.m_resultStructureController = sap.firefly.XObject
									.releaseIfNotNull(this.m_resultStructureController);
							this.m_uniqueHierarchyNames = sap.firefly.XObject
									.releaseIfNotNull(this.m_uniqueHierarchyNames);
							this.m_dataSource = sap.firefly.XObject
									.releaseIfNotNull(this.m_dataSource);
							this.m_dimensionManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_dimensionManager);
							this.m_drillManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_drillManager);
							this.m_sortManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_sortManager);
							this.m_vizManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_vizManager);
							this.m_metadataProperties = sap.firefly.XObject
									.releaseIfNotNull(this.m_metadataProperties);
							this.m_axesManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_axesManager);
							this.m_exceptionManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_exceptionManager);
							this.m_conditionManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_conditionManager);
							this.m_filterManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_filterManager);
							this.m_dataCells = sap.firefly.XObject
									.releaseIfNotNull(this.m_dataCells);
							this.m_variableManager = sap.firefly.XObject
									.releaseIfNotNull(this.m_variableManager);
							this.m_protocolCapabilities = sap.firefly.XObject
									.releaseIfNotNull(this.m_protocolCapabilities);
							this.getApplication().deleteStructureCacheEntry(
									this.m_serverBaseSerializationKey);
							this.m_serverBaseSerializationKey = null;
							this.m_queryCapabilities = null;
							sap.firefly.QueryModel.$superclass.releaseObject
									.call(this);
						}
					},
					assertHierarchyUniqueName : function(
							usedHierarchyUniqueName, isActivated) {
						if (isActivated) {
							if (this.m_uniqueHierarchyNames
									.contains(usedHierarchyUniqueName)) {
								throw sap.firefly.XException
										.createIllegalStateException(sap.firefly.XStringUtils
												.concatenate3(
														"The hierarchy unique name '",
														usedHierarchyUniqueName,
														"' is already activated!"));
							}
							this.m_uniqueHierarchyNames
									.put(usedHierarchyUniqueName);
						} else {
							this.m_uniqueHierarchyNames
									.removeElement(usedHierarchyUniqueName);
						}
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.QUERY_MODEL;
					},
					setInfoProvider : function(infoProvider) {
						this.m_infoProvider = infoProvider;
					},
					getDynamicAxis : function() {
						return this.m_axesManager.getDynamicAxis();
					},
					getColumnsAxis : function() {
						return this.m_axesManager.getColumnsAxis();
					},
					getRowsAxis : function() {
						return this.m_axesManager.getRowsAxis();
					},
					getFreeAxis : function() {
						return this.m_axesManager.getFreeAxis();
					},
					getRepositoryAxis : function() {
						return this.m_axesManager.getRepositoryAxis();
					},
					getFilterAxis : function() {
						return this.m_axesManager.getFilterAxis();
					},
					getAxis : function(axis) {
						return this.m_axesManager.getAxis(axis);
					},
					getAxisBase : function(axis) {
						return this.m_axesManager.getAxisBase(axis);
					},
					getSelector : function() {
						return this.m_filterManager;
					},
					getSelectorBase : function() {
						return this.m_filterManager;
					},
					getMetadataProperties : function() {
						return this.m_metadataProperties;
					},
					getMetadataPropertiesBase : function() {
						return this.m_metadataProperties;
					},
					setMetadataPropertiesBase : function(properties) {
						this.m_metadataProperties = properties;
					},
					getDataSource : function() {
						return this.m_dataSource;
					},
					getDataSourceBase : function() {
						return this.m_dataSource;
					},
					setDataSource : function(datasource) {
						var dataArea;
						this.m_dataSource.extendWithDataSource(datasource);
						this.setName(this.m_dataSource.getFullQualifiedName());
						if (datasource !== null) {
							dataArea = datasource.getDataArea();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(dataArea)) {
								this.setDataArea(dataArea);
							}
						}
					},
					getBaseDataSource : function() {
						return this.m_baseDataSource;
					},
					setBaseDataSource : function(baseDatasource) {
						this.m_baseDataSource = baseDatasource;
					},
					getNonStructureCount : function() {
						return this.m_dimensionManager.getNonStructureCount();
					},
					getDimensionNameByType : function(type) {
						return this.m_dimensionManager
								.getDimensionNameByType(type);
					},
					getQueryManager : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryManager);
					},
					getQueryManagerBase : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_queryManager);
					},
					getConvenienceCommands : function() {
						return this.getQueryManager().getConvenienceCommands();
					},
					getInfoProvider : function() {
						return this.m_infoProvider;
					},
					getCreatedBy : function() {
						return this.getMetadataPropertiesBase()
								.getStringByName(
										sap.firefly.InAConstants.QY_CREATED_BY);
					},
					getCreatedOn : function() {
						var createdOn = this.getMetadataPropertiesBase()
								.getStringByName(
										sap.firefly.InAConstants.QY_CREATED_ON);
						return this.convertStringToDateTime(createdOn);
					},
					convertStringToDateTime : function(dateString) {
						var date;
						var dateTime;
						if (dateString === null) {
							return null;
						}
						if (this.getSystemType().isTypeOf(
								sap.firefly.SystemType.ABAP)) {
							date = sap.firefly.XDate
									.createDateFromSAPFormat(dateString);
							dateTime = null;
							if (date === null) {
								dateTime = sap.firefly.XDateTime
										.createDateTimeFromSAPFormat(dateString);
							} else {
								dateTime = sap.firefly.XDateTime
										.createDateTime();
								dateTime.resetValue(date);
							}
							return dateTime;
						}
						return sap.firefly.XDateTime
								.createDateTimeFromIsoFormat(dateString);
					},
					getUpdatedBy : function() {
						return this
								.getMetadataPropertiesBase()
								.getStringByName(
										sap.firefly.InAConstants.QY_LAST_UPDATE_BY);
					},
					getUpdatedOn : function() {
						var metadataPropertiesBase = this
								.getMetadataPropertiesBase();
						var updatedOn;
						if (metadataPropertiesBase
								.containsKey(sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON)) {
							updatedOn = metadataPropertiesBase
									.getStringByName(sap.firefly.InAConstants.QY_LAST_DATA_UPDATE_ON);
						} else {
							updatedOn = metadataPropertiesBase
									.getStringByName(sap.firefly.InAConstants.QY_LAST_UPDATE);
						}
						return this.convertStringToDateTime(updatedOn);
					},
					getDueDate : function() {
						var dueDate = this.getMetadataPropertiesBase()
								.getStringByName(
										sap.firefly.InAConstants.QY_DUE_DATE);
						return this.convertStringToDateTime(dueDate);
					},
					getFormatAxis : function() {
						return this.getColumnsAxis();
					},
					getSignPresentation : function() {
						return this.m_signPresentation;
					},
					setSignPresentation : function(signPresentation) {
						this.m_signPresentation = signPresentation;
					},
					getFirstFieldByType : function(type) {
						return this.m_dimensionManager
								.getFirstFieldByType(type);
					},
					getDataArea : function() {
						return this.getDataSource().getDataArea();
					},
					setDataArea : function(dataArea) {
						this.getDataSourceBase().setDataArea(dataArea);
					},
					setResultVisibility : function(visibility) {
						this.m_resultStructureController
								.setResultVisibility(visibility);
					},
					setResultVisibilityByElement : function(element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElement(element,
										visibility);
					},
					setResultVisibilityByElementAndAlignment : function(
							alignment, element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElementAndAlignment(
										alignment, element, visibility);
					},
					getResultVisibility : function() {
						return this.m_resultStructureController
								.getResultVisibility();
					},
					clearResultVisibilitySettings : function() {
						this.m_resultStructureController
								.clearResultVisibilitySettings();
					},
					getResultVisibilitySettings : function() {
						return this.m_resultStructureController
								.getResultVisibilitySettings();
					},
					getResultVisibilityByElement : function(element) {
						return this.m_resultStructureController
								.getResultVisibilityByElement(element);
					},
					getResultVisibilityByElementAndAlignment : function(
							alignment, element) {
						return this.m_resultStructureController
								.getResultVisibilityByElementAndAlignment(
										alignment, element);
					},
					supportsResultAlignment : function() {
						return this.m_resultStructureController
								.supportsResultAlignment();
					},
					supportsResultVisibility : function() {
						return this.m_resultStructureController
								.supportsResultVisibility();
					},
					setResultAlignment : function(alignment) {
						this.m_resultStructureController
								.setResultAlignment(alignment);
					},
					getResultAlignment : function() {
						return this.m_resultStructureController
								.getResultAlignment();
					},
					getParentResultStructureController : function() {
						return null;
					},
					getResultStructureController : function() {
						return this.m_resultStructureController;
					},
					getResultStructureControllerBase : function() {
						return this.m_resultStructureController;
					},
					getResultStructureChildren : function() {
						var list = sap.firefly.XList.create();
						list.add((this.getRowsAxis())
								.getResultStructureControllerBase());
						list.add((this.getColumnsAxis())
								.getResultStructureControllerBase());
						return list.getIterator();
					},
					supportsTotals : function() {
						return this.m_resultStructureController
								.supportsTotals();
					},
					isTotalsAlignmentOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsAlignmentOnDefault();
					},
					isTotalsVisibilityOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsVisibilityOnDefault();
					},
					isTotalsStructureOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsStructureOnDefault();
					},
					restoreTotalsAlignment : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsAlignment(restoreAction,
										recurseChildren);
					},
					restoreTotalsVisibility : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsVisibility(restoreAction,
										recurseChildren);
					},
					getModelLevel : function() {
						return this.m_resultStructureController.getModelLevel();
					},
					getResultSetAccessMode : function() {
						return this.m_accessMode;
					},
					setResultSetAccessMode : function(accessMode) {
						this.m_accessMode = accessMode;
					},
					getDrillManager : function() {
						return this.m_drillManager;
					},
					getDrillManagerBase : function() {
						return this.m_drillManager;
					},
					getSortingManager : function() {
						return this.m_sortManager;
					},
					getSortingManagerBase : function() {
						return this.m_sortManager;
					},
					getVizManager : function() {
						return this.m_vizManager;
					},
					hasVariables : function() {
						return this.m_variableManager.hasVariables();
					},
					hasMandatoryVariables : function() {
						return this.m_variableManager.hasMandatoryVariables();
					},
					getVariables : function() {
						return this.m_variableManager.getVariables();
					},
					getInputEnabledVariables : function() {
						return this.m_variableManager
								.getInputEnabledVariables();
					},
					setDataEntryReadOnly : function(dataEntryReadOnly) {
						if ((this.supportsDataEntryReadOnly() === false)
								&& (dataEntryReadOnly === false)) {
							return;
						}
						if (this.m_dataEntryReadOnly === dataEntryReadOnly) {
							return;
						}
						this.m_dataEntryReadOnly = dataEntryReadOnly;
						this.notifyNodeChanged();
					},
					isDataEntryReadOnly : function() {
						return this.m_dataEntryReadOnly;
					},
					setDataEntryEnabled : function(dataEntryEnabled) {
						this.m_dataEntryEnabled = dataEntryEnabled;
					},
					isDataEntryEnabled : function() {
						return this.m_dataEntryEnabled;
					},
					supportsDataEntryReadOnly : function() {
						return this.m_supportsDataEntryReadOnly;
					},
					setSupportsDataEntryReadOnly : function(
							supportsDataEntryReadOnly) {
						this.m_supportsDataEntryReadOnly = supportsDataEntryReadOnly;
					},
					getPlanningMode : function() {
						return this.m_planningMode;
					},
					setPlanningMode : function(planningMode) {
						if (this.m_planningMode !== planningMode) {
							this.m_planningMode = planningMode;
							this.notifyNodeChanged();
						}
					},
					getExceptionManager : function() {
						return this.m_exceptionManager;
					},
					lazyLoadQueryDataCells : function() {
						if (this.m_dataCells === null) {
							this.m_dataCells = sap.firefly.QDataCellList
									.createQueryDataCellList(this, this);
						}
					},
					getQueryDataCells : function() {
						this.lazyLoadQueryDataCells();
						return this.m_dataCells;
					},
					getQueryDataCellsBase : function() {
						this.lazyLoadQueryDataCells();
						return this.m_dataCells;
					},
					getQueryDataCell : function(name) {
						if (this.m_dataCells === null) {
							return null;
						}
						return this.m_dataCells.getByKey(name);
					},
					isComponentNode : function() {
						return true;
					},
					getNamedChildren : function() {
						var children = sap.firefly.XHashMapByString.create();
						children.put("AxesManager", this.m_axesManager);
						children.put("FilterManager", this.m_filterManager);
						if (this.getQueryManager()
								.supportsDirectVariableTransfer()) {
							children.put("VariableManager",
									this.m_variableManager);
						}
						children.put("DimensionManager",
								this.m_dimensionManager);
						children.put("ResultStructureController",
								this.m_resultStructureController);
						children.put("DrillManager", this.m_drillManager);
						children.put("SortManager", this.m_sortManager);
						children.put("ExceptionManager",
								this.m_exceptionManager);
						children.put("ConditionManager",
								this.m_conditionManager);
						return children;
					},
					configureProperties : function(properties) {
						var signPres;
						sap.firefly.QueryModel.$superclass.configureProperties
								.call(this, properties);
						properties.addProperty(
								sap.firefly.OlapProperty.DATASOURCE,
								sap.firefly.XValueType.STRING);
						signPres = properties.addProperty(
								sap.firefly.OlapProperty.SIGN_PRESENTATION,
								sap.firefly.XValueType.ENUM_CONSTANT);
						signPres
								.addValueHelpConstant(sap.firefly.SignPresentation.AFTER_NUMBER);
						signPres
								.addValueHelpConstant(sap.firefly.SignPresentation.BEFORE_NUMBER);
						signPres
								.addValueHelpConstant(sap.firefly.SignPresentation.BRACKETS);
					},
					getPropertyStringValue : function(type) {
						if (type === sap.firefly.OlapProperty.DATASOURCE) {
							return this.m_dataSource.getFullQualifiedName();
						}
						return sap.firefly.QueryModel.$superclass.getPropertyStringValue
								.call(this, type);
					},
					getPropertyConstantValue : function(type) {
						if (type === sap.firefly.OlapProperty.SIGN_PRESENTATION) {
							return this.m_signPresentation;
						}
						return sap.firefly.QueryModel.$superclass.getPropertyConstantValue
								.call(this, type);
					},
					setPropertyStringValue : function(type, value) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getVariableManager : function() {
						return this.m_variableManager;
					},
					getVariableContainer : function() {
						return this.m_variableManager;
					},
					getVariableManagerBase : function() {
						return this.m_variableManager;
					},
					getQueryModel : function() {
						return this;
					},
					onModelChangeBeforeBroadcast : function(changedNodes) {
						var size = changedNodes.size();
						var i;
						var componentType;
						for (i = 0; i < size; i++) {
							componentType = changedNodes.get(i)
									.getComponentType();
							if ((componentType
									.isTypeOf(sap.firefly.OlapComponentType.AXIS))
									|| (componentType
											.isTypeOf(sap.firefly.OlapComponentType.DIMENSION_MANAGER))) {
								this.m_drillManager
										.removeInvalidDrillOperations();
								break;
							}
						}
						sap.firefly.QueryModel.$superclass.onModelChangeBeforeBroadcast
								.call(this, changedNodes);
					},
					getProtocolCapabilities : function() {
						return this.m_protocolCapabilities;
					},
					getResultStructureReorderingCapability : function() {
						return this.m_queryCapabilities
								.getResultStructureReorderingCapability();
					},
					getSupportedConditionalResults : function() {
						return this.m_queryCapabilities
								.getSupportedConditionalResults();
					},
					getDefinitionName : function() {
						return this.m_definitionName;
					},
					setDefinitionName : function(definitionName) {
						this.m_definitionName = definitionName;
					},
					getExtendedDimensions : function() {
						if ((this.m_baseDataSource === null)
								&& (this.m_dataSource === null)) {
							return null;
						}
						if (this.m_baseDataSource !== null) {
							return this.m_baseDataSource
									.getExtendedDimensions();
						}
						return this.m_dataSource.getExtendedDimensions();
					},
					addExtendedDimension : function(extendedDimension) {
						this.assertNotBlendingMode();
						this.m_dataSource.getExtendedDimensionsBase().add(
								extendedDimension);
						this.notifyNodeChanged();
					},
					removeExtendedDimensionAt : function(index) {
						this.assertNotBlendingMode();
						this.m_dataSource.getExtendedDimensionsBase().removeAt(
								index);
						this.notifyNodeChanged();
					},
					removeExtendedDimension : function(extendedDimension) {
						this.assertNotBlendingMode();
						this.m_dataSource.getExtendedDimensionsBase()
								.removeElement(extendedDimension);
						this.notifyNodeChanged();
					},
					assertNotBlendingMode : function() {
						if (this.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					assertBlendingMode : function() {
						if (this.getQueryManager().getMode() !== sap.firefly.QueryManagerMode.BLENDING) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					getBlendingSources : function() {
						this.assertBlendingMode();
						if (this.m_blendingDefinition === null) {
							return null;
						}
						return this.getBlendingDefinition().getSources();
					},
					setBlendingDefinition : function(blendingDefinition) {
						this.assertBlendingMode();
						blendingDefinition.setQueryModel(this);
						this.m_blendingDefinition = sap.firefly.XWeakReferenceUtil
								.getWeakRef(blendingDefinition);
					},
					getBlendingDefinition : function() {
						this.assertBlendingMode();
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_blendingDefinition);
					},
					getVariableMode : function() {
						var queryManager = this.getQueryManager();
						if (queryManager === null) {
							return null;
						}
						return queryManager.getVariableMode();
					},
					getMdResultStructureControllerBase : function() {
						return this.m_resultStructureController;
					},
					supportsResultsetFacets : function() {
						return this.m_queryCapabilities
								.supportsResultsetFacets();
					},
					supportsSpatialTransformation : function() {
						return this.m_queryCapabilities
								.supportsSpatialTransformation();
					},
					supportsUniqueHierarchyPath : function() {
						return this.m_queryCapabilities
								.supportsUniqueHierarchyPath();
					},
					supportsMemberVisibility : function() {
						return this.m_queryCapabilities
								.supportsMemberVisibility();
					},
					getSupportedResultAlignmentLevel : function() {
						return this.m_queryCapabilities
								.getSupportedResultAlignmentLevel();
					},
					getSupportedResultVisibilityLevel : function() {
						return this.m_queryCapabilities
								.getSupportedResultVisibilityLevel();
					},
					getSupportedResultAlignments : function() {
						return this.m_queryCapabilities
								.getSupportedResultAlignments();
					},
					supportsResultAlignmentType : function(resultAlignment) {
						return this.m_queryCapabilities
								.supportsResultAlignmentType(resultAlignment);
					},
					supportsCubeBlending : function() {
						return this.m_queryCapabilities.supportsCubeBlending();
					},
					supportsConditionalResultVisibility : function() {
						return this.m_queryCapabilities
								.supportsConditionalResultVisibility();
					},
					supportsConditionalResults : function() {
						return this.m_queryCapabilities
								.supportsConditionalResults();
					},
					getServerBaseSerialization : function() {
						return this.getApplication().getStructureCacheEntry(
								this.m_serverBaseSerializationKey);
					},
					getServerBaseSerializationFormat : function() {
						return this.m_serverBaseSerializationFormat;
					},
					setServerBaseSerialization : function(serialization) {
						var queryManager = this.getQueryManagerBase();
						var dataSource;
						var key;
						var extendedDimensions;
						if ((serialization !== null) && (queryManager !== null)
								&& (queryManager.isMetadataCached() === false)) {
							dataSource = this.getDataSource();
							key = sap.firefly.XStringBuffer.create();
							key.append(dataSource.getFullQualifiedName());
							extendedDimensions = dataSource
									.getExtendedDimensions();
							if (extendedDimensions !== null) {
								key.append(extendedDimensions.toString());
							}
							this.m_serverBaseSerializationKey = key.toString();
							this.getApplication().setStructureCacheEntry(
									this.m_serverBaseSerializationKey,
									serialization);
							queryManager.setIsMetadataCached();
						}
					},
					setServerBaseSerializationFormat : function(format) {
						this.m_serverBaseSerializationFormat = format;
					},
					getSupportsMetadataDataCategory : function() {
						return this.m_queryCapabilities
								.getSupportsMetadataDataCategory();
					},
					supportsExpandBottomUp : function() {
						return this.m_queryCapabilities
								.supportsExpandBottomUp();
					},
					supportsDataCells : function() {
						return this.m_queryCapabilities.supportsDataCells();
					},
					supportsExtendedSort : function() {
						return this.m_queryCapabilities.supportsExtendedSort();
					},
					supportsConditions : function() {
						return this.m_queryCapabilities.supportsConditions();
					},
					lazyLoadConditionManager : function() {
						if (this.m_conditionManager === null) {
							this.m_conditionManager = sap.firefly.QConditionManager
									.create(this, this);
						}
					},
					getConditionManager : function() {
						if (this.supportsConditions()) {
							this.lazyLoadConditionManager();
							return this.m_conditionManager;
						}
						return null;
					},
					getConditionManagerBase : function() {
						if (this.supportsConditions()) {
							this.lazyLoadConditionManager();
							return this.m_conditionManager;
						}
						return null;
					},
					supportsExceptionAggregationDimsFormulas : function() {
						return this.m_queryCapabilities
								.supportsExceptionAggregationDimsFormulas();
					},
					supportsIgnoreExternalDimensions : function() {
						return this.m_queryCapabilities
								.supportsIgnoreExternalDimensions();
					},
					getContext : function() {
						return this;
					},
					supportsExceptions : function() {
						return this.m_queryCapabilities.supportsExceptions();
					},
					supportsExceptionSettings : function() {
						return this.m_queryCapabilities
								.supportsExceptionSettings();
					},
					getInputEnabledVariable : function(name) {
						return this.getVariableContainer()
								.getInputEnabledVariable(name);
					},
					getVariable : function(name) {
						return this.getVariableContainer().getVariable(name);
					},
					getHierarchyNodeVariable : function(name) {
						return this.getVariableContainer()
								.getHierarchyNodeVariable(name);
					},
					getHierarchyNameVariable : function(name) {
						return this.getVariableContainer()
								.getHierarchyNameVariable(name);
					},
					supportsHierarchyNavigationDeltaMode : function() {
						return this.m_queryCapabilities
								.supportsHierarchyNavigationDeltaMode();
					},
					supportsCubeBlendingProperties : function() {
						return this.m_queryCapabilities
								.supportsCubeBlendingProperties();
					},
					supportsHierarchyLevelMetadata : function() {
						return this.m_queryCapabilities
								.supportsHierarchyLevelMetadata();
					},
					supportsHierarchyMetadata : function() {
						return this.m_queryCapabilities
								.supportsHierarchyMetadata();
					},
					updateCubeBlendingMappings : function() {
						var exportBlendingMappings;
						if (this.m_blendingDefinition !== null) {
							exportBlendingMappings = sap.firefly.QInADataSourceBlending
									.exportBlendingMappings(this
											.getBlendingDefinition()
											.getMappings());
							this.m_dataSource
									.setMappings(exportBlendingMappings);
							this.notifyNodeChanged();
						}
					},
					supportsSortNewValues : function() {
						return this.m_queryCapabilities.supportsSortNewValues();
					},
					getFlatFieldsList : function() {
						return this.m_dimensionManager.getFlatFieldsList();
					},
					getHierarchyFieldsList : function() {
						return this.m_dimensionManager.getHierarchyFieldsList();
					},
					getFieldsListByActiveUsageType : function() {
						return this.m_dimensionManager
								.getFieldsListByActiveUsageType();
					},
					getFieldsListByActiveUsageTypeExt : function(context) {
						return this.m_dimensionManager
								.getFieldsListByActiveUsageTypeExt(context);
					},
					getDimensionByName : function(name) {
						return this.m_dimensionManager.getDimensionByName(name);
					},
					addDimension : function(dimension) {
						this.m_dimensionManager.addDimension(dimension);
					},
					getDimensions : function() {
						return this.m_dimensionManager.getDimensions();
					},
					getDimensionByType : function(type) {
						return this.m_dimensionManager.getDimensionByType(type);
					},
					getStructureCount : function() {
						return this.m_dimensionManager.getStructureCount();
					},
					getDimensionCount : function() {
						return this.m_dimensionManager.getDimensionCount();
					},
					getNonMeasureDimension : function() {
						return this.m_dimensionManager.getNonMeasureDimension();
					},
					getNonMeasureDimension2 : function() {
						return this.m_dimensionManager
								.getNonMeasureDimension2();
					},
					getMeasureDimension : function() {
						return this.m_dimensionManager.getMeasureDimension();
					},
					getFields : function() {
						return this.m_dimensionManager.getFields();
					},
					getFieldIterator : function() {
						return this.m_dimensionManager.getFieldIterator();
					},
					getFieldByNameOrAlias : function(name) {
						return this.m_dimensionManager
								.getFieldByNameOrAlias(name);
					},
					getFieldByName : function(name) {
						return this.m_dimensionManager.getFieldByName(name);
					},
					convertToFieldLayoutType : function(type) {
						this.m_dimensionManager.convertToFieldLayoutType(type);
					},
					getAxesManager : function() {
						return this.m_axesManager;
					},
					getDimensionManagerBase : function() {
						return this.m_dimensionManager;
					},
					getDimensionAccessor : function() {
						return this.m_dimensionManager;
					},
					getFieldAccessorSingle : function() {
						return this.m_dimensionManager;
					},
					getOlapEnv : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_application);
					},
					supportsSpatialClustering : function() {
						return this.m_queryCapabilities
								.supportsSpatialClustering();
					},
					getSupportedFormulaOperators : function() {
						return sap.firefly.FormulaOperator
								.getSupportedFormulaOperator(this
										.getQueryManager()
										.getSystemDescription().getSystemType());
					},
					supportsRestrictedMeasures : function() {
						return this.m_queryCapabilities
								.supportsRestrictedMeasures();
					},
					supportsFormulaMeasures : function() {
						return this.m_queryCapabilities
								.supportsFormulaMeasures();
					},
					supportsKeepOriginalTexts : function() {
						return this.m_queryCapabilities
								.supportsKeepOriginalTexts();
					},
					setKeepOriginalTexts : function(keepOriginalTexts) {
						if (this.supportsKeepOriginalTexts()) {
							this.m_keepOriginalTexts = keepOriginalTexts;
						}
					},
					isKeepingOriginalTexts : function() {
						if (this.supportsKeepOriginalTexts()) {
							return this.m_keepOriginalTexts;
						}
						return false;
					},
					supportsAverageCountNullZero : function() {
						return this.m_queryCapabilities
								.supportsAverageCountNullZero();
					},
					supportsUnifiedDataCells : function() {
						return this.m_queryCapabilities
								.supportsUnifiedDataCells();
					},
					supportsHierarchyTrapezoidFilter : function() {
						return this.m_queryCapabilities
								.supportsHierarchyTrapezoidFilter();
					},
					supportsHierarchyLevelOffsetFilter : function() {
						return this.m_queryCapabilities
								.supportsHierarchyLevelOffsetFilter();
					},
					supportsCartesianFilterIntersect : function() {
						return this.m_queryCapabilities
								.supportsCartesianFilterIntersect();
					},
					supportsCustomDimensionFilterCapability : function() {
						return this.m_queryCapabilities
								.supportsCustomDimensionFilterCapability();
					},
					supportsLocaleSorting : function() {
						return this.m_queryCapabilities.supportsLocaleSorting();
					},
					supportsCeScenarioParams : function() {
						return this.m_queryCapabilities
								.supportsCeScenarioParams();
					},
					supportsComplexSelections : function() {
						return this.m_queryCapabilities
								.supportsComplexSelections();
					},
					supportsCellValueOperand : function() {
						return this.m_queryCapabilities
								.supportsCellValueOperand();
					},
					supportsIntersectLayers : function() {
						return this.m_queryCapabilities
								.supportsIntersectLayers();
					},
					supportsSelectionVisibilityContainer : function() {
						return this.m_queryCapabilities
								.supportsSelectionVisibilityContainer();
					},
					getSystemType : function() {
						return this.m_queryCapabilities.getSystemType();
					},
					getOptimizerHintsByExecutionEngine : function(
							executionEngine) {
						if ((this.supportsCeScenarioParams() === false)
								|| (this.m_optimizerHints === null)) {
							return null;
						}
						return this.m_optimizerHints.getByKey(executionEngine
								.getName());
					},
					addOptimizerHint : function(executionEngine, hintKey,
							hintValue) {
						var optimizerHintsByEngine;
						if (this.supportsCeScenarioParams()) {
							if (this.m_optimizerHints === null) {
								this.m_optimizerHints = sap.firefly.XHashMapByString
										.create();
							}
							optimizerHintsByEngine = this.m_optimizerHints
									.getByKey(executionEngine.getName());
							if (optimizerHintsByEngine === null) {
								optimizerHintsByEngine = sap.firefly.XHashMapOfStringByString
										.create();
								this.m_optimizerHints.put(executionEngine
										.getName(), optimizerHintsByEngine);
								this.notifyNodeChanged();
							}
							optimizerHintsByEngine.put(hintKey, hintValue);
						}
					},
					removeOptimizerHint : function(executionEngine, hintKey) {
						var optimizerHintsByEngine;
						if (this.supportsCeScenarioParams()
								&& (this.m_optimizerHints !== null)) {
							optimizerHintsByEngine = this.m_optimizerHints
									.getByKey(executionEngine.getName());
							if (optimizerHintsByEngine !== null) {
								optimizerHintsByEngine.remove(hintKey);
								this.notifyNodeChanged();
							}
						}
					},
					setOptimizedExportMode : function(isActive) {
						this.m_isMetadataExportReduced = isActive;
					},
					isOptimizedExportModeActive : function() {
						return this.m_isMetadataExportReduced;
					},
					hasProcessingStep : function() {
						return this.m_hasProcessingStep;
					},
					setHasProcessingStep : function(hasProcessingStep) {
						this.m_hasProcessingStep = hasProcessingStep;
					},
					isNode : function() {
						return true;
					},
					getChildSetState : function() {
						return sap.firefly.ChildSetState.COMPLETE;
					},
					hasChildren : function() {
						return true;
					},
					getChildElements : function() {
						var list = sap.firefly.XList.create();
						list.add(this.m_dataSource);
						list.add(this.m_dimensionManager);
						return list;
					},
					processChildFetch : function(syncType, listener,
							customIdentifier) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getModelCapabilitiesBase : function() {
						return this.m_queryCapabilities;
					},
					getModelCapabilities : function() {
						return this.m_queryCapabilities;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherQm = other;
						var otherDataSource = otherQm.getDataSource();
						var text = otherDataSource.getText();
						this.m_dataSource.setText(text);
						this.setText(text);
						this.setMetadataPropertiesBase(otherQm
								.getMetadataProperties().clone());
						this.m_dimensionManager.mergeDeepRecursive(settings,
								otherQm.getDimensionManagerBase());
						this.m_filterManager.mergeDeepRecursive(settings,
								otherQm.getSelector());
						if (this.m_conditionManager !== null) {
							this.m_conditionManager.mergeDeepRecursive(
									settings, otherQm.getConditionManager());
						}
						this.m_exceptionManager.mergeDeepRecursive(settings,
								otherQm.getExceptionManager());
						this.m_variableManager.mergeDeepRecursive(settings,
								otherQm.getVariableManager());
						this.m_sortManager.mergeDeepRecursive(settings, otherQm
								.getSortingManager());
					},
					supportsCubeBlendingOutOfContext : function() {
						return this.m_queryCapabilities
								.supportsCubeBlendingOutOfContext();
					},
					addNewCalculatedDimensionWithName : function(
							calculatedDimensionName) {
						return this.m_dimensionManager
								.addNewCalculatedDimensionWithName(calculatedDimensionName);
					},
					removeCalculatedDimensionByName : function(
							calculatedDimensionName) {
						this.m_dimensionManager
								.removeCalculatedDimensionByName(calculatedDimensionName);
					},
					addNewCalculatedDimensionWithNameAndPreQueryName : function(
							calculatedDimensionName, preQueryName) {
						var newCalculatedDimension;
						this.assertNotBlendingMode();
						newCalculatedDimension = this
								.addNewCalculatedDimensionWithName(calculatedDimensionName);
						newCalculatedDimension.setPreQueryName(preQueryName);
						return newCalculatedDimension;
					},
					addPreQueryWithName : function(preQuery, preQueryName) {
						var newPreQuery;
						if (preQuery === null) {
							this.removePreQueryByName(preQueryName);
							return;
						}
						this.assertNoPreQueryCycle(preQuery, this);
						newPreQuery = sap.firefly.XNameWeakGenericPair.create(
								preQueryName, preQuery);
						if (this.m_preQueries === null) {
							this.m_preQueries = sap.firefly.XListOfNameObject
									.create();
						}
						this.m_preQueries.add(newPreQuery);
					},
					assertNoPreQueryCycle : function(preQuery, mainQuery) {
						var preQueries;
						var sizePreQueries;
						var idxPreQueries;
						if (preQuery.isReleased()) {
							throw sap.firefly.XException
									.createIllegalStateException("A pre query must not be released!");
						}
						preQueries = preQuery.getPreQueries();
						if (preQueries !== null) {
							sizePreQueries = preQueries.size();
							for (idxPreQueries = 0; idxPreQueries < sizePreQueries; idxPreQueries++) {
								this.assertNoPreQueryCycle(preQueries.get(
										idxPreQueries).getObject(), mainQuery);
							}
						}
						if (mainQuery === preQuery) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Cylce of pre queries and main query detected!");
						}
					},
					getPreQueryByName : function(preQueryName) {
						var preQuery;
						if (this.m_preQueries === null) {
							return null;
						}
						preQuery = this.m_preQueries.getByKey(preQueryName);
						if (preQuery === null) {
							return null;
						}
						return preQuery.getObject();
					},
					getPreQueries : function() {
						if (this.m_preQueries === null) {
							return null;
						}
						return this.m_preQueries.getValuesAsReadOnlyList();
					},
					removePreQueryByName : function(preQueryName) {
						if (this.m_preQueries !== null) {
							this.m_preQueries.removeElement(this.m_preQueries
									.getByKey(preQueryName));
						}
					},
					supportsIgnoreUnitOfZeroValueInAggregation : function() {
						return this.m_queryCapabilities
								.supportsIgnoreUnitOfZeroValueInAggregation();
					},
					supportsCubeBlendingWithNSubqueries : function() {
						return this.m_queryCapabilities
								.supportsCubeBlendingWithNSubqueries();
					},
					supportsDataRefreshAndDataTopicality : function() {
						return this.m_queryCapabilities
								.supportsDataRefreshAndDataTopicality();
					},
					getDataRollUpMax : function() {
						var dataRollUpMax = this.m_metadataProperties
								.getStringByName(sap.firefly.InAConstants.QY_DATA_ROLL_UP_MAX);
						return this.convertStringToDateTime(dataRollUpMax);
					},
					getDataRollUpMin : function() {
						var dataRollUpMin = this.m_metadataProperties
								.getStringByName(sap.firefly.InAConstants.QY_DATA_ROLL_UP_MIN);
						return this.convertStringToDateTime(dataRollUpMin);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QResultStructureControllerGeneric",
				sap.firefly.QModelComponent,
				{
					m_supportsTotals : null,
					m_isAlignmentDefault : false,
					m_isVisibilityDefault : false,
					m_isStructureDefault : false,
					m_modelLevel : null,
					setupGenericController : function(context, parentNode,
							location) {
						sap.firefly.QResultStructureControllerGeneric.$superclass.setupModelComponent
								.call(this, context, parentNode);
						this.m_modelLevel = location;
						this.m_supportsTotals = sap.firefly.TriStateBool._DEFAULT;
						this.m_isAlignmentDefault = true;
						this.m_isVisibilityDefault = true;
						this.m_isStructureDefault = true;
					},
					copyResultStructureControllerGeneric : function(origin) {
						sap.firefly.QResultStructureControllerGeneric.$superclass.copyModelComponent
								.call(this, origin);
						this.m_supportsTotals = origin.m_supportsTotals;
						this.m_isAlignmentDefault = origin.m_isAlignmentDefault;
						this.m_isVisibilityDefault = origin.m_isVisibilityDefault;
						this.m_isStructureDefault = origin.m_isStructureDefault;
						this.m_modelLevel = origin.m_modelLevel;
					},
					releaseObject : function() {
						this.m_supportsTotals = null;
						this.m_modelLevel = null;
						sap.firefly.QResultStructureControllerGeneric.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.TOTALS;
					},
					getParentController : function() {
						var context = this.getResultStructureController();
						var parentController = context
								.getParentResultStructureController();
						return parentController;
					},
					getResultStructureController : function() {
						return this.getParentComponent();
					},
					supportsResultAlignment : function() {
						var level;
						var supportedLevel;
						if (this.m_modelLevel === null) {
							return false;
						}
						level = this.m_modelLevel.getLevel();
						supportedLevel = this
								.getSupportedResultAlignmentLevel().getLevel();
						return level <= supportedLevel;
					},
					supportsResultVisibility : function() {
						var level;
						var supportedLevel;
						if (this.m_modelLevel === null) {
							return false;
						}
						level = this.m_modelLevel.getLevel();
						supportedLevel = this
								.getSupportedResultVisibilityLevel().getLevel();
						return level <= supportedLevel;
					},
					getModelLevel : function() {
						return this.m_modelLevel;
					},
					getSupportedResultAlignmentLevel : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return sap.firefly.QModelLevel.NONE;
						}
						return queryModel.getSupportedResultAlignmentLevel();
					},
					getSupportedResultVisibilityLevel : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return sap.firefly.QModelLevel.NONE;
						}
						return queryModel.getSupportedResultVisibilityLevel();
					},
					getSupportedResultAlignments : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getSupportedResultAlignments();
					},
					supportsResultAlignmentType : function(resultAlignment) {
						var supportedResultAlignments = this
								.getSupportedResultAlignments();
						if (supportedResultAlignments === null) {
							return false;
						}
						return supportedResultAlignments
								.contains(resultAlignment);
					},
					getResultStructureReorderingCapability : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return sap.firefly.ReorderingCapability.NONE;
						}
						return queryModel
								.getResultStructureReorderingCapability();
					},
					supportsConditionalResults : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel.supportsConditionalResults();
					},
					getSupportedConditionalResults : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return null;
						}
						return queryModel.getSupportedConditionalResults();
					},
					supportsConditionalResultVisibility : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel.supportsConditionalResultVisibility();
					},
					supportsTotals : function() {
						var parentController;
						if (this.m_supportsTotals === sap.firefly.TriStateBool._DEFAULT) {
							parentController = this.getParentController();
							if (parentController !== null) {
								return parentController.supportsTotals();
							}
						}
						return this.m_supportsTotals.getBoolean();
					},
					setSupportsTotals : function(supportsTotals) {
						this.m_supportsTotals = sap.firefly.TriStateBool
								.lookup(supportsTotals);
					},
					setResultVisibility : function(visibility) {
						this.setResultVisibilityByElement(
								sap.firefly.ResultStructureElement.TOTAL,
								visibility);
					},
					getResultVisibilitySettings : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					clearResultVisibilitySettings : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getResultVisibility : function() {
						return this
								.getResultVisibilityByElement(sap.firefly.ResultStructureElement.TOTAL);
					},
					getResultVisibilityByElement : function(element) {
						return this.getResultVisibilityByElementAndAlignment(
								this.getResultAlignment(), element);
					},
					setResultVisibilityByElement : function(element, visibility) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					isTotalsAlignmentOnDefault : function() {
						return this.m_isAlignmentDefault;
					},
					isTotalsVisibilityOnDefault : function() {
						return this.m_isVisibilityDefault;
					},
					isTotalsStructureOnDefault : function() {
						return this.m_isStructureDefault;
					},
					supportsAdvancedResultStructure : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel
								.getResultStructureReorderingCapability() === sap.firefly.ReorderingCapability.FULL;
					},
					setResultAlignmentBase : function(alignment,
							recurseChildren) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getTotalsStructure : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getAdvancedResultStructure : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setResultAlignment : function(alignment) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getResultAlignment : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setResultVisibilityByElementAndAlignment : function(
							alignment, element, visibility) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getResultVisibilityByElementAndAlignment : function(
							alignment, element) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					restoreTotalsAlignment : function(restoreAction,
							recurseChildren) {
						var targetIsDefault;
						var isChanged;
						var resultStructureController;
						var children;
						var child;
						if (this.supportsResultAlignment()) {
							this.queueEventing();
							targetIsDefault = (restoreAction === sap.firefly.RestoreAction.DEFAULT_VALUE);
							isChanged = (this.m_isAlignmentDefault !== targetIsDefault)
									|| (restoreAction === sap.firefly.RestoreAction.COPY);
							if (isChanged) {
								this.m_isAlignmentDefault = true;
								this
										.internalSetTotalsAlignmentDefault(!targetIsDefault);
								this.m_isAlignmentDefault = targetIsDefault;
								this.notifyNodeChanged();
							}
							if (recurseChildren) {
								resultStructureController = this
										.getResultStructureController();
								children = resultStructureController
										.getResultStructureChildren();
								if (children !== null) {
									while (children.hasNext()) {
										child = children.next();
										child
												.restoreTotalsAlignment(
														sap.firefly.RestoreAction.DEFAULT_VALUE,
														true);
									}
									children.releaseObject();
								}
							}
							this.resumeEventing();
						}
					},
					internalSetTotalsAlignmentDefault : function(copy) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					restoreTotalsVisibility : function(restoreAction,
							recurseChildren) {
						var targetIsDefault;
						var isChanged;
						var resultStructureController;
						var children;
						var child;
						if (this.supportsResultVisibility()) {
							this.queueEventing();
							targetIsDefault = (restoreAction === sap.firefly.RestoreAction.DEFAULT_VALUE);
							isChanged = (this.m_isVisibilityDefault !== targetIsDefault)
									|| (restoreAction === sap.firefly.RestoreAction.COPY);
							if (isChanged) {
								this.m_isVisibilityDefault = true;
								this
										.internalSetTotalsVisibilityDefault(!targetIsDefault);
								this.m_isVisibilityDefault = targetIsDefault;
								this.notifyNodeChanged();
							}
							if (recurseChildren) {
								resultStructureController = this
										.getResultStructureController();
								children = resultStructureController
										.getResultStructureChildren();
								if (children !== null) {
									while (children.hasNext()) {
										child = children.next();
										child
												.restoreTotalsVisibility(
														sap.firefly.RestoreAction.DEFAULT_VALUE,
														true);
									}
									children.releaseObject();
								}
							}
							this.resumeEventing();
						}
					},
					internalSetTotalsVisibilityDefault : function(copy) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					restoreTotalsStructure : function(restoreAction,
							recurseChildren) {
						var targetIsDefault;
						var isChanged;
						var resultStructureController;
						var children;
						var child;
						if (this.supportsAdvancedResultStructure()) {
							this.queueEventing();
							targetIsDefault = (restoreAction === sap.firefly.RestoreAction.DEFAULT_VALUE);
							isChanged = (this.m_isStructureDefault !== targetIsDefault)
									|| (restoreAction === sap.firefly.RestoreAction.COPY);
							if (isChanged) {
								this.m_isStructureDefault = true;
								this
										.internalSetTotalsStructureDefault(!targetIsDefault);
								this.m_isStructureDefault = targetIsDefault;
								this.notifyNodeChanged();
							}
							if (recurseChildren) {
								resultStructureController = this
										.getResultStructureController();
								children = resultStructureController
										.getResultStructureChildren();
								if (children !== null) {
									while (children.hasNext()) {
										child = children.next();
										child
												.restoreTotalsStructure(
														sap.firefly.RestoreAction.DEFAULT_VALUE,
														true);
									}
									children.releaseObject();
								}
							}
							this.resumeEventing();
						}
					},
					internalSetTotalsStructureDefault : function(copy) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QComplexAndDataCellSorting",
				sap.firefly.QGenericSorting,
				{
					$statics : {
						createPathUniqueName : function(elementPath) {
							var buffer = sap.firefly.XStringBuffer.create();
							var i;
							var element;
							if (elementPath !== null) {
								for (i = 0; i < elementPath.size(); i++) {
									if ((i > 0)) {
										buffer.append("/");
									}
									element = elementPath.get(i);
									buffer.append("[");
									buffer.append(element.getDimension()
											.getName());
									buffer.append("]");
									buffer.append("{");
									buffer.append(element
											.getSelectHierarchyName());
									buffer.append("} ");
									buffer.append("(");
									buffer.append(element.getSelectValue());
									buffer.append(")");
								}
							}
							return buffer.toString();
						}
					},
					m_elementPath : null,
					copyComplexAndDataCellSorting : function(origin) {
						var queryModel;
						var temp;
						var size;
						var i;
						var origElement;
						sap.firefly.QComplexAndDataCellSorting.$superclass.copyGenericSorting
								.call(this, origin);
						queryModel = this.getQueryModel();
						temp = sap.firefly.XList.create();
						size = origin.m_elementPath.size();
						for (i = 0; i < size; i++) {
							origElement = origin.m_elementPath.get(i);
							temp.add(sap.firefly.QFactory2.newDimensionElement(
									queryModel.getFieldByName(origElement
											.getSelectField().getName()),
									origElement.getSelectHierarchyName(),
									origElement.getSelectValue()));
						}
						this.m_elementPath = temp;
					},
					setupSorting : function(context, parentNode, path) {
						sap.firefly.QComplexAndDataCellSorting.$superclass.setupGenericSorting
								.call(this, context, parentNode);
						this.m_elementPath = path;
					},
					releaseObject : function() {
						this.m_elementPath = null;
						sap.firefly.QComplexAndDataCellSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.COMPLEX_SORTING;
					},
					getSortingType : function() {
						return sap.firefly.SortType.COMPLEX;
					},
					getPathUniqueName : function() {
						return sap.firefly.QComplexAndDataCellSorting
								.createPathUniqueName(this.m_elementPath);
					},
					getElementPath : function() {
						return this.m_elementPath;
					},
					getTargetDimension : function() {
						return null;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionSorting",
				sap.firefly.QGenericSorting,
				{
					$statics : {
						create : function(context, parentNode, dimension) {
							var sorting = new sap.firefly.QDimensionSorting();
							sorting
									.setupSorting(context, parentNode,
											dimension);
							return sorting;
						}
					},
					m_dimension : null,
					m_sortingType : null,
					copyDimensionSorting : function(origin) {
						this.copyGenericSorting(origin);
						this.m_sortingType = origin.m_sortingType;
					},
					setupSorting : function(context, parentNode, dimension) {
						sap.firefly.QDimensionSorting.$superclass.setupGenericSorting
								.call(this, context, parentNode);
						this.setDimension(dimension);
						if (this
								.supportsSortType(sap.firefly.SortType.MEMBER_KEY)) {
							this.m_sortingType = sap.firefly.SortType.MEMBER_KEY;
						} else {
							this.m_sortingType = null;
						}
					},
					releaseObject : function() {
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						this.m_sortingType = null;
						sap.firefly.QDimensionSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DIMENSION_SORTING;
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					setDimension : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					getSortingType : function() {
						return this.m_sortingType;
					},
					setSortByHierarchy : function() {
						this.setSortType(sap.firefly.SortType.HIERARCHY);
					},
					setSortByFilter : function() {
						this.setSortType(sap.firefly.SortType.FILTER);
					},
					setSortingPresentationType : function(
							activePresentationType) {
						this.setSortByPresentation(activePresentationType);
					},
					setSortByPresentation : function(presentationType) {
						if (presentationType
								.isTypeOf(sap.firefly.PresentationType.KEY)) {
							this.setSortType(sap.firefly.SortType.MEMBER_KEY);
						} else {
							if (presentationType
									.isTypeOf(sap.firefly.PresentationType.TEXT)) {
								this
										.setSortType(sap.firefly.SortType.MEMBER_TEXT);
							}
						}
					},
					setSortType : function(sortType) {
						if (this.m_sortingType === sortType) {
							return false;
						}
						if (sortType
								.isTypeOf(sap.firefly.SortType.ABSTRACT_DIMENSION_SORT) === false) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XString
											.concatenate2(
													"Supports only subtype of dimension sorting: ",
													sortType.getName()));
						}
						if (this.supportsSortType(sortType) === false) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XString
											.concatenate2(
													"Sorting type not supported: ",
													sortType.getName()));
						}
						this.m_sortingType = sortType;
						this.notifyNodeChanged();
						return true;
					},
					getSortingPresentationType : function() {
						var sortingType = this.getSortingType();
						if (sortingType === sap.firefly.SortType.MEMBER_KEY) {
							return sap.firefly.PresentationType.KEY;
						} else {
							if (sortingType === sap.firefly.SortType.MEMBER_TEXT) {
								return sap.firefly.PresentationType.TEXT;
							}
						}
						return null;
					},
					supportsSortByHierarchy : function() {
						return this
								.supportsSortType(sap.firefly.SortType.HIERARCHY);
					},
					supportsSortByFilter : function() {
						return this
								.supportsSortType(sap.firefly.SortType.FILTER);
					},
					supportsSortByPresentation : function(presentationType) {
						if (presentationType
								.isTypeOf(sap.firefly.PresentationType.KEY)) {
							return this
									.supportsSortType(sap.firefly.SortType.MEMBER_KEY);
						} else {
							if (presentationType
									.isTypeOf(sap.firefly.PresentationType.TEXT)) {
								return this
										.supportsSortType(sap.firefly.SortType.MEMBER_TEXT);
							}
						}
						return false;
					},
					supportsSortType : function(sortType) {
						return this.getSortingManager()
								.supportsDimensionSorting(this.getDimension(),
										sortType);
					},
					setSortByKey : function() {
						this
								.setSortByPresentation(sap.firefly.PresentationType.KEY);
					},
					setSortByText : function() {
						this
								.setSortByPresentation(sap.firefly.PresentationType.TEXT);
					},
					supportsDimension : function() {
						return true;
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var dimension;
						buffer.append(this.getOlapComponentType().getName());
						buffer.append(" - Dim: ");
						dimension = this.getDimension();
						if (dimension === null) {
							buffer.append("[no dimension defined]");
						} else {
							buffer.append(dimension.getName());
						}
						buffer.append(" - Type: ");
						buffer.append(this.m_sortingType.getName());
						buffer.append(" - Dir: ");
						buffer.append(this.getDirection().getName());
						return buffer.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFieldSorting",
				sap.firefly.QGenericSorting,
				{
					$statics : {
						create : function(context, parentNode, field) {
							var sorting = new sap.firefly.QFieldSorting();
							sorting.setupSorting(context, parentNode, field);
							return sorting;
						}
					},
					m_field : null,
					m_caseSensitive : false,
					m_icuLocale : null,
					setupSorting : function(context, parentNode, field) {
						sap.firefly.QFieldSorting.$superclass.setupGenericSorting
								.call(this, context, parentNode);
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					copyFieldSorting : function(origin) {
						this.copyGenericSorting(origin);
						this.m_caseSensitive = origin.m_caseSensitive;
						this.m_icuLocale = origin.m_icuLocale;
					},
					releaseObject : function() {
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						this.m_icuLocale = null;
						sap.firefly.QFieldSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD_SORTING;
					},
					getSortingType : function() {
						return sap.firefly.SortType.FIELD;
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					setLocale : function(icuLocale) {
						if (this.getQueryModel().supportsLocaleSorting()) {
							this.m_icuLocale = icuLocale;
						}
					},
					getLocale : function() {
						return this.m_icuLocale;
					},
					setIsCaseSensitive : function(isCaseSensitive) {
						if (this.getQueryModel().supportsLocaleSorting()) {
							this.m_caseSensitive = isCaseSensitive;
						}
					},
					isCaseSensitive : function() {
						return this.m_caseSensitive;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QMeasureSorting",
				sap.firefly.QGenericSorting,
				{
					$statics : {
						create : function(context, parentNode, structureMember) {
							var sorting = new sap.firefly.QMeasureSorting();
							sorting.setupSorting(context, parentNode,
									structureMember);
							return sorting;
						}
					},
					m_measureMember : null,
					m_measure : null,
					m_structureMember : null,
					copyMeasureSorting : function(origin) {
						var queryModel;
						var structureMember;
						this.copyGenericSorting(origin);
						queryModel = this.getQueryModel();
						if (origin.m_measure !== null) {
							this.setDimension(queryModel
									.getDimensionByName(origin.getDimension()
											.getName()));
						}
						if (origin.m_structureMember !== null) {
							structureMember = queryModel
									.getNonMeasureDimension()
									.getStructureMember(
											origin.getStructure().getName());
							this.setStructure(structureMember);
						}
					},
					setupSorting : function(context, parentNode,
							structureMember) {
						sap.firefly.QMeasureSorting.$superclass.setupGenericSorting
								.call(this, context, parentNode);
						this.setStructureMember(structureMember);
					},
					releaseObject : function() {
						this.m_measureMember = sap.firefly.XObject
								.releaseIfNotNull(this.m_measureMember);
						this.m_measure = sap.firefly.XObject
								.releaseIfNotNull(this.m_measure);
						this.m_structureMember = sap.firefly.XObject
								.releaseIfNotNull(this.m_structureMember);
						sap.firefly.QMeasureSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.MEASURE_SORTING;
					},
					getSortingType : function() {
						return sap.firefly.SortType.MEASURE;
					},
					getMeasure : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_measureMember);
					},
					setStructureMember : function(member) {
						this.m_measureMember = sap.firefly.XWeakReferenceUtil
								.getWeakRef(member);
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_measure);
					},
					setDimension : function(dimension) {
						this.m_measure = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					supportsDimension : function() {
						return true;
					},
					getStructure : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_structureMember);
					},
					setStructure : function(structureMember) {
						this.m_structureMember = sap.firefly.XWeakReferenceUtil
								.getWeakRef(structureMember);
						this.notifyNodeChanged();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QVariable",
				sap.firefly.QVariableModelComponent,
				{
					m_variableContext : null,
					m_valueType : null,
					m_variableOrder : 0,
					m_dependentVariablesNames : null,
					m_dependentVariables : null,
					m_affectedVariables : null,
					m_inputEnabled : false,
					m_mandatory : false,
					m_initialValueAllowed : false,
					m_externalVariable : null,
					setupVariable : function(context, variableContext,
							valueType, name, description) {
						sap.firefly.QVariable.$superclass.setupModelComponent
								.call(this, context, variableContext
										.getModelComponentBase());
						this.setName(name);
						this.setText(description);
						this.m_variableContext = variableContext;
						this.m_valueType = valueType;
						this.m_dependentVariables = sap.firefly.XListOfNameObject
								.create();
						this.m_dependentVariablesNames = sap.firefly.XListOfString
								.create();
					},
					releaseObject : function() {
						this.m_variableContext = null;
						this.m_valueType = null;
						this.m_affectedVariables = sap.firefly.XObject
								.releaseIfNotNull(this.m_affectedVariables);
						this.m_externalVariable = sap.firefly.XObject
								.releaseIfNotNull(this.m_externalVariable);
						this.m_dependentVariables = sap.firefly.XObject
								.releaseIfNotNull(this.m_dependentVariables);
						this.m_dependentVariablesNames = sap.firefly.XObject
								.releaseIfNotNull(this.m_dependentVariablesNames);
						sap.firefly.QVariable.$superclass.releaseObject
								.call(this);
					},
					copyVariableDependencies : function(origin) {
						var size = origin.m_dependentVariables.size();
						var i;
						for (i = 0; i < size; i++) {
							this.m_dependentVariables
									.add(this.m_variableContext
											.getVariableBaseByName(origin.m_dependentVariables
													.get(i).getName()));
						}
					},
					copyVariable : function(origin) {
						sap.firefly.QVariable.$superclass.copyModelComponent
								.call(this, origin);
						this.m_dependentVariablesNames = origin.m_dependentVariablesNames
								.createListOfStringCopy();
						this.m_valueType = origin.m_valueType;
						this.m_variableOrder = origin.m_variableOrder;
						this.m_inputEnabled = origin.m_inputEnabled;
						this.m_mandatory = origin.m_mandatory;
						this.m_initialValueAllowed = origin.m_initialValueAllowed;
					},
					getVariableContext : function() {
						return this.m_variableContext;
					},
					setValueByString : function(value) {
						this.setValueByStringExt(value, false);
					},
					setValueByStringExt : function(value, isManualInput) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getOlapComponentType : function() {
						return this.getVariableType();
					},
					getValueType : function() {
						return this.m_valueType;
					},
					setValueType : function(type) {
						this.m_valueType = type;
					},
					isInputEnabled : function() {
						return this.m_inputEnabled;
					},
					setInputEnabled : function(inputEnabled) {
						this.m_inputEnabled = inputEnabled;
					},
					isMandatory : function() {
						return this.m_mandatory;
					},
					setMandatory : function(mandatory) {
						this.m_mandatory = mandatory;
					},
					isInitialValueAllowed : function() {
						return this.m_initialValueAllowed;
					},
					setInitialValueAllowed : function(initialValueAllowed) {
						this.m_initialValueAllowed = initialValueAllowed;
					},
					getVariableOrder : function() {
						return this.m_variableOrder;
					},
					setVariableOrder : function(orderIndex) {
						this.m_variableOrder = orderIndex;
					},
					getDependentVariables : function() {
						return this.m_dependentVariables;
					},
					addDependentVariable : function(variable) {
						if (this.m_dependentVariables.contains(variable) === false) {
							this.m_dependentVariables.add(variable);
						}
					},
					getAffectedVariables : function() {
						if (this.m_affectedVariables === null) {
							this.m_affectedVariables = this
									.resolveAffectedVariables();
						}
						return this.m_affectedVariables;
					},
					resolveAffectedVariables : function() {
						var affectedVariabes = sap.firefly.XListOfNameObject
								.create();
						var variables = this.getVariableContext()
								.getVariables();
						var i;
						var dependentVariable;
						for (i = 0; i < this.getVariableContext()
								.getVariables().size(); i++) {
							dependentVariable = variables.get(i);
							if (dependentVariable.getDependentVariables()
									.containsKey(this.getName())) {
								affectedVariabes.add(dependentVariable);
							}
						}
						return affectedVariabes;
					},
					getExternalRepresentation : function() {
						var externalRep = sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_externalVariable);
						return externalRep;
					},
					clearAndDeregisterExternalVariable : function() {
						var externalVariable = this.getExternalRepresentation();
						if (externalVariable !== null) {
							(externalVariable).removeSecondaryParent(this);
							this.m_externalVariable = null;
						}
					},
					setExternalRepresentation : function(variable) {
						this.clearAndDeregisterExternalVariable();
						if (variable !== null) {
							this.m_externalVariable = sap.firefly.XWeakReferenceUtil
									.getWeakRef(variable);
							(variable).addSecondaryParent(this);
						}
						this.notifyNodeChanged();
					},
					hasExternalRepresentation : function() {
						return this.getExternalRepresentation() !== null;
					},
					addDependentVariableName : function(name) {
						this.m_dependentVariablesNames.add(name);
					},
					getDependentVariablesNames : function() {
						return this.m_dependentVariablesNames;
					},
					getVariableContainer : function() {
						return this.m_variableContext;
					},
					mergeDeepRecursive : function(settings, other) {
						sap.firefly.QVariable.$superclass.mergeDeepRecursive
								.call(this, settings, other);
					},
					getValueByString : function() {
					},
					getVariableType : function() {
					},
					newVariableValue : function() {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QVariableProcessor",
				sap.firefly.QVariableModelComponent,
				{
					$statics : {
						createVariableProcessor : function(context, provider,
								requestor) {
							var variableProcessor = new sap.firefly.QVariableProcessor();
							variableProcessor.setupVariableProcessor(context,
									provider, requestor);
							return variableProcessor;
						}
					},
					m_requestor : null,
					m_provider : null,
					m_variables : null,
					m_isSubmitted : false,
					m_directVariableTransfer : false,
					m_variableProcessorState : null,
					m_previousVariableProcessorState : null,
					setupVariableProcessor : function(context, provider,
							requestor) {
						sap.firefly.QVariableProcessor.$superclass.setupModelComponent
								.call(this, context, null);
						this.m_requestor = requestor;
						this.m_provider = provider;
						this.m_variableProcessorState = sap.firefly.VariableProcessorState.INITIAL;
						this.m_isSubmitted = false;
					},
					releaseObject : function() {
						var varIt;
						var currentVariable;
						this.m_requestor = null;
						this.m_provider = null;
						this.m_variableProcessorState = null;
						this.m_previousVariableProcessorState = null;
						if (this.m_variables !== null) {
							varIt = this.m_variables.getIterator();
							while (varIt.hasNext()) {
								currentVariable = varIt.next();
								if (currentVariable.isReleased() === false) {
									currentVariable.releaseObject();
								}
							}
							varIt.releaseObject();
							this.m_variables.releaseObject();
						}
						this.m_variables = null;
						sap.firefly.QVariableProcessor.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.VARIABLE_CONTAINER;
					},
					getDimensionAccessor : function() {
						return this.m_requestor.getDimensionAccessor();
					},
					getVariableProvider : function() {
						return this.m_provider;
					},
					hasVariables : function() {
						var variables = this.getVariables();
						if (variables === null) {
							return false;
						}
						return variables.hasElements();
					},
					hasMandatoryVariables : function() {
						var variables = this.getVariables();
						var i;
						var variable;
						for (i = 0; i < variables.size(); i++) {
							variable = variables.get(i);
							if (variable.isMandatory()) {
								return true;
							}
						}
						return false;
					},
					getVariables : function() {
						if ((this.m_requestor.hasVariables())
								&& (this.m_variables === null)) {
							this.addVariableRuntimeInformation();
						}
						return this.m_variables;
					},
					getInputEnabledVariables : function() {
						var inputEnabledVariables = sap.firefly.XListOfNameObject
								.create();
						var variables = this.getVariables();
						var i;
						var variable;
						for (i = 0; i < variables.size(); i++) {
							variable = variables.get(i);
							if (variable.isInputEnabled()) {
								inputEnabledVariables.add(variable);
							}
						}
						return inputEnabledVariables;
					},
					addVariableRuntimeInformation : function() {
						var variableProvider;
						var extResult;
						var i;
						this.m_variables = sap.firefly.XListOfNameObject
								.create();
						variableProvider = this.getVariableProvider();
						if (variableProvider.isVariableValuesRuntimeNeeded()) {
							extResult = variableProvider
									.processRetrieveVariableRuntimeInformation(
											sap.firefly.SyncType.BLOCKING,
											null, null);
							if (extResult.hasErrors()) {
								throw sap.firefly.XException
										.createRuntimeException(extResult
												.getMessages().toString());
							}
						} else {
							if (this.m_requestor.hasVariables()) {
								for (i = 0; i < this.m_requestor.getVariables()
										.size(); i++) {
									this.addVariable(this.m_requestor
											.getVariableBaseByIndex(i));
								}
							}
						}
					},
					addVariable : function(variable) {
						this.m_variables.add(variable);
					},
					getVariableBaseByIndex : function(index) {
						if ((this.m_requestor.hasVariables())
								&& (this.m_variables === null)) {
							this.addVariableRuntimeInformation();
						}
						return this.m_variables.get(index);
					},
					getVariableBaseByName : function(name) {
						if ((this.m_requestor.hasVariables())
								&& (this.m_variables === null)) {
							this.addVariableRuntimeInformation();
						}
						return this.m_variables.getByKey(name);
					},
					clearVariables : function() {
						if (this.m_variables !== null) {
							this.m_variables.clear();
						}
					},
					removeVariable : function(name) {
						var variable;
						if (this.m_variables !== null) {
							variable = this.m_variables.getByKey(name);
							this.m_variables.removeElement(variable);
						}
					},
					submitVariables : function(syncType, listener,
							customIdentifier) {
						var variableProvider;
						if (this.isDirectVariableTransferEnabled()) {
							throw sap.firefly.XException
									.createIllegalStateException("submit not allowed if direct variable transfer is enabled");
						}
						variableProvider = this.getVariableProvider();
						return variableProvider.processVariableSubmit(syncType,
								listener, customIdentifier);
					},
					supportsReInitVariables : function() {
						var variableProvider = this.getVariableProvider();
						return variableProvider.supportsReInitVariables();
					},
					reInitVariablesAfterSubmit : function(syncType, listener,
							customIdentifier) {
						var variableProvider = this.getVariableProvider();
						return variableProvider
								.processReInitVariableAfterSubmit(syncType,
										listener, customIdentifier);
					},
					cancelReInitVariables : function(syncType, listener,
							customIdentifier) {
						var variableProvider = this.getVariableProvider();
						return variableProvider.processVariableCancel(syncType,
								listener, customIdentifier);
					},
					isSubmitted : function() {
						return this.m_isSubmitted;
					},
					transferVariables : function(syncType, listener,
							customIdentifier) {
						var variableProvider = this.getVariableProvider();
						return variableProvider.processSetGetVariableValues(
								syncType, listener, customIdentifier);
					},
					transferVariablesByVariable : function(variable, syncType,
							listener, customIdentifier) {
						var variableProvider;
						if (this.getVariables().contains(variable)) {
							variableProvider = this.getVariableProvider();
							return variableProvider
									.processSetGetVariableValues(syncType,
											listener, customIdentifier);
						}
						return null;
					},
					setVariablesProcessed : function(areVariablesProcessed) {
						this.m_isSubmitted = areVariablesProcessed;
						this.m_variableProcessorState = sap.firefly.VariableProcessorState.SUBMITTED;
					},
					getModelComponentBase : function() {
						return this;
					},
					supportsDirectVariableTransfer : function() {
						var queryModel = this.getQueryModelBase();
						var queryManager;
						if (queryModel === null) {
							return false;
						}
						queryManager = queryModel.getQueryManagerBase();
						if (queryManager === null) {
							return false;
						}
						return queryManager.supportsDirectVariableTransfer();
					},
					setDirectVariableTransferEnabled : function(
							directVariableTransfer) {
						var variableProvider;
						if (this.m_directVariableTransfer === directVariableTransfer) {
							return;
						}
						if (this.supportsDirectVariableTransfer() === false) {
							return;
						}
						this.m_directVariableTransfer = directVariableTransfer;
						variableProvider = this.getVariableProvider();
						variableProvider
								.setDirectVariableTransfer(directVariableTransfer);
						variableProvider
								.setIsVariableSubmitNeeded(!this.m_directVariableTransfer);
						this.getModelComponentBase().notifyNodeChanged();
					},
					isDirectVariableTransferEnabled : function() {
						return this.m_directVariableTransfer;
					},
					supportsCheckVariables : function() {
						return this.isDirectVariableTransferEnabled();
					},
					checkVariables : function(syncType, listener,
							customIdentifier) {
						var variableProvider = this.getVariableProvider();
						return variableProvider.processCheckVariables(syncType,
								listener, customIdentifier);
					},
					getVariableContainer : function() {
						return this;
					},
					getVariableContainerBase : function() {
						return this;
					},
					getVariableMode : function() {
						if (this.m_directVariableTransfer) {
							return sap.firefly.VariableMode.DIRECT_VALUE_TRANSFER;
						}
						return sap.firefly.VariableMode.SUBMIT_AND_REINIT;
					},
					getInputEnabledVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if (variable.isInputEnabled()) {
							return variable;
						}
						return null;
					},
					getVariable : function(name) {
						return this.getVariableBaseByName(name);
					},
					getHierarchyNodeVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
							return variable;
						}
						return null;
					},
					getHierarchyNameVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
							return variable;
						}
						return null;
					},
					getVariableProcessorState : function() {
						return this.m_variableProcessorState;
					},
					setVariableProcessorState : function(variableProcessorState) {
						this.m_previousVariableProcessorState = this.m_variableProcessorState;
						this.m_variableProcessorState = variableProcessorState;
						if (this.m_variableProcessorState === sap.firefly.VariableProcessorState.SUBMITTED) {
							this.m_isSubmitted = true;
						}
					},
					returnToPreviousProcessorState : function() {
						if ((this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_REINIT)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.CHANGEABLE_STARTUP)
								|| (this.m_previousVariableProcessorState === sap.firefly.VariableProcessorState.SUBMITTED)) {
							this.m_variableProcessorState = this.m_previousVariableProcessorState;
							this.m_previousVariableProcessorState = null;
							this.m_isSubmitted = false;
						} else {
							if (this.m_previousVariableProcessorState !== null) {
								throw sap.firefly.XException
										.createIllegalStateException(sap.firefly.XString
												.concatenate2(
														"Not allowed to return to previous state: ",
														this.m_previousVariableProcessorState
																.getName()));
							}
							throw sap.firefly.XException
									.createIllegalStateException("Not allowed to return to previous state: [null]");
						}
					},
					registerVariableProcessorStateChangedListener : function(
							listener, customIdentifier) {
					},
					unregisterVariableProcessorStateChangedListener : function(
							listener) {
					},
					getSelectionTagging : function() {
						return null;
					},
					isSubmitNeeded : function() {
						return this.getVariableProcessorState()
								.isSubmitNeeded();
					},
					isReinitNeeded : function() {
						return this.getVariableProcessorState()
								.isReinitNeeded();
					},
					isCancelNeeded : function() {
						return this.getVariableProcessorState()
								.isCancelNeeded();
					},
					activateVariableVariant : function(variableVariant,
							syncType, listener, customIdentifier) {
						return this.getVariableProvider()
								.processActivateVariableVariant(
										variableVariant, syncType, listener,
										customIdentifier);
					}
				});
$Firefly.createClass("sap.firefly.QOptionListElement",
		sap.firefly.QVariableModelComponent, {
			$statics : {
				createOptionListElement : function(context, variable, name,
						text) {
					var element = new sap.firefly.QOptionListElement();
					element.setupOptionListElement(context, variable, name,
							text);
					return element;
				}
			},
			setupOptionListElement : function(context, variable, name, text) {
				sap.firefly.QOptionListElement.$superclass.setupModelComponent
						.call(this, context, variable);
				this.setName(name);
				this.setText(text);
			},
			toString : function() {
				return this.getName();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningContextCommand",
				sap.firefly.PlanningCommand,
				{
					$statics : {
						PLANNING_CONTEXT : "PLANNING_CONTEXT",
						PLANNING_CONTEXT_COMMAND_TYPE : "PLANNING_CONTEXT_COMMAND_TYPE"
					},
					getPlanningContext : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningContextCommand.PLANNING_CONTEXT);
					},
					setPlanningContext : function(planningContext) {
						this
								.setPropertyObject(
										sap.firefly.PlanningContextCommand.PLANNING_CONTEXT,
										planningContext);
					},
					getPlanningContextCommandType : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningContextCommand.PLANNING_CONTEXT_COMMAND_TYPE);
					},
					setPlanningContextCommandType : function(
							planningContextCommandType) {
						this
								.setPropertyObject(
										sap.firefly.PlanningContextCommand.PLANNING_CONTEXT_COMMAND_TYPE,
										planningContextCommandType);
					}
				});
$Firefly.createClass("sap.firefly.PlanningContextCommandResult",
		sap.firefly.PlanningCommandResult, {
			getPlanningContextCommand : function() {
				return this.getPlanningCommand();
			},
			initResponseStructureCommand : function(responseStructure,
					messageManager) {
				var command = this.getPlanningContextCommand();
				if (command.isInvalidatingResultSet()) {
					command.getPlanningContext().invalidate();
				}
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningCommandWithId",
				sap.firefly.PlanningCommand,
				{
					$statics : {
						PLANNING_CONTEXT : "PLANNING_CONTEXT",
						COMMAND_IDENTIFIER : "COMMAND_IDENTIFIER",
						SELECTOR : "SELECTOR",
						VARIABLES : "VARIABLES",
						VARIABLE_PROCESSOR : "VARIABLE_PROCESSOR",
						VARIABLE_PROCESSOR_PROVIDER : "VARIABLE_PROCESSOR_PROVIDER",
						s_variableProcessorProviderFactory : null
					},
					getPlanningContext : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.PLANNING_CONTEXT);
					},
					releaseObject : function() {
						var variableProcessorProvider = this
								.getVariableProcessorProvider();
						if (variableProcessorProvider !== null) {
							variableProcessorProvider.releaseObject();
						}
						sap.firefly.PlanningCommandWithId.$superclass.releaseObject
								.call(this);
					},
					setPlanningContext : function(planningContext) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandWithId.PLANNING_CONTEXT,
										planningContext);
					},
					getCommandIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.COMMAND_IDENTIFIER);
					},
					setCommandIdentifier : function(commandIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandWithId.COMMAND_IDENTIFIER,
										commandIdentifier);
					},
					getSelector : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.SELECTOR);
					},
					setSelector : function(selector) {
						this.setPropertyObject(
								sap.firefly.PlanningCommandWithId.SELECTOR,
								selector);
					},
					getDimensionAccessor : function() {
						var selector = this.getSelector();
						if (selector === null) {
							return null;
						}
						return selector.getDimensions();
					},
					getListOfVariables : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.VARIABLES);
					},
					setListOfVariables : function(variables) {
						this.setPropertyObject(
								sap.firefly.PlanningCommandWithId.VARIABLES,
								variables);
					},
					hasVariables : function() {
						var variables = this.getListOfVariables();
						if (variables === null) {
							return false;
						}
						if (variables.isEmpty()) {
							return false;
						}
						return true;
					},
					hasMandatoryVariables : function() {
						var variables = this.getListOfVariables();
						var i;
						var variable;
						if (variables === null) {
							return false;
						}
						for (i = 0; i < variables.size(); i++) {
							variable = variables.get(i);
							if (variable.isMandatory()) {
								return true;
							}
						}
						return false;
					},
					getVariables : function() {
						var variables = this.getListOfVariables();
						if (variables === null) {
							variables = sap.firefly.XListOfNameObject.create();
							this.setListOfVariables(variables);
						}
						return variables;
					},
					getInputEnabledVariables : function() {
						var inputEnabledVariables = sap.firefly.XListOfNameObject
								.create();
						var variables = this.getVariables();
						var i;
						var variable;
						for (i = 0; i < variables.size(); i++) {
							variable = variables.get(i);
							if (variable.isInputEnabled()) {
								inputEnabledVariables.add(variable);
							}
						}
						return inputEnabledVariables;
					},
					addVariable : function(variable) {
						var variables = this.getVariables();
						if (variables.containsKey(variable.getName()) === false) {
							variables.add(variable);
						}
					},
					clearVariables : function() {
						var variables = this.getVariables();
						variables.clear();
					},
					removeVariable : function(name) {
						var variables = this.getVariables();
						var variable = variables.getByKey(name);
						variables.removeElement(variable);
					},
					getVariableBaseByIndex : function(index) {
						var variables = this.getVariables();
						return variables.get(index);
					},
					getVariableBaseByName : function(name) {
						var variables = this.getVariables();
						return variables.getByKey(name);
					},
					getModelComponentBase : function() {
						return null;
					},
					getSystemDescription : function() {
						return this.getPlanningService().getServiceConfig()
								.getSystemDescription();
					},
					setVariableProcessorBase : function(processor) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandWithId.VARIABLE_PROCESSOR,
										processor);
					},
					getVariableProcessorBase : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.VARIABLE_PROCESSOR);
					},
					getVariableRequestorBase : function() {
						return this;
					},
					getVariableProcessor : function() {
						return this.getVariableProcessorBase();
					},
					getVariableProcessorProvider : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningCommandWithId.VARIABLE_PROCESSOR_PROVIDER);
					},
					setVariableProcessorProvider : function(provider) {
						this
								.setPropertyObject(
										sap.firefly.PlanningCommandWithId.VARIABLE_PROCESSOR_PROVIDER,
										provider);
					},
					fillVariableRequestorDataRequestContext : function(
							structure, withVariables, processingDirective,
							variables) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldByName : function(name) {
						var filter = this.getSelector();
						var dimensions;
						var i;
						var dimension;
						var field;
						if (filter !== null) {
							dimensions = filter.getDimensions();
							if (dimensions !== null) {
								for (i = 0; i < dimensions.size(); i++) {
									dimension = dimensions.get(i);
									field = dimension.getFieldByName(name);
									if (field !== null) {
										return field;
									}
								}
							}
						}
						return null;
					},
					getFieldByNameOrAlias : function(name) {
						var filter = this.getSelector();
						var dimensions;
						var i;
						var dimension;
						var field;
						if (filter !== null) {
							dimensions = filter.getDimensions();
							if (dimensions !== null) {
								for (i = 0; i < dimensions.size(); i++) {
									dimension = dimensions.get(i);
									field = dimension
											.getFieldByNameOrAlias(name);
									if (field !== null) {
										return field;
									}
								}
							}
						}
						return null;
					},
					getVariableMode : function() {
						return null;
					},
					getHierarchyNameVariable : function(arg1) {
					},
					getHierarchyNodeVariable : function(arg1) {
					},
					getInputEnabledVariable : function(arg1) {
					},
					getVariable : function(arg1) {
					},
					getVariableContainerBase : function() {
					}
				});
$Firefly.createClass("sap.firefly.PlanningCommandWithIdResult",
		sap.firefly.PlanningCommandResult, {
			getPlanningCommandWithId : function() {
				return this.getPlanningCommand();
			},
			initResponseStructureCommand : function(responseStructure,
					messageManager) {
				var command = this.getPlanningCommandWithId();
				if (command.isInvalidatingResultSet()) {
					command.getPlanningContext().invalidate();
				}
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningRequest",
				sap.firefly.PlanningCommand,
				{
					$statics : {
						PLANNING_CONTEXT : "PLANNING_CONTEXT"
					},
					getPlanningContext : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningRequest.PLANNING_CONTEXT);
					},
					setPlanningContext : function(planningContext) {
						this.setPropertyObject(
								sap.firefly.PlanningRequest.PLANNING_CONTEXT,
								planningContext);
					}
				});
$Firefly.createClass("sap.firefly.PlanningResponse",
		sap.firefly.PlanningCommandResult, {
			getPlanningRequest : function() {
				return this.getPlanningCommand();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningOperationIdentifier",
				sap.firefly.PlanningCommandIdentifier,
				{
					$statics : {
						PLANNING_OPERATION_TYPE : "PLANNING_OPERATION_TYPE"
					},
					getPlanningOperationName : function() {
						return this.getCommandId();
					},
					getPlanningOperationType : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningOperationIdentifier.PLANNING_OPERATION_TYPE);
					},
					setPlanningOperationType : function(planningOperationType) {
						this
								.setPropertyObject(
										sap.firefly.PlanningOperationIdentifier.PLANNING_OPERATION_TYPE,
										planningOperationType);
					},
					getDataSource : function() {
						var dataSource = sap.firefly.QFactory2.newDataSource();
						var planningOperationType = this
								.getPlanningOperationType();
						if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_FUNCTION) {
							dataSource
									.setType(sap.firefly.MetaObjectType.PLANNING_FUNCTION);
						} else {
							if (planningOperationType === sap.firefly.PlanningOperationType.PLANNING_SEQUENCE) {
								dataSource
										.setType(sap.firefly.MetaObjectType.PLANNING_SEQUENCE);
							} else {
								return null;
							}
						}
						dataSource.setObjectName(this
								.getPlanningOperationName());
						return dataSource;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningActionIdentifierBase",
				sap.firefly.PlanningCommandIdentifier,
				{
					$statics : {
						ACTION_METADATA : "ACTION_METADATA"
					},
					setActionMetadata : function(actionMetadata) {
						this
								.setPropertyObject(
										sap.firefly.PlanningActionIdentifierBase.ACTION_METADATA,
										actionMetadata);
					},
					getActionMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningActionIdentifierBase.ACTION_METADATA);
					},
					getActionId : function() {
						return this.getActionMetadata().getActionId();
					},
					getActionName : function() {
						return this.getActionMetadata().getActionName();
					},
					getActionDescription : function() {
						return this.getActionMetadata().getActionDescription();
					},
					getActionType : function() {
						return this.getActionMetadata().getActionType();
					},
					isDefault : function() {
						return this.getActionMetadata().isDefault();
					},
					createRequestGetActionParameters : function() {
						return this.getActionMetadata()
								.createRequestGetActionParameters();
					},
					getActionParameters : function() {
						return this.getActionMetadata().getActionParameters();
					},
					isActionParameterMetadataSet : function() {
						return this.getActionMetadata()
								.isActionParameterMetadataSet();
					},
					getActionParameterMetadata : function() {
						return this.getActionMetadata()
								.getActionParameterMetadata();
					},
					setActionParameterMetadata : function(
							actionParameterMetadata) {
						this.getActionMetadata().setActionParameterMetadata(
								actionParameterMetadata);
					},
					setActionParameterNames : function(parameterNames) {
						this.getActionMetadata().setActionParameterNames(
								parameterNames);
					},
					getActionParameterNames : function() {
						return this.getActionMetadata()
								.getActionParameterNames();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QConvenienceCmdsSpace",
				sap.firefly.QCmdContext,
				{
					$statics : {
						create : function(application) {
							var cmdSpace = new sap.firefly.QConvenienceCmdsSpace();
							cmdSpace.setupCmdsSpace(application);
							return cmdSpace;
						},
						createBySelection : function(application,
								sigSelExpression) {
							var cmdSpace = sap.firefly.QConvenienceCmdsSpace
									.create(application);
							cmdSpace.selectOnSpace(sigSelExpression);
							return cmdSpace;
						}
					},
					m_olapEnv : null,
					m_activeCmdEngine : null,
					m_cmdEngineList : null,
					m_dummyCmdEngine : null,
					m_elements : null,
					m_activeComponent : null,
					m_spaceSigSel : null,
					m_bindings : null,
					setupCmdsSpace : function(application) {
						this.m_olapEnv = application;
						this.m_elements = sap.firefly.XList.create();
						this.m_bindings = sap.firefly.XList.create();
						this.m_cmdEngineList = sap.firefly.XList.create();
					},
					getComponentType : function() {
						return this.getOlapComponentType();
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.CONVENIENCE_CMDS;
					},
					setActiveComponent : function(component) {
						return false;
					},
					sizeElements : function() {
						return this.m_elements.size();
					},
					getDataSource : function() {
						return this.setActive(0).getDataSource();
					},
					addElement : function(modelComponent) {
						this.m_elements.add(sap.firefly.XWeakReferenceUtil
								.getWeakRef(modelComponent));
						this.m_activeComponent = modelComponent;
					},
					isSingleContext : function() {
						var target;
						if (this.m_elements.size() <= 1) {
							target = this.setActive(0);
							this.setTarget(target);
							return true;
						} else {
							return false;
						}
					},
					setActive : function(index) {
						var weakRef;
						var ok;
						var size;
						var i;
						var context;
						if (index < this.m_elements.size()) {
							weakRef = this.m_elements.get(index);
							this.m_activeComponent = sap.firefly.XWeakReferenceUtil
									.getHardRef(weakRef);
							if (this.m_activeCmdEngine !== null) {
								ok = this.m_activeCmdEngine
										.setActiveComponent(this.m_activeComponent);
								if (ok === false) {
									this.m_activeCmdEngine = null;
									size = this.m_cmdEngineList.size();
									if (size > 1) {
										for (i = 0; i < size; i++) {
											context = this.m_cmdEngineList
													.get(i);
											if (context
													.setActiveComponent(this.m_activeComponent)) {
												this.m_activeCmdEngine = context;
												break;
											}
										}
									}
								}
							}
							if (this.m_activeCmdEngine === null) {
								this.m_activeCmdEngine = sap.firefly.QCmdContextFactory
										.createCmdContext(this.m_olapEnv,
												this.m_activeComponent);
								if (this.m_activeCmdEngine !== null) {
									this.m_cmdEngineList
											.add(this.m_activeCmdEngine);
								}
							}
						}
						if (this.m_activeCmdEngine === null) {
							if (this.m_dummyCmdEngine === null) {
								this.m_dummyCmdEngine = sap.firefly.QCmdContext
										.createDummyContext();
							}
							this.m_activeCmdEngine = this.m_dummyCmdEngine;
						}
						return this.m_activeCmdEngine;
					},
					select : function(sigSelExpression) {
						return this.getOlapEnv().select(sigSelExpression);
					},
					selectOnSpace : function(sigSelExpression) {
						var parser = sap.firefly.SigSelParser.create();
						var result = parser.parse(sigSelExpression);
						if (result.isValid()) {
							this.m_spaceSigSel = result.getData();
							this.selectOnSpaceExpr();
						}
					},
					selectOnSpaceExpr : function() {
						var dataProviders;
						var i;
						var operation;
						var operationType;
						var name;
						var k;
						var dp;
						var componentType;
						var selectedComponentType;
						var m;
						var dp2;
						var componentType2;
						if (this.m_spaceSigSel !== null) {
							dataProviders = this.getOlapEnv()
									.getDataProviders();
							this.clearRegistrations();
							this.m_elements.clear();
							this.m_activeComponent = null;
							for (i = 0; i < this.m_spaceSigSel.size(); i++) {
								operation = this.m_spaceSigSel.get(i);
								operationType = operation.getOperationType();
								if (operationType === sap.firefly.SigSelType.MATCH_NAME) {
									name = operation.getName();
									for (k = 0; k < dataProviders.size(); k++) {
										dp = dataProviders.get(k);
										componentType = dp.getComponentType();
										if (sap.firefly.XString.isEqual(name,
												dp.getDataProviderName())
												&& (componentType
														.isTypeOf(sap.firefly.RuntimeComponentType.DATA_PROVIDER))) {
											this.addElement(dp);
										}
									}
								} else {
									if (operationType === sap.firefly.SigSelType.MATCH) {
										selectedComponentType = operation
												.getSelectedComponentType();
										if (selectedComponentType !== null) {
											for (m = 0; m < dataProviders
													.size(); m++) {
												dp2 = dataProviders.get(m);
												componentType2 = dp2
														.getComponentType();
												if (componentType2
														.isTypeOf(selectedComponentType)) {
													this.addElement(dp2);
												}
											}
										}
									}
								}
							}
						}
					},
					executeCmd : function(name, parameter) {
						var cmd = sap.firefly.QAllCmds.newCmd(this, name, this,
								parameter);
						var signature = cmd.getSignature();
						var olapApplication = this.getOlapEnv();
						var cmdStructure;
						var parameterList;
						var values;
						var i;
						if (olapApplication.isTracing()) {
							cmdStructure = sap.firefly.PrStructure.create();
							cmdStructure.setStringByName(
									sap.firefly.InAConstants.QY_COMMAND, name);
							if ((parameter !== null) && parameter.hasElements()) {
								parameterList = cmdStructure
										.setNewListByName(sap.firefly.InAConstants.QY_PARAMETERS);
								if (signature !== null) {
									cmdStructure
											.setElementByName(
													sap.firefly.InAConstants.QY_SIGNATURE,
													signature);
								}
								values = parameter.getValues();
								for (i = 0; i < parameter.size(); i++) {
									parameterList.addString(parameter
											.getTrace(i));
									values.get(i);
								}
							}
							olapApplication.addTraceEntry(cmdStructure);
						}
						return cmd.executeOnSpace();
					},
					getSession : function() {
						return this.m_olapEnv.getSession();
					},
					getOlapEnv : function() {
						return this.m_olapEnv;
					},
					getApplication : function() {
						return this.m_olapEnv.getApplication();
					},
					getQueryManager : function() {
						return this.setActive(0).getQueryManager();
					},
					getQueryModel : function() {
						return this.setActive(0).getQueryModel();
					},
					getDimension : function(dimName) {
						return this.setActive(0).getDimension(dimName);
					},
					getField : function(name) {
						return this.setActive(0).getField(name);
					},
					getMeasure : function(name) {
						return this.setActive(0).getMeasure(name);
					},
					getFieldAccessorSingle : function() {
						return this.setActive(0).getFieldAccessorSingle();
					},
					getVariableContainer : function() {
						return this.setActive(0).getVariableContainer();
					},
					getDimensionAccessor : function() {
						return this.setActive(0).getDimensionAccessor();
					},
					getDrillManager : function() {
						return this.setActive(0).getDrillManager();
					},
					getDimensionsContainingValueType : function(valueType) {
						return this.setActive(0)
								.getDimensionsContainingValueType(valueType);
					},
					getFirstGISDimension : function() {
						return this.setActive(0).getFirstGISDimension();
					},
					getFirstDimensionWithType : function(dimensionType) {
						return this.setActive(0).getFirstDimensionWithType(
								dimensionType);
					},
					getGISAttributesForDimension : function(dim) {
						return this.setActive(0).getGISAttributesForDimension(
								dim);
					},
					getModelCapabilities : function() {
						return this.setActive(0).getModelCapabilities();
					},
					registerChangedListener : function(listener,
							customIdentifier) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).registerChangedListener(listener,
									customIdentifier);
						}
						return this;
					},
					unregisterChangedListener : function(listener) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).unregisterChangedListener(
									listener);
						}
						return this;
					},
					getSenderBindings : function() {
						var list = sap.firefly.XList.create();
						if (this.m_elements.hasElements()) {
							list.add(sap.firefly.DataBindingType.PIE);
							list.add(sap.firefly.DataBindingType.LINE);
							list.add(sap.firefly.DataBindingType.COLUMN);
							list.add(sap.firefly.DataBindingType.BAR);
							list.add(sap.firefly.DataBindingType.AREA);
							list.add(sap.firefly.DataBindingType.SCATTER);
							list.add(sap.firefly.DataBindingType.BUBBLE);
							list.add(sap.firefly.DataBindingType.SPLINE);
							list.add(sap.firefly.DataBindingType.VARIABLEPIE);
							list.add(sap.firefly.DataBindingType.WORDCLOUD);
							list.add(sap.firefly.DataBindingType.BELLCURVE);
							list.add(sap.firefly.DataBindingType.SCATTER);
							list.add(sap.firefly.DataBindingType.BUBBLE);
							list.add(sap.firefly.DataBindingType.CHART);
							list.add(sap.firefly.DataBindingType.JSON);
							list.add(sap.firefly.DataBindingType.STRING);
						}
						return list;
					},
					getReceiverBindings : function() {
						return sap.firefly.XList.create();
					},
					newSenderBinding : function(type) {
						var i;
						var weakRef;
						var component;
						var binding;
						if (this.m_bindings.isEmpty()) {
							for (i = 0; i < this.m_elements.size(); i++) {
								weakRef = this.m_elements.get(i);
								component = sap.firefly.XWeakReferenceUtil
										.getHardRef(weakRef);
								component.registerChangedListener(this, null);
							}
						}
						binding = sap.firefly.QCmdBindResultset.create(this,
								type);
						this.m_bindings.add(binding);
						return binding;
					},
					newReceiverBinding : function(type) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					clearRegistrations : function() {
						var i;
						var weakRef;
						var component;
						if (this.m_bindings.size() > 0) {
							for (i = 0; i < this.m_elements.size(); i++) {
								weakRef = this.m_elements.get(i);
								component = sap.firefly.XWeakReferenceUtil
										.getHardRef(weakRef);
								component.unregisterChangedListener(this);
							}
						}
					},
					onModelComponentChanged : function(modelComponent,
							customIdentifier) {
						var i;
						this.selectOnSpaceExpr();
						for (i = 0; i < this.m_bindings.size(); i++) {
							this.m_bindings.get(i).onCmdContextChanged();
						}
					},
					reset : function() {
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.reset
									.call(this);
						} else {
							this.executeCmd(sap.firefly.QAllCmds.RESET, null);
						}
					},
					resetToDefault : function() {
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.resetToDefault
									.call(this);
						} else {
							this
									.executeCmd(
											sap.firefly.QAllCmds.RESET_TO_DEFAULT,
											null);
						}
					},
					addSingleMemberFilter : function(filterLayer, dimType,
							dimName, memberName, comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).addSingleMemberFilter(
									filterLayer, dimType, dimName, memberName,
									comparisonOperator);
						}
						return retObj;
					},
					addSingleNodeFilter : function(node, comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).addSingleNodeFilter(
									node, comparisonOperator);
						}
						return retObj;
					},
					addStringFilterByField : function(field, filterValue,
							comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).addStringFilterByField(
									field, filterValue, comparisonOperator);
						}
						return retObj;
					},
					addFilter : function(filterLayer, dimType, dimName,
							presentationType, fieldName, lowValue, highValue,
							comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addFilter
									.call(this, filterLayer, dimType, dimName,
											presentationType, fieldName,
											lowValue, highValue,
											comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(filterLayer).addNameObject(
											dimType).addString(dimName)
									.addNameObject(presentationType).addString(
											fieldName).addString(lowValue)
									.addString(highValue).addNameObject(
											comparisonOperator);
							return this.executeCmd(
									sap.firefly.QAllCmds.ADD_FILTER, params);
						}
					},
					addFilterByFieldAndValue : function(field, filterValue,
							comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addFilterByFieldAndValue
									.call(this, field, filterValue,
											comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(field)
									.addXValue(filterValue).addNameObject(
											comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_FILTER_BY_FIELD_AND_VALUE,
											params);
						}
					},
					addFilterByField : function(field, firstValue, secondValue,
							thirdValue, comparisonOperator, isVisibility) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addFilterByField
									.call(this, field, firstValue, secondValue,
											thirdValue, comparisonOperator,
											isVisibility);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(field).addXValue(firstValue)
									.addXValue(secondValue).addXValue(
											thirdValue);
							params.addNameObject(comparisonOperator)
									.addBoolean(isVisibility);
							return this.executeCmd(
									sap.firefly.QAllCmds.ADD_FILTER_BY_FIELD,
									params);
						}
					},
					addStringFilterByFieldNameAndOperator : function(
							dimensionName, fieldName, filterValue,
							comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i)
									.addStringFilterByFieldNameAndOperator(
											dimensionName, fieldName,
											filterValue, comparisonOperator);
						}
						return retObj;
					},
					addIntFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addIntFilterByFieldName
									.call(this, dimensionName, fieldName,
											filterValue, comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimensionName).addString(fieldName)
									.addInteger(filterValue).addNameObject(
											comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_INT_FILTER_BY_FIELD_NAME,
											params);
						}
					},
					addIntFilterByField : function(field, filterValue,
							comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addIntFilterByField
									.call(this, field, filterValue,
											comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(field).addInteger(
											filterValue).addNameObject(
											comparisonOperator);
							return this.executeCmd(
									sap.firefly.QAllCmds.ADD_INT_FILTER_BY_ID,
									params);
						}
					},
					addDoubleFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addDoubleFilterByFieldName
									.call(this, dimensionName, fieldName,
											filterValue, comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimensionName).addString(fieldName)
									.addDouble(filterValue).addNameObject(
											comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_DOUBLE_FILTER_BY_FIELD_NAME,
											params);
						}
					},
					addDoubleFilterByField : function(field, filterValue,
							comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addDoubleFilterByField
									.call(this, field, filterValue,
											comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(field)
									.addDouble(filterValue).addNameObject(
											comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_DOUBLE_FILTER_BY_FIELD,
											params);
						}
					},
					addLongFilterByFieldName : function(dimensionName,
							fieldName, filterValue, comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addLongFilterByFieldName
									.call(this, dimensionName, fieldName,
											filterValue, comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimensionName).addString(fieldName)
									.addLong(filterValue).addNameObject(
											comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_LONG_FILTER_BY_FIELD_NAME,
											params);
						}
					},
					addLongFilterByField : function(field, filterValue,
							comparisonOperator) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addLongFilterByField
									.call(this, field, filterValue,
											comparisonOperator);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(field).addLong(filterValue)
									.addNameObject(comparisonOperator);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_LONG_FILTER_BY_FIELD,
											params);
						}
					},
					addStringFilterByName : function(dimensionName, fieldName,
							filterValue, comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).addStringFilterByName(
									dimensionName, fieldName, filterValue,
									comparisonOperator);
						}
						return retObj;
					},
					addStringFilterByPresentation : function(dimensionName,
							presentationType, filterValue, comparisonOperator) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i)
									.addStringFilterByPresentation(
											dimensionName, presentationType,
											filterValue, comparisonOperator);
						}
						return retObj;
					},
					addIntervallFilterByValues : function(dimensionName,
							lowValue, highValue) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addIntervallFilterByValues
									.call(this, dimensionName, lowValue,
											highValue);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimensionName).addXValue(lowValue)
									.addXValue(highValue);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_INTERVALL_FILTER_BY_VALUES,
											params);
						}
					},
					addWithinDistanceFilter : function(dimension, fieldName,
							point, distance, unit) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addWithinDistanceFilter
									.call(this, dimension, fieldName, point,
											distance, unit);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimension).addString(
											fieldName).addXValue(point)
									.addDouble(distance).addString(unit);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_WITHIN_DISTANCE_FILTER,
											params);
						}
					},
					addIntersectsRectFilter : function(dimension, fieldName,
							lowerLeft, upperRight) {
						var parameter;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addIntersectsRectFilter
									.call(this, dimension, fieldName,
											lowerLeft, upperRight);
						} else {
							parameter = sap.firefly.QParameter.create()
									.addNameObject(dimension).addString(
											fieldName).addXValue(lowerLeft)
									.addXValue(upperRight);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_INTERSECTS_RECT_FILTER,
											parameter);
						}
					},
					addContainsGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_CONTAINS_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addIntersectsGeometryFilter : function(dimension,
							fieldName, geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_INTERSECTS_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addCoversGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_COVERS_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addCrossesLinestringFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_CROSSES_LINESTRING_FILTER,
										dimension, fieldName, geometry);
					},
					addDisjointGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_DISJOINT_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addOverlapsGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_OVERLAPS_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addTouchesGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_TOUCHES_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addWithinGeometryFilter : function(dimension, fieldName,
							geometry) {
						return this
								.addGeometryFilter(
										sap.firefly.QAllCmds.ADD_WITHING_GEOMETRY_FILTER,
										dimension, fieldName, geometry);
					},
					addGeometryFilter : function(commandName, dimension,
							fieldName, geometry) {
						var params = sap.firefly.QParameter.create()
								.addNameObject(dimension).addString(fieldName)
								.addXValue(geometry);
						return this.executeCmd(commandName, params);
					},
					setSearchTerm : function(searchTerm) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setSearchTerm(searchTerm);
						}
						return this;
					},
					clearFiltersByDimensionExt : function(filterLayer, dimType,
							dimName) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearFiltersByDimensionExt
									.call(this, filterLayer, dimType, dimName);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(filterLayer).addNameObject(
											dimType).addString(dimName);
							this
									.executeCmd(
											sap.firefly.QAllCmds.CLEAR_FILTERS_BY_DIMENSION_EXT,
											params);
						}
						return this;
					},
					clearAllFiltersExt : function(filterLayer,
							filterScopeVariables) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearAllFiltersExt
									.call(this, filterLayer,
											filterScopeVariables);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(filterLayer).addNameObject(
											filterScopeVariables);
							this.executeCmd(
									sap.firefly.QAllCmds.CLEAR_ALL_FILTERS_EXT,
									params);
						}
						return this;
					},
					clearFilterByIdExt : function(filterLayer, uniqueId) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).clearFilterByIdExt(filterLayer,
									uniqueId);
						}
						return this;
					},
					clearSingleMemberFilterByName : function(dimName,
							memberName, comparisonOperator) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).clearSingleMemberFilterByName(
									dimName, memberName, comparisonOperator);
						}
						return this;
					},
					getFilterById : function(uniqueId) {
						return this.setActive(0).getFilterById(uniqueId);
					},
					getVisibilityFilterById : function(uniqueId) {
						return this.setActive(0).getVisibilityFilterById(
								uniqueId);
					},
					setVariable : function(name, value) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.setVariable
									.call(this, name, value);
						} else {
							params = sap.firefly.QParameter.create().addString(
									name).addString(value);
							this.executeCmd(sap.firefly.QAllCmds.SET_VARIABLE,
									params);
						}
						return this;
					},
					submitVariables : function() {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).submitVariables();
						}
						return retObj;
					},
					getVariablesNameAndText : function() {
						return this.setActive(0).getVariablesNameAndText();
					},
					getVariable : function(name) {
						return this.setActive(0).getVariable(name);
					},
					switchAxes : function() {
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.switchAxes
									.call(this);
						} else {
							this.executeCmd(sap.firefly.QAllCmds.SWITCH_AXES,
									null);
						}
						return this;
					},
					clearAxis : function(targetAxis) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearAxis
									.call(this, targetAxis);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(targetAxis);
							this.executeCmd(sap.firefly.QAllCmds.CLEAR_AXIS,
									params);
						}
						return this;
					},
					setDimensionsAndMeasures : function(dimNames, measures) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setDimensionsAndMeasures(
									dimNames, measures);
						}
						return this;
					},
					setDimensionAndMeasure : function(dimName, measure) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.setDimensionAndMeasure
									.call(this, dimName, measure);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimName).addString(measure);
							this
									.executeCmd(
											sap.firefly.QAllCmds.SET_DIMENSION_AND_MEASURE,
											params);
						}
						return this;
					},
					moveDimensionExt : function(dimType, dimName, targetAxis,
							index) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.moveDimensionExt
									.call(this, dimType, dimName, targetAxis,
											index);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(dimName)
									.addNameObject(targetAxis)
									.addInteger(index);
							return this.executeCmd(
									sap.firefly.QAllCmds.MOVE_DIMENSION_EXT,
									params);
						}
					},
					addAllDimensions : function() {
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.addAllDimensions
									.call(this);
						} else {
							this.executeCmd(
									sap.firefly.QAllCmds.ADD_ALL_DIMENSIONS,
									null);
						}
						return this;
					},
					addAttributeToResultSet : function(dimName, attributeName) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addAttributeToResultSet
									.call(this, dimName, attributeName);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimName).addString(attributeName);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_ATTRIBUTE_TO_RESULT_SET,
											params);
						}
					},
					removeAttributeFromResultSet : function(dimName,
							attributeName) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.removeAttributeFromResultSet
									.call(this, dimName, attributeName);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimName).addString(attributeName);
							return this
									.executeCmd(
											sap.firefly.QAllCmds.REMOVE_ATTRIBUTE_FROM_RESULTSET,
											params);
						}
					},
					addField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addField
									.call(this, dimType, dimName,
											presentationType, fieldName,
											contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(dimName)
									.addNameObject(presentationType).addString(
											fieldName).addNameObject(
											contextType);
							return this.executeCmd(
									sap.firefly.QAllCmds.ADD_FIELD, params);
						}
					},
					setField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.setField
									.call(this, dimType, dimName,
											presentationType, fieldName,
											contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(dimName)
									.addNameObject(presentationType).addString(
											fieldName).addNameObject(
											contextType);
							return this.executeCmd(
									sap.firefly.QAllCmds.SET_FIELD, params);
						}
					},
					removeField : function(dimType, dimName, presentationType,
							fieldName, contextType) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.removeField
									.call(this, dimType, dimName,
											presentationType, fieldName,
											contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(dimName)
									.addNameObject(presentationType).addString(
											fieldName).addNameObject(
											contextType);
							return this.executeCmd(
									sap.firefly.QAllCmds.REMOVE_FIELD, params);
						}
					},
					addAllFieldsToModelArea : function(contextType) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.addAllFieldsToModelArea
									.call(this, contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(contextType);
							this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_ALL_FIELDS_TO_MODEL_AREA,
											params);
						}
						return this;
					},
					addAllFieldsOfDimensionToModelArea : function(dimName,
							contextType) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.addAllFieldsOfDimensionToModelArea
									.call(this, dimName, contextType);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimName).addNameObject(contextType);
							this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_ALL_FIELDS_OF_DIMENSION_TO_MODEL_AREA,
											params);
						}
						return this;
					},
					clearFields : function(dimType, dimName, contextType) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearFields
									.call(this, dimType, dimName, contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(dimName)
									.addNameObject(contextType);
							this.executeCmd(sap.firefly.QAllCmds.CLEAR_FIELDS,
									params);
						}
						return this;
					},
					clearAllFieldsFromModelArea : function(contextType) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearAllFieldsFromModelArea
									.call(this, contextType);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(contextType);
							this
									.executeCmd(
											sap.firefly.QAllCmds.CLEAR_ALL_FIELDS_FROM_MODEL_AREA,
											params);
						}
						return this;
					},
					containsField : function(dimName, fieldName, contextType) {
						return this.setActive(0).containsField(dimName,
								fieldName, contextType);
					},
					containsResultSetFieldByType : function(dimName,
							presentationType) {
						return this.setActive(0).containsResultSetFieldByType(
								dimName, presentationType);
					},
					containsSelectorFieldByType : function(dimName,
							presentationType) {
						return this.setActive(0).containsSelectorFieldByType(
								dimName, presentationType);
					},
					setDimensionHierarchy : function(dimName, hierarchyName,
							hierarchyActive, initialDrillLevel) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.setDimensionHierarchy
									.call(this, dimName, hierarchyName,
											hierarchyActive, initialDrillLevel);
						} else {
							params = sap.firefly.QParameter.create().addString(
									dimName).addString(hierarchyName)
									.addBoolean(hierarchyActive).addInteger(
											initialDrillLevel);
							this
									.executeCmd(
											sap.firefly.QAllCmds.SET_DIMENSION_HIERARCHY,
											params);
						}
						return this;
					},
					sort : function(sortType, dimType, dimName,
							presentationType, fieldName, memberName, direction) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.sort
									.call(this, sortType, dimType, dimName,
											presentationType, fieldName,
											memberName, direction);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(sortType).addNameObject(
											dimType).addString(dimName)
									.addNameObject(presentationType).addString(
											fieldName).addString(memberName)
									.addNameObject(direction);
							this.executeCmd(sap.firefly.QAllCmds.SORT, params);
						}
						return this;
					},
					clearSort : function(sortType, name) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.clearSort
									.call(this, sortType, name);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(sortType).addString(name);
							this.executeCmd(sap.firefly.QAllCmds.CLEAR_SORT,
									params);
						}
						return this;
					},
					alignTotals : function(modelLevel, name, alignment) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.alignTotals
									.call(this, modelLevel, name, alignment);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(modelLevel).addString(name)
									.addNameObject(alignment);
							this.executeCmd(sap.firefly.QAllCmds.ALIGN_TOTALS,
									params);
						}
						return this;
					},
					setTotalsVisible : function(modelLevel, name, visibility) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.setTotalsVisible
									.call(this, modelLevel, name, visibility);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(modelLevel).addString(name)
									.addNameObject(visibility);
							this.executeCmd(
									sap.firefly.QAllCmds.SET_TOTALS_VISIBLE,
									params);
						}
						return this;
					},
					addMeasure : function(measure) {
						var params;
						if (this.isSingleContext()) {
							return sap.firefly.QConvenienceCmdsSpace.$superclass.addMeasure
									.call(this, measure);
						} else {
							params = sap.firefly.QParameter.create().addString(
									measure);
							return this.executeCmd(
									sap.firefly.QAllCmds.ADD_MEASURE, params);
						}
					},
					addNewRestrictedMeasure : function(dimType, name, text,
							member, targetDim, targetMember) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.addNewRestrictedMeasure
									.call(this, dimType, name, text, member,
											targetDim, targetMember);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(name)
									.addString(text);
							params.addString(member).addString(targetDim)
									.addString(targetMember);
							this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_NEW_RESTRICTED_MEASURE,
											params);
						}
						return this;
					},
					addNewRestrictedMeasureOnNode : function(dimType, name,
							text, member, targetDim, targetHierarchyName,
							targetNode) {
						var params;
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.addNewRestrictedMeasureOnNode
									.call(this, dimType, name, text, member,
											targetDim, targetHierarchyName,
											targetNode);
						} else {
							params = sap.firefly.QParameter.create()
									.addNameObject(dimType).addString(name)
									.addString(text);
							params.addString(member).addString(targetDim)
									.addString(targetHierarchyName).addString(
											targetNode);
							this
									.executeCmd(
											sap.firefly.QAllCmds.ADD_NEW_RESTRICTED_MEASURE_ON_NODE,
											params);
						}
						return this;
					},
					tmx : function(expression) {
						var retObj = null;
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							retObj = this.setActive(i).tmx(expression);
						}
						return retObj;
					},
					setTmxReplacementVariables : function(variables, varPrefix,
							varPostfix, lookupNamespace) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setTmxReplacementVariables(
									variables, varPrefix, varPostfix,
									lookupNamespace);
						}
					},
					executeCode : function(structure) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).executeCode(structure);
						}
					},
					setOffsetRows : function(offset) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setOffsetRows(offset);
						}
						return this;
					},
					setMaxRows : function(max) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setMaxRows(max);
						}
						return this;
					},
					hasMoreColumnRecordsAvailable : function() {
						return this.setActive(0)
								.hasMoreColumnRecordsAvailable();
					},
					hasMoreRowRecordsAvailable : function() {
						return this.setActive(0).hasMoreRowRecordsAvailable();
					},
					getOffsetColumns : function() {
						return this.setActive(0).getOffsetColumns();
					},
					getMaxColumns : function() {
						return this.setActive(0).getMaxColumns();
					},
					getOffsetRows : function() {
						return this.setActive(0).getOffsetRows();
					},
					getMaxRows : function() {
						return this.setActive(0).getMaxRows();
					},
					setOffsetColumns : function(offset) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setOffsetColumns(offset);
						}
						return this;
					},
					setMaxColumns : function(max) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setMaxColumns(max);
						}
						return this;
					},
					setMaxResultRecords : function(maxResultRecords) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setMaxResultRecords(
									maxResultRecords);
						}
						return this;
					},
					resetMaxResultRecords : function() {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).resetMaxResultRecords();
						}
						return this;
					},
					getReferenceGrid : function(withDetails) {
						return this.setActive(0).getReferenceGrid(withDetails);
					},
					getAbstractRendering : function(type) {
						return this.setActive(0).getAbstractRendering(type);
					},
					setResultSetPersistanceTargetSchema : function(
							resultSetPersistanceSchema) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i)
									.setResultSetPersistanceTargetSchema(
											resultSetPersistanceSchema);
						}
						return this;
					},
					setResultSetPersistanceTargetTable : function(
							resultSetPersistanceTable) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i)
									.setResultSetPersistanceTargetTable(
											resultSetPersistanceTable);
						}
						return this;
					},
					setResultSetPersistanceIdentifier : function(
							resultSetPersistanceIdentifier) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i)
									.setResultSetPersistanceIdentifier(
											resultSetPersistanceIdentifier);
						}
						return this;
					},
					setResultSetPersistanceEnabled : function(
							resultSetPersistanceEnabled) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setResultSetPersistanceEnabled(
									resultSetPersistanceEnabled);
						}
						return this;
					},
					setResultSetTransportEnabled : function(isEnabled) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setResultSetTransportEnabled(
									isEnabled);
						}
						return this;
					},
					getExecuteRequestOnOldResultSet : function() {
						return this.setActive(0)
								.getExecuteRequestOnOldResultSet();
					},
					getMaxResultRecords : function() {
						return this.setActive(0).getMaxResultRecords();
					},
					getResultSetPersistanceSchema : function() {
						return this.setActive(0)
								.getResultSetPersistanceSchema();
					},
					getResultSetPersistanceTable : function() {
						return this.setActive(0).getResultSetPersistanceTable();
					},
					getResultSetPersistanceIdentifier : function() {
						return this.setActive(0)
								.getResultSetPersistanceIdentifier();
					},
					isResultSetPersistanceEnabled : function() {
						return this.setActive(0)
								.isResultSetPersistanceEnabled();
					},
					isResultSetTransportEnabled : function() {
						return this.setActive(0).isResultSetTransportEnabled();
					},
					setExecuteRequestOnOldResultSet : function(
							executeRequestOnOldResultSet) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).setExecuteRequestOnOldResultSet(
									executeRequestOnOldResultSet);
						}
						return this;
					},
					processQueryExecution : function(syncType, listener,
							customIdentifier) {
						var i;
						for (i = 0; i < this.m_elements.size(); i++) {
							this.setActive(i).processQueryExecution(syncType,
									listener, customIdentifier);
						}
						return this;
					},
					refresh : function() {
						if (this.isSingleContext()) {
							sap.firefly.QConvenienceCmdsSpace.$superclass.refresh
									.call(this);
						} else {
							this.executeCmd(sap.firefly.QAllCmds.REFRESH, null);
						}
						return this;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QModelComponentList",
				sap.firefly.QModelComponent,
				{
					$statics : {
						createModelComponentList : function(context,
								parentNode, hasChildOwnership, name) {
							var object = new sap.firefly.QModelComponentList();
							object.setupOlapList(context, parentNode,
									hasChildOwnership, null, name);
							return object;
						}
					},
					m_elementList : null,
					m_hasChildOwnership : false,
					copyModelComponentList : function(origin) {
						sap.firefly.QModelComponentList.$superclass.copyModelComponent
								.call(this, origin);
						this.m_hasChildOwnership = origin.m_hasChildOwnership;
					},
					setupOlapList : function(context, parentNode,
							hasChildOwnership, elementList, name) {
						this.setupModelComponent(context, parentNode);
						this.m_hasChildOwnership = hasChildOwnership;
						this.setName(name);
						if (elementList === null) {
							this.m_elementList = this.createElementList();
						} else {
							this.m_elementList = elementList;
						}
					},
					releaseObject : function() {
						if (this.m_elementList !== null) {
							if (this.m_hasChildOwnership) {
								sap.firefly.XCollectionUtils
										.releaseEntriesFromCollection(this.m_elementList);
							}
							this.m_elementList.releaseObject();
							this.m_elementList = null;
						}
						sap.firefly.QModelComponentList.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.COMPONENT_LIST;
					},
					createElementList : function() {
						return sap.firefly.XList.create();
					},
					addInternal : function(element) {
						if (element !== null) {
							if (this.m_hasChildOwnership) {
								(element).setParent(this);
							}
							this.m_elementList.add(element);
						}
					},
					add : function(element) {
						if (element !== null) {
							if (this.m_hasChildOwnership) {
								(element).setParent(this);
							}
							this.m_elementList.add(element);
							this.notifyNodeChanged();
						}
					},
					addAll : function(otherList) {
						var i;
						var element;
						if ((otherList !== null) && (otherList !== this)) {
							for (i = 0; i < otherList.size(); i++) {
								element = otherList.get(i);
								if (this.m_hasChildOwnership) {
									(element).setParent(this);
								}
								this.m_elementList.add(element);
							}
							this.notifyNodeChanged();
						}
					},
					set : function(index, element) {
						var old = this.m_elementList.get(index);
						this.m_elementList.set(index, element);
						if (this.m_hasChildOwnership) {
							(element).setParent(this);
							(old).setParent(null);
						}
						this.notifyNodeChanged();
					},
					insert : function(index, element) {
						if (this.m_hasChildOwnership) {
							(element).setParent(this);
						}
						this.m_elementList.insert(index, element);
						this.notifyNodeChanged();
					},
					removeAt : function(index) {
						var old = this.m_elementList.get(index);
						this.m_elementList.removeAt(index);
						if (this.m_hasChildOwnership) {
							(old).setParent(null);
						}
						this.notifyNodeChanged();
						return old;
					},
					removeElement : function(element) {
						if (this.m_hasChildOwnership) {
							(element).setParent(null);
						}
						this.m_elementList.removeElement(element);
						this.notifyNodeChanged();
					},
					clear : function() {
						var len = this.size();
						var i;
						var object;
						var nodeContext;
						if (len > 0) {
							if (this.m_hasChildOwnership) {
								for (i = 0; i < len; i++) {
									object = this.get(i);
									nodeContext = object;
									nodeContext.setParent(null);
								}
							}
							this.m_elementList.clear();
							this.notifyNodeChanged();
						}
					},
					moveElement : function(fromIndex, toIndex) {
						if (fromIndex !== toIndex) {
							this.m_elementList.moveElement(fromIndex, toIndex);
							this.notifyNodeChanged();
						}
					},
					sortByComparator : function(comparator) {
						this.m_elementList.sortByComparator(comparator);
						this.notifyNodeChanged();
					},
					sortByDirection : function(sortDirection) {
						this.m_elementList.sortByDirection(sortDirection);
						this.notifyNodeChanged();
					},
					get : function(index) {
						return this.m_elementList.get(index);
					},
					getIndex : function(element) {
						return this.m_elementList.getIndex(element);
					},
					size : function() {
						return this.m_elementList.size();
					},
					isEmpty : function() {
						return this.m_elementList.isEmpty();
					},
					hasElements : function() {
						return this.m_elementList.hasElements();
					},
					getIterator : function() {
						return this.m_elementList.getIterator();
					},
					getValuesAsReadOnlyList : function() {
						return this;
					},
					contains : function(element) {
						return this.m_elementList.contains(element);
					},
					createListCopy : function() {
						return this.m_elementList.createListCopy();
					},
					sublist : function(beginIndex, endIndex) {
						return this.m_elementList.sublist(beginIndex, endIndex);
					},
					createArrayCopy : function() {
						return this.m_elementList.createArrayCopy();
					},
					isComponentNode : function() {
						return true;
					},
					getIndexedChildren : function() {
						return sap.firefly.XUniversalIterator.create(this);
					},
					configureProperties : function(properties) {
						properties.addProperty(sap.firefly.OlapProperty.NAME,
								sap.firefly.XValueType.STRING);
						properties.addProperty(sap.firefly.OlapProperty.TEXT,
								sap.firefly.XValueType.STRING);
					},
					getPropertyStringValue : function(type) {
						if (type === sap.firefly.OlapProperty.NAME) {
							return this.getName();
						} else {
							if (type === sap.firefly.OlapProperty.TEXT) {
								return this.getText();
							}
						}
						return null;
					},
					getComponentProperties : function() {
						return null;
					},
					setPropertyStringValue : function(type, value) {
					},
					getPropertyConstantValue : function(type) {
						return null;
					},
					setPropertyConstantValue : function(type, value) {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QCalculatedDimension",
				sap.firefly.QDimension,
				{
					$statics : {
						_createCalculatedDimension : function(context,
								parentNode, calculatedDimensionName) {
							var dim = new sap.firefly.QCalculatedDimension();
							dim.setName(calculatedDimensionName);
							dim
									.setupDimension(
											context,
											parentNode,
											sap.firefly.DimensionType.CALCULATED_DIMENSION);
							dim.setupCalculatedDimension();
							return dim;
						}
					},
					m_preQueryName : null,
					m_joinType : null,
					m_joinFields : null,
					m_fieldMappings : null,
					copyCalculatedDimension : function(other) {
						var size;
						var idx;
						var otherJoinFields;
						var otherFieldMapping;
						sap.firefly.QCalculatedDimension.$superclass.copyDimension
								.call(this, other);
						this.m_preQueryName = other.m_preQueryName;
						this.m_joinType = other.m_joinType;
						size = other.m_joinFields.size();
						for (idx = 0; idx < size; idx++) {
							otherJoinFields = other.m_joinFields.get(idx);
							this.m_joinFields.add(sap.firefly.XFieldNamePair
									.create(otherJoinFields
											.getLocaleFieldName(),
											otherJoinFields
													.getReferencedFieldName()));
						}
						size = other.m_fieldMappings.size();
						for (idx = 0; idx < size; idx++) {
							otherFieldMapping = other.m_fieldMappings.get(idx);
							this.m_fieldMappings.add(sap.firefly.XFieldNamePair
									.create(otherFieldMapping
											.getLocaleFieldName(),
											otherFieldMapping
													.getReferencedFieldName()));
						}
					},
					setupCalculatedDimension : function() {
						this.addSupportedAxis(sap.firefly.AxisType.ROWS);
						this.addSupportedAxis(sap.firefly.AxisType.COLUMNS);
						this.addSupportedAxis(sap.firefly.AxisType.FREE);
						this.addSupportedAxis(sap.firefly.AxisType.REPOSITORY);
						this.m_joinType = sap.firefly.JoinType.LEFT_OUTER;
						this.m_joinFields = sap.firefly.XList.create();
						this.m_fieldMappings = sap.firefly.XList.create();
					},
					supportsHierarchyMetadata : function() {
						return false;
					},
					supportsHierarchyLevelMetadata : function() {
						return false;
					},
					releaseObject : function() {
						this.m_preQueryName = null;
						this.m_joinType = null;
						this.m_joinFields = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_joinFields);
						this.m_fieldMappings = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_fieldMappings);
						sap.firefly.QCalculatedDimension.$superclass.releaseObject
								.call(this);
					},
					setPreQueryName : function(preQueryName) {
						this.m_preQueryName = preQueryName;
					},
					getPreQueryName : function() {
						return this.m_preQueryName;
					},
					setJoinType : function(joinType) {
						this.m_joinType = joinType;
					},
					getJoinType : function() {
						return this.m_joinType;
					},
					getJoinFields : function() {
						return this.m_joinFields;
					},
					addJoinFieldByString : function(localeFieldName,
							referencedFieldName) {
						this.addJoinField(sap.firefly.XFieldNamePair.create(
								localeFieldName, referencedFieldName));
					},
					addJoinField : function(joinField) {
						this.m_joinFields.add(joinField);
					},
					removeJoinFieldByIndex : function(index) {
						this.m_joinFields.removeAt(index);
					},
					getFieldMappings : function() {
						return this.m_fieldMappings;
					},
					addFieldMappingByString : function(localeFieldName,
							referencedFieldName) {
						this.addFieldMapping(sap.firefly.XFieldNamePair.create(
								localeFieldName, referencedFieldName));
					},
					addFieldMapping : function(fieldMapping) {
						var presentation;
						var newField;
						var parentComp;
						this.m_fieldMappings.add(fieldMapping);
						presentation = sap.firefly.PresentationType.UNDEFINED;
						if (this.m_fieldMappings.size() === 1) {
							presentation = sap.firefly.PresentationType.KEY;
						}
						newField = this.addNewField(
								sap.firefly.FieldUsageType.ALL, presentation,
								fieldMapping.getLocaleFieldName(), null);
						this.addDefaultResultSetField(newField);
						this.getResultSetFields().add(newField);
						parentComp = this.getParentComponent();
						if (parentComp !== null) {
							(parentComp).addField(newField, this);
						}
					},
					removeFieldMappingByIndex : function(index) {
						var newKeyFieldPair;
						this.removeFieldByName(this.m_fieldMappings.get(index)
								.getLocaleFieldName());
						this.m_fieldMappings.removeAt(index);
						if ((index === 0) && (this.m_fieldMappings.size() > 0)) {
							newKeyFieldPair = this.m_fieldMappings.get(0);
							this.removeFieldByName(newKeyFieldPair
									.getLocaleFieldName());
							this.m_fieldMappings.removeAt(0);
							this.addFieldMapping(newKeyFieldPair);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QResultStructureController",
				sap.firefly.QResultStructureControllerGeneric,
				{
					$statics : {
						_create : function(context, parentNode, location) {
							var lController = new sap.firefly.QResultStructureController();
							lController.setupController(context, parentNode,
									location);
							return lController;
						}
					},
					m_alignment : null,
					m_structure : null,
					m_visibility : null,
					setupController : function(context, parentNode, location) {
						sap.firefly.QResultStructureController.$superclass.setupGenericController
								.call(this, context, parentNode, location);
						this.m_alignment = null;
						this.m_visibility = sap.firefly.XSetOfNameObject
								.create();
					},
					copyResultStructureController : function(origin) {
						sap.firefly.QResultStructureController.$superclass.copyResultStructureControllerGeneric
								.call(this, origin);
						this.m_alignment = origin.m_alignment;
						if (origin.m_structure !== null) {
							this.m_structure = sap.firefly.QResultStructure
									.createResultStructure(this.getContext(),
											this);
							(this.m_structure)
									.copyResultStructure(origin.m_structure);
						}
						this.m_visibility = origin.m_visibility.clone();
					},
					releaseObject : function() {
						this.m_structure = sap.firefly.XObject
								.releaseIfNotNull(this.m_structure);
						this.m_visibility = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_visibility);
						this.m_alignment = null;
						sap.firefly.QResultStructureController.$superclass.releaseObject
								.call(this);
					},
					internalSetTotalsAlignmentDefault : function(copy) {
						if (copy) {
							this.m_alignment = this.getResultAlignment();
						} else {
							this.m_alignment = null;
						}
					},
					setResultAlignment : function(alignment) {
						this.setResultAlignmentBase(alignment, true);
					},
					setResultAlignmentBase : function(alignment,
							recurseChildren) {
						if (alignment === null) {
							throw sap.firefly.XException
									.createIllegalStateException("Result alignment must not be null");
						}
						if (!this.supportsResultAlignment()) {
							throw sap.firefly.XException
									.createIllegalStateException("Result alignment not allowed here");
						}
						this.restoreTotalsAlignment(
								sap.firefly.RestoreAction.CONDITIONAL_COPY,
								recurseChildren);
						if (this.m_alignment !== alignment) {
							this.m_alignment = alignment;
							if (this.m_alignment === sap.firefly.ResultAlignment.STRUCTURE) {
								this.getAdvancedResultStructure();
							}
							this.notifyNodeChanged();
						}
						return true;
					},
					getResultAlignment : function() {
						var parentController;
						if (this.isTotalsAlignmentOnDefault()) {
							parentController = this.getParentController();
							if (parentController !== null) {
								return parentController.getResultAlignment();
							}
						}
						if (!this.supportsResultAlignment()) {
							return null;
						}
						this.initAlignment();
						return this.m_alignment;
					},
					initAlignment : function() {
						var lDefaultAlignment;
						var ltSupportedResultAlignments;
						if (this.m_alignment === null) {
							lDefaultAlignment = sap.firefly.ResultAlignment.BOTTOM;
							ltSupportedResultAlignments = this
									.getSupportedResultAlignments();
							if (ltSupportedResultAlignments
									.contains(lDefaultAlignment)) {
								this.m_alignment = lDefaultAlignment;
							} else {
								if (ltSupportedResultAlignments.hasElements()) {
									this.m_alignment = ltSupportedResultAlignments
											.get(0);
								} else {
									this.m_alignment = sap.firefly.ResultAlignment.NONE;
								}
							}
						}
					},
					putOrChangeVisbility : function(alignment, element,
							visibility) {
						var key = sap.firefly.QVisibilityTriplet
								.getVisibilityKey(alignment, element);
						var triplet = this.m_visibility.getByKey(key);
						if (triplet === null) {
							this.m_visibility
									.put(sap.firefly.QVisibilityTriplet.create(
											alignment, element, visibility));
							this.notifyNodeChanged();
						} else {
							if (triplet.getVisibility() !== visibility) {
								triplet.setVisibility(visibility);
								this.notifyNodeChanged();
							}
						}
					},
					internalSetTotalsVisibilityDefault : function(copy) {
						this.queueEventing();
						if (copy) {
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL));
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS));
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS));
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL));
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS));
							this
									.putOrChangeVisbility(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
											this
													.getResultVisibilityByElementAndAlignment(
															sap.firefly.ResultAlignment.TOP,
															sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS));
						} else {
							this.m_visibility.clear();
						}
						this.resumeEventing();
					},
					setResultVisibilityByElement : function(element, visibility) {
						if (this.getResultAlignment() === sap.firefly.ResultAlignment.STRUCTURE) {
							this.setResultVisibilityByElementAndAlignment(
									sap.firefly.ResultAlignment.STRUCTURE,
									element, visibility);
						} else {
							this.setResultVisibilityByElementAndAlignment(
									sap.firefly.ResultAlignment.TOP, element,
									visibility);
							this.setResultVisibilityByElementAndAlignment(
									sap.firefly.ResultAlignment.BOTTOM,
									element, visibility);
						}
					},
					setResultVisibilityByElementAndAlignment : function(
							alignment, element, visibility) {
						var advancedResultStructure;
						var size;
						var i;
						var item;
						if (alignment === sap.firefly.ResultAlignment.STRUCTURE) {
							this.restoreTotalsVisibility(
									sap.firefly.RestoreAction.CONDITIONAL_COPY,
									true);
							advancedResultStructure = this
									.getAdvancedResultStructure();
							size = advancedResultStructure.size();
							for (i = 0; i < size; i++) {
								item = advancedResultStructure.get(i);
								if (element === item
										.getResultStructureElement()) {
									item.setResultVisibility(visibility);
								}
							}
						} else {
							if (alignment === sap.firefly.ResultAlignment.TOPBOTTOM) {
								this.setResultVisibilityByElementAndAlignment(
										sap.firefly.ResultAlignment.TOP,
										element, visibility);
								this.setResultVisibilityByElementAndAlignment(
										sap.firefly.ResultAlignment.BOTTOM,
										element, visibility);
							} else {
								this
										.restoreTotalsVisibility(
												sap.firefly.RestoreAction.CONDITIONAL_COPY,
												true);
								this.putOrChangeVisbility(alignment, element,
										visibility);
							}
						}
					},
					getResultVisibilityByElementAndAlignment : function(
							alignment, element) {
						var lParentController;
						var result;
						var topTriplet;
						var bottomTriplet;
						var key;
						var triplet;
						if (this.isTotalsVisibilityOnDefault()
								|| this.m_visibility.isEmpty()) {
							lParentController = this.getParentController();
							if (lParentController !== null) {
								return lParentController
										.getResultVisibilityByElement(element);
							}
						}
						if (!this.supportsResultVisibility()) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						if (this.m_visibility.isEmpty()) {
							return sap.firefly.ResultVisibility.HIDDEN;
						}
						result = null;
						if (alignment === sap.firefly.ResultAlignment.TOPBOTTOM) {
							topTriplet = this.m_visibility
									.getByKey(sap.firefly.QVisibilityTriplet
											.getVisibilityKey(
													sap.firefly.ResultAlignment.TOP,
													element));
							bottomTriplet = this.m_visibility
									.getByKey(sap.firefly.QVisibilityTriplet
											.getVisibilityKey(
													sap.firefly.ResultAlignment.BOTTOM,
													element));
							if ((topTriplet !== null)
									&& (bottomTriplet !== null)
									&& (topTriplet.getVisibility() === bottomTriplet
											.getVisibility())) {
								result = topTriplet.getVisibility();
							}
						} else {
							key = sap.firefly.QVisibilityTriplet
									.getVisibilityKey(alignment, element);
							triplet = this.m_visibility.getByKey(key);
							if (triplet !== null) {
								result = triplet.getVisibility();
							}
						}
						if (result === null) {
							return sap.firefly.ResultVisibility.HIDDEN;
						}
						return result;
					},
					getResultVisibilitySettings : function() {
						if (this.m_visibility.isEmpty()) {
							return null;
						}
						return sap.firefly.XIteratorWrapper
								.create(this.m_visibility.getIterator());
					},
					clearResultVisibilitySettings : function() {
						if (this.m_visibility.hasElements()) {
							this.m_visibility.clear();
							this.notifyNodeChanged();
						}
					},
					getTotalsStructure : function() {
						var resultAlignment = this.getResultAlignment();
						var list;
						var topVisibility;
						var bottomVisibility;
						if (resultAlignment === sap.firefly.ResultAlignment.STRUCTURE) {
							if (this.m_structure === null) {
								throw sap.firefly.XException
										.createIllegalStateException("Structure must be available at this point in time");
							}
							return this.m_structure;
						}
						list = sap.firefly.XList.create();
						if ((resultAlignment === sap.firefly.ResultAlignment.TOP)
								|| (resultAlignment === sap.firefly.ResultAlignment.TOPBOTTOM)) {
							topVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL,
													topVisibility));
							topVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
													topVisibility));
							topVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.TOP,
											sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
													topVisibility));
						}
						list
								.add(sap.firefly.QResultStructureItem
										.createResultStructureItem(
												this.getContext(),
												null,
												sap.firefly.ResultStructureElement.MEMBERS,
												sap.firefly.ResultVisibility.VISIBLE));
						if ((resultAlignment === sap.firefly.ResultAlignment.BOTTOM)
								|| (resultAlignment === sap.firefly.ResultAlignment.TOPBOTTOM)) {
							bottomVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL,
													bottomVisibility));
							bottomVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
													bottomVisibility));
							bottomVisibility = this
									.getResultVisibilityByElementAndAlignment(
											sap.firefly.ResultAlignment.BOTTOM,
											sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
							list
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													this.getContext(),
													null,
													sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
													bottomVisibility));
						}
						return list;
					},
					getAdvancedResultStructure : function() {
						var lResultAlignment;
						if (!this.supportsAdvancedResultStructure()) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						if (this.m_structure === null) {
							this.m_structure = sap.firefly.QResultStructure
									.createResultStructure(this.getContext(),
											this);
							lResultAlignment = this.getResultAlignment();
							this.m_structure
									.applyInitialDefaultResultStructure2(lResultAlignment);
						}
						return this.m_structure;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QComplexSorting",
				sap.firefly.QComplexAndDataCellSorting,
				{
					$statics : {
						create : function(context, parentNode, path) {
							var sorting = new sap.firefly.QComplexSorting();
							sorting.setupSorting(context, parentNode, path);
							return sorting;
						}
					},
					copyComplexSorting : function(origin) {
						sap.firefly.QComplexSorting.$superclass.copyComplexAndDataCellSorting
								.call(this, origin);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.COMPLEX_SORTING;
					},
					getSortingType : function() {
						return sap.firefly.SortType.COMPLEX;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDataCellSorting",
				sap.firefly.QComplexAndDataCellSorting,
				{
					$statics : {
						create : function(context, parentNode, path) {
							var sorting = new sap.firefly.QDataCellSorting();
							sorting.setupSorting(context, parentNode, path);
							return sorting;
						}
					},
					m_dimension : null,
					copyDataCellSorting : function(origin) {
						var queryModel;
						sap.firefly.QDataCellSorting.$superclass.copyComplexAndDataCellSorting
								.call(this, origin);
						queryModel = this.getQueryModel();
						if (origin.m_dimension !== null) {
							this.setDimension(queryModel
									.getDimensionByName(origin.getDimension()
											.getName()));
						}
					},
					releaseObject : function() {
						this.m_dimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_dimension);
						sap.firefly.QDataCellSorting.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DATA_CELL_SORTING;
					},
					getSortingType : function() {
						return sap.firefly.SortType.DATA_CELL_VALUE;
					},
					getDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_dimension);
					},
					setDimension : function(dimension) {
						this.m_dimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					supportsDimension : function() {
						return true;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QStructureMember",
				sap.firefly.QDimensionMember,
				{
					$statics : {
						createStructureMember : function(structure, context,
								memberType) {
							var member = new sap.firefly.QStructureMember();
							member.setupStructureMember(context, structure,
									memberType);
							return member;
						}
					},
					m_supportsResultSetSorting : false,
					m_aggregationType : null,
					m_postAggregationType : null,
					m_postAggregationDimensionNames : null,
					m_postAggregationIgnoreHierarchy : false,
					m_exceptionAggregationType : null,
					m_exceptionAggregationDimensionNames : null,
					m_resultCalculation : null,
					m_singleValueCalculation : null,
					m_numericScale : null,
					m_numericPrecision : null,
					m_numericShift : null,
					m_externalDimensionIgnoreList : null,
					m_isIgnoringAllExternalDimensions : false,
					m_isSelectionCandidate : false,
					m_presentationSignReversal : null,
					m_defaultSelectionDimensionNames : null,
					copyStructureMember : function(origin) {
						sap.firefly.QStructureMember.$superclass.copyDimensionMember
								.call(this, origin);
						this.m_supportsResultSetSorting = origin.m_supportsResultSetSorting;
						this.m_aggregationType = origin.m_aggregationType;
						this.m_postAggregationType = origin.m_postAggregationType;
						if (origin.m_postAggregationDimensionNames !== null) {
							this.m_postAggregationDimensionNames = origin.m_postAggregationDimensionNames
									.createListOfStringCopy();
						}
						this.m_postAggregationIgnoreHierarchy = origin.m_postAggregationIgnoreHierarchy;
						this.m_exceptionAggregationType = origin.m_exceptionAggregationType;
						if (origin.m_exceptionAggregationDimensionNames !== null) {
							this.m_exceptionAggregationDimensionNames = origin.m_exceptionAggregationDimensionNames
									.createListOfStringCopy();
						}
						this.m_resultCalculation = origin.m_resultCalculation;
						this.m_singleValueCalculation = origin.m_singleValueCalculation;
						if (origin.m_numericScale !== null) {
							this.setNumericScale(origin.m_numericScale
									.getIntegerValue());
						}
						if (origin.m_numericPrecision !== null) {
							this.setNumericPrecision(origin.m_numericPrecision
									.getIntegerValue());
						}
						if (origin.m_numericShift !== null) {
							this.setNumericShift(origin.m_numericShift
									.getIntegerValue());
						}
						if (origin.m_externalDimensionIgnoreList !== null) {
							this.m_externalDimensionIgnoreList = origin.m_externalDimensionIgnoreList
									.createListOfStringCopy();
						}
						this.m_isIgnoringAllExternalDimensions = origin.m_isIgnoringAllExternalDimensions;
						this.m_isSelectionCandidate = origin.m_isSelectionCandidate;
						if (origin.m_presentationSignReversal !== null) {
							this
									.setPresentationSignReversal(origin.m_presentationSignReversal
											.getBooleanValue());
						}
						if (origin.m_defaultSelectionDimensionNames !== null) {
							this.m_defaultSelectionDimensionNames = sap.firefly.XListOfString
									.create();
							this.m_defaultSelectionDimensionNames
									.addAll(origin.m_defaultSelectionDimensionNames);
						}
					},
					setupStructureMember : function(context, structure,
							memberType) {
						sap.firefly.QStructureMember.$superclass.setupDimensionMember
								.call(this, context, structure);
						this.m_supportsResultSetSorting = false;
						this.setType(memberType);
						this
								.setDimensionMemberNameValueException(sap.firefly.ValueException.NORMAL);
						this.m_aggregationType = null;
						this.m_isIgnoringAllExternalDimensions = false;
						this.m_isSelectionCandidate = true;
					},
					releaseObject : function() {
						this.m_aggregationType = null;
						this.m_postAggregationType = null;
						this.m_postAggregationDimensionNames = sap.firefly.XObject
								.releaseIfNotNull(this.m_postAggregationDimensionNames);
						this.m_exceptionAggregationType = null;
						this.m_resultCalculation = null;
						this.m_singleValueCalculation = null;
						this.m_exceptionAggregationDimensionNames = sap.firefly.XObject
								.releaseIfNotNull(this.m_exceptionAggregationDimensionNames);
						this.m_externalDimensionIgnoreList = sap.firefly.XObject
								.releaseIfNotNull(this.m_externalDimensionIgnoreList);
						this.m_presentationSignReversal = sap.firefly.XObject
								.releaseIfNotNull(this.m_presentationSignReversal);
						this.m_numericScale = sap.firefly.XObject
								.releaseIfNotNull(this.m_numericScale);
						this.m_numericPrecision = sap.firefly.XObject
								.releaseIfNotNull(this.m_numericPrecision);
						this.m_numericShift = sap.firefly.XObject
								.releaseIfNotNull(this.m_numericShift);
						this.m_defaultSelectionDimensionNames = sap.firefly.XObject
								.releaseIfNotNull(this.m_defaultSelectionDimensionNames);
						sap.firefly.QStructureMember.$superclass.releaseObject
								.call(this);
					},
					getExceptions : function() {
						var queryModel = this.getQueryModel();
						var exceptionManager;
						if (queryModel !== null) {
							exceptionManager = queryModel.getExceptionManager();
							if (exceptionManager !== null) {
								return exceptionManager
										.getAllExceptionsOfMeasure(this);
							}
						}
						return null;
					},
					getQueryDataCells : function() {
						var allDataCells = this.getDimension().getQueryModel()
								.getQueryDataCells();
						var myList = sap.firefly.XListOfNameObject.create();
						var size = allDataCells.size();
						var k;
						var dataCell;
						for (k = 0; k < size; k++) {
							dataCell = allDataCells.get(k);
							if (dataCell.hasMemberReference(this)) {
								myList.add(dataCell);
							}
						}
						return myList;
					},
					assertStandardAggregationType : function(aggregationType) {
						if ((aggregationType !== null)
								&& this
										.getQueryModel()
										.supportsExceptionAggregationDimsFormulas()) {
							if ((aggregationType !== sap.firefly.AggregationType.SUM)
									&& (aggregationType !== sap.firefly.AggregationType.MIN)
									&& (aggregationType !== sap.firefly.AggregationType.MAX)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL_ZERO)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"The aggregation type '",
														aggregationType
																.getName(),
														"' is not valid as standard aggregation. Use it as Exception Aggregation!"));
							}
						}
					},
					assertAggregationIsSupported : function(aggregationType) {
						if ((aggregationType === sap.firefly.AggregationType.COUNT_NULL)
								|| (aggregationType === sap.firefly.AggregationType.COUNT_NULL_ZERO)
								|| (aggregationType === sap.firefly.AggregationType.AVERAGE_NULL)
								|| (aggregationType === sap.firefly.AggregationType.AVERAGE_NULL_ZERO)) {
							if (this.getOlapComponentType() !== sap.firefly.MemberType.FORMULA) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"The aggregation type '",
														aggregationType
																.getName(),
														"' is only applicable for formula measures!"));
							}
						}
					},
					setAggregationType : function(aggregationType) {
						if (this.m_aggregationType === aggregationType) {
							return;
						}
						this.assertStandardAggregationType(aggregationType);
						this.assertAggregationIsSupported(aggregationType);
						this.m_aggregationType = aggregationType;
						this.notifyNodeChanged();
					},
					getAggregationType : function() {
						return this.m_aggregationType;
					},
					getNumericShift : function() {
						var dataCells;
						var prevShiftFactor;
						var c;
						var dataCell;
						var currShiftFactor;
						if (this.getQueryModel().supportsDataCells()
								&& this.getQueryModel()
										.supportsUnifiedDataCells()) {
							dataCells = this.getQueryDataCells();
							if (dataCells.hasElements()) {
								prevShiftFactor = dataCells.get(0)
										.getScalingFactor();
								for (c = 0; c < dataCells.size(); c++) {
									dataCell = dataCells.get(c);
									currShiftFactor = dataCell
											.getScalingFactor();
									if (prevShiftFactor !== currShiftFactor) {
										return null;
									}
								}
								prevShiftFactor = -1 * prevShiftFactor;
								return sap.firefly.XIntegerValue
										.create(prevShiftFactor);
							}
							return null;
						}
						return this.m_numericShift;
					},
					setNumericShift : function(shift) {
						var dataCells;
						var c;
						var dataCell;
						if (this.getQueryModel().supportsDataCells()
								&& this.getQueryModel()
										.supportsUnifiedDataCells()) {
							dataCells = this.getQueryDataCells();
							if (dataCells.hasElements()) {
								if (shift > 0) {
									throw sap.firefly.XException
											.createIllegalArgumentException("positive shift not supported by backend");
								}
								for (c = 0; c < dataCells.size(); c++) {
									dataCell = dataCells.get(c);
									dataCell.setScalingFactor(-shift);
								}
							}
						} else {
							this.m_numericShift = sap.firefly.XIntegerValue
									.create(shift);
							this.notifyNodeChanged();
						}
					},
					getNumericScale : function() {
						var dataCells;
						var prevScaleFactor;
						var c;
						var dataCell;
						var currScaleFactor;
						if (this.getQueryModel().supportsDataCells()
								&& this.getQueryModel()
										.supportsUnifiedDataCells()) {
							dataCells = this.getQueryDataCells();
							if (dataCells.hasElements()) {
								prevScaleFactor = dataCells.get(0)
										.getDecimalPlaces();
								for (c = 0; c < dataCells.size(); c++) {
									dataCell = dataCells.get(c);
									currScaleFactor = dataCell
											.getDecimalPlaces();
									if (prevScaleFactor !== currScaleFactor) {
										return null;
									}
								}
								return sap.firefly.XIntegerValue
										.create(prevScaleFactor);
							}
							return null;
						}
						return this.m_numericScale;
					},
					getNumericPrecision : function() {
						return this.m_numericPrecision;
					},
					setNumericScale : function(scale) {
						var dataCells;
						var c;
						var dataCell;
						if (this.getQueryModel().supportsDataCells()
								&& this.getQueryModel()
										.supportsUnifiedDataCells()) {
							dataCells = this.getQueryDataCells();
							if (dataCells.hasElements()) {
								for (c = 0; c < dataCells.size(); c++) {
									dataCell = dataCells.get(c);
									dataCell.setDecimalPlaces(scale);
								}
							}
						} else {
							this.m_numericScale = sap.firefly.XIntegerValue
									.create(scale);
							this.notifyNodeChanged();
						}
					},
					setNumericPrecision : function(precision) {
						this.m_numericPrecision = sap.firefly.XIntegerValue
								.create(precision);
						this.notifyNodeChanged();
					},
					getIgnoredExternalDimensions : function() {
						if (this.m_externalDimensionIgnoreList === null) {
							return sap.firefly.XListOfString.create();
						}
						return this.m_externalDimensionIgnoreList;
					},
					removeExternalDimensionToIgnore : function(
							externalDimensionName) {
						if (this.m_externalDimensionIgnoreList !== null) {
							this.m_externalDimensionIgnoreList
									.removeElement(externalDimensionName);
							this.notifyNodeChanged();
						}
					},
					addExternalDimensionToIgnore : function(
							externalDimensionName) {
						if (sap.firefly.XString.isEqual(externalDimensionName,
								"All")) {
							if (this.m_externalDimensionIgnoreList !== null) {
								this.m_externalDimensionIgnoreList.clear();
							}
							this.setIgnoreAllExternalDimensions(true);
						} else {
							if (this.m_externalDimensionIgnoreList === null) {
								this.m_externalDimensionIgnoreList = sap.firefly.XListOfString
										.create();
							}
							if (this.m_externalDimensionIgnoreList
									.contains(externalDimensionName) === false) {
								this.m_externalDimensionIgnoreList
										.add(externalDimensionName);
							}
							this.setIgnoreAllExternalDimensions(false);
						}
					},
					clearIgnoredExternalDimensions : function() {
						if (this.m_externalDimensionIgnoreList !== null) {
							this.m_externalDimensionIgnoreList.clear();
						}
						this.setIgnoreAllExternalDimensions(false);
					},
					setIgnoreAllExternalDimensions : function(
							isIgnoringAllExternalDimensions) {
						this.m_isIgnoringAllExternalDimensions = isIgnoringAllExternalDimensions;
						this.notifyNodeChanged();
					},
					isIgnoringAllExternalDimensions : function() {
						return this.m_isIgnoringAllExternalDimensions;
					},
					isSelectionCandidate : function() {
						return this.m_isSelectionCandidate;
					},
					setIsSelectionCandidate : function(isSelectionCandidate) {
						this.m_isSelectionCandidate = isSelectionCandidate;
					},
					setPostAggregationType : function(postAggregationType) {
						this.assertAggregationIsSupported(postAggregationType);
						this.m_postAggregationType = postAggregationType;
						this.notifyNodeChanged();
					},
					addPostAggregationDimension : function(dimension) {
						this.addPostAggregationDimensionName(dimension
								.getName());
					},
					addPostAggregationDimensionName : function(dimensionName) {
						if (this.m_postAggregationDimensionNames === null) {
							this.m_postAggregationDimensionNames = sap.firefly.XListOfString
									.create();
						}
						if (this.m_postAggregationDimensionNames
								.contains(dimensionName) === false) {
							this.m_postAggregationDimensionNames
									.add(dimensionName);
							this.notifyNodeChanged();
						}
					},
					getPostAggregationType : function() {
						return this.m_postAggregationType;
					},
					getPostAggregationDimensions : function() {
						if (this.m_postAggregationDimensionNames === null) {
							return sap.firefly.XListOfString.create();
						}
						return this.m_postAggregationDimensionNames;
					},
					removePostAggregationDimensions : function(
							postAggregationDimensionName) {
						if (this.m_postAggregationDimensionNames !== null) {
							this.m_postAggregationDimensionNames
									.removeElement(postAggregationDimensionName);
							this.notifyNodeChanged();
						}
					},
					clearPostAggregationDimensions : function() {
						if (this.m_postAggregationDimensionNames !== null) {
							this.m_postAggregationDimensionNames.clear();
							this.notifyNodeChanged();
						}
					},
					supportsCalculatedBeforeAggregation : function() {
						var dimension = this.getDimension();
						if (dimension === null) {
							return false;
						}
						return dimension.supportsCalculatedBeforeAggregation();
					},
					assertExceptionAggregationSupported : function() {
						if (this.getQueryModel()
								.supportsExceptionAggregationDimsFormulas() === false) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					setExceptionAggregationType : function(aggregationType) {
						this.assertExceptionAggregationSupported();
						this.assertAggregationIsSupported(aggregationType);
						if ((this.getQueryModel()
								.supportsAverageCountNullZero() === false)
								&& ((aggregationType === sap.firefly.AggregationType.AVERAGE_NULL)
										|| (aggregationType === sap.firefly.AggregationType.AVERAGE_NULL_ZERO)
										|| (aggregationType === sap.firefly.AggregationType.COUNT_NULL) || (aggregationType === sap.firefly.AggregationType.COUNT_NULL_ZERO))) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3(
													"The backend does not support '",
													aggregationType.getName(),
													"' as exception aggregation!"));
						}
						this.m_exceptionAggregationType = aggregationType;
						this.notifyNodeChanged();
					},
					addExceptionAggregationDimensionName : function(
							dimensionName) {
						this.assertExceptionAggregationSupported();
						if (this.m_exceptionAggregationDimensionNames === null) {
							this.m_exceptionAggregationDimensionNames = sap.firefly.XListOfString
									.create();
						}
						if (this.m_exceptionAggregationDimensionNames
								.contains(dimensionName) === false) {
							this.m_exceptionAggregationDimensionNames
									.add(dimensionName);
							this.notifyNodeChanged();
						}
					},
					addExceptionAggregationDimension : function(dimension) {
						this.assertExceptionAggregationSupported();
						this.addExceptionAggregationDimensionName(dimension
								.getName());
					},
					clearExceptionAggregationDimensions : function() {
						this.assertExceptionAggregationSupported();
						if (this.m_exceptionAggregationDimensionNames !== null) {
							this.m_exceptionAggregationDimensionNames.clear();
							this.notifyNodeChanged();
						}
					},
					getExceptionAggregationDimensions : function() {
						if (this.m_exceptionAggregationDimensionNames === null) {
							return sap.firefly.XListOfString.create();
						}
						return this.m_exceptionAggregationDimensionNames;
					},
					getExceptionAggregationType : function() {
						this.assertExceptionAggregationSupported();
						return this.m_exceptionAggregationType;
					},
					removeExceptionAggregationDimension : function(
							exceptionAggregationDimensionName) {
						this.assertExceptionAggregationSupported();
						if (this.m_exceptionAggregationDimensionNames !== null) {
							this.m_exceptionAggregationDimensionNames
									.removeElement(exceptionAggregationDimensionName);
							this.notifyNodeChanged();
						}
					},
					setPostAggregationIgnoreHierarchy : function(
							ignoreHierarchy) {
						this.m_postAggregationIgnoreHierarchy = ignoreHierarchy;
						this.notifyNodeChanged();
					},
					isPostAggregationIgnoringHierarchy : function() {
						return this.m_postAggregationIgnoreHierarchy;
					},
					getPresentationSignReversal : function() {
						return this.m_presentationSignReversal;
					},
					setPresentationSignReversal : function(isSignReversed) {
						if (this.getDimension().getDimensionType() !== sap.firefly.DimensionType.ACCOUNT) {
							throw sap.firefly.XException
									.createRuntimeException("PresentationSignReversal is only supported for Account dimensions!");
						}
						this.m_presentationSignReversal = sap.firefly.XBooleanValue
								.create(isSignReversed);
						this.notifyNodeChanged();
					},
					initializeFieldValues : function() {
						var dimension = this.getDimension();
						var newMemberKeyField = dimension.getKeyField();
						var newMemberTextField;
						this.createAndAddFieldValueWithString(
								newMemberKeyField, this.getName());
						newMemberTextField = dimension.getTextField();
						if (newMemberTextField !== null) {
							this.createAndAddFieldValueWithString(
									newMemberTextField, this.getText());
						}
					},
					getResultCalculation : function() {
						return this.m_resultCalculation;
					},
					setResultCalculation : function(resultCalculation) {
						this.m_resultCalculation = resultCalculation;
						this.notifyNodeChanged();
					},
					getSingleValueCalculation : function() {
						return this.m_singleValueCalculation;
					},
					setSingleValueCalculation : function(singleValueCalculation) {
						this.m_singleValueCalculation = singleValueCalculation;
						this.notifyNodeChanged();
					},
					getDefaultSelectedDimensionNames : function() {
						return this.m_defaultSelectionDimensionNames;
					},
					addDefaultSelectionDimensionByName : function(dimensionName) {
						if (this.m_defaultSelectionDimensionNames === null) {
							this.m_defaultSelectionDimensionNames = sap.firefly.XListOfString
									.create();
						}
						this.m_defaultSelectionDimensionNames
								.add(dimensionName);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaCommand",
				sap.firefly.PlanningContextCommand,
				{
					getDataArea : function() {
						return this.getPlanningContext();
					},
					serializeDataAreaCommandToStructure : function() {
						var planningContextCommandType = this
								.getPlanningContextCommandType();
						var objectName = planningContextCommandType.toString();
						var planningContextDataArea;
						var dataArea;
						var command;
						var dataSource;
						if (planningContextCommandType === sap.firefly.PlanningContextCommandType.PUBLISH) {
							objectName = "SAVE";
						}
						planningContextDataArea = this.getDataArea();
						dataArea = planningContextDataArea.getDataArea();
						if (dataArea === null) {
							dataArea = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
						}
						command = sap.firefly.PrStructure.create();
						dataSource = command
								.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_OBJECT_NAME,
								objectName);
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_TYPE,
								sap.firefly.InAConstants.VA_TYPE_DATA_AREA_CMD);
						dataSource
								.setStringByName(
										sap.firefly.InAConstants.QY_DATA_AREA,
										dataArea);
						return command;
					},
					createCommandStructure : function() {
						var requestStructure = sap.firefly.PrStructure.create();
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this.getDataArea());
						var dataAreaStructure;
						var planningStructure;
						var commandsList;
						if (dataAreaState.isSubmitted() === false) {
							dataAreaStructure = dataAreaState.serializeToJson();
							if (dataAreaStructure !== null) {
								requestStructure.setNewListByName(
										sap.firefly.InAConstants.QY_DATA_AREAS)
										.add(dataAreaStructure);
							}
						}
						planningStructure = requestStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						(this.getPlanningService())
								.getInaCapabilities()
								.exportActiveMainCapabilities(planningStructure);
						commandsList = planningStructure
								.setNewListByName(sap.firefly.InAConstants.QY_COMMANDS);
						commandsList.add(this
								.serializeDataAreaCommandToStructure());
						return requestStructure;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaCommandResult();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaCommandResult",
				sap.firefly.PlanningContextCommandResult,
				{
					$statics : {
						EXECUTED : "EXECUTED"
					},
					getDataAreaCommand : function() {
						return this.getPlanningCommand();
					},
					isExecuted : function() {
						return this
								.getPropertyBoolean(sap.firefly.DataAreaCommandResult.EXECUTED);
					},
					setExecuted : function(executed) {
						this.setPropertyBoolean(
								sap.firefly.DataAreaCommandResult.EXECUTED,
								executed);
					},
					processResponseStructureCommand : function(
							responseStructure, messageManager, hasErrors) {
						var commandResultsList;
						var commandResultStructure;
						var executed;
						if (hasErrors) {
							if (this.useStrictErrorHandling()) {
								return;
							}
						}
						commandResultsList = sap.firefly.PrUtils
								.getListProperty(
										responseStructure,
										sap.firefly.InAConstants.QY_COMMAND_RESULTS);
						if ((commandResultsList === null)
								|| (commandResultsList.size() !== 1)) {
							return;
						}
						commandResultStructure = sap.firefly.PrUtils
								.getStructureElement(commandResultsList, 0);
						executed = sap.firefly.PrUtils.getBooleanProperty(
								commandResultStructure,
								sap.firefly.InAConstants.QY_EXECUTED)
								.getBooleanValue();
						this.setExecuted(executed);
					}
				});
$Firefly.createClass("sap.firefly.PlanningFunctionIdentifier",
		sap.firefly.PlanningOperationIdentifier, {
			getPlanningFunctionName : function() {
				return this.getPlanningOperationName();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningOperation",
				sap.firefly.PlanningCommandWithId,
				{
					$statics : {
						PLANNING_OPERATION_METADATA : "PLANNING_OPERATION_METADATA",
						DIMENSIONS : "DIMENSIONS"
					},
					getDataArea : function() {
						return this.getPlanningContext();
					},
					getPlanningOperationIdentifier : function() {
						return this.getCommandIdentifier();
					},
					getPlanningOperationMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningOperation.PLANNING_OPERATION_METADATA);
					},
					setPlanningOperationMetadata : function(
							planningOperationMetadata) {
						this
								.setPropertyObject(
										sap.firefly.PlanningOperation.PLANNING_OPERATION_METADATA,
										planningOperationMetadata);
					},
					initializePlanningOperation : function() {
						var metadata = this.getPlanningOperationMetadata();
						this.initializeSelector(metadata.getDimensions());
						this.initializeVariables(metadata.getVariables());
					},
					m_planningCommandModelComponent : null,
					getPlanningCommandModelComponent : function() {
						if (this.m_planningCommandModelComponent === null) {
							this.m_planningCommandModelComponent = sap.firefly.PlanningCommandModelComponent
									.create(this.getContext(), this);
						}
						return this.m_planningCommandModelComponent;
					},
					initializeSelector : function(dimensions) {
						var dimensionList;
						var importMetadata;
						var i;
						var dimensionStructure;
						var dimension;
						var modelComponent;
						var selector;
						if (dimensions === null) {
							return;
						}
						dimensionList = sap.firefly.QDimensionList
								.createDimensionList(this, null, false, null);
						this.setPropertyObject(
								sap.firefly.PlanningOperation.DIMENSIONS,
								dimensionList);
						importMetadata = sap.firefly.QInAImportFactory
								.createForMetadata(this.getApplication(), (this
										.getPlanningService())
										.getInaCapabilities()
										.getActiveMainCapabilities());
						for (i = 0; i < dimensions.size(); i++) {
							dimensionStructure = sap.firefly.PrUtils
									.getStructureElement(dimensions, i);
							dimension = importMetadata.importDimension(
									dimensionStructure, this);
							dimensionList.add(dimension);
						}
						modelComponent = this
								.getPlanningCommandModelComponent();
						selector = sap.firefly.QFilter
								.createWithModelComponent(this.getContext(),
										modelComponent, dimensionList);
						this.setSelector(selector);
					},
					initializeVariables : function(inaVariableList) {
						var provider;
						this.clearVariables();
						this.setVariableProcessorProvider(null);
						if (!sap.firefly.PrUtils.isListEmpty(inaVariableList)) {
							provider = sap.firefly.PlanningCommandWithId.s_variableProcessorProviderFactory
									.createProvider(this
											.getVariableRequestorBase(), this);
							provider.importVariables(inaVariableList, this);
							this.setVariableProcessorProvider(provider);
						}
					},
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						this.fillRequest(request, false);
						return request;
					},
					fillRequest : function(request, withVariables) {
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this.getDataArea());
						var dataAreaStructure;
						var dataArea;
						var planning;
						var command;
						var dataSource;
						var dataAreaName;
						var metadata;
						var identifier;
						var selection;
						var provider;
						if (dataAreaState.isSubmitted() === false) {
							dataAreaStructure = dataAreaState.serializeToJson();
							if (dataAreaStructure !== null) {
								request.setNewListByName(
										sap.firefly.InAConstants.QY_DATA_AREAS)
										.add(dataAreaStructure);
							}
						}
						dataArea = this.getDataArea();
						planning = request
								.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						(this.getPlanningService()).getInaCapabilities()
								.exportActiveMainCapabilities(planning);
						command = planning
								.setNewStructureByName(sap.firefly.InAConstants.QY_COMMAND);
						dataSource = command
								.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataAreaName = dataArea.getDataArea();
						if (dataAreaName === null) {
							dataAreaName = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
						}
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_DATA_AREA,
								dataAreaName);
						metadata = this.getPlanningOperationMetadata();
						identifier = metadata.getPlanningOperationIdentifier();
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_OBJECT_NAME,
								identifier.getPlanningOperationName());
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_TYPE, this
										.getPlanningType());
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_INSTANCE_ID,
								metadata.getInstanceId());
						selection = this.getSelectionJson();
						if (selection !== null) {
							command.setElementByName(
									sap.firefly.InAConstants.QY_FILTER,
									selection);
						}
						if (withVariables) {
							provider = this.getVariableProcessorProvider();
							provider.exportVariables(this, command);
						}
					},
					getDataSource : function() {
						var planningOperationIdentifier = this
								.getPlanningOperationMetadata()
								.getPlanningOperationIdentifier();
						var dataSource = sap.firefly.QFactory2.newDataSource();
						dataSource.setObjectName(planningOperationIdentifier
								.getPlanningOperationName());
						dataSource.setSystemName((this.getPlanningService())
								.getConnection().getSystemDescription()
								.getName());
						return dataSource;
					},
					getPlanningType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getSelectionJson : function() {
						return null;
					},
					fillVariableRequestorDataRequestContext : function(
							structure, withVariables, processingDirective,
							variables) {
						var inaContext;
						var inaProcessingDirective;
						var inaDefinition;
						this.fillRequest(structure, withVariables);
						inaContext = structure
								.getStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						if (processingDirective !== null) {
							inaProcessingDirective = inaContext
									.setNewStructureByName(sap.firefly.InAConstants.QY_PROCESSING_DIRECTIVES);
							inaProcessingDirective
									.setStringByName(
											sap.firefly.InAConstants.QY_PROCESSING_STEP,
											processingDirective);
						}
						inaDefinition = inaContext
								.getStructureByName(sap.firefly.InAConstants.QY_COMMAND);
						return inaDefinition;
					},
					getInputEnabledVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if (variable.isInputEnabled()) {
							return variable;
						}
						return null;
					},
					getHierarchyNodeVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
							return variable;
						}
						return null;
					},
					getHierarchyNameVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
							return variable;
						}
						return null;
					},
					getVariable : function(name) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDimensionAccessor : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningOperation.DIMENSIONS);
					},
					getContext : function() {
						return this;
					},
					getVariableContainerBase : function() {
						return this;
					},
					getVariableContainer : function() {
						return this;
					},
					getFieldAccessorSingle : function() {
						return this;
					}
				});
$Firefly.createClass("sap.firefly.PlanningOperationResult",
		sap.firefly.PlanningCommandWithIdResult, {
			getPlanningOperation : function() {
				return this.getPlanningCommand();
			}
		});
$Firefly.createClass("sap.firefly.PlanningSequenceIdentifier",
		sap.firefly.PlanningOperationIdentifier, {
			getPlanningSequenceName : function() {
				return this.getPlanningOperationName();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequest",
				sap.firefly.PlanningRequest,
				{
					$statics : {
						REQUEST_TYPE : "REQUEST_TYPE"
					},
					getDataArea : function() {
						return this.getPlanningContext();
					},
					getRequestType : function() {
						return this
								.getPropertyObject(sap.firefly.DataAreaRequest.REQUEST_TYPE);
					},
					setRequestType : function(requestType) {
						this.setPropertyObject(
								sap.firefly.DataAreaRequest.REQUEST_TYPE,
								requestType);
					}
				});
$Firefly.createClass("sap.firefly.DataAreaResponse",
		sap.firefly.PlanningResponse, {
			getDataAreaRequest : function() {
				return this.getPlanningRequest();
			},
			initResponseStructureCommand : function(responseStructure,
					messageManager) {
			},
			processResponseStructureCommand : function(responseStructure,
					messageManager, hasErrors) {
				if (hasErrors) {
					if (this.useStrictErrorHandling()) {
						return;
					}
				}
				if (!this.processResponseStructureInternal(responseStructure,
						messageManager)) {
					messageManager.addErrorExt(sap.firefly.OriginLayer.DRIVER,
							sap.firefly.ErrorCodes.PARSER_ERROR,
							"error in processing response structure",
							responseStructure);
				}
			},
			processResponseStructureInternal : function(responseStructure,
					messageManager) {
				throw sap.firefly.XException
						.createUnsupportedOperationException();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCommand",
				sap.firefly.PlanningContextCommand,
				{
					getPlanningModel : function() {
						return this.getPlanningContext();
					},
					createCommandStructure : function() {
						var model = this.getPlanningModel();
						var request = sap.firefly.PrStructure.create();
						var commandList = sap.firefly.PlanningModelCommandHelper
								.createCommandsList(request);
						this.fillCommandList(commandList, this
								.getPlanningContextCommandType());
						commandList
								.add(sap.firefly.PlanningModelCommandHelper
										.createModelCommand(
												model,
												sap.firefly.InAConstants.LC_GET_VERSIONS));
						return request;
					},
					fillCommandList : function(commandList, commandType) {
						if (commandType === sap.firefly.PlanningContextCommandType.RESET) {
							this.addCommandPerActiveVersionToList(commandList,
									sap.firefly.InAConstants.LC_CLOSE);
							this.addCommandPerActiveVersionToList(commandList,
									sap.firefly.InAConstants.LC_INIT);
							return;
						}
						if (commandType === sap.firefly.PlanningContextCommandType.SAVE) {
							this.addCommandPerActiveVersionToList(commandList,
									sap.firefly.InAConstants.LC_SAVE);
							return;
						}
						if (commandType === sap.firefly.PlanningContextCommandType.BACKUP) {
							this.addCommandPerActiveVersionToList(commandList,
									sap.firefly.InAConstants.LC_BACKUP);
							return;
						}
						if (commandType === sap.firefly.PlanningContextCommandType.CLOSE) {
							this.addCommandPerActiveVersionToList(commandList,
									sap.firefly.InAConstants.LC_CLOSE);
							return;
						}
						if ((commandType === sap.firefly.PlanningContextCommandType.REFRESH)
								|| (commandType === sap.firefly.PlanningContextCommandType.HARD_DELETE)) {
							if (commandType === sap.firefly.PlanningContextCommandType.HARD_DELETE) {
								commandList
										.add(sap.firefly.PlanningModelCommandHelper
												.createModelCommand(
														this.getPlanningModel(),
														sap.firefly.InAConstants.LC_DELETE_ALL_VERSIONS));
							}
							this.addRefreshCommandsToList(commandList);
							return;
						}
						if (commandList.isEmpty()) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal command type");
						}
					},
					addCommandPerActiveVersionToList : function(commandList,
							commandName) {
						var versions = this.getPlanningModel()
								.getActiveVersions();
						var i;
						var version;
						var command;
						for (i = 0; i < versions.size(); i++) {
							version = versions.get(i);
							command = sap.firefly.PlanningModelCommandHelper
									.createVersionCommand(version, commandName);
							this.addParametersToJson(command);
							commandList.add(command);
						}
					},
					addRefreshCommandsToList : function(commandList) {
						var model = this.getPlanningModel();
						if (!model.isModelInitialized()) {
							commandList
									.add(sap.firefly.PlanningModelCommandHelper
											.createModelCommand(
													model,
													sap.firefly.InAConstants.LC_GET_QUERY_SOURCES));
							commandList
									.add(sap.firefly.PlanningModelCommandHelper
											.createModelCommand(
													model,
													sap.firefly.InAConstants.LC_GET_ACTIONS));
							if (model.supportsVersionParameters()) {
								commandList
										.add(sap.firefly.PlanningModelCommandHelper
												.createModelCommand(
														model,
														sap.firefly.InAConstants.LC_GET_PARAMETERS));
							}
							if (model.supportsFastActionParameters()) {
								commandList
										.add(sap.firefly.PlanningModelCommandHelper
												.createModelCommand(
														model,
														sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS));
							}
						}
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelCommandResult();
					},
					addParametersToJson : function(parametersStructure) {
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCommandResult",
				sap.firefly.PlanningContextCommandResult,
				{
					$statics : {
						RETURN_CODE : "RETURN_CODE"
					},
					getPlanningModelCommand : function() {
						return this.getPlanningCommand();
					},
					getReturnCode : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelCommandResult.RETURN_CODE);
					},
					setReturnCode : function(returnCode) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelCommandResult.RETURN_CODE,
										returnCode);
					},
					processResponseStructureCommand : function(
							responseStructure, messageManager, hasErrors) {
						var returnCode = sap.firefly.PlanningModelCommandHelper
								.getResponsesReturnCodeStrict(
										responseStructure, messageManager,
										9999, this.useStrictErrorHandling());
						this.setReturnCode(returnCode);
						if (this.useStrictErrorHandling()) {
							if ((hasErrors) || (returnCode !== 0)) {
								return;
							}
						}
						if (returnCode !== 0) {
							return;
						}
						if (this
								.processResponseStructureInternal(responseStructure) === false) {
							messageManager.addErrorExt(
									sap.firefly.OriginLayer.DRIVER,
									sap.firefly.ErrorCodes.PARSER_ERROR,
									"error in processing response structure",
									responseStructure);
						}
					},
					processResponseStructureInternal : function(
							responseStructure) {
						var command = this.getPlanningModelCommand();
						var commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList((command).serializeToJson());
						var responses;
						var commandType;
						var model;
						var versions;
						if (commands === null) {
							return false;
						}
						responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						if (responses === null) {
							return false;
						}
						commandType = this.getPlanningModelCommand()
								.getPlanningContextCommandType();
						if ((commandType !== sap.firefly.PlanningContextCommandType.REFRESH)
								&& (commandType !== sap.firefly.PlanningContextCommandType.RESET)
								&& (commandType !== sap.firefly.PlanningContextCommandType.SAVE)
								&& (commandType !== sap.firefly.PlanningContextCommandType.BACKUP)
								&& (commandType !== sap.firefly.PlanningContextCommandType.CLOSE)
								&& (commandType !== sap.firefly.PlanningContextCommandType.HARD_DELETE)) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal command type");
						}
						model = command.getPlanningModel();
						if ((commandType === sap.firefly.PlanningContextCommandType.REFRESH)
								|| (commandType === sap.firefly.PlanningContextCommandType.HARD_DELETE)) {
							if (this.refreshResponseStructrue(commands,
									responses, model) === false) {
								if (model.isModelInitialized() === false) {
									return false;
								}
							} else {
								model.setModelInitialized();
							}
						}
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetVersions(commands,
										responses, model) === false) {
							return false;
						}
						if (commandType === sap.firefly.PlanningContextCommandType.HARD_DELETE) {
							versions = model.getVersions();
							if (versions.size() > 0) {
								return false;
							}
						}
						return true;
					},
					refreshResponseStructrue : function(commands, responses,
							model) {
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetQuerySources(commands,
										responses, model) === false) {
							return false;
						}
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetActions(commands, responses,
										model) === false) {
							return false;
						}
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetParametersForModelTemplate(
										commands, responses, model) === false) {
							return false;
						}
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetActionParameters(commands,
										responses, model) === false) {
							return false;
						}
						return true;
					},
					checkErrorState : function() {
						var returnCode = this.getReturnCode();
						var planningModel;
						if (returnCode === 3042) {
							planningModel = this.getPlanningModelCommand()
									.getPlanningModel();
							if (planningModel.supportsStrictErrorHandling()) {
								planningModel.resetPlanningModel();
							}
							return;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningAction",
				sap.firefly.PlanningCommandWithId,
				{
					$statics : {
						PARAMETER_METADATA : "PARAMETER_METADATA",
						ACTION_PARAMETERS : "ACTION_PARAMETERS",
						TARGET_VERSION_ID : "TARGET_VERSION_ID",
						SEQUENCE_ID : "SEQUENCE_ID",
						DESCRIPTION : "DESCRIPTION"
					},
					getPlanningModel : function() {
						return this.getPlanningContext();
					},
					getActionIdentifier : function() {
						return this.getCommandIdentifier();
					},
					getActionForQueryIdentifier : function() {
						return this.getCommandIdentifier();
					},
					getActionParameterMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningAction.PARAMETER_METADATA);
					},
					setActionParameterMetadata : function(parameterMetadata) {
						this.setPropertyObject(
								sap.firefly.PlanningAction.PARAMETER_METADATA,
								parameterMetadata);
						if ((parameterMetadata !== null)
								&& (!sap.firefly.PrUtils
										.isListEmpty(parameterMetadata
												.getParameters()))) {
							this.initializeVariables(parameterMetadata
									.getParameters());
						}
					},
					initializeVariables : function(variables) {
						var inaVariablesList = sap.firefly.PrList.create();
						var i;
						var inaParameter;
						var parameterOptionOccurence;
						var inaVariable;
						var parameterOptions;
						var inaOptionList;
						var j;
						var parameterOption;
						var optionNameId;
						var optionDescription;
						var inaVariableOption;
						var parameterDefaultOptions;
						var inaVariableOptionValue;
						var k;
						var parameterOptionValue;
						var provider;
						for (i = 0; i < variables.size(); i++) {
							inaParameter = sap.firefly.PrUtils
									.getStructureElement(variables, i);
							if (inaParameter === null) {
								continue;
							}
							parameterOptionOccurence = inaParameter
									.getStringByNameWithDefault(
											sap.firefly.InAConstants.LC_OPTION_OCCURENCE,
											null);
							if (parameterOptionOccurence !== null) {
								inaVariable = inaVariablesList
										.addNewStructure();
								inaVariable
										.setStringByName(
												sap.firefly.InAConstants.QY_NAME,
												inaParameter
														.getStringByName(sap.firefly.InAConstants.LC_NAME));
								inaVariable
										.setStringByName(
												sap.firefly.InAConstants.QY_DESCRIPTION,
												inaParameter
														.getStringByName(sap.firefly.InAConstants.LC_DESCRIPTION));
								inaVariable
										.setStringByName(
												sap.firefly.InAConstants.QY_VARIABLE_TYPE,
												sap.firefly.InAConstants.QY_OPTION_LIST_VARIABLE);
								inaVariable
										.setStringByName(
												sap.firefly.InAConstants.QY_TYPE,
												sap.firefly.InAConstants.VA_TYPE_STRING);
								inaVariable
										.setStringByName(
												sap.firefly.InAConstants.QY_INPUT_TYPE,
												sap.firefly.InAConstants.VA_INPUT_TYPE_OPTIONAL);
								inaVariable
										.setNewListByName(sap.firefly.InAConstants.QY_DEPENDENT_OF_VARIABLE);
								if (sap.firefly.XString
										.isEqual(
												parameterOptionOccurence,
												sap.firefly.InAConstants.VC_OPTION_OCCURENCE_EXACTLY_ONE)) {
									inaVariable
											.setBooleanByName(
													sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
													false);
								} else {
									inaVariable
											.setBooleanByName(
													sap.firefly.InAConstants.QY_MULTIPLE_VALUES,
													true);
								}
								inaVariable
										.setBooleanByName(
												sap.firefly.InAConstants.QY_INPUT_ENABLED,
												true);
								parameterOptions = inaParameter
										.getListByName(sap.firefly.InAConstants.LC_OPTIONS);
								inaOptionList = inaVariable
										.setNewListByName(sap.firefly.InAConstants.QY_OPTIONLIST_OPTIONS);
								if (!sap.firefly.PrUtils
										.isListEmpty(parameterOptions)) {
									for (j = 0; j < parameterOptions.size(); j++) {
										parameterOption = parameterOptions
												.getStructureByIndex(j);
										optionNameId = parameterOption
												.getIntegerByNameWithDefault(
														sap.firefly.InAConstants.LC_ID,
														-1);
										if (optionNameId !== -1) {
											optionDescription = parameterOption
													.getStringByName(sap.firefly.InAConstants.LC_DESCRIPTION);
											inaVariableOption = inaOptionList
													.addNewStructure();
											inaVariableOption
													.setStringByName(
															sap.firefly.InAConstants.QY_NAME,
															sap.firefly.XInteger
																	.convertIntegerToString(optionNameId));
											inaVariableOption
													.setStringByName(
															sap.firefly.InAConstants.QY_DESCRIPTION,
															optionDescription);
										}
									}
									parameterDefaultOptions = inaParameter
											.getListByName(sap.firefly.InAConstants.LC_DEFAULT_OPTIONS);
									inaVariableOptionValue = inaVariable
											.setNewListByName(sap.firefly.InAConstants.QY_OPTION_VALUES);
									if (parameterDefaultOptions !== null) {
										for (k = 0; k < parameterDefaultOptions
												.size(); k++) {
											parameterOptionValue = parameterDefaultOptions
													.getIntegerByIndex(k);
											inaVariableOptionValue
													.addString(sap.firefly.XInteger
															.convertIntegerToString(parameterOptionValue));
										}
									}
								}
							} else {
								inaVariablesList.add(inaParameter.clone());
							}
						}
						this.clearVariables();
						this.setVariableProcessorProvider(null);
						if (!sap.firefly.PrUtils.isListEmpty(inaVariablesList)) {
							provider = sap.firefly.PlanningCommandWithId.s_variableProcessorProviderFactory
									.createProvider(this
											.getVariableRequestorBase(), this);
							provider.setIsVariableSubmitNeeded(false);
							provider.importVariables(inaVariablesList, this);
							this.setVariableProcessorProvider(provider);
						}
					},
					setActionParameters : function(actionParameters) {
						this.setPropertyObject(
								sap.firefly.PlanningAction.ACTION_PARAMETERS,
								actionParameters);
						this.tryPublicVersionEdit(actionParameters);
					},
					tryPublicVersionEdit : function(actionParameters) {
						var planningModel;
						var actionMetadata;
						var actionType;
						var actionId;
						var version;
						var paramStructure;
						var fromVersion;
						var publicVersionEdit;
						if (this.getPlanningService().getServiceConfig()
								.getSystemDescription().getSystemType() !== sap.firefly.SystemType.HANA) {
							return;
						}
						planningModel = this.getPlanningModel();
						if (!planningModel.supportsPublicVersionEdit()) {
							return;
						}
						actionMetadata = planningModel.getActionMetadata(this
								.getActionIdentifier().getActionId());
						if (actionMetadata === null) {
							return;
						}
						actionType = actionMetadata.getActionType();
						if (actionType === null) {
							return;
						}
						if (!actionType
								.isTypeOf(sap.firefly.PlanningActionType.VERSION_ACTION)) {
							return;
						}
						actionId = this.getActionIdentifier().getActionId();
						if (!sap.firefly.XString
								.isEqual(
										actionId,
										sap.firefly.InAConstants.LC_POPULATE_SINGLE_VERSION)) {
							return;
						}
						version = this.getVersion();
						if ((version === null)
								|| !version.isPublicVersionEditPossible()) {
							return;
						}
						paramStructure = actionParameters
								.getStructureByName(sap.firefly.InAConstants.LC_EPM_POPULATE_FROM_VERSION);
						if (paramStructure === null) {
							return;
						}
						fromVersion = paramStructure
								.getStringByName(sap.firefly.InAConstants.LC_VALUE);
						if (sap.firefly.XStringUtils.isNullOrEmpty(fromVersion)) {
							return;
						}
						(planningModel).setPublicVersionEditInProgress(true);
						publicVersionEdit = sap.firefly.XString.endsWith(
								fromVersion, version.getSourceVersionName());
						this.setInvalidatingResultSet(!publicVersionEdit);
					},
					getActionParameters : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningAction.ACTION_PARAMETERS);
					},
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						var commands = sap.firefly.PlanningModelCommandHelper
								.createCommandsList(request);
						var command = this.addCommand(commands,
								sap.firefly.InAConstants.LC_ACTION);
						var identifier = this.getActionIdentifier();
						var actionId = identifier.getActionId();
						var actionSequenceId;
						var actionDescription;
						var actionParameters;
						var variables;
						var parameterValues;
						var i;
						var variable;
						var optionList;
						var currentOption;
						command
								.setStringByName(
										sap.firefly.InAConstants.LC_ACTION_ID,
										actionId);
						actionSequenceId = this.getSequenceIdEffective();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(actionSequenceId)) {
							command.setStringByName(
									sap.firefly.InAConstants.LC_SEQUENCE_ID,
									actionSequenceId);
						}
						if (this.getVersion().isActionSequenceActive() === false) {
							actionDescription = this.getDescription();
							if (sap.firefly.XStringUtils
									.isNotNullAndNotEmpty(actionDescription)) {
								command
										.setStringByName(
												sap.firefly.InAConstants.LC_DESCRIPTION,
												actionDescription);
							}
						}
						actionParameters = this.getActionParameters();
						if (actionParameters !== null) {
							command.setElementByName(
									sap.firefly.InAConstants.LC_PARAMETERS,
									actionParameters);
						} else {
							if (this.hasVariables()) {
								variables = this.getVariableProcessor()
										.getVariables();
								parameterValues = command
										.setNewStructureByName(sap.firefly.InAConstants.LC_PARAMETERS);
								for (i = 0; i < variables.size(); i++) {
									variable = variables.get(i);
									if (variable
											.getVariableType()
											.isTypeOf(
													sap.firefly.VariableType.OPTION_LIST_VARIABLE)) {
										optionList = variable;
										currentOption = optionList
												.getCurrentOption();
										parameterValues
												.setIntegerByName(
														variable.getName(),
														sap.firefly.XInteger
																.convertStringToIntegerWithDefault(
																		currentOption
																				.getName(),
																		-1));
									}
								}
							}
						}
						this.addCommand(commands,
								sap.firefly.InAConstants.LC_GET_VERSION_STATE);
						return request;
					},
					addCommand : function(commandsList, commandName) {
						var version = this.getVersion();
						var commandStructure = sap.firefly.PlanningModelCommandHelper
								.createVersionCommand(version, commandName);
						commandsList.add(commandStructure);
						return commandStructure;
					},
					getVersion : function() {
						var planningModel = this.getPlanningModel();
						return planningModel.getVersionByIdInternal(this
								.getActionIdentifier());
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningActionResult();
					},
					getVariableContainerBase : function() {
						return this;
					},
					getVariableContainer : function() {
						return this;
					},
					getInputEnabledVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if (variable.isInputEnabled()) {
							return variable;
						}
						return null;
					},
					getVariable : function(name) {
						return this.getVariableBaseByName(name);
					},
					getHierarchyNodeVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
							return variable;
						}
						return null;
					},
					getHierarchyNameVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						var variableType = variable.getVariableType();
						if (variableType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
							return variable;
						}
						return null;
					},
					setTargetVersionId : function(targetVersionId) {
						this.setPropertyString(
								sap.firefly.PlanningAction.TARGET_VERSION_ID,
								targetVersionId);
						return this;
					},
					getTargetVersionId : function() {
						return this
								.getPropertyString(sap.firefly.PlanningAction.TARGET_VERSION_ID);
					},
					setSequenceId : function(sequenceId) {
						this.setPropertyString(
								sap.firefly.PlanningAction.SEQUENCE_ID,
								sequenceId);
						return this;
					},
					getSequenceId : function() {
						var sequenceId = this
								.getPropertyString(sap.firefly.PlanningAction.SEQUENCE_ID);
						return sequenceId;
					},
					getSequenceIdEffective : function() {
						var sequenceId = this
								.getPropertyString(sap.firefly.PlanningAction.SEQUENCE_ID);
						if (sap.firefly.XStringUtils.isNullOrEmpty(sequenceId)) {
							sequenceId = this.getVersion()
									.getActionSequenceId();
						}
						return sequenceId;
					},
					setDescription : function(description) {
						this.setPropertyString(
								sap.firefly.PlanningAction.DESCRIPTION,
								description);
						return this;
					},
					getDescription : function() {
						return this
								.getPropertyString(sap.firefly.PlanningAction.DESCRIPTION);
					}
				});
$Firefly.createClass("sap.firefly.PlanningActionForQueryIdentifier",
		sap.firefly.PlanningActionIdentifierBase, {
			cloneOlapComponent : function(context, parent) {
				var copy = new sap.firefly.PlanningActionForQueryIdentifier();
				copy.setProperties(this.getPropertiesCopy());
				return copy;
			},
			toString : function() {
				var sb = sap.firefly.XStringBuffer.create();
				sb.append("Planning action for query identifier");
				sb.appendNewLine();
				sb.append(this.getActionMetadata().toString());
				return sb.toString();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningActionIdentifier",
				sap.firefly.PlanningActionIdentifierBase,
				{
					$statics : {
						VERSION_IDENTIFIER : "VERSION_IDENDTIFIER"
					},
					cloneOlapComponent : function(context, parent) {
						var copy = new sap.firefly.PlanningActionIdentifier();
						copy.setProperties(this.getPropertiesCopy());
						return copy;
					},
					getVersionIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningActionIdentifier.VERSION_IDENTIFIER);
					},
					setVersionIdentifier : function(versionIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningActionIdentifier.VERSION_IDENTIFIER,
										versionIdentifier);
					},
					getVersionId : function() {
						return this.getVersionIdentifier().getVersionId();
					},
					isSharedVersion : function() {
						return this.getVersionIdentifier().isSharedVersion();
					},
					getVersionOwner : function() {
						return this.getVersionIdentifier().getVersionOwner();
					},
					getVersionUniqueName : function() {
						return this.getVersionIdentifier()
								.getVersionUniqueName();
					},
					toString : function() {
						var sb = sap.firefly.XStringBuffer.create();
						sb.append('Planning action identifier for version "');
						sb.append(this.getVersionIdentifier()
								.getVersionUniqueName());
						sb.append('"');
						sb.appendNewLine();
						sb.append(this.getActionMetadata().toString());
						return sb.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningActionResult",
				sap.firefly.PlanningCommandWithIdResult,
				{
					$statics : {
						RETURN_CODE : "RETURN_CODE"
					},
					getPlanningAction : function() {
						return this.getPlanningCommand();
					},
					getReturnCode : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningActionResult.RETURN_CODE);
					},
					setReturnCode : function(returnCode) {
						this.setPropertyInteger(
								sap.firefly.PlanningActionResult.RETURN_CODE,
								returnCode);
					},
					processResponseStructureCommand : function(
							responseStructure, messageManager, hasErrors) {
						var returnCode = sap.firefly.PlanningModelCommandHelper
								.getResponsesReturnCodeStrict(
										responseStructure, messageManager,
										9999, this.useStrictErrorHandling());
						var responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						var action;
						var commands;
						var version;
						if (responses === null) {
							if ((this.useStrictErrorHandling() === false)
									|| (returnCode === 0)) {
								returnCode = -1;
							}
						}
						action = this.getPlanningAction();
						commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList(action.serializeToJson());
						if (commands === null) {
							if ((this.useStrictErrorHandling() === false)
									|| (returnCode === 0)) {
								returnCode = -1;
							}
						}
						version = action.getVersion();
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseGetVersionState(commands,
										responses, version) === false) {
							if ((this.useStrictErrorHandling() === false)
									|| (returnCode === 0)) {
								returnCode = -1;
							}
						}
						this.setReturnCode(returnCode);
					},
					checkErrorState : function() {
						var returnCode = this.getReturnCode();
						var planningModel;
						if (returnCode === 3042) {
							planningModel = this.getPlanningAction()
									.getPlanningModel();
							if (planningModel.supportsStrictErrorHandling()) {
								planningModel.resetPlanningModel();
							}
							return;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequest",
				sap.firefly.PlanningRequest,
				{
					$statics : {
						REQUEST_TYPE : "REQUEST_TYPE"
					},
					getPlanningModel : function() {
						return this.getPlanningContext();
					},
					getRequestType : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequest.REQUEST_TYPE);
					},
					setRequestType : function(requestType) {
						this.setPropertyObject(
								sap.firefly.PlanningModelRequest.REQUEST_TYPE,
								requestType);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponse",
				sap.firefly.PlanningResponse,
				{
					$statics : {
						RETURN_CODE : "RETURN_CODE"
					},
					getPlanningModelRequest : function() {
						return this.getPlanningCommand();
					},
					getReturnCode : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelResponse.RETURN_CODE);
					},
					setReturnCode : function(returnCode) {
						this.setPropertyInteger(
								sap.firefly.PlanningModelResponse.RETURN_CODE,
								returnCode);
					},
					processResponseStructureCommand : function(
							responseStructure, messageManager, hasErrors) {
						var returnCode = sap.firefly.PlanningModelCommandHelper
								.getResponsesReturnCodeStrict(
										responseStructure, messageManager,
										9999, this.useStrictErrorHandling());
						this.setReturnCode(returnCode);
						if (returnCode !== 0) {
							return;
						}
						if (this.useStrictErrorHandling()) {
							if ((hasErrors) || (returnCode !== 0)) {
								return;
							}
						}
						if (this.processResponseStructureInternal(
								responseStructure, messageManager) === false) {
							messageManager.addErrorExt(
									sap.firefly.OriginLayer.DRIVER,
									sap.firefly.ErrorCodes.PARSER_ERROR,
									"error in processing response structure",
									responseStructure);
						}
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					checkErrorState : function() {
						var returnCode = this.getReturnCode();
						var planningModel;
						if (returnCode === 3042) {
							planningModel = this.getPlanningModelRequest()
									.getPlanningModel();
							if (planningModel.supportsStrictErrorHandling()) {
								planningModel.resetPlanningModel();
							}
							return;
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QModelComponentWithNameList",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						createModelComponentWithNameList : function(context,
								parentNode, hasDynamicLinking, name) {
							var object = new sap.firefly.QModelComponentWithNameList();
							object.setupOlapList(context, parentNode,
									hasDynamicLinking, null, name);
							return object;
						}
					},
					createElementList : function() {
						return sap.firefly.XListOfNameObject.create();
					},
					addIfNotNull : function(element) {
						if (element !== null) {
							sap.firefly.QModelComponentWithNameList.$superclass.addInternal
									.call(this, element);
						}
					},
					addInternal : function(element) {
						if (element !== null) {
							this.removeElement(element);
							sap.firefly.QModelComponentWithNameList.$superclass.add
									.call(this, element);
						}
					},
					add : function(element) {
						this.queueEventing();
						this.addInternal(element);
						this.resumeEventing();
					},
					getListOfNamedObject : function() {
						return this.m_elementList;
					},
					containsKey : function(key) {
						return (this.m_elementList).containsKey(key);
					},
					getByKey : function(key) {
						return (this.m_elementList).getByKey(key);
					},
					getKeysAsReadOnlyListOfString : function() {
						return (this.m_elementList)
								.getKeysAsReadOnlyListOfString();
					},
					getKeysAsIteratorOfString : function() {
						return (this.m_elementList).getKeysAsIteratorOfString();
					},
					getValuesAsReadOnlyList : function() {
						return this.m_elementList;
					},
					getIterator : function() {
						return (this.m_elementList).getIterator();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QConditionManager",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						create : function(context, queryModel) {
							var newObj = new sap.firefly.QConditionManager();
							newObj.setupOlapList(context, queryModel, true,
									null, "ConditionManager");
							return newObj;
						}
					},
					m_externalConditions : null,
					m_effectiveConditions : null,
					releaseObject : function() {
						if (this.m_externalConditions !== null) {
							this.setExternalConditions(null);
						}
						this.m_effectiveConditions = sap.firefly.XCollectionUtils
								.releaseEntriesAndCollectionIfNotNull(this.m_effectiveConditions);
						sap.firefly.QConditionManager.$superclass.releaseObject
								.call(this);
					},
					copyConditionManager : function(origin) {
						var size;
						var i;
						var originCondition;
						var cloneCondition;
						sap.firefly.QConditionManager.$superclass.copyModelComponentList
								.call(this, origin);
						size = origin.size();
						for (i = 0; i < size; i++) {
							originCondition = origin.get(i);
							cloneCondition = this
									.addNewCondition(originCondition
											.getConditionName());
							cloneCondition.copyCondition(originCondition);
						}
					},
					setExternalConditions : function(externalConditions) {
						if (this.m_externalConditions === externalConditions) {
							return;
						}
						if (this.m_externalConditions !== null) {
							this.m_externalConditions
									.unregisterChangedListener(this);
							this.m_externalConditions
									.removeSecondaryParent(this);
							this.m_externalConditions = null;
						}
						if (externalConditions !== null) {
							this.m_externalConditions = externalConditions;
							this.m_externalConditions.addSecondaryParent(this);
							this.m_externalConditions.registerChangedListener(
									this, null);
						}
						this.updateEffectiveConditions();
						this.notifyNodeChanged();
					},
					onModelComponentChanged : function(modelComponent,
							customIdentifier) {
						if (modelComponent === null) {
							return;
						}
						if (modelComponent === this.m_externalConditions) {
							this.updateEffectiveConditions();
						}
					},
					updateEffectiveConditions : function() {
						var idx;
						var size;
						var localCondition;
						var externalCondition;
						if (this.m_effectiveConditions === null) {
							this.m_effectiveConditions = sap.firefly.XListOfNameObject
									.create();
						} else {
							this.m_effectiveConditions.clear();
						}
						size = this.size();
						for (idx = 0; idx < size; idx++) {
							localCondition = this.get(idx);
							this.m_effectiveConditions.add(localCondition);
						}
						if (this.m_externalConditions !== null) {
							size = this.m_externalConditions.size();
							for (idx = 0; idx < size; idx++) {
								externalCondition = this.m_externalConditions
										.get(idx);
								if (this.m_effectiveConditions
										.containsKey(externalCondition
												.getConditionName()) === false) {
									this.m_effectiveConditions
											.add(externalCondition);
								}
							}
						}
					},
					getExternalConditions : function() {
						return this.m_externalConditions;
					},
					getConditionByName : function(technicalName) {
						var i;
						var currentCondition;
						for (i = 0; i < this.size(); i++) {
							currentCondition = this.get(i);
							if (sap.firefly.XString.isEqual(currentCondition
									.getConditionName(), technicalName)) {
								return currentCondition;
							}
						}
						return null;
					},
					add : function(element) {
						(element).setParent(this);
						sap.firefly.QConditionManager.$superclass.add.call(
								this, element);
						this.updateEffectiveConditions();
					},
					addNewCondition : function(technicalName) {
						var newCondition;
						if ((technicalName !== null)
								&& (this.getConditionByName(technicalName) === null)) {
							newCondition = sap.firefly.QCondition.create(this
									.getContext(), this, technicalName, false);
							if (newCondition !== null) {
								this.add(newCondition);
								return newCondition;
							}
						}
						return null;
					},
					hasConditions : function() {
						return this.hasElements();
					},
					getActiveConditions : function() {
						var activeConditions = sap.firefly.XList.create();
						var i;
						var currentCondition;
						for (i = 0; i < this.size(); i++) {
							currentCondition = this.get(i);
							if (currentCondition.isActive()) {
								activeConditions.add(currentCondition);
							}
						}
						return activeConditions;
					},
					getInactiveConditions : function() {
						var inactiveConditions = sap.firefly.XList.create();
						var i;
						var currentCondition;
						for (i = 0; i < this.size(); i++) {
							currentCondition = this.get(i);
							if (currentCondition.isActive() === false) {
								inactiveConditions.add(currentCondition);
							}
						}
						return inactiveConditions;
					},
					removeConditionByName : function(technicalName) {
						var targetCondition = this
								.getConditionByName(technicalName);
						if (targetCondition !== null) {
							this.removeElement(targetCondition);
							targetCondition.releaseObject();
						}
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.CONDITIONS_MANAGER;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj;
						if (other === null) {
							return;
						}
						otherObj = other;
						this.clear();
						this.copyConditionManager(otherObj);
					},
					getEffectiveConditions : function() {
						this.updateEffectiveConditions();
						return this.m_effectiveConditions;
					},
					isMeasureUsedInActiveConditionThreshold : function(
							measureName) {
						var itCondition;
						var condition;
						var itThreshold;
						var threshold;
						var measureCoordinates;
						var itMeasure;
						if (sap.firefly.XStringUtils.isNullOrEmpty(measureName)) {
							return false;
						}
						itCondition = this.getIterator();
						while (itCondition.hasNext()) {
							condition = itCondition.next();
							if (!condition.isActive()) {
								continue;
							}
							itThreshold = condition.getThresholds()
									.getIterator();
							while (itThreshold.hasNext()) {
								threshold = itThreshold.next();
								measureCoordinates = threshold
										.getMeasureCoordinates();
								itMeasure = measureCoordinates.getIterator();
								while (itMeasure.hasNext()) {
									if (sap.firefly.XString.isEqual(itMeasure
											.next().getName(), measureName)) {
										return true;
									}
								}
							}
						}
						return false;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionManager",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						create : function(context, parentNode) {
							var newObj = new sap.firefly.QDimensionManager();
							newObj.setupDimensionManager(context, parentNode);
							return newObj;
						}
					},
					m_measureStructure : null,
					m_nonMeasureStructure1 : null,
					m_nonMeasureStructure2 : null,
					m_fields : null,
					setupDimensionManager : function(context, parentNode) {
						this.setupOlapList(context, parentNode, true, null,
								null);
						this.m_fields = sap.firefly.XSetOfNameObject.create();
					},
					copyDimensionManager : function(origin) {
						var size = origin.size();
						var context = this.getContext();
						var i;
						var origDim;
						var originType;
						var cloneDim;
						var cloneFields;
						var sizeFields;
						var idxFields;
						for (i = 0; i < size; i++) {
							origDim = origin.get(i);
							originType = origDim.getDimensionType();
							if (originType === sap.firefly.DimensionType.CALCULATED_DIMENSION) {
								cloneDim = sap.firefly.QCalculatedDimension
										._createCalculatedDimension(context,
												this, origDim.getName());
								(cloneDim).copyCalculatedDimension(origDim);
							} else {
								cloneDim = sap.firefly.QDimension._create(
										context, this, originType);
								(cloneDim).copyDimension(origDim);
							}
							this.addDimension(cloneDim);
							cloneFields = cloneDim.getFields();
							sizeFields = cloneFields.size();
							for (idxFields = 0; idxFields < sizeFields; idxFields++) {
								this.m_fields.put(cloneFields.get(idxFields));
							}
							this.finalizeDimensionMetadataSetup(cloneDim);
						}
						sap.firefly.QDimensionManager.$superclass.copyModelComponentList
								.call(this, origin);
					},
					copyDimensionManagerMember : function(origin) {
						var accountDimension;
						if (origin.m_measureStructure !== null) {
							(this.getMeasureDimension())
									.copyDimensionMember(origin
											.getMeasureDimension());
						}
						if (origin.m_nonMeasureStructure1 !== null) {
							(this.getNonMeasureDimension())
									.copyDimensionMember(origin
											.getNonMeasureDimension());
						}
						if (origin.m_nonMeasureStructure2 !== null) {
							(this.getNonMeasureDimension2())
									.copyDimensionMember(origin
											.getNonMeasureDimension2());
						}
						accountDimension = this
								.getDimensionByType(sap.firefly.DimensionType.ACCOUNT);
						if (accountDimension !== null) {
							(accountDimension)
									.copyDimensionMember(origin
											.getDimensionByType(sap.firefly.DimensionType.ACCOUNT));
						}
					},
					releaseObject : function() {
						this.m_measureStructure = sap.firefly.XObject
								.releaseIfNotNull(this.m_measureStructure);
						this.m_nonMeasureStructure1 = sap.firefly.XObject
								.releaseIfNotNull(this.m_nonMeasureStructure1);
						this.m_nonMeasureStructure2 = sap.firefly.XObject
								.releaseIfNotNull(this.m_nonMeasureStructure2);
						this.m_fields = sap.firefly.XObject
								.releaseIfNotNull(this.m_fields);
						sap.firefly.QDimensionManager.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.DIMENSION_MANAGER;
					},
					finalizeDimensionMetadataSetup : function(dimension) {
						var fields = dimension.getFields();
						var fieldLen = fields.size();
						var j;
						var field;
						for (j = 0; j < fieldLen; j++) {
							field = fields.get(j);
							this.addField(field, dimension);
						}
					},
					convertToFieldLayoutType : function(type) {
						var len = this.size();
						var i;
						var dimension;
						for (i = 0; i < len; i++) {
							dimension = this.get(i);
							dimension.convertToFieldLayoutType(type);
						}
					},
					getDimensionByIndex : function(index) {
						return this.get(index);
					},
					getDimensionNameByType : function(type) {
						var dimensionByType = this.getDimensionByType(type);
						if (dimensionByType === null) {
							return null;
						}
						return dimensionByType.getName();
					},
					getDimensionByType : function(type) {
						var len = this.size();
						var i;
						var dimension;
						for (i = 0; i < len; i++) {
							dimension = this.get(i);
							if (dimension.getDimensionType().isTypeOf(type)) {
								return dimension;
							}
						}
						return null;
					},
					getByKey : function(key) {
						var len = this.size();
						var i;
						var dim;
						for (i = 0; i < len; i++) {
							dim = this.get(i);
							if (sap.firefly.XString.isEqual(dim.getName(), key)) {
								return dim;
							}
						}
						return null;
					},
					getDimensionByName : function(name) {
						return this.getByKey(name);
					},
					containsKey : function(key) {
						return this.getByKey(key) !== null;
					},
					getKeysAsReadOnlyListOfString : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getKeysAsIteratorOfString : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getDimensionCount : function() {
						return this.size();
					},
					getStructureCount : function() {
						var count = 0;
						if (this.m_nonMeasureStructure1 !== null) {
							count++;
						}
						if (this.m_nonMeasureStructure2 !== null) {
							count++;
						}
						if (this.m_measureStructure !== null) {
							count++;
						}
						return count;
					},
					getNonStructureCount : function() {
						var structureCount = this.getStructureCount();
						var allDimCount = this.getDimensionCount();
						return allDimCount - structureCount;
					},
					getNonMeasureDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_nonMeasureStructure1);
					},
					getNonMeasureDimension2 : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_nonMeasureStructure2);
					},
					getMeasureDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_measureStructure);
					},
					getDimensions : function() {
						return this;
					},
					createAndAddDimension : function(isVirtual, type, name,
							text) {
						var dim;
						this.stopEventing();
						dim = sap.firefly.QDimension._create(this.getContext(),
								this, type);
						dim.setName(name);
						dim.setText(text);
						this.addDimension(dim);
						this.resumeEventing();
						return dim;
					},
					addDimension : function(dimension) {
						var dimensionType;
						dimension.setParent(this);
						if (this.containsKey(dimension.getName())) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3(
													"Dimension already exists '",
													dimension.getName(), "'!"));
						}
						this.add(dimension);
						dimensionType = dimension.getDimensionType();
						if (dimensionType === sap.firefly.DimensionType.MEASURE_STRUCTURE) {
							if (this.m_measureStructure !== null) {
								throw sap.firefly.XException
										.createIllegalStateException("More than two measure structures");
							}
							this.m_measureStructure = sap.firefly.XWeakReferenceUtil
									.getWeakRef(dimension);
						} else {
							if (dimensionType === sap.firefly.DimensionType.SECONDARY_STRUCTURE) {
								if (this.m_nonMeasureStructure1 === null) {
									this.m_nonMeasureStructure1 = sap.firefly.XWeakReferenceUtil
											.getWeakRef(dimension);
								} else {
									if (this.m_nonMeasureStructure2 !== null) {
										throw sap.firefly.XException
												.createIllegalStateException("More than two Non Measure Structures");
									}
									this.m_nonMeasureStructure2 = sap.firefly.XWeakReferenceUtil
											.getWeakRef(dimension);
								}
							}
						}
					},
					getFieldByNameOrAlias : function(name) {
						var field = this.m_fields.getByKey(name);
						var iterator;
						if (field === null) {
							iterator = this.m_fields.getIterator();
							while (iterator.hasNext()) {
								field = iterator.next();
								if (sap.firefly.XString.isEqual(name, field
										.getAliasName())) {
									break;
								}
								field = null;
							}
							iterator.releaseObject();
						}
						return field;
					},
					getFieldByName : function(name) {
						if (sap.firefly.XString.isEqual(name,
								sap.firefly.InAConstants.QY_MEASURES)
								|| sap.firefly.XString
										.isEqual(
												name,
												sap.firefly.InAConstants.QY_MEASURES_MEASURES)) {
							return this.getMeasureDimension().getKeyField();
						}
						return this.m_fields.getByKey(name);
					},
					addField : function(field, dimension) {
						var name = field.getName();
						var existingField = this.m_fields.getByKey(name);
						var existingFieldDim;
						if (existingField === null) {
							this.m_fields.put(field);
						} else {
							existingFieldDim = existingField.getDimension();
							if (((existingFieldDim !== null) && existingFieldDim
									.isGroupingDimension())
									&& (dimension.isGroupingDimension() === false)) {
								existingField.setDimension(dimension);
							}
						}
					},
					getFields : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldIterator : function() {
						var list = sap.firefly.XList.create();
						var iterator = this.m_fields.getIterator();
						while (iterator.hasNext()) {
							list.add(iterator.next());
						}
						return list.getIterator();
					},
					getFlatFieldsList : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getHierarchyFieldsList : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldsListByActiveUsageType : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFieldsListByActiveUsageTypeExt : function(context) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getFirstFieldByType : function(type) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						var dimensions = otherObj.getDimensions();
						var size = dimensions.size();
						var i;
						var otherDimension;
						var otherName;
						var myDimension;
						var newlyAddedDimension;
						for (i = 0; i < size; i++) {
							otherDimension = dimensions.get(i);
							otherName = otherDimension.getName();
							myDimension = this.getDimensionByName(otherName);
							if (myDimension !== null) {
								myDimension.mergeDeepRecursive(settings,
										otherDimension);
							} else {
								newlyAddedDimension = this
										.createAndAddDimension(false,
												otherDimension
														.getDimensionType(),
												otherName, otherDimension
														.getText());
								(newlyAddedDimension)
										.copyDimension(otherDimension);
							}
						}
					},
					addNewCalculatedDimensionWithName : function(
							calculatedDimensionName) {
						var calculatedDimension;
						if (this.getByKey(calculatedDimensionName) !== null) {
							return null;
						}
						calculatedDimension = sap.firefly.QCalculatedDimension
								._createCalculatedDimension(this.getContext(),
										this, calculatedDimensionName);
						this.add(calculatedDimension);
						this.getQueryModel().getFreeAxis().add(
								calculatedDimension);
						return calculatedDimension;
					},
					removeCalculatedDimensionByName : function(
							calculatedDimensionName) {
						var dimension = this.getByKey(calculatedDimensionName);
						var axis;
						if ((dimension !== null)
								&& (dimension.getDimensionType() === sap.firefly.DimensionType.CALCULATED_DIMENSION)) {
							axis = dimension.getAxis();
							(axis).removeElementInternal(dimension);
							this.removeElement(dimension);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QExceptionManager",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						createExceptionManager : function(context, queryModel) {
							var newObject = new sap.firefly.QExceptionManager();
							newObject.setupOlapList(context, queryModel, true,
									null, "Exceptions");
							return newObject;
						}
					},
					copyExceptionManager : function(origin) {
						var size;
						var i;
						var origException;
						var cloneException;
						sap.firefly.QExceptionManager.$superclass.copyModelComponentList
								.call(this, origin);
						size = origin.size();
						for (i = 0; i < size; i++) {
							origException = origin.get(i);
							cloneException = this.addNewException(origException
									.getName(), origException.getText());
							cloneException.copyException(origException);
						}
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.EXCEPTION_MANAGER;
					},
					addNewException : function(name, text) {
						var exception = this.newException(name, text);
						this.add(exception);
						return exception;
					},
					newException : function(name, text) {
						return sap.firefly.QException.createException(this
								.getContext(), this.getQueryModelBase(), name,
								text);
					},
					containsKey : function(key) {
						return this.getByKey(key) !== null;
					},
					add : function(element) {
						var byKey = this.getByKey(element.getName());
						if ((byKey !== null)
								&& (byKey.getMeasure() === element.getMeasure())) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate3(
													"The exception name '",
													element.getName(),
													"' is not unique!"));
						}
						sap.firefly.QExceptionManager.$superclass.add.call(
								this, element);
					},
					getByKey : function(key) {
						var size = this.size();
						var i;
						var exception;
						for (i = 0; i < size; i++) {
							exception = this.get(i);
							if (sap.firefly.XString.isEqual(key, exception
									.getName())) {
								return exception;
							}
						}
						return null;
					},
					getKeysAsReadOnlyListOfString : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getKeysAsIteratorOfString : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getAllExceptionsOfMeasure : function(measure) {
						var exceptions = sap.firefly.XList.create();
						var exceptionSize = this.size();
						var idx;
						var exception;
						var exMeasure;
						for (idx = 0; idx < exceptionSize; idx++) {
							exception = this.get(idx);
							exMeasure = exception.getMeasure();
							if ((exMeasure !== null)
									&& sap.firefly.XString.isEqual(exMeasure
											.getName(), measure.getName())) {
								exceptions.add(exception);
							}
						}
						return exceptions;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						this.clear();
						this.copyExceptionManager(otherObj);
					},
					removeAllExceptionsOfMeasure : function(measure) {
						var idx;
						var exception;
						if (this.isEmpty()) {
							return;
						}
						idx = 0;
						this.queueEventing();
						while (idx < this.size()) {
							exception = this.get(idx);
							if (sap.firefly.XString.isEqual(exception
									.getMeasure().getName(), measure.getName())) {
								this.removeAt(idx);
							} else {
								idx++;
							}
						}
						this.resumeEventing();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QThreshold",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						createThreshold : function(context, lowValue,
								alertLevel, exception) {
							var threshold;
							if (exception === null) {
								return null;
							}
							threshold = new sap.firefly.QThreshold();
							threshold.setupThreshold(context,
									sap.firefly.XValueType.DOUBLE,
									sap.firefly.XDoubleValue.create(lowValue),
									alertLevel, exception);
							return threshold;
						},
						createThresholdWithString : function(context, low,
								alertLevel, exception) {
							var threshold;
							if (exception === null) {
								return null;
							}
							threshold = new sap.firefly.QThreshold();
							threshold.setupThreshold(context,
									sap.firefly.XValueType.STRING,
									sap.firefly.XStringValue.create(low),
									alertLevel, exception);
							return threshold;
						}
					},
					m_alertLevel : null,
					m_valueType : null,
					m_lowValue : null,
					m_highValue : null,
					m_operator : null,
					copyThreshold : function(origin) {
						var size;
						var i;
						var originSetting;
						var cloneSetting;
						var exSetting;
						sap.firefly.QThreshold.$superclass.copyModelComponentList
								.call(this, origin);
						this.m_alertLevel = origin.m_alertLevel;
						this.m_valueType = origin.m_valueType;
						if (origin.m_lowValue !== null) {
							this.m_lowValue = origin.m_lowValue.clone();
						}
						if (origin.m_highValue !== null) {
							this.m_highValue = origin.m_highValue.clone();
						}
						size = origin.size();
						for (i = 0; i < size; i++) {
							originSetting = origin.get(i);
							cloneSetting = this.addNewSetting(originSetting
									.getName(), originSetting.getPriority());
							cloneSetting.setValue(originSetting.getValue());
							exSetting = originSetting.getSetting();
							if (exSetting !== null) {
								cloneSetting.setSetting(exSetting);
							}
						}
						this.m_operator = origin.m_operator;
					},
					setupThreshold : function(context, valueType, lowValue,
							alertLevel, exception) {
						this.setupOlapList(context, exception, false, null,
								"Settings");
						this.m_valueType = valueType;
						this.m_operator = sap.firefly.ComparisonOperator.EQUAL;
						this.setXLow(lowValue);
						this.m_alertLevel = alertLevel;
					},
					releaseObject : function() {
						this.m_alertLevel = null;
						this.m_operator = null;
						this.m_lowValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_lowValue);
						this.m_highValue = sap.firefly.XObject
								.releaseIfNotNull(this.m_highValue);
						this.m_valueType = null;
						sap.firefly.QThreshold.$superclass.releaseObject
								.call(this);
					},
					getException : function() {
						return this.getParentComponent();
					},
					setAlertLevel : function(alertLevel) {
						this.m_alertLevel = alertLevel;
						this.notifyNodeChanged();
					},
					getAlertLevel : function() {
						return this.m_alertLevel;
					},
					setOperator : function(comparisonOperator) {
						this.m_operator = comparisonOperator;
						this.notifyNodeChanged();
					},
					getOperator : function() {
						return this.m_operator;
					},
					setXLow : function(lowValue) {
						if (lowValue !== null) {
							if (lowValue.getValueType() !== this.getValueType()) {
								throw sap.firefly.XException
										.createIllegalArgumentException("illegal value type");
							}
						}
						this.m_lowValue = lowValue;
						this.notifyNodeChanged();
					},
					setLowValue : function(lowValue) {
						this.setXLow(sap.firefly.XDoubleValue.create(lowValue));
					},
					setLow : function(lowValue) {
						this.setXLow(sap.firefly.XStringValue.create(lowValue));
					},
					getLowXValue : function() {
						return this.m_lowValue;
					},
					getLowValue : function() {
						if (this.getValueType() !== sap.firefly.XValueType.DOUBLE) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal value type");
						}
						return (this.m_lowValue).getDoubleValue();
					},
					getLow : function() {
						if (this.getValueType() !== sap.firefly.XValueType.STRING) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal value type");
						}
						return (this.m_lowValue).getStringValue();
					},
					setXHigh : function(highValue) {
						if (highValue !== null) {
							if (highValue.getValueType() !== this
									.getValueType()) {
								throw sap.firefly.XException
										.createIllegalArgumentException("illegal value type");
							}
						}
						this.m_highValue = highValue;
						this.notifyNodeChanged();
					},
					setHighValue : function(highValue) {
						this.setXHigh(sap.firefly.XDoubleValue
								.create(highValue));
					},
					setHigh : function(highValue) {
						this.setXHigh(sap.firefly.XStringValue
								.create(highValue));
					},
					getHighXValue : function() {
						return this.m_highValue;
					},
					getHighValue : function() {
						if (this.getValueType() !== sap.firefly.XValueType.DOUBLE) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal value type");
						}
						return (this.m_highValue).getDoubleValue();
					},
					getHigh : function() {
						if (this.getValueType() !== sap.firefly.XValueType.STRING) {
							throw sap.firefly.XException
									.createIllegalStateException("illegal value type");
						}
						return (this.m_highValue).getStringValue();
					},
					setIntervall : function(lowValue, highValue) {
						this.queueEventing();
						this.setLowValue(lowValue);
						this.setHighValue(highValue);
						this.resumeEventing();
					},
					add : function(element) {
						sap.firefly.QThreshold.$superclass.add.call(this,
								element);
						this.notifyNodeChanged();
					},
					addNewSetting : function(name, priority) {
						var setting = this.newSetting(name, priority);
						this.add(setting);
						return setting;
					},
					addNewSettingWithConstant : function(exceptionSetting,
							priority) {
						var setting = this.newSettingWithConstant(
								exceptionSetting, priority);
						this.add(setting);
						return setting;
					},
					newSetting : function(name, priority) {
						return sap.firefly.QSettings.createSetting(this
								.getContext(), name, priority, this);
					},
					newSettingWithConstant : function(exceptionSetting,
							priority) {
						return sap.firefly.QSettings.createSettingWithConstant(
								this.getContext(), exceptionSetting, priority,
								this);
					},
					setIntervallByString : function(lowValue, highValue) {
						this.setLow(lowValue);
						this.setHigh(highValue);
					},
					getValueType : function() {
						return this.m_valueType;
					},
					getByKey : function(key) {
						var iterator = this.getIterator();
						var setting;
						while (iterator.hasNext()) {
							setting = iterator.next();
							if (sap.firefly.XString.isEqual(setting.getName(),
									key)) {
								iterator.releaseObject();
								return setting;
							}
						}
						iterator.releaseObject();
						return null;
					},
					containsKey : function(key) {
						return this.getByKey(key) !== null;
					},
					getKeysAsReadOnlyListOfString : function() {
						var keys = sap.firefly.XListOfString.create();
						var iterator = this.getIterator();
						while (iterator.hasNext()) {
							keys.add(iterator.next().getName());
						}
						iterator.releaseObject();
						return keys;
					},
					getKeysAsIteratorOfString : function() {
						return this.getKeysAsReadOnlyListOfString()
								.getIterator();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterAlgebraOperation",
				sap.firefly.QModelComponentList,
				{
					m_uniqueId : null,
					releaseObject : function() {
						this.m_uniqueId = null;
						sap.firefly.QFilterAlgebraOperation.$superclass.releaseObject
								.call(this);
					},
					copyFilterAlgebra : function(origin) {
						var size;
						var context;
						var filterExpression;
						var i;
						var originElement;
						var originType;
						var cloneProduct;
						var originList;
						var queryModel;
						var cloneList;
						var cloneOperation;
						var cloneElement;
						var cloneAlgebra;
						sap.firefly.QFilterAlgebraOperation.$superclass.copyModelComponentList
								.call(this, origin);
						this.m_uniqueId = origin.m_uniqueId;
						size = origin.size();
						context = this.getContext();
						filterExpression = this.getFilterExpression();
						for (i = 0; i < size; i++) {
							originElement = origin.get(i);
							originType = originElement.getOlapComponentType();
							if (originType === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT) {
								cloneProduct = sap.firefly.QFilterCartesianProduct
										._create(context, filterExpression);
								this.add(cloneProduct);
								cloneProduct
										.copyCartesianProduct(originElement);
							} else {
								if (originType === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
									originList = originElement;
									queryModel = this.getQueryModel();
									cloneList = sap.firefly.QFilterCartesianList
											._create(
													context,
													filterExpression,
													queryModel
															.getFieldByName(originList
																	.getField()
																	.getName()),
													originList
															.getHierarchyName());
									this.add(cloneList);
									cloneList.copyCartesianList(originList);
								} else {
									if (originType === sap.firefly.FilterComponentType.OPERATION) {
										cloneOperation = sap.firefly.QFilterOperation
												._create(context,
														filterExpression, this);
										cloneOperation
												.copyFilterOperation(originElement);
										this.add(cloneOperation);
									} else {
										if (originType === sap.firefly.FilterComponentType.TUPLE) {
											cloneElement = sap.firefly.QFactory2
													.newFilterTuple(context);
											cloneElement
													.copyTupleOperand(originElement);
											this.add(cloneElement);
										} else {
											if (originType
													.isTypeOf(sap.firefly.FilterComponentType.BOOLEAN_ALGEBRA)) {
												if (originType === sap.firefly.FilterComponentType.AND) {
													cloneAlgebra = sap.firefly.QFactory2
															.newFilterAnd(context);
												} else {
													if (originType === sap.firefly.FilterComponentType.OR) {
														cloneAlgebra = sap.firefly.QFactory2
																.newFilterOr(context);
													} else {
														if (originType === sap.firefly.FilterComponentType.NOT) {
															cloneAlgebra = sap.firefly.QFactory2
																	.newFilterNot(context);
														} else {
															throw sap.firefly.XException
																	.createRuntimeException(originType
																			.getName());
														}
													}
												}
												cloneAlgebra
														.copyFilterAlgebra(originElement);
												this.add(cloneAlgebra);
											}
										}
									}
								}
							}
						}
					},
					setupFilterAlgebraOperation : function(context,
							selectionContainer) {
						sap.firefly.QFilterAlgebraOperation.$superclass.setupOlapList
								.call(this, context, selectionContainer, true,
										null, "Selection Logical Container");
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
					},
					getFilterExpression : function() {
						return this.getParentComponent();
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFormulaItemFunction",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						_createFunction : function(context, parentNode) {
							var formula = new sap.firefly.QFormulaItemFunction();
							formula.setupOlapList(context, parentNode, false,
									null, null);
							return formula;
						}
					},
					m_functionName : null,
					m_solveOrder : 0,
					copyFormulaItemFunction : function(origin) {
						var size;
						var i;
						var originItem;
						var cloneItem;
						var originType;
						this.copyModelComponentList(origin);
						size = origin.size();
						for (i = 0; i < size; i++) {
							originItem = origin.get(i);
							originType = originItem.getOlapComponentType();
							if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
								cloneItem = sap.firefly.QFormulaItemAttribute
										._createMember(this, this);
								(cloneItem)
										.copyFormulaItemAttribute(originItem);
							} else {
								if (originType === sap.firefly.OlapComponentType.FORMULA_CONSTANT) {
									cloneItem = sap.firefly.QFormulaItemConstant
											._createConstant(this, this);
									(cloneItem)
											.copyFormulaItemConstant(originItem);
								} else {
									if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
										cloneItem = sap.firefly.QFormulaItemMember
												._createMember(this, this);
										(cloneItem)
												.copyFormulaItemMember(originItem);
									} else {
										if (originType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
											cloneItem = sap.firefly.QFormulaItemOperation
													._createOperation(this,
															this);
											(cloneItem)
													.copyFormulaItemOperation(originItem);
										} else {
											if (originType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
												cloneItem = sap.firefly.QFactory2
														.newFormulaFunction(this);
												(cloneItem)
														.copyFormulaItemFunction(originItem);
											} else {
												throw sap.firefly.XException
														.createRuntimeException(sap.firefly.XStringUtils
																.concatenate3(
																		"Unexpected component type '",
																		originType
																				.getName(),
																		"' in formula function!"));
											}
										}
									}
								}
							}
							this.add(cloneItem);
						}
						this.m_solveOrder = origin.m_solveOrder;
						this.m_functionName = origin.m_functionName;
					},
					releaseObject : function() {
						this.m_functionName = null;
						sap.firefly.QFormulaItemFunction.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FORMULA_FUNCTION;
					},
					getFunctionName : function() {
						return this.m_functionName;
					},
					setFunctionName : function(name) {
						this.m_functionName = name;
					},
					setSolveOrder : function(solveOrder) {
						this.m_solveOrder = solveOrder;
						this.notifyNodeChanged();
					},
					getSolveOrder : function() {
						return this.m_solveOrder;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QResultStructure",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						createResultStructure : function(context, parentNode) {
							var resultStructure = new sap.firefly.QResultStructure();
							resultStructure.setupOlapList(context, parentNode,
									true, null, "Result Structure");
							return resultStructure;
						}
					},
					copyResultStructure : function(origin) {
						var size;
						var context;
						var i;
						var originItem;
						sap.firefly.QResultStructure.$superclass.copyModelComponentList
								.call(this, origin);
						size = origin.size();
						context = this.getContext();
						for (i = 0; i < size; i++) {
							originItem = origin.get(i);
							this
									.add(sap.firefly.QResultStructureItem
											.createResultStructureItem(
													context,
													this,
													originItem
															.getResultStructureElement(),
													originItem
															.getResultVisibility()));
						}
					},
					getController : function() {
						return this.getParentComponent();
					},
					setResultVisibility : function(index, visibility) {
						var item = this.get(index);
						if (item !== null) {
							item.setResultVisibility(visibility);
						}
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.RESULT_STRUCTURE;
					},
					addByIndexWithVisibility : function(index, element,
							visibility) {
						this.insert(index, sap.firefly.QResultStructureItem
								.createResultStructureItem(this.getContext(),
										this, element, visibility));
					},
					addWithVisibility : function(element, visibility) {
						this.add(sap.firefly.QResultStructureItem
								.createResultStructureItem(this.getContext(),
										this, element, visibility));
					},
					remove : function(element) {
						var iterator = this.getIterator();
						var item;
						while (iterator.hasNext()) {
							item = iterator.next();
							if (item.getResultStructureElement() === element) {
								this.removeElement(item);
								break;
							}
						}
						iterator.releaseObject();
					},
					resultStructureContains : function(element) {
						var iterator = this.getIterator();
						var next;
						while (iterator.hasNext()) {
							next = iterator.next();
							if (next.getResultStructureElement().isEqualTo(
									element)) {
								iterator.releaseObject();
								return true;
							}
						}
						iterator.releaseObject();
						return false;
					},
					addResultStructureTopSection : function(items) {
						var controller;
						var supportedConditionalResults;
						var size;
						var i;
						this.queueEventing();
						if ((items === null) || items.isEmpty()) {
							controller = this.getController();
							if (controller.supportsConditionalResults()) {
								supportedConditionalResults = controller
										.getSupportedConditionalResults();
								if (supportedConditionalResults
										.contains(sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)) {
									this
											.addByIndexWithVisibility(
													0,
													sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
													sap.firefly.ResultVisibility.HIDDEN);
								}
								if (supportedConditionalResults
										.contains(sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS)) {
									this
											.addByIndexWithVisibility(
													0,
													sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
													sap.firefly.ResultVisibility.HIDDEN);
								}
							}
							if (this
									.resultStructureContains(sap.firefly.ResultStructureElement.TOTAL) === false) {
								this
										.addByIndexWithVisibility(
												0,
												sap.firefly.ResultStructureElement.TOTAL,
												sap.firefly.ResultVisibility.HIDDEN);
							}
						} else {
							size = items.size();
							for (i = size - 1; i >= 0; i--) {
								this.insert(0, items.get(i));
							}
						}
						this.resumeEventing();
					},
					addResultStructureBottomSection : function(items) {
						var controller;
						var supportedConditionalResults;
						this.queueEventing();
						if ((items === null) || items.isEmpty()) {
							controller = this.getController();
							if (controller.supportsConditionalResults()) {
								supportedConditionalResults = controller
										.getSupportedConditionalResults();
								if (supportedConditionalResults
										.contains(sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS)) {
									this
											.addWithVisibility(
													sap.firefly.ResultStructureElement.TOTAL_REMAINING_MEMBERS,
													sap.firefly.ResultVisibility.HIDDEN);
								}
								if (supportedConditionalResults
										.contains(sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)) {
									this
											.addWithVisibility(
													sap.firefly.ResultStructureElement.TOTAL_INCLUDED_MEMBERS,
													sap.firefly.ResultVisibility.HIDDEN);
								}
							}
							if (this
									.resultStructureContains(sap.firefly.ResultStructureElement.TOTAL) === false) {
								this
										.addWithVisibility(
												sap.firefly.ResultStructureElement.TOTAL,
												sap.firefly.ResultVisibility.HIDDEN);
							}
						} else {
							this.addAll(items);
						}
						this.resumeEventing();
					},
					applyInitialDefaultResultStructure2 : function(
							resultAlignment) {
						this.queueEventing();
						if (resultAlignment === sap.firefly.ResultAlignment.TOP) {
							this.addWithVisibility(
									sap.firefly.ResultStructureElement.TOTAL,
									sap.firefly.ResultVisibility.VISIBLE);
							this.addWithVisibility(
									sap.firefly.ResultStructureElement.MEMBERS,
									sap.firefly.ResultVisibility.VISIBLE);
							this.addResultStructureTopSection(null);
						} else {
							if (resultAlignment === sap.firefly.ResultAlignment.BOTTOM) {
								this
										.addWithVisibility(
												sap.firefly.ResultStructureElement.MEMBERS,
												sap.firefly.ResultVisibility.VISIBLE);
								this
										.addWithVisibility(
												sap.firefly.ResultStructureElement.TOTAL,
												sap.firefly.ResultVisibility.VISIBLE);
								this.addResultStructureBottomSection(null);
							} else {
								if (resultAlignment === sap.firefly.ResultAlignment.TOPBOTTOM) {
									this
											.addWithVisibility(
													sap.firefly.ResultStructureElement.TOTAL,
													sap.firefly.ResultVisibility.VISIBLE);
									this
											.addWithVisibility(
													sap.firefly.ResultStructureElement.MEMBERS,
													sap.firefly.ResultVisibility.VISIBLE);
									this
											.addWithVisibility(
													sap.firefly.ResultStructureElement.TOTAL,
													sap.firefly.ResultVisibility.VISIBLE);
									this.addResultStructureTopSection(null);
									this.addResultStructureBottomSection(null);
								}
							}
						}
						this.resumeEventing();
					},
					setResultVisibilityByElement : function(element, visibility) {
						var iterator = this.getIterator();
						var count = 0;
						var item;
						var controller;
						while (iterator.hasNext()) {
							item = iterator.next();
							if (item.getResultStructureElement() === element) {
								item.setResultVisibility(visibility);
								count++;
							}
						}
						iterator.releaseObject();
						if (count === 0) {
							controller = this.getController();
							if (controller
									.getResultStructureReorderingCapability() === sap.firefly.ReorderingCapability.FULL) {
								this.addWithVisibility(element, visibility);
							}
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QBasicMeasure",
				sap.firefly.QStructureMember,
				{
					$statics : {
						_createBasicMeasure : function(context, dimension) {
							var member = new sap.firefly.QBasicMeasure();
							member.setupBasicMeasure(context, dimension);
							return member;
						}
					},
					m_aggregationDimensionName : null,
					copyBasicMeasure : function(origin) {
						this.copyStructureMember(origin);
						this.m_aggregationDimensionName = origin.m_aggregationDimensionName;
					},
					setupBasicMeasure : function(context, structure) {
						sap.firefly.QBasicMeasure.$superclass.setupStructureMember
								.call(this, context, structure,
										sap.firefly.MemberType.BASIC_MEASURE);
					},
					releaseObject : function() {
						this.m_aggregationDimensionName = null;
						sap.firefly.QBasicMeasure.$superclass.releaseObject
								.call(this);
					},
					getAggregationDimensionName : function() {
						return this.m_aggregationDimensionName;
					},
					setAggregationDimension : function(dimension) {
						this.m_aggregationDimensionName = dimension.getName();
						this.notifyNodeChanged();
					},
					setAggregationDimensionName : function(dimensionName) {
						this.m_aggregationDimensionName = dimensionName;
						this.notifyNodeChanged();
					},
					assertStandardAggregationTypeBasic : function(
							aggregationType) {
						if (aggregationType === null) {
							return;
						}
						if (this.getQueryModel()
								.supportsExceptionAggregationDimsFormulas()) {
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(this.m_aggregationDimensionName)
									&& ((aggregationType === sap.firefly.AggregationType.AVERAGE) || (aggregationType === sap.firefly.AggregationType.COUNT))) {
								return;
							}
							if ((aggregationType !== sap.firefly.AggregationType.SUM)
									&& (aggregationType !== sap.firefly.AggregationType.MIN)
									&& (aggregationType !== sap.firefly.AggregationType.MAX)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL_ZERO)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"The aggregation type '",
														aggregationType
																.getName(),
														"' is not valid as standard aggregation. Use it as Exception Aggregation!"));
							}
						}
					},
					setAggregationType : function(aggregationType) {
						if (this.m_aggregationType === aggregationType) {
							return;
						}
						this
								.assertStandardAggregationTypeBasic(aggregationType);
						this.m_aggregationType = aggregationType;
						this.notifyNodeChanged();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFormulaMeasure",
				sap.firefly.QStructureMember,
				{
					$statics : {
						_createFormulaMeasure : function(context, queryModel,
								structure) {
							var member;
							if (queryModel.supportsFormulaMeasures() === false) {
								throw sap.firefly.XException
										.createUnsupportedOperationException();
							}
							member = new sap.firefly.QFormulaMeasure();
							member.setupFormulaMeasure(context, structure);
							return member;
						}
					},
					m_formula : null,
					m_isCalculatedBeforeAggregation : false,
					copyFormulaMeasure : function(origin) {
						var originType;
						sap.firefly.QFormulaMeasure.$superclass.copyStructureMember
								.call(this, origin);
						this.m_isCalculatedBeforeAggregation = origin.m_isCalculatedBeforeAggregation;
						if (origin.m_formula !== null) {
							originType = origin.m_formula
									.getOlapComponentType();
							if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_ATTRIBUTE) {
								this.m_formula = sap.firefly.QFormulaItemAttribute
										._createMember(this, this);
								(this.m_formula)
										.copyFormulaItemAttribute(origin.m_formula);
							} else {
								if (originType === sap.firefly.OlapComponentType.FORMULA_CONSTANT) {
									this.m_formula = sap.firefly.QFormulaItemConstant
											._createConstant(this, this);
									(this.m_formula)
											.copyFormulaItemConstant(origin.m_formula);
								} else {
									if (originType === sap.firefly.OlapComponentType.FORMULA_ITEM_MEMBER) {
										this.m_formula = sap.firefly.QFormulaItemMember
												._createMember(this, this);
										(this.m_formula)
												.copyFormulaItemMember(origin.m_formula);
									} else {
										if (originType === sap.firefly.OlapComponentType.FORMULA_OPERATION) {
											this.m_formula = sap.firefly.QFormulaItemOperation
													._createOperation(this,
															this);
											(this.m_formula)
													.copyFormulaItemOperation(origin.m_formula);
										} else {
											if (originType === sap.firefly.OlapComponentType.FORMULA_FUNCTION) {
												this.m_formula = sap.firefly.QFactory2
														.newFormulaFunction(this);
												(this.m_formula)
														.copyFormulaItemFunction(origin.m_formula);
											}
										}
									}
								}
							}
						}
					},
					setIsCalculatedBeforeAggregation : function(
							calculateBeforeAggregation) {
						this.m_isCalculatedBeforeAggregation = calculateBeforeAggregation;
						this.notifyNodeChanged();
					},
					isCalculatedBeforeAggregation : function() {
						return this.m_isCalculatedBeforeAggregation;
					},
					setupFormulaMeasure : function(context, structure) {
						sap.firefly.QFormulaMeasure.$superclass.setupStructureMember
								.call(this, context, structure,
										sap.firefly.MemberType.FORMULA);
					},
					releaseObject : function() {
						this.m_formula = sap.firefly.XObject
								.releaseIfNotNull(this.m_formula);
						sap.firefly.QFormulaMeasure.$superclass.releaseObject
								.call(this);
					},
					getFormula : function() {
						return this.m_formula;
					},
					setFormula : function(element) {
						var elementBase = element;
						if (elementBase !== null) {
							elementBase.setParent(this);
						}
						this.m_formula = element;
						this.notifyNodeChanged();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QRestrictedMeasure",
				sap.firefly.QStructureMember,
				{
					$statics : {
						_createRestrictedMeasure : function(context, structure) {
							var queryModel = context.getQueryModel();
							var member;
							if (queryModel.supportsRestrictedMeasures() === false) {
								throw sap.firefly.XException
										.createUnsupportedOperationException();
							}
							if (queryModel.getQueryManager().getMode() === sap.firefly.QueryManagerMode.BLENDING) {
								throw sap.firefly.XException
										.createUnsupportedOperationException();
							}
							member = new sap.firefly.QRestrictedMeasure();
							member.setupRestrictedMeasure(context, structure);
							return member;
						}
					},
					m_filter : null,
					m_aggregationDimensionName : null,
					copyRestrictedMeasure : function(origin) {
						this.copyStructureMember(origin);
						this.m_aggregationDimensionName = origin.m_aggregationDimensionName;
						(this.m_filter).copyFilterExpression(origin.m_filter);
					},
					setupRestrictedMeasure : function(context, structure) {
						sap.firefly.QRestrictedMeasure.$superclass.setupStructureMember
								.call(
										this,
										context,
										structure,
										sap.firefly.MemberType.RESTRICTED_MEASURE);
						this.m_filter = sap.firefly.QFilterExpression
								._createByApplication(context, this);
					},
					releaseObject : function() {
						this.m_aggregationDimensionName = null;
						this.m_filter = sap.firefly.XObject
								.releaseIfNotNull(this.m_filter);
						sap.firefly.QRestrictedMeasure.$superclass.releaseObject
								.call(this);
					},
					getFilter : function() {
						return this.m_filter;
					},
					getAggregationDimensionName : function() {
						return this.m_aggregationDimensionName;
					},
					setAggregationDimension : function(dimension) {
						this.setAggregationDimensionName(dimension.getName());
					},
					setAggregationDimensionName : function(dimensionName) {
						this.m_aggregationDimensionName = dimensionName;
						this.notifyNodeChanged();
					},
					assertStandardAggregationTypeRestricted : function(
							aggregationType) {
						if (aggregationType === null) {
							return;
						}
						if (this.getQueryModel()
								.supportsExceptionAggregationDimsFormulas()) {
							if (sap.firefly.XStringUtils
									.isNullOrEmpty(this.m_aggregationDimensionName)
									&& ((aggregationType === sap.firefly.AggregationType.AVERAGE) || (aggregationType === sap.firefly.AggregationType.COUNT))) {
								return;
							}
							if ((aggregationType !== sap.firefly.AggregationType.SUM)
									&& (aggregationType !== sap.firefly.AggregationType.MIN)
									&& (aggregationType !== sap.firefly.AggregationType.MAX)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL)
									&& (aggregationType !== sap.firefly.AggregationType.NOP_NULL_ZERO)) {
								throw sap.firefly.XException
										.createIllegalArgumentException(sap.firefly.XStringUtils
												.concatenate3(
														"The aggregation type '",
														aggregationType
																.getName(),
														"' is not valid as standard aggregation. Use it as Exception Aggregation!"));
							}
						}
					},
					setAggregationType : function(aggregationType) {
						if (this.m_aggregationType === aggregationType) {
							return;
						}
						this
								.assertStandardAggregationTypeRestricted(aggregationType);
						this.m_aggregationType = aggregationType;
						this.notifyNodeChanged();
					},
					supportsComplexSelections : function() {
						return true;
					},
					supportsCellValueOperand : function() {
						return true;
					},
					supportsExceptionAggregationDimsFormulas : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return false;
						}
						return queryModel
								.supportsExceptionAggregationDimsFormulas();
					},
					supportsIntersectLayers : function() {
						return false;
					},
					supportsSelectionVisibilityContainer : function() {
						return false;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QDimensionMemberVariable",
				sap.firefly.QVariable,
				{
					$statics : {
						createDimensionMemberVariable : function(context,
								parent, name, description) {
							var variable = new sap.firefly.QDimensionMemberVariable();
							variable.setupDimensionMemberVariable(context,
									parent, name, description);
							variable.m_manualInputResultMembers = sap.firefly.XListOfNameObject
									.create();
							return variable;
						},
						valueToXString : function(value) {
							if (value === null) {
								return null;
							}
							return sap.firefly.XStringValue.create(value
									.toString());
						}
					},
					m_dimension : null,
					m_defaultMemberSelection : null,
					m_memberSelection : null,
					m_externMemberSelection : null,
					m_selectionCapability : null,
					m_selectionCapabilities : null,
					m_hierarchyName : null,
					m_hierarchyVersion : null,
					m_hierarchyKeyDate : null,
					m_hierarchyBaseDimension : null,
					m_manualInputResultMembers : null,
					m_supportsValuehelp : false,
					m_uniqueId : null,
					m_isUsedInFixedFilter : false,
					m_isUsedInDynamicFilter : false,
					setupDimensionMemberVariable : function(context, parent,
							name, description) {
						sap.firefly.QDimensionMemberVariable.$superclass.setupVariable
								.call(this, context, parent, null, name,
										description);
						this.m_supportsValuehelp = true;
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
					},
					getVariableType : function() {
						return sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE;
					},
					releaseObject : function() {
						this.m_dimension = null;
						this.m_hierarchyName = null;
						this.m_hierarchyVersion = null;
						this.m_hierarchyKeyDate = null;
						this.m_hierarchyBaseDimension = null;
						this.m_selectionCapability = null;
						this.m_selectionCapabilities = null;
						this.m_defaultMemberSelection = null;
						this.m_memberSelection = null;
						this.m_externMemberSelection = null;
						this.m_uniqueId = null;
						this.m_manualInputResultMembers = sap.firefly.XObject
								.releaseIfNotNull(this.m_manualInputResultMembers);
						sap.firefly.QDimensionMemberVariable.$superclass.releaseObject
								.call(this);
					},
					copyDimensionMemberVariable : function(origin) {
						var queryModel;
						var context;
						var cloneDimension;
						var size;
						var i;
						var originMember;
						var cloneMemberDimension;
						var cloneMember;
						var cloneSelection;
						var cloneProduct;
						var cloneList;
						var cloneDefaultSelection;
						var cloneDefaultProduct;
						var cloneDefaultList;
						var cloneExternSelection;
						var cloneExternProduct;
						var cloneExternList;
						var cloneField;
						var origField;
						sap.firefly.QDimensionMemberVariable.$superclass.copyVariable
								.call(this, origin);
						queryModel = this.getQueryModel();
						context = this.getContext();
						cloneDimension = queryModel.getDimensionByName(origin
								.getDimension().getName());
						this.setDimension(cloneDimension);
						if (origin.m_manualInputResultMembers !== null) {
							this.m_manualInputResultMembers = sap.firefly.XListOfNameObject
									.create();
							size = origin.m_manualInputResultMembers.size();
							for (i = 0; i < size; i++) {
								originMember = origin.m_manualInputResultMembers
										.get(i);
								cloneMemberDimension = queryModel
										.getDimensionByName(originMember
												.getDimension().getName());
								cloneMember = cloneMemberDimension
										.getDimensionMember(originMember
												.getName(), false);
								cloneMember.copyDimensionMember(originMember);
								this.m_manualInputResultMembers
										.add(cloneMember);
							}
						}
						if (origin.m_memberSelection !== null) {
							cloneSelection = sap.firefly.QFilterExpression
									._createByApplication(context, this);
							cloneProduct = sap.firefly.QFilterCartesianProduct
									._create(context, cloneSelection);
							cloneSelection.setCartesianProduct(cloneProduct);
							cloneList = cloneProduct
									.getCartesianListWithDefault(this.m_dimension);
							cloneList
									.copyCartesianList(origin.m_memberSelection);
							this.setSelectionContainer(cloneSelection);
						}
						if (origin.m_defaultMemberSelection !== null) {
							cloneDefaultSelection = sap.firefly.QFilterExpression
									._createByApplication(context, this);
							cloneDefaultProduct = sap.firefly.QFilterCartesianProduct
									._create(context, cloneDefaultSelection);
							cloneDefaultSelection
									.setCartesianProduct(cloneDefaultProduct);
							cloneDefaultList = cloneDefaultProduct
									.getCartesianListWithDefault(this.m_dimension);
							cloneDefaultList
									.copyCartesianList(origin.m_defaultMemberSelection);
							this
									.setDefaultSelectionCartesianList(cloneDefaultList);
						}
						if (origin.m_externMemberSelection !== null) {
							cloneExternSelection = sap.firefly.QFilterExpression
									._createByApplication(context, this);
							cloneExternProduct = sap.firefly.QFilterCartesianProduct
									._create(context, cloneExternSelection);
							cloneExternList = cloneExternProduct
									.getCartesianListWithDefault(this.m_dimension);
							cloneExternList
									.copyCartesianList(origin.m_externMemberSelection);
							this.setExternMemberSelection(cloneExternSelection);
						}
						if (origin.m_selectionCapability !== null) {
							origField = origin.m_selectionCapability.getField();
							if (origField !== null) {
								cloneField = queryModel
										.getFieldByName(origField.getName());
							} else {
								cloneField = null;
							}
							if (origin.m_selectionCapability
									.getOlapComponentType() === sap.firefly.OlapComponentType.FILTER_CAPABILITY) {
								this.m_selectionCapability = sap.firefly.QFilterCapability
										._createFilterCapability(context, this,
												cloneField);
								(this.m_selectionCapability)
										.copyFilterCapability(origin.m_selectionCapability);
							} else {
								this.m_selectionCapability = sap.firefly.QFilterCapabilityGroup
										._createFilterCapabilityGroup(context,
												this, cloneField);
								(this.m_selectionCapability)
										.copyFilterCapabilityGroup(origin.m_selectionCapability);
							}
						}
						if (origin.m_selectionCapabilities !== null) {
							this.m_selectionCapabilities = sap.firefly.QFilterCapabilityList
									.createFilterCapabilitiesForVariable(
											context, this);
							(this.m_selectionCapabilities)
									.copyFilterCapabilityList(origin.m_selectionCapabilities);
						}
						this.m_hierarchyName = origin.m_hierarchyName;
						this.m_hierarchyVersion = origin.m_hierarchyVersion;
						this.m_hierarchyKeyDate = origin.m_hierarchyKeyDate;
						this.m_hierarchyBaseDimension = origin.m_hierarchyBaseDimension;
						this.m_supportsValuehelp = origin.m_supportsValuehelp;
						this.m_uniqueId = origin.m_uniqueId;
						this.m_isUsedInFixedFilter = origin.m_isUsedInFixedFilter;
						this.m_isUsedInDynamicFilter = origin.m_isUsedInDynamicFilter;
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					},
					setSelectionCartesianList : function(memberSelection) {
						this.m_memberSelection = memberSelection;
						if (this.m_memberSelection !== null) {
							(this.m_memberSelection).setParent(this);
						}
					},
					hasMemberSelection : function() {
						return (this.m_memberSelection !== null)
								&& this.m_memberSelection.hasElements();
					},
					getMemberSelection : function() {
						var dimension;
						var keyField;
						if (this.m_memberSelection === null) {
							dimension = this.getDimension();
							if (dimension !== null) {
								keyField = dimension.getKeyField();
								this.m_memberSelection = sap.firefly.QFilterCartesianList
										._create(this.getContext(), this,
												keyField, null);
							}
						}
						return this.m_memberSelection;
					},
					setDefaultSelectionCartesianList : function(memberSelection) {
						this.m_defaultMemberSelection = memberSelection;
						if (this.m_defaultMemberSelection !== null) {
							(this.m_defaultMemberSelection).setParent(this);
						}
					},
					getDefaultMemberSelection : function() {
						return this.m_defaultMemberSelection;
					},
					hasDefaultMemberSelection : function() {
						return this.m_defaultMemberSelection !== null;
					},
					setSelectionContainer : function(selectionContainer) {
						var complexSelectionRoot;
						var selectionList;
						if (selectionContainer !== null) {
							if (selectionContainer.isCartesianProduct() === false) {
								complexSelectionRoot = selectionContainer
										.getComplexSelectionRoot();
								if (complexSelectionRoot !== null) {
									if (complexSelectionRoot.getComponentType() === sap.firefly.FilterComponentType.CARTESIAN_LIST) {
										this
												.setSelectionCartesianList(selectionContainer
														.getComplexSelectionRoot());
									} else {
										throw sap.firefly.XException
												.createRuntimeException("Dimension Member Variable: Selection Conatiner not valid!");
									}
								}
							} else {
								if (selectionContainer.getCartesianProduct() !== null) {
									selectionList = selectionContainer
											.getCartesianProduct()
											.getCartesianList(
													this.getDimension());
									if (selectionList !== null) {
										this
												.setSelectionCartesianList(selectionList);
									}
								}
							}
						}
					},
					getDimension : function() {
						return this.m_dimension;
					},
					getExternMemberSelection : function() {
						return this.m_externMemberSelection;
					},
					setExternMemberSelection : function(externMemberSelection) {
						if (externMemberSelection !== null) {
							(externMemberSelection).addSecondaryParent(this);
						}
						if (this.m_externMemberSelection !== null) {
							(this.m_externMemberSelection)
									.removeSecondaryParent(this);
						}
						this.m_externMemberSelection = externMemberSelection;
						this.notifyNodeChanged();
					},
					setDimensionMember : function(value) {
						var memberSelection = this.getMemberSelection();
						var singleElement = memberSelection
								.addNewCartesianElement();
						singleElement
								.setComparisonOperator(sap.firefly.ComparisonOperator.EQUAL);
						singleElement.getLow().setDimensionMember(value);
					},
					getNewDimensionMember : function(name) {
						var dimension;
						if (name === null) {
							return null;
						}
						dimension = this.getDimension();
						if (dimension === null) {
							return null;
						}
						return dimension.getDimensionMember(name
								.getStringValue(), false);
					},
					getDimensionMember : function() {
						var memberSelection = this.getMemberSelection();
						var firstElement;
						var firstValue;
						var dimensionMember;
						if (memberSelection.size() === 1) {
							firstElement = memberSelection.getOp(0);
							if (firstElement.getComparisonOperator() === sap.firefly.ComparisonOperator.EQUAL) {
								firstValue = firstElement.getLow();
								if (firstValue !== null) {
									dimensionMember = firstValue
											.getDimensionMember();
									if (dimensionMember === null) {
										return this
												.getNewDimensionMember(sap.firefly.QDimensionMemberVariable
														.valueToXString(firstValue
																.getValue()));
									}
									return dimensionMember;
								}
							}
						}
						return null;
					},
					createAndSetVariableDimension : function(type, name, text) {
						var dimension;
						this.stopEventing();
						if (type
								.isTypeOf(sap.firefly.DimensionType.ABSTRACT_STRUCTURE)) {
							return null;
						}
						dimension = sap.firefly.QDimension._create(this
								.getContext(), this, type);
						dimension.setName(name);
						dimension.setText(text);
						this.resumeEventing();
						return dimension;
					},
					setDimension : function(dimension) {
						this.m_dimension = dimension;
						this.setValueType(dimension.getKeyField()
								.getValueType());
						this.setSelectionCartesianList(null);
					},
					getSelectionCapability : function() {
						return this.m_selectionCapability;
					},
					setSelectionCapability : function(capability) {
						this.m_selectionCapability = capability;
					},
					getSelectionCapabilities : function() {
						return this.m_selectionCapabilities;
					},
					getSelectionCapabilitiesBase : function() {
						return this.m_selectionCapabilities;
					},
					setSelectionCapabilities : function(selectionCapabilities) {
						this.m_selectionCapabilities = selectionCapabilities;
					},
					hasUniqueHierarchy : function() {
						return (this.m_hierarchyName !== null);
					},
					getHierarchyName : function() {
						return this.m_hierarchyName;
					},
					getHierarchyVersion : function() {
						return this.m_hierarchyVersion;
					},
					getHierarchyKeyDate : function() {
						return this.m_hierarchyKeyDate;
					},
					getHierarchyDueDate : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setHierarchyDueDate : function(dueDate) {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					setHierarchyName : function(name) {
						this.m_hierarchyName = name;
					},
					setHierarchyVersion : function(version) {
						this.m_hierarchyVersion = version;
					},
					setHierarchyKeyDate : function(keyDate) {
						this.m_hierarchyKeyDate = keyDate;
					},
					getHierarchyBaseDimension : function() {
						return this.m_hierarchyBaseDimension;
					},
					setHierarchyBaseDimension : function(name) {
						this.m_hierarchyBaseDimension = name;
					},
					setValueByStringExt : function(value, isManualInput) {
						var memberSelection;
						var dimension;
						var keyField;
						var singleMemberSelection;
						var low;
						this.queueEventing();
						memberSelection = this.getMemberSelection();
						memberSelection.clear();
						dimension = this.getDimension();
						keyField = dimension.getKeyField();
						memberSelection.setField(keyField);
						singleMemberSelection = sap.firefly.QFilterOperation
								._create(this.getContext(), memberSelection
										.getFilterExpression(), null);
						singleMemberSelection.setField(keyField);
						singleMemberSelection
								.setSetSign(sap.firefly.SetSign.INCLUDING);
						singleMemberSelection
								.setComparisonOperator(sap.firefly.ComparisonOperator.EQUAL);
						low = singleMemberSelection.getLow();
						if (isManualInput) {
							low.setStringValue(value);
							low.setIsManualInput(true);
						} else {
							low.setDimensionMember(dimension
									.getDimensionMember(value, false));
						}
						memberSelection.add(singleMemberSelection);
						this.resumeEventing();
						this.notifyNodeChanged();
					},
					getValueByString : function() {
						var memberSelection = this.getMemberSelection();
						var filterElement;
						if (memberSelection.size() < 1) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Cartesian product does not contain any selections.");
						}
						if (memberSelection.size() > 1) {
							throw sap.firefly.XException
									.createIllegalArgumentException("Cartesian product contain more than one selection.");
						}
						filterElement = memberSelection.get(0);
						return filterElement.getLow().getValue().toString();
					},
					getManualInputResultValues : function() {
						this.initCollections();
						return this.m_manualInputResultMembers
								.getValuesAsReadOnlyList();
					},
					addManualInputResultValue : function(dimensionMember) {
						this.initCollections();
						if (dimensionMember !== null) {
							this.m_manualInputResultMembers
									.add(dimensionMember);
						}
					},
					clearManualInputResultValue : function() {
						this.initCollections();
						this.m_manualInputResultMembers.clear();
					},
					initCollections : function() {
						if (this.m_manualInputResultMembers === null) {
							this.m_manualInputResultMembers = sap.firefly.XListOfNameObject
									.create();
						}
					},
					newVariableValue : function() {
						return sap.firefly.QVariableValue.create(this);
					},
					isValuehelpSupported : function() {
						return this.supportsValueHelp();
					},
					getFieldAccessorSingle : function() {
						var queryModel = this.getQueryModel();
						if (queryModel === null) {
							return this;
						}
						return queryModel;
					},
					getFieldByName : function(name) {
						return this.getDimension().getFieldByName(name);
					},
					getFieldByNameOrAlias : function(name) {
						return this.getDimension().getFieldByNameOrAlias(name);
					},
					supportsComplexSelections : function() {
						return true;
					},
					supportsCellValueOperand : function() {
						return true;
					},
					getFilterExpression : function() {
						return null;
					},
					supportsValueHelp : function() {
						return this.m_supportsValuehelp;
					},
					setSupportsValueHelp : function(isSupported) {
						this.m_supportsValuehelp = isSupported;
					},
					processVariableHelp : function(syncType, listener,
							customIdentifier) {
						return this.getDimension().processVariableHelp(
								this.getName(), syncType, listener,
								customIdentifier);
					},
					getValues : function() {
						var valueHelp;
						var result;
						var data;
						var members;
						var extResult;
						if (this.getApplication().getVersion() >= sap.firefly.XVersion.V999_NEW_VAR_VALUE_HELP) {
							valueHelp = this.newValueHelpMembers();
							result = valueHelp.process(
									sap.firefly.SyncType.BLOCKING, null, null);
							if (result.hasErrors()) {
								return null;
							}
							data = result.getData();
							members = data.getMembers();
							return members;
						}
						extResult = this.getDimension().processVariableHelp(
								this.getName(), sap.firefly.SyncType.BLOCKING,
								null, null);
						if (extResult.hasErrors()) {
							throw sap.firefly.XException
									.createRuntimeException(extResult
											.getSummary());
						}
						return this.convertNodeListToMemberList(extResult
								.getData());
					},
					convertNodeListToMemberList : function(nodeList) {
						var memberList;
						var nodeIterator;
						if (nodeList === null) {
							return null;
						}
						memberList = sap.firefly.XList.create();
						nodeIterator = nodeList.getIterator();
						while (nodeIterator.hasNext()) {
							memberList.add(nodeIterator.next()
									.getDimensionMember());
						}
						nodeIterator.releaseObject();
						return memberList;
					},
					newValueHelpMembers : function() {
						return sap.firefly.QValueHelpVarDimMember.create(this
								.getContext(), this);
					},
					supportsIntersectLayers : function() {
						return false;
					},
					supportsSelectionVisibilityContainer : function() {
						return false;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherVar;
						var memberSelection;
						sap.firefly.QDimensionMemberVariable.$superclass.mergeDeepRecursive
								.call(this, settings, other);
						otherVar = other;
						if (otherVar.hasMemberSelection()
								&& (this.getMemberSelection() !== null)) {
							memberSelection = otherVar.getMemberSelection();
							(this.m_memberSelection).mergeDeepRecursive(
									settings, memberSelection);
						}
					},
					isEnforcedDynamicValue : function() {
						if (this.m_dimension === null) {
							return false;
						}
						return this.m_dimension.isEnforcedDynamicValue();
					},
					isUsedInFixedFilter : function() {
						return this.m_isUsedInFixedFilter;
					},
					isUsedInDynamicFilter : function() {
						return this.m_isUsedInDynamicFilter;
					},
					setIsUsedInFixedFilter : function(isUsedInFixedFilter) {
						this.m_isUsedInFixedFilter = isUsedInFixedFilter;
					},
					setIsUsedInDynamicFilter : function(isUsedInDynamicFilter) {
						this.m_isUsedInDynamicFilter = isUsedInDynamicFilter;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaCommandClose",
				sap.firefly.DataAreaCommand,
				{
					createCommandStructure : function() {
						var requestStructure = sap.firefly.PrStructure.create();
						var dataAreaName = this.getDataArea().getDataArea();
						var planningStructure = requestStructure
								.setNewStructureByName(sap.firefly.InAConstants.QY_ANALYTICS);
						var actionsList = planningStructure
								.setNewListByName(sap.firefly.InAConstants.QY_ACTIONS);
						var actionStructure = actionsList.addNewStructure();
						var dataAreasList;
						actionStructure.setStringByName(
								sap.firefly.InAConstants.QY_TYPE,
								sap.firefly.InAConstants.VA_TYPE_CLOSE);
						dataAreasList = actionStructure
								.setNewListByName(sap.firefly.InAConstants.QY_DATA_AREAS);
						dataAreasList.addString(dataAreaName);
						return requestStructure;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaCommandResultClose();
					}
				});
$Firefly.createClass("sap.firefly.DataAreaCommandResultClose",
		sap.firefly.DataAreaCommandResult, {
			processResponseStructureCommand : function(responseStructure,
					messageManager, hasErrors) {
				var dataArea;
				var queryConsumerServices;
				var i;
				var queryConsumerService;
				var planningService;
				if (hasErrors) {
					if (this.useStrictErrorHandling()) {
						return;
					}
				}
				dataArea = this.getDataAreaCommand().getDataArea();
				queryConsumerServices = sap.firefly.DataAreaUtil
						.getQueryConsumerServices(dataArea);
				if (queryConsumerServices !== null) {
					for (i = 0; i < queryConsumerServices.size(); i++) {
						queryConsumerService = queryConsumerServices.get(i);
						queryConsumerService.releaseObject();
					}
				}
				sap.firefly.DataAreaState.removeDataAreaState(dataArea);
				planningService = dataArea.getPlanningService();
				planningService.releaseObject();
				this.setExecuted(true);
			}
		});
$Firefly.createClass("sap.firefly.PlanningFunction",
		sap.firefly.PlanningOperation, {
			createCommandResultInstance : function() {
				return new sap.firefly.PlanningFunctionResult();
			},
			getPlanningFunctionIdentifier : function() {
				return this.getPlanningOperationIdentifier();
			},
			getPlanningFunctionMetadata : function() {
				return this.getPlanningOperationMetadata();
			},
			getPlanningType : function() {
				return "PlanningFunction";
			},
			getSelectionJson : function() {
				var selector = this.getSelector();
				var selectionContainer;
				if (selector !== null) {
					selectionContainer = selector.getSelectionStateContainer();
					if (selectionContainer !== null) {
						return selectionContainer.serializeToElement(
								sap.firefly.QModelFormat.INA_DATA, null);
					}
				}
				return null;
			}
		});
$Firefly.createClass("sap.firefly.PlanningFunctionResult",
		sap.firefly.PlanningOperationResult, {
			getPlanningFunction : function() {
				return this.getPlanningOperation();
			}
		});
$Firefly.createClass("sap.firefly.PlanningSequence",
		sap.firefly.PlanningOperation, {
			createCommandResultInstance : function() {
				return new sap.firefly.PlanningSequenceResult();
			},
			getPlanningSequenceIdentifier : function() {
				return this.getCommandIdentifier();
			},
			getPlanningSequenceMetadata : function() {
				return this.getPlanningOperationMetadata();
			},
			getPlanningType : function() {
				return "PlanningSequence";
			}
		});
$Firefly.createClass("sap.firefly.PlanningSequenceResult",
		sap.firefly.PlanningOperationResult, {
			getPlanningSequence : function() {
				return this.getPlanningCommand();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestCreatePlanningOperation",
				sap.firefly.DataAreaRequest,
				{
					$statics : {
						COMMAND_IDENTIFIER : "COMMAND_IDENTIFIER"
					},
					getCommandIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.DataAreaRequestCreatePlanningOperation.COMMAND_IDENTIFIER);
					},
					setCommandIdentifier : function(commandIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.DataAreaRequestCreatePlanningOperation.COMMAND_IDENTIFIER,
										commandIdentifier);
					},
					getPlanningOperationIdentifier : function() {
						return this.getCommandIdentifier();
					},
					doProcessCommand : function(synchronizationType,
							planningCommandResult) {
						var commandFactory = sap.firefly.XCommandFactory
								.create(this.getApplication());
						var cmdCreatePlanningOperation = commandFactory
								.createCommand(sap.firefly.XCmdCreatePlanningOperation.CMD_NAME);
						cmdCreatePlanningOperation
								.addParameter(
										sap.firefly.XCmdCreatePlanningOperation.PARAM_I_DATA_AREA,
										this.getDataArea());
						cmdCreatePlanningOperation
								.addParameter(
										sap.firefly.XCmdCreatePlanningOperation.PARAM_I_PLANNING_OPERATION_IDENTIFIER,
										this.getPlanningOperationIdentifier());
						cmdCreatePlanningOperation.processCommand(
								synchronizationType,
								sap.firefly.XCommandCallback.create(this),
								planningCommandResult);
					},
					onXCommandCallbackProcessed : function(extResult,
							commandResult, customIdentifier) {
						var extPlanningCommandResult = sap.firefly.ExtResult
								.create(customIdentifier, extResult);
						var response;
						if (extResult.hasErrors() === false) {
							response = customIdentifier;
							response
									.setCreatedPlanningOperation(commandResult
											.getResultParameter(sap.firefly.XCmdCreatePlanningOperation.PARAM_E_PLANNING_OPERATION));
						}
						this.onCommandExecuted(extPlanningCommandResult);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestGetPlanningOperationMetadata",
				sap.firefly.DataAreaRequest,
				{
					$statics : {
						PLANNING_OPERATION_IDENTIFIER : "PLANNING_OPERATION_IDENTIFIER",
						INSTANCE_ID : "INSTANCE_ID"
					},
					getPlanningOperationIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.DataAreaRequestGetPlanningOperationMetadata.PLANNING_OPERATION_IDENTIFIER);
					},
					setPlanningOperationIdentifier : function(
							planningOperationIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.DataAreaRequestGetPlanningOperationMetadata.PLANNING_OPERATION_IDENTIFIER,
										planningOperationIdentifier);
					},
					getInstanceId : function() {
						var instanceId = this
								.getPropertyString(sap.firefly.DataAreaRequestGetPlanningOperationMetadata.INSTANCE_ID);
						if (instanceId === null) {
							instanceId = this.getPlanningService()
									.getApplication().createNextInstanceId();
							this
									.setPropertyString(
											sap.firefly.DataAreaRequestGetPlanningOperationMetadata.INSTANCE_ID,
											instanceId);
						}
						return instanceId;
					},
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						var dataAreaState = sap.firefly.DataAreaState
								.getDataAreaState(this.getDataArea());
						var dataAreaStructure;
						var metadata;
						var expand;
						var dataSource;
						var dataAreaName;
						if (dataAreaState.isSubmitted() === false) {
							dataAreaStructure = dataAreaState.serializeToJson();
							if (dataAreaStructure !== null) {
								request.setNewListByName(
										sap.firefly.InAConstants.QY_DATA_AREAS)
										.add(dataAreaStructure);
							}
						}
						metadata = request
								.setNewStructureByName(sap.firefly.InAConstants.QY_METADATA);
						(this.getPlanningService()).getInaCapabilities()
								.exportActiveMainCapabilities(metadata);
						metadata.setStringByName(
								sap.firefly.InAConstants.QY_CONTEXT,
								sap.firefly.InAConstants.VA_CONTEXT_PLANNING);
						expand = metadata
								.setNewListByName(sap.firefly.InAConstants.QY_EXPAND);
						expand
								.addString(sap.firefly.InAConstants.VA_EXPAND_COMMAND);
						dataSource = metadata
								.setNewStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataAreaName = this.getDataArea().getDataArea();
						if (dataAreaName === null) {
							dataAreaName = sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT;
						}
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_DATA_AREA,
								dataAreaName);
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_INSTANCE_ID, this
										.getInstanceId());
						return request;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaResponseCreatePlanningOperation",
				sap.firefly.DataAreaResponse,
				{
					$statics : {
						CREATED_PLANNING_OPERATION : "CREATED_PLANNING_OPERATION"
					},
					getPlanningRequestCreateCommandWithId : function() {
						return this.getPlanningCommand();
					},
					getCreatedPlanningCommandWithId : function() {
						return this.getCreatedPlanningOperation();
					},
					setCreatedPlanningOperation : function(planningOperation) {
						this
								.setPropertyObject(
										sap.firefly.DataAreaResponseCreatePlanningOperation.CREATED_PLANNING_OPERATION,
										planningOperation);
					},
					getDataAreaRequestCreatePlanningOperation : function() {
						return this.getPlanningRequestCreateCommandWithId();
					},
					getCreatedPlanningOperation : function() {
						return this
								.getPropertyObject(sap.firefly.DataAreaResponseCreatePlanningOperation.CREATED_PLANNING_OPERATION);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaResponseGetPlanningOperationMetadata",
				sap.firefly.DataAreaResponse,
				{
					$statics : {
						PLANNING_OPERATION_METADATA : "PLANNING_OPERATION_METADATA"
					},
					getDataAreaRequestGetPlanningOperationMetadata : function() {
						return this.getPlanningRequest();
					},
					getPlanningOperationMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.DataAreaResponseGetPlanningOperationMetadata.PLANNING_OPERATION_METADATA);
					},
					setPlanningOperationMetadata : function(
							planningOperationMetadata) {
						this
								.setPropertyObject(
										sap.firefly.DataAreaResponseGetPlanningOperationMetadata.PLANNING_OPERATION_METADATA,
										planningOperationMetadata);
					},
					extractBaseDataSource : function(step) {
						var baseDataSource = sap.firefly.PrUtils
								.getStructureProperty(
										step,
										sap.firefly.InAConstants.QY_BASE_DATA_SOURCE);
						var objectName;
						var metaObjectType;
						var identifier;
						if (baseDataSource === null) {
							return null;
						}
						objectName = sap.firefly.PrUtils
								.getStringValueProperty(
										baseDataSource,
										sap.firefly.InAConstants.QY_OBJECT_NAME,
										null);
						if (objectName === null) {
							return null;
						}
						metaObjectType = sap.firefly.MetaObjectType
								.lookup(sap.firefly.PrUtils
										.getStringValueProperty(
												baseDataSource,
												sap.firefly.InAConstants.QY_TYPE,
												null));
						if (metaObjectType === null) {
							return null;
						}
						identifier = sap.firefly.QFactory2.newDataSource();
						identifier.setType(metaObjectType);
						identifier.setName(objectName);
						return identifier;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelCloseCommand",
				sap.firefly.PlanningModelCommand,
				{
					$statics : {
						CLOSE_MODE : "CLOSE_MODE"
					},
					setCloseMode : function(closeMode) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelCloseCommand.CLOSE_MODE,
										closeMode);
						return this;
					},
					getCloseMode : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelCloseCommand.CLOSE_MODE);
					},
					addParametersToJson : function(parametersStructure) {
						var closeMode = this.getCloseMode();
						if (closeMode === null) {
							closeMode = sap.firefly.CloseModeType.BACKUP;
						}
						parametersStructure.setStringByName(
								sap.firefly.InAConstants.LC_MODE, closeMode
										.getName());
					}
				});
$Firefly.createClass("sap.firefly.PlanningModelRequestCleanup",
		sap.firefly.PlanningModelRequest, {
			$statics : {
				createCleanupCommand : function() {
					var command = sap.firefly.PrStructure.create();
					command.setStringByName(
							sap.firefly.InAConstants.LC_COMMAND,
							sap.firefly.InAConstants.VC_COMMAND_CLEANUP);
					return command;
				}
			},
			createCommandStructure : function() {
				var request = sap.firefly.PrStructure.create();
				var commands = sap.firefly.PlanningModelCommandHelper
						.createCommandsList(request);
				commands.add(sap.firefly.PlanningModelRequestCleanup
						.createCleanupCommand());
				commands.add(sap.firefly.PlanningModelCommandHelper
						.createModelCommand(this.getPlanningModel(),
								sap.firefly.InAConstants.LC_GET_VERSIONS));
				return request;
			},
			createCommandResultInstance : function() {
				return new sap.firefly.PlanningModelResponseCleanup();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestCreateAction",
				sap.firefly.PlanningModelRequest,
				{
					$statics : {
						COMMAND_IDENTIFIER : "COMMAND_IDENTIFIER",
						EXT_RESULT_GET_ACTION_PARAMETERS : "EXT_RESULT_GET_ACTION_PARAMETERS"
					},
					getCommandIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestCreateAction.COMMAND_IDENTIFIER);
					},
					setCommandIdentifier : function(commandIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestCreateAction.COMMAND_IDENTIFIER,
										commandIdentifier);
					},
					getActionParameters : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestCreateAction.EXT_RESULT_GET_ACTION_PARAMETERS);
					},
					setActionParameters : function(actionParameters) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestCreateAction.EXT_RESULT_GET_ACTION_PARAMETERS,
										actionParameters);
					},
					doProcessCommand : function(synchronizationType,
							planningCommandResult) {
						var extResultActionParameters = this
								.getActionParameters();
						var extResult = null;
						var messages;
						var action;
						if (extResultActionParameters === null) {
							messages = sap.firefly.MessageManager
									.createMessageManager();
							messages.addError(0,
									"illegal state - not action parameters");
							extResult = sap.firefly.ExtResult.create(
									planningCommandResult, messages);
						} else {
							if (!extResultActionParameters.hasErrors()) {
								action = new sap.firefly.PlanningAction();
								action
										.setCommandType(sap.firefly.PlanningCommandType.PLANNING_ACTION);
								action.setPlanningService(this
										.getPlanningService());
								action.setPlanningContext(this
										.getPlanningModel());
								action.setCommandIdentifier(this
										.getActionIdentifier());
								action
										.setActionParameterMetadata(extResultActionParameters
												.getData()
												.getActionParameterMetadata());
								(planningCommandResult)
										.setCreatedPlanningAction(action);
							}
							extResult = sap.firefly.ExtResult.create(
									planningCommandResult,
									extResultActionParameters);
						}
						this.onCommandExecuted(sap.firefly.ExtResult.create(
								extResult.getData(), extResult));
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseCreateAction();
					},
					getActionIdentifier : function() {
						return this.getCommandIdentifier();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestCreateActionForQuery",
				sap.firefly.PlanningModelRequest,
				{
					$statics : {
						COMMAND_IDENTIFIER : "COMMAND_IDENTIFIER"
					},
					getCommandIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestCreateActionForQuery.COMMAND_IDENTIFIER);
					},
					setCommandIdentifier : function(commandIdentifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestCreateActionForQuery.COMMAND_IDENTIFIER,
										commandIdentifier);
					},
					createCommandStructure : function() {
						return null;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseCreateActionForQuery();
					},
					getActionForQueryIdentifier : function() {
						return this.getCommandIdentifier();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestGetActionParameters",
				sap.firefly.PlanningModelRequest,
				{
					$statics : {
						ACTION_METADATA : "ACTION_METADATA"
					},
					getActionMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestGetActionParameters.ACTION_METADATA);
					},
					setActionMetadata : function(actionMetadata) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestGetActionParameters.ACTION_METADATA,
										actionMetadata);
					},
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						var planningStructure = request
								.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						planningStructure
								.setStringByName(
										sap.firefly.InAConstants.LC_COMMAND,
										sap.firefly.InAConstants.VC_COMMAND_GET_ACTION_PARAMETERS);
						planningStructure.setStringByName(
								sap.firefly.InAConstants.LC_SCHEMA, this
										.getPlanningModel()
										.getPlanningModelSchema());
						planningStructure.setStringByName(
								sap.firefly.InAConstants.LC_MODEL, this
										.getPlanningModel()
										.getPlanningModelName());
						planningStructure.setStringByName(
								sap.firefly.InAConstants.LC_ACTION_ID, this
										.getActionMetadata().getActionId());
						return request;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseGetActionParameters();
					},
					doProcessCommand : function(synchronizationType,
							planningCommandResult) {
						var actionMetadata = this.getActionMetadata();
						var extPlanningCommandResult;
						if (actionMetadata.isActionParameterMetadataSet()) {
							extPlanningCommandResult = sap.firefly.ExtResult
									.create(planningCommandResult,
											sap.firefly.MessageManager
													.createMessageManager());
							this.onCommandExecuted(extPlanningCommandResult);
						} else {
							sap.firefly.PlanningModelRequestGetActionParameters.$superclass.doProcessCommand
									.call(this, synchronizationType,
											planningCommandResult);
						}
					},
					onCommandExecuted : function(extPlanningCommandResult) {
						var actionMetadata = this.getActionMetadata();
						var actionParameterMetadata = null;
						var response = extPlanningCommandResult.getData();
						if (actionMetadata.isActionParameterMetadataSet()) {
							actionParameterMetadata = actionMetadata
									.getActionParameterMetadata();
						} else {
							if ((extPlanningCommandResult.isValid())
									&& (response !== null)) {
								actionParameterMetadata = response
										.getActionParameterMetadata();
								actionMetadata
										.setActionParameterMetadata(actionParameterMetadata);
							}
						}
						if (response !== null) {
							response
									.setActionParameterMetadata(actionParameterMetadata);
						}
						sap.firefly.PlanningModelRequestGetActionParameters.$superclass.onCommandExecuted
								.call(this, extPlanningCommandResult);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestRefreshActions",
				sap.firefly.PlanningModelRequest,
				{
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						var commands = sap.firefly.PlanningModelCommandHelper
								.createCommandsList(request);
						var model = this.getPlanningModel();
						commands
								.add(sap.firefly.PlanningModelCommandHelper
										.createModelCommand(
												model,
												sap.firefly.InAConstants.LC_GET_ACTIONS));
						if (model.supportsFastActionParameters()) {
							commands
									.add(sap.firefly.PlanningModelCommandHelper
											.createModelCommand(
													model,
													sap.firefly.InAConstants.LC_GET_ACTION_PARAMETERS));
						}
						return request;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseRefreshActions();
					}
				});
$Firefly.createClass("sap.firefly.PlanningModelRequestRefreshVersions",
		sap.firefly.PlanningModelRequest, {
			createCommandStructure : function() {
				var request = sap.firefly.PrStructure.create();
				var commands = sap.firefly.PlanningModelCommandHelper
						.createCommandsList(request);
				var model = this.getPlanningModel();
				commands.add(sap.firefly.PlanningModelCommandHelper
						.createModelCommand(model,
								sap.firefly.InAConstants.LC_GET_VERSIONS));
				return request;
			},
			createCommandResultInstance : function() {
				return new sap.firefly.PlanningModelResponseRefreshVersions();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestUpdateVersionPrivileges",
				sap.firefly.PlanningModelRequest,
				{
					$statics : {
						addShowVersionPrivilegesCommands : function(
								commandsList, planningModel) {
							var queryDataSources = planningModel
									.getQueryDataSources();
							var versions = planningModel.getVersions();
							var i;
							var queryDataSource;
							var j;
							var version;
							for (i = 0; i < queryDataSources.size(); i++) {
								queryDataSource = queryDataSources.get(i)
										.getDataSource();
								for (j = 0; j < versions.size(); j++) {
									version = versions.get(j);
									sap.firefly.PlanningModelRequestUpdateVersionPrivileges
											.addShowVersionPrivilegesCommand(
													commandsList,
													planningModel,
													queryDataSource, version);
								}
							}
						},
						addShowVersionPrivilegesCommand : function(
								commandsList, planningModel, dataSource,
								version) {
							var commandStructure = commandsList
									.addNewStructure();
							commandStructure
									.setStringByName(
											sap.firefly.InAConstants.LC_COMMAND,
											sap.firefly.InAConstants.VC_COMMAND_SHOW_VERSION_PRIVILEGES);
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_SCHEMA,
									planningModel.getPlanningModelSchema());
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_MODEL,
									planningModel.getPlanningModelName());
							commandStructure
									.setStringByName(
											sap.firefly.InAConstants.LC_QUERY_SOURCE_SCHEMA,
											dataSource.getSchemaName());
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_QUERY_SOURCE,
									dataSource.getObjectName());
							commandStructure.setIntegerByName(
									sap.firefly.InAConstants.LC_VERSION_ID,
									version.getVersionId());
							if (version.isSharedVersion()) {
								commandStructure.setStringByName(
										sap.firefly.InAConstants.LC_OWNER,
										version.getVersionOwner());
							}
						},
						addPrivilegeCommand : function(commandsList,
								versionPrivilege) {
							var privilegeState = versionPrivilege
									.getPrivilegeState();
							var commandValue;
							var commandStructure;
							var planningModel;
							var dataSource;
							if ((privilegeState !== sap.firefly.PlanningPrivilegeState.TO_BE_GRANTED)
									&& (privilegeState !== sap.firefly.PlanningPrivilegeState.TO_BE_REVOKED)) {
								return;
							}
							commandValue = null;
							if (privilegeState === sap.firefly.PlanningPrivilegeState.TO_BE_GRANTED) {
								commandValue = "grant_version_privilege";
							} else {
								if (privilegeState === sap.firefly.PlanningPrivilegeState.TO_BE_REVOKED) {
									commandValue = "revoke_version_privilege";
								} else {
									throw sap.firefly.XException
											.createIllegalStateException("illegal privilege command");
								}
							}
							commandStructure = commandsList.addNewStructure();
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_COMMAND,
									commandValue);
							planningModel = versionPrivilege.getPlanningModel();
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_SCHEMA,
									planningModel.getPlanningModelSchema());
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_MODEL,
									planningModel.getPlanningModelName());
							dataSource = versionPrivilege.getQueryDataSource();
							commandStructure
									.setStringByName(
											sap.firefly.InAConstants.LC_QUERY_SOURCE_SCHEMA,
											dataSource.getSchemaName());
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_QUERY_SOURCE,
									dataSource.getObjectName());
							commandStructure.setIntegerByName(
									sap.firefly.InAConstants.LC_VERSION_ID,
									versionPrivilege.getVersionId());
							if (versionPrivilege.isSharedVersion()) {
								commandStructure.setStringByName(
										sap.firefly.InAConstants.LC_OWNER,
										versionPrivilege.getVersionOwner());
							}
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_PRIVILEGE,
									versionPrivilege.getPrivilege().getName());
							commandStructure.setStringByName(
									sap.firefly.InAConstants.LC_GRANTEE,
									versionPrivilege.getGrantee());
						}
					},
					doProcessCommand : function(synchronizationType,
							planningCommandResult) {
						var messageManager;
						var extPlanningCommandResult;
						if (this.isServerRoundtripRequired()) {
							sap.firefly.PlanningModelRequestUpdateVersionPrivileges.$superclass.doProcessCommand
									.call(this, synchronizationType,
											planningCommandResult);
						} else {
							messageManager = sap.firefly.MessageManager
									.createMessageManager();
							extPlanningCommandResult = sap.firefly.ExtResult
									.create(planningCommandResult,
											messageManager);
							this.onCommandExecuted(extPlanningCommandResult);
						}
					},
					isServerRoundtripRequired : function() {
						var planningModel = this.getPlanningModel();
						var versions = planningModel.getVersions();
						if (versions.isEmpty()) {
							return false;
						}
						if (planningModel.supportsFastPrivilegeInitialization()
								&& !planningModel.hasChangedVersionPrivileges()) {
							return false;
						}
						return true;
					},
					createCommandStructure : function() {
						var request = sap.firefly.PrStructure.create();
						var planningStructure = request
								.setNewStructureByName(sap.firefly.InAConstants.QY_PLANNING);
						var commandsList = planningStructure
								.setNewListByName(sap.firefly.InAConstants.LC_COMMANDS);
						var planningModel = this.getPlanningModel();
						var versionPrivileges;
						var i;
						if (planningModel.isVersionPrivilegesInitialized()) {
							versionPrivileges = planningModel
									.getVersionPrivileges();
							if (versionPrivileges !== null) {
								for (i = 0; i < versionPrivileges.size(); i++) {
									sap.firefly.PlanningModelRequestUpdateVersionPrivileges
											.addPrivilegeCommand(commandsList,
													versionPrivileges.get(i));
								}
							}
						}
						sap.firefly.PlanningModelRequestUpdateVersionPrivileges
								.addShowVersionPrivilegesCommands(commandsList,
										planningModel);
						return request;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseUpdateVersionPrivileges();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersion",
				sap.firefly.PlanningModelRequest,
				{
					$statics : {
						PLANNING_VERSION : "PLANNING_VERSION",
						TRY_OPTION : "TRY_OPTION"
					},
					getPlanningVersion : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestVersion.PLANNING_VERSION);
					},
					setPlanningVersion : function(planningVersion) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestVersion.PLANNING_VERSION,
										planningVersion);
					},
					supportsTryOption : function() {
						var requestType = this.getRequestType();
						if (requestType === null) {
							return false;
						}
						return requestType
								.isTypeOf(sap.firefly.PlanningModelRequestType.VERSION_REQUEST_WITH_TRY_OPTION);
					},
					setTryOption : function(useTryOption) {
						if (this.supportsTryOption()) {
							this
									.setPropertyBoolean(
											sap.firefly.PlanningModelRequestVersion.TRY_OPTION,
											useTryOption);
						}
						return this;
					},
					useTryOption : function() {
						if (this.supportsTryOption()) {
							return this
									.getPropertyBoolean(sap.firefly.PlanningModelRequestVersion.TRY_OPTION);
						}
						return false;
					},
					useStateUpdate : function() {
						var requestType = this.getRequestType();
						if (requestType === null) {
							return false;
						}
						return requestType
								.isTypeOf(sap.firefly.PlanningModelRequestType.VERSION_REQUEST_WITH_STATE_UPDATE);
					},
					createCommandStructure : function() {
						var requestType = this.getRequestType();
						var request = sap.firefly.PrStructure.create();
						var commands = sap.firefly.PlanningModelCommandHelper
								.createCommandsList(request);
						var requestCloseVersion;
						if (requestType === sap.firefly.PlanningModelRequestType.RESET_VERSION) {
							this
									.addCommand(
											commands,
											sap.firefly.PlanningModelRequestType.CLOSE_VERSION
													.getName());
							this
									.addCommand(
											commands,
											sap.firefly.PlanningModelRequestType.INIT_VERSION
													.getName());
						} else {
							if (requestType !== sap.firefly.PlanningModelRequestType.UPDATE_PARAMETERS) {
								if (requestType === sap.firefly.PlanningModelRequestType.CLOSE_VERSION) {
									requestCloseVersion = this;
									if (requestCloseVersion.getCloseMode()
											.isWithKillActionSequence()) {
										this
												.addCommand(
														commands,
														sap.firefly.PlanningModelRequestType.KILL_ACTION_SEQUENCE
																.getName());
									}
								}
								this.addParametersToJson(this.addCommand(
										commands, this
												.getEffectiveCommandName()));
							}
						}
						this.addGetParametersCommand(commands, requestType);
						if (this.useStateUpdate()) {
							this.addGetVersionStateCommand(commands,
									requestType);
						}
						return request;
					},
					getEffectiveCommandName : function() {
						var result;
						if (this.useTryOption() === false) {
							return this.getRequestType().getName();
						}
						result = sap.firefly.XStringBuffer.create();
						result.append("try_");
						result.append(this.getRequestType().getName());
						return result.toString();
					},
					addGetVersionStateCommand : function(commands, requestType) {
						if (requestType === sap.firefly.PlanningModelRequestType.DROP_VERSION) {
							return;
						}
						this.addCommand(commands,
								sap.firefly.InAConstants.LC_GET_VERSION_STATE);
					},
					addGetParametersCommand : function(commands, requestType) {
						if ((requestType !== sap.firefly.PlanningModelRequestType.INIT_VERSION)
								&& (requestType !== sap.firefly.PlanningModelRequestType.RESET_VERSION)
								&& (requestType !== sap.firefly.PlanningModelRequestType.UPDATE_PARAMETERS)) {
							return;
						}
						if (this.getPlanningModel().supportsVersionParameters() === false) {
							return;
						}
						this.addCommand(commands,
								sap.firefly.InAConstants.LC_GET_PARAMETERS);
					},
					addCommand : function(commandsList, commandName) {
						var commandStructure = sap.firefly.PlanningModelCommandHelper
								.createVersionCommand(
										this.getPlanningVersion(), commandName);
						commandsList.add(commandStructure);
						return commandStructure;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseVersion();
					},
					addParametersToJson : function(parametersStructure) {
					}
				});
$Firefly
		.createClass("sap.firefly.PlanningModelResponseCleanup",
				sap.firefly.PlanningModelResponse, {
					getPlanningModelRequestCleanup : function() {
						return this.getPlanningCommand();
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var request = this.getPlanningModelRequest();
						var model = request.getPlanningModel();
						var commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList(request.serializeToJson());
						var responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						return sap.firefly.PlanningModelCommandHelper
								.processResponseGetVersions(commands,
										responses, model);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseCreateAction",
				sap.firefly.PlanningModelResponse,
				{
					$statics : {
						CREATED_PLANNING_ACTION : "CREATED_PLANNING_ACTION"
					},
					getPlanningRequestCreateCommandWithId : function() {
						return this.getPlanningCommand();
					},
					getCreatedPlanningCommandWithId : function() {
						return this.getCreatedPlanningAction();
					},
					setCreatedPlanningAction : function(planningAction) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelResponseCreateAction.CREATED_PLANNING_ACTION,
										planningAction);
					},
					getCreatedPlanningAction : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelResponseCreateAction.CREATED_PLANNING_ACTION);
					},
					getPlanningModelRequestCreateAction : function() {
						return this.getPlanningCommand();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseCreateActionForQuery",
				sap.firefly.PlanningModelResponse,
				{
					$statics : {
						CREATED_PLANNING_ACTION_FOR_QUERY : "CREATED_PLANNING_ACTION_FOR_QUERY"
					},
					setCreatedPlanningActionForQuery : function(planningAction) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelResponseCreateActionForQuery.CREATED_PLANNING_ACTION_FOR_QUERY,
										planningAction);
					},
					getPlanningModelRequestCreateActionForQuery : function() {
						return this.getPlanningRequest();
					},
					getCreatedPlanningActionForQuery : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelResponseCreateActionForQuery.CREATED_PLANNING_ACTION_FOR_QUERY);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseGetActionParameters",
				sap.firefly.PlanningModelResponse,
				{
					$statics : {
						ACTION_PARAMETER_METADATA : "ACTION_PARAMETER_METADATA"
					},
					getPlanningModelRequestGetActionParameters : function() {
						return this.getPlanningCommand();
					},
					getActionParameterMetadata : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelResponseGetActionParameters.ACTION_PARAMETER_METADATA);
					},
					setActionParameterMetadata : function(
							actionParameterMetadata) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelResponseGetActionParameters.ACTION_PARAMETER_METADATA,
										actionParameterMetadata);
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var planning = sap.firefly.PrUtils
								.getStructureProperty(responseStructure,
										sap.firefly.InAConstants.QY_PLANNING);
						var parameters = sap.firefly.PrUtils.getListProperty(
								planning,
								sap.firefly.InAConstants.LC_PARAMETERS);
						var actionParameterMetadata = new sap.firefly.PlanningActionParameterMetadata();
						actionParameterMetadata.setActionMetadata(this
								.getPlanningModelRequestGetActionParameters()
								.getActionMetadata());
						actionParameterMetadata.setParameters(parameters);
						this
								.setActionParameterMetadata(actionParameterMetadata);
						return true;
					}
				});
$Firefly.createClass("sap.firefly.PlanningModelResponseRefreshActions",
		sap.firefly.PlanningModelResponse, {
			getPlanningModelRequestRefreshVersions : function() {
				return this.getPlanningCommand();
			},
			processResponseStructureInternal : function(responseStructure,
					messageManager) {
				var request = this.getPlanningModelRequest();
				var commands = sap.firefly.PlanningModelCommandHelper
						.getCommandsList(request.serializeToJson());
				var responses = sap.firefly.PlanningModelCommandHelper
						.getResponsesList(responseStructure);
				return sap.firefly.PlanningModelCommandHelper
						.processResponseGetActions(commands, responses, request
								.getPlanningModel());
			}
		});
$Firefly.createClass("sap.firefly.PlanningModelResponseRefreshVersions",
		sap.firefly.PlanningModelResponse, {
			getPlanningModelRequestRefreshVersions : function() {
				return this.getPlanningCommand();
			},
			processResponseStructureInternal : function(responseStructure,
					messageManager) {
				var request = this.getPlanningModelRequest();
				var commands = sap.firefly.PlanningModelCommandHelper
						.getCommandsList(request.serializeToJson());
				var responses = sap.firefly.PlanningModelCommandHelper
						.getResponsesList(responseStructure);
				return sap.firefly.PlanningModelCommandHelper
						.processResponseGetVersions(commands, responses,
								request.getPlanningModel());
			}
		});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseUpdateVersionPrivileges",
				sap.firefly.PlanningModelResponse,
				{
					$statics : {
						getVersionDataSource : function(querySourceStructure) {
							var dataSource = sap.firefly.QFactory2
									.newDataSource();
							dataSource
									.setType(sap.firefly.MetaObjectType.PLANNING);
							dataSource
									.setSchemaName(sap.firefly.PrUtils
											.getStringValueProperty(
													querySourceStructure,
													sap.firefly.InAConstants.LC_QUERY_SOURCE_SCHEMA,
													null));
							dataSource
									.setObjectName(sap.firefly.PrUtils
											.getStringValueProperty(
													querySourceStructure,
													sap.firefly.InAConstants.LC_QUERY_SOURCE,
													null));
							return dataSource;
						},
						updateVersionPrivileges : function(planningModel,
								dataSource, planningVersionIdentifier,
								versionPrivilegeList) {
							var i;
							var versionPrivilegeStructure;
							var planningPrivilege;
							var grantee;
							var versionPrivilege;
							for (i = 0; i < sap.firefly.PrUtils.getListSize(
									versionPrivilegeList, 0); i++) {
								versionPrivilegeStructure = sap.firefly.PrUtils
										.getStructureElement(
												versionPrivilegeList, i);
								planningPrivilege = sap.firefly.PlanningPrivilege
										.lookupWithDefault(
												sap.firefly.PrUtils
														.getStringValueProperty(
																versionPrivilegeStructure,
																sap.firefly.InAConstants.LC_PRIVILEGE,
																null), null);
								grantee = sap.firefly.PrUtils
										.getStringValueProperty(
												versionPrivilegeStructure,
												sap.firefly.InAConstants.LC_GRANTEE,
												null);
								versionPrivilege = planningModel
										.getVersionPrivilegeById(dataSource,
												planningVersionIdentifier,
												planningPrivilege, grantee);
								versionPrivilege
										.setPrivilegeStateServer(sap.firefly.PlanningPrivilegeState.GRANTED);
							}
						},
						resetVersionPrivilegesServerState : function(
								planningModel) {
							var versionPrivileges = planningModel
									.getVersionPrivileges();
							var i;
							var versionPrivilege;
							if (versionPrivileges === null) {
								return;
							}
							for (i = 0; i < versionPrivileges.size(); i++) {
								versionPrivilege = versionPrivileges.get(i);
								versionPrivilege
										.setPrivilegeStateServer(sap.firefly.PlanningPrivilegeState.NEW);
							}
						},
						resetVersionPrivilegesClientState : function(
								planningModel) {
							var versionPrivileges = planningModel
									.getVersionPrivileges();
							var i;
							var versionPrivilege;
							var serverState;
							var clientState;
							if (versionPrivileges === null) {
								return;
							}
							for (i = 0; i < versionPrivileges.size(); i++) {
								versionPrivilege = versionPrivileges.get(i);
								serverState = versionPrivilege
										.getPrivilegeStateServer();
								clientState = null;
								if (serverState === sap.firefly.PlanningPrivilegeState.GRANTED) {
									clientState = sap.firefly.PlanningPrivilegeState.GRANTED;
								} else {
									if (serverState === sap.firefly.PlanningPrivilegeState.NEW) {
										clientState = sap.firefly.PlanningPrivilegeState.NEW;
									} else {
										throw sap.firefly.XException
												.createIllegalStateException("illegal state");
									}
								}
								versionPrivilege.setPrivilegeState(clientState);
							}
						}
					},
					getPlanningModelRequestUpdateVersionPrivileges : function() {
						return this.getPlanningCommand();
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						return this.processUpdate(responseStructure,
								messageManager);
					},
					processUpdate : function(responseStructure, messageManager) {
						var request = this.getPlanningModelRequest();
						var model = request.getPlanningModel();
						var commands;
						var responses;
						var isOk;
						var i;
						var command;
						var commandValue;
						var response;
						var versionPrivilegeList;
						var dataSource;
						var versionId;
						var sharedVersion;
						var versionOwner;
						var owner;
						var planningVersionIdentifier;
						model.setVersionPrivilegesInitialized();
						commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList(request.serializeToJson());
						responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						if ((commands === null) && (responses === null)) {
							return true;
						}
						if ((commands === null) || (responses === null)) {
							return false;
						}
						if (commands.size() !== responses.size()) {
							return false;
						}
						isOk = true;
						sap.firefly.PlanningModelResponseUpdateVersionPrivileges
								.resetVersionPrivilegesServerState(this
										.getPlanningModelRequest()
										.getPlanningModel());
						for (i = 0; i < commands.size(); i++) {
							command = sap.firefly.PrUtils.getStructureElement(
									commands, i);
							commandValue = sap.firefly.PrUtils
									.getStringValueProperty(
											command,
											sap.firefly.InAConstants.LC_COMMAND,
											null);
							if (!sap.firefly.XString
									.isEqual(
											commandValue,
											sap.firefly.InAConstants.VC_COMMAND_SHOW_VERSION_PRIVILEGES)) {
								continue;
							}
							response = sap.firefly.PrUtils.getStructureElement(
									responses, i);
							versionPrivilegeList = sap.firefly.PrUtils
									.getListProperty(
											response,
											sap.firefly.InAConstants.LC_VERSION_PRIVILEGES);
							if (versionPrivilegeList === null) {
								continue;
							}
							dataSource = sap.firefly.PlanningModelResponseUpdateVersionPrivileges
									.getVersionDataSource(command);
							versionId = sap.firefly.PrUtils
									.getIntegerValueProperty(
											command,
											sap.firefly.InAConstants.LC_VERSION_ID,
											-1);
							sharedVersion = false;
							versionOwner = null;
							owner = sap.firefly.PrUtils.getStringProperty(
									command, sap.firefly.InAConstants.LC_OWNER);
							if (owner !== null) {
								sharedVersion = true;
								versionOwner = owner.getStringValue();
							}
							planningVersionIdentifier = model
									.getVersionIdentifier(versionId,
											sharedVersion, versionOwner);
							sap.firefly.PlanningModelResponseUpdateVersionPrivileges
									.updateVersionPrivileges(model, dataSource,
											planningVersionIdentifier,
											versionPrivilegeList);
						}
						sap.firefly.PlanningModelResponseUpdateVersionPrivileges
								.resetVersionPrivilegesClientState(this
										.getPlanningModelRequest()
										.getPlanningModel());
						return isOk;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseVersion",
				sap.firefly.PlanningModelResponse,
				{
					getPlanningModelRequestVersion : function() {
						return this.getPlanningCommand();
					},
					initResponseStructureCommand : function(responseStructure,
							messageManager) {
						var request = this.getPlanningRequest();
						if (request.isInvalidatingResultSet()) {
							request.getPlanningContext().invalidate();
						}
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						var request;
						var commands;
						var version;
						if (responses === null) {
							return false;
						}
						request = this.getPlanningModelRequestVersion();
						commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList(request.serializeToJson());
						if (commands === null) {
							return false;
						}
						version = request.getPlanningVersion();
						sap.firefly.PlanningModelCommandHelper
								.processResponseEndActionSequence(commands,
										responses, version);
						sap.firefly.PlanningModelCommandHelper
								.processResponseKillActionSequence(commands,
										responses, version);
						sap.firefly.PlanningModelCommandHelper
								.processResponseGetParameters(commands,
										responses, version);
						if (!sap.firefly.PlanningModelCommandHelper
								.processResponseGetVersionState(commands,
										responses, version)) {
							if (request.getRequestType() === sap.firefly.PlanningModelRequestType.DROP_VERSION) {
								version.invalidateVersion();
								version.updateInvalidPrivileges();
							}
						}
						return true;
					}
				});
$Firefly.createClass("sap.firefly.QAttributeList",
		sap.firefly.QModelComponentWithNameList, {
			$statics : {
				createAttributeList : function(context, parentNode,
						hasDynamicLinking, name) {
					var list = new sap.firefly.QAttributeList();
					list.setupOlapList(context, parentNode, hasDynamicLinking,
							null, name);
					return list;
				}
			},
			copyAttributeList : function(origin) {
				sap.firefly.QAttributeList.$superclass.copyModelComponentList
						.call(this, origin);
			},
			getOlapComponentType : function() {
				return sap.firefly.OlapComponentType.ATTRIBUTE_LIST;
			},
			removeAttributeByIndex : function(index) {
				this.removeAt(index);
			},
			getAttributeByIndex : function(index) {
				return this.get(index);
			},
			getAttributeByName : function(name) {
				return this.getByKey(name);
			},
			getAttributeBase : function(index) {
				return this.get(index);
			}
		});
$Firefly.createClass("sap.firefly.QDataCellList",
		sap.firefly.QModelComponentWithNameList, {
			$statics : {
				createQueryDataCellList : function(context, queryModel) {
					var queryDataCellList = new sap.firefly.QDataCellList();
					queryDataCellList.setupOlapList(context, queryModel, false,
							null, "Data Cells");
					return queryDataCellList;
				}
			},
			newQueryDataCell : function(name) {
				var qDataCell = sap.firefly.QDataCell._create(
						this.getContext(), this, this, name);
				this.add(qDataCell);
				return qDataCell;
			},
			getQueryDataCellByIndex : function(index) {
				return this.get(index);
			},
			getQueryDataCellBase : function(index) {
				return this.get(index);
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QDimensionList",
				sap.firefly.QModelComponentWithNameList,
				{
					$statics : {
						createDimensionList : function(context, parentNode,
								hasDynamicLinking, name) {
							var dimensionList = new sap.firefly.QDimensionList();
							dimensionList.setupOlapList(context, parentNode,
									hasDynamicLinking, null, name);
							return dimensionList;
						}
					},
					getDimensionCount : function() {
						return this.size();
					},
					getDimensionByIndex : function(index) {
						return this.get(index);
					},
					getDimensionByName : function(name) {
						return this.getByKey(name);
					},
					getDimensionBase : function(index) {
						return this.get(index);
					},
					removeDimensionByIndex : function(index) {
						this.removeAt(index);
					},
					getNonMeasureDimension : function() {
						return this
								.getDimensionByType(sap.firefly.DimensionType.SECONDARY_STRUCTURE);
					},
					getNonMeasureDimension2 : function() {
						var firstNonMeasure;
						var iterator;
						var dimension;
						if (this.getNonStructureCount() < 2) {
							return null;
						}
						firstNonMeasure = this.getNonMeasureDimension();
						iterator = this.m_elementList.getIterator();
						while (iterator.hasNext()) {
							dimension = iterator.next();
							if ((dimension.getDimensionType() === sap.firefly.DimensionType.SECONDARY_STRUCTURE)
									&& (dimension !== firstNonMeasure)) {
								iterator.releaseObject();
								return dimension;
							}
						}
						iterator.releaseObject();
						return null;
					},
					getMeasureDimension : function() {
						return this
								.getDimensionByType(sap.firefly.DimensionType.MEASURE_STRUCTURE);
					},
					getStructureCount : function() {
						return this.countDimensions(true);
					},
					getNonStructureCount : function() {
						return this.countDimensions(false);
					},
					countDimensions : function(countStructures) {
						var len = this.size();
						var dimensionCount = 0;
						var i;
						for (i = 0; i < len; i++) {
							if (this.get(i).isStructure() === countStructures) {
								dimensionCount++;
							}
						}
						return dimensionCount;
					},
					getDimensionNameByType : function(type) {
						var dimension = this.getDimensionByType(type);
						if (dimension === null) {
							return null;
						}
						return dimension.getName();
					},
					getDimensionByType : function(type) {
						var len = this.size();
						var i;
						var dimension;
						for (i = 0; i < len; i++) {
							dimension = this.getDimensionByIndex(i);
							if (dimension.getDimensionType() === type) {
								return dimension;
							}
						}
						return null;
					},
					getDimensions : function() {
						return this;
					},
					getOrderedDimensionNames : function() {
						if (this.getDimensionCount() === 0) {
							return null;
						}
						return this.getKeysAsReadOnlyListOfString();
					},
					reOrderDimensions : function(orderedDimensionNames) {
						var orderOk;
						var dimensionNamesOk;
						var dimensionNameIndex;
						var dimensionName;
						var dimension;
						var newIndex;
						var orderedDimensionName;
						var currentIndex;
						if (this.getDimensionCount() === 0) {
							return;
						}
						if (orderedDimensionNames === null) {
							return;
						}
						if (this.getDimensionCount() !== orderedDimensionNames
								.size()) {
							return;
						}
						orderOk = true;
						dimensionNamesOk = true;
						for (dimensionNameIndex = 0; dimensionNameIndex < orderedDimensionNames
								.size(); dimensionNameIndex++) {
							dimensionName = orderedDimensionNames
									.get(dimensionNameIndex);
							dimension = this
									.getDimensionByIndex(dimensionNameIndex);
							if (sap.firefly.XString.isEqual(dimensionName,
									dimension.getName()) === false) {
								if (this.getDimensionByName(dimensionName) === null) {
									dimensionNamesOk = false;
									break;
								}
								orderOk = false;
							}
						}
						if (dimensionNamesOk === false) {
							return;
						}
						if (orderOk) {
							return;
						}
						for (newIndex = 0; newIndex < orderedDimensionNames
								.size(); newIndex++) {
							orderedDimensionName = orderedDimensionNames
									.get(newIndex);
							currentIndex = this
									.getDimensionIndex(orderedDimensionName);
							if (currentIndex < newIndex) {
								throw sap.firefly.XException
										.createIllegalStateException("illegal sorting state");
							}
							if (currentIndex === newIndex) {
								continue;
							}
							this.moveElement(currentIndex, newIndex);
						}
					},
					getDimensionIndex : function(dimensionName) {
						var i;
						var dimension;
						if (this.getDimensionCount() === 0) {
							return -1;
						}
						for (i = 0; i < this.getDimensionCount(); i++) {
							dimension = this.getDimensionByIndex(i);
							if (sap.firefly.XString.isEqual(dimensionName,
									dimension.getName())) {
								return i;
							}
						}
						return -1;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFieldList",
				sap.firefly.QModelComponentWithNameList,
				{
					$statics : {
						createFieldList : function(context, parentNode,
								hasDynamicLinking, name) {
							var list = new sap.firefly.QFieldList();
							list.setupOlapList(context, parentNode,
									hasDynamicLinking, null, name);
							list.m_isFixed = false;
							return list;
						}
					},
					m_isFixed : false,
					add : function(element) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.add.call(this,
									element);
						}
					},
					addAll : function(otherList) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.addAll.call(
									this, otherList);
						}
					},
					set : function(index, element) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.set.call(this,
									index, element);
						}
					},
					insert : function(index, element) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.insert.call(
									this, index, element);
						}
					},
					removeAt : function(index) {
						if (this.m_isFixed) {
							return null;
						}
						return sap.firefly.QFieldList.$superclass.removeAt
								.call(this, index);
					},
					removeElement : function(element) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.removeElement
									.call(this, element);
						}
					},
					moveElement : function(fromIndex, toIndex) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.moveElement
									.call(this, fromIndex, toIndex);
						}
					},
					sortByComparator : function(comparator) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.sortByComparator
									.call(this, comparator);
						}
					},
					sortByDirection : function(sortDirection) {
						if (!this.m_isFixed) {
							sap.firefly.QFieldList.$superclass.sortByDirection
									.call(this, sortDirection);
						}
					},
					setIsFixed : function(isFixed) {
						this.m_isFixed = isFixed;
					},
					isFixed : function() {
						return this.m_isFixed;
					},
					copyFieldList : function(origin) {
						sap.firefly.QFieldList.$superclass.copyModelComponentList
								.call(this, origin);
						this.m_isFixed = origin.m_isFixed;
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.FIELD_LIST;
					},
					removeFieldByIndex : function(index) {
						this.removeAt(index);
					},
					getFieldByIndex : function(index) {
						return this.get(index);
					},
					getFieldByName : function(name) {
						return this.getByKey(name);
					},
					getFieldByNameOrAlias : function(name) {
						var field = this.getByKey(name);
						var size;
						var i;
						if (field !== null) {
							return field;
						}
						size = this.size();
						for (i = 0; i < size; i++) {
							field = this.get(i);
							if (sap.firefly.XString.isEqual(field
									.getAliasName(), name)) {
								return field;
							}
						}
						return null;
					},
					getFirstFieldByType : function(type) {
						var len = this.size();
						var i;
						var field;
						for (i = 0; i < len; i++) {
							field = this.get(i);
							if (field.getPresentationType().isTypeOf(type)) {
								return field;
							}
						}
						return null;
					},
					getFieldBase : function(index) {
						return this.get(index);
					}
				});
$Firefly.createClass("sap.firefly.QFilterAnd",
		sap.firefly.QFilterAlgebraOperation, {
			$statics : {
				_create : function(context, selectionContainer) {
					var object = new sap.firefly.QFilterAnd();
					object.setupFilterAlgebraOperation(context,
							selectionContainer);
					return object;
				}
			},
			getOlapComponentType : function() {
				return sap.firefly.FilterComponentType.AND;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QFilterCartesianList",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						_create : function(context, parentNode, field,
								hierarchyName) {
							var object = new sap.firefly.QFilterCartesianList();
							object.setupFilterList(context, parentNode, field,
									hierarchyName);
							return object;
						}
					},
					m_filterExpression : null,
					m_field : null,
					m_supplementFields : null,
					m_hierarchyName : null,
					m_convertToFlatSelection : false,
					m_uniqueId : null,
					cloneOlapComponent : function(context, parent) {
						var clone = sap.firefly.QFilterCartesianList._create(
								context, null, null, this.getHierarchyName());
						clone.copyCartesianList(this);
						return clone;
					},
					setupFilterList : function(context, parentNode, field,
							hierarchyName) {
						this.setupOlapList(context, parentNode, true, null,
								"Member Selection List");
						this.setField(field);
						this.m_hierarchyName = hierarchyName;
						this.m_supplementFields = sap.firefly.XListWeakRef
								.create();
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
					},
					copyCartesianList : function(origin) {
						var size;
						var fieldAccessor;
						var i;
						var name;
						var sizeList;
						var idxList;
						var cloneElement;
						var field;
						var originField;
						sap.firefly.QFilterCartesianList.$superclass.copyModelComponentList
								.call(this, origin);
						this.m_hierarchyName = origin.m_hierarchyName;
						this.m_convertToFlatSelection = origin.m_convertToFlatSelection;
						size = origin.m_supplementFields.size();
						fieldAccessor = this.getFieldAccessorSingle();
						for (i = 0; i < size; i++) {
							name = origin.m_supplementFields.get(i).getName();
							this.m_supplementFields.add(fieldAccessor
									.getFieldByName(name));
						}
						sizeList = origin.size();
						this.clear();
						for (idxList = 0; idxList < sizeList; idxList++) {
							cloneElement = this.addNewCartesianElement();
							cloneElement.copyFilterOperation(origin
									.getOp(idxList));
						}
						originField = origin.getField();
						if (originField !== null) {
							field = fieldAccessor.getFieldByName(originField
									.getName());
						} else {
							field = originField;
						}
						this.setField(field);
						this.m_uniqueId = origin.m_uniqueId;
					},
					releaseObject : function() {
						this.m_filterExpression = sap.firefly.XObject
								.releaseIfNotNull(this.m_filterExpression);
						this.m_field = sap.firefly.XObject
								.releaseIfNotNull(this.m_field);
						this.m_supplementFields = sap.firefly.XObject
								.releaseIfNotNull(this.m_supplementFields);
						this.m_hierarchyName = null;
						this.m_uniqueId = null;
						sap.firefly.QFilterCartesianList.$superclass.releaseObject
								.call(this);
					},
					getOlapComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_LIST;
					},
					add : function(element) {
						if (element !== null) {
							(element).setContext(this.getContext());
						}
						sap.firefly.QFilterCartesianList.$superclass.add.call(
								this, element);
					},
					getFilterExpression : function() {
						var parentComponent;
						if (this.m_filterExpression === null) {
							parentComponent = this.getParentComponent();
							while (parentComponent !== null) {
								if (parentComponent.getOlapComponentType() === sap.firefly.OlapComponentType.FILTER_EXPRESSION) {
									this.m_filterExpression = sap.firefly.XWeakReferenceUtil
											.getWeakRef(parentComponent);
									break;
								}
								parentComponent = parentComponent
										.getParentComponent();
							}
						}
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_filterExpression);
					},
					getDimension : function() {
						return this.getField().getDimension();
					},
					getField : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_field);
					},
					setField : function(field) {
						this.m_field = sap.firefly.XWeakReferenceUtil
								.getWeakRef(field);
					},
					addNewCartesianElement : function() {
						var element = sap.firefly.QFilterOperation
								._create(this.getContext(), this
										.getFilterExpression(), this);
						element.setField(this.getField());
						this.add(element);
						return element;
					},
					getHierarchyName : function() {
						return this.m_hierarchyName;
					},
					setHierarchyName : function(name) {
						if (sap.firefly.XString.isEqual(name,
								this.m_hierarchyName) === false) {
							this.notifyNodeChanged();
						}
						this.m_hierarchyName = name;
					},
					getOp : function(index) {
						return this.getCartesianElement(index);
					},
					getCartesianElement : function(index) {
						return this.get(index);
					},
					addSupplementField : function(supplementField) {
						var isExists;
						var len;
						var i;
						var field;
						if (supplementField === null) {
							return;
						}
						isExists = false;
						len = this.m_supplementFields.size();
						for (i = 0; i < len; i++) {
							field = this.m_supplementFields.get(i);
							if (sap.firefly.XString.containsString(field
									.getName(), supplementField.getName())) {
								isExists = true;
							}
						}
						if (!isExists) {
							this.m_supplementFields.add(supplementField);
						}
					},
					getSupplementFields : function() {
						return this.m_supplementFields
								.getValuesAsReadOnlyList();
					},
					isConvertToFlatSelection : function() {
						return this.m_convertToFlatSelection;
					},
					setConvertToFlatSelection : function(convertToFlatSelection) {
						if (this.m_convertToFlatSelection !== convertToFlatSelection) {
							this.notifyNodeChanged();
						}
						this.m_convertToFlatSelection = convertToFlatSelection;
					},
					mergeDeepRecursive : function(settings, other) {
						var otherList = other;
						this.copyCartesianList(otherList);
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterCartesianProduct",
				sap.firefly.QModelComponentList,
				{
					$statics : {
						_create : function(context, selection) {
							var object = new sap.firefly.QFilterCartesianProduct();
							object.setupCartesianProduct(context, selection,
									"Selection Cartesian Product");
							return object;
						}
					},
					m_uniqueId : null,
					releaseObject : function() {
						this.m_uniqueId = null;
						sap.firefly.QFilterCartesianProduct.$superclass.releaseObject
								.call(this);
					},
					cloneOlapComponent : function(context, parent) {
						var clone = sap.firefly.QFilterCartesianProduct
								._create(context, null);
						clone.copyCartesianProduct(this);
						return clone;
					},
					copyCartesianProduct : function(origin) {
						var filterExpression;
						var fieldAccessor;
						var sizeProduct;
						var idxProduct;
						var originList;
						var field;
						var originField;
						var hierarchyName;
						var cloneList;
						sap.firefly.QFilterCartesianProduct.$superclass.copyModelComponentList
								.call(this, origin);
						filterExpression = this.getFilterExpression();
						fieldAccessor = this.getFieldAccessorSingle();
						sizeProduct = origin.size();
						for (idxProduct = 0; idxProduct < sizeProduct; idxProduct++) {
							originList = origin.getCartesianChild(idxProduct);
							originField = originList.getField();
							if (originField !== null) {
								field = fieldAccessor
										.getFieldByName(originField.getName());
							} else {
								field = originField;
							}
							hierarchyName = originList.getHierarchyName();
							cloneList = sap.firefly.QFilterCartesianList
									._create(this, filterExpression, field,
											hierarchyName);
							sap.firefly.QFilterCartesianProduct.$superclass.add
									.call(this, cloneList);
							cloneList.copyCartesianList(originList);
						}
						this.m_uniqueId = origin.m_uniqueId;
					},
					setupCartesianProduct : function(context, selection, name) {
						this
								.setupOlapList(context, selection, true, null,
										name);
						this.m_uniqueId = sap.firefly.XGuid.getGuid();
					},
					getUniqueId : function() {
						return this.m_uniqueId;
					},
					setUniqueId : function(uniqueId) {
						this.m_uniqueId = uniqueId;
					},
					getOlapComponentType : function() {
						return sap.firefly.FilterComponentType.CARTESIAN_PRODUCT;
					},
					importComplexSelection : function(complexSelection) {
					},
					exportComplexSelection : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getIndexOfCartesianListOfDimension : function(dimensionName) {
						var count = this.size();
						var i;
						var selectionList;
						for (i = 0; i < count; i++) {
							selectionList = this.getCartesianChild(i);
							if (sap.firefly.XString.isEqual(selectionList
									.getDimension().getName(), dimensionName)) {
								return i;
							}
						}
						return -1;
					},
					removeByDimensionName : function(dimensionName) {
						var position = this
								.getIndexOfCartesianListOfDimension(dimensionName);
						var selectionList;
						if (position === -1) {
							return null;
						}
						selectionList = this.getCartesianChild(position);
						this.removeAt(position);
						return selectionList;
					},
					getCartesianListByDimensionName : function(dimensionName) {
						var position = this
								.getIndexOfCartesianListOfDimension(dimensionName);
						if (position === -1) {
							return null;
						}
						return this.getCartesianChild(position);
					},
					getCartesianList : function(dimension) {
						var count = this.size();
						var selectionList;
						var i;
						for (i = 0; i < count; i++) {
							selectionList = this.getCartesianChild(i);
							if (selectionList.getDimension() === dimension) {
								return selectionList;
							}
						}
						return null;
					},
					getCartesianListWithDefault : function(dimension) {
						var selectionList = this.getCartesianList(dimension);
						if (selectionList === null) {
							selectionList = sap.firefly.QFilterCartesianList
									._create(this.getContext(), null, dimension
											.getKeyField(), null);
							sap.firefly.QFilterCartesianProduct.$superclass.add
									.call(this, selectionList);
						} else {
							selectionList.setHierarchyName(dimension
									.getHierarchyName());
						}
						return selectionList;
					},
					getCartesianListByField : function(field) {
						var selectionList = this.getCartesianList(field
								.getDimension());
						if (selectionList === null) {
							selectionList = sap.firefly.QFilterCartesianList
									._create(this.getContext(), null, field,
											null);
							sap.firefly.QFilterCartesianProduct.$superclass.add
									.call(this, selectionList);
						}
						if (selectionList.getField() === field) {
							return selectionList;
						}
						return null;
					},
					getFilterExpression : function() {
						var parentComponent = this.getParentComponent();
						var parentType = parentComponent.getOlapComponentType();
						if (parentType === sap.firefly.OlapComponentType.FILTER_EXPRESSION) {
							return parentComponent;
						} else {
							if (parentType === sap.firefly.FilterComponentType.CARTESIAN_PRODUCT) {
								return parentComponent.getParentComponent();
							}
						}
						return parentComponent;
					},
					getCartesianChild : function(index) {
						return this.get(index);
					},
					assertElementType : function(element) {
						if ((element !== null)
								&& (element.getComponentType() !== sap.firefly.FilterComponentType.CARTESIAN_LIST)) {
							throw sap.firefly.XException
									.createIllegalArgumentException(sap.firefly.XStringUtils
											.concatenate4(
													"Type is not allowed. Expected ",
													sap.firefly.FilterComponentType.CARTESIAN_LIST
															.getName(),
													" but got ", element
															.getComponentType()
															.getName()));
						}
					},
					addAll : function(otherList) {
						var i;
						var element;
						if ((otherList !== null) && (otherList !== this)) {
							for (i = 0; i < otherList.size(); i++) {
								element = otherList.get(i);
								this.assertElementType(element);
								if (this.m_hasChildOwnership) {
									(element).setParent(this);
								}
								this.m_elementList.add(element);
							}
							this.notifyNodeChanged();
						}
					},
					add : function(element) {
						this.assertElementType(element);
						sap.firefly.QFilterCartesianProduct.$superclass.add
								.call(this, element);
					},
					set : function(index, element) {
						this.assertElementType(element);
						sap.firefly.QFilterCartesianProduct.$superclass.set
								.call(this, index, element);
					},
					insert : function(index, element) {
						this.assertElementType(element);
						sap.firefly.QFilterCartesianProduct.$superclass.insert
								.call(this, index, element);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QFilterNot",
				sap.firefly.QFilterAlgebraOperation,
				{
					$statics : {
						MAX_SIZE : 1,
						create : function(application, selection) {
							var olapApplication = application
									.getOlapEnvironment();
							var context = olapApplication.getContext();
							return sap.firefly.QFilterNot._create(context,
									selection);
						},
						_create : function(context, selection) {
							var object = new sap.firefly.QFilterNot();
							object.setupFilterAlgebraOperation(context,
									selection);
							return object;
						}
					},
					addAll : function(otherList) {
						if ((otherList !== null) && (otherList !== this)) {
							if ((otherList.size() + this.size()) > sap.firefly.QFilterNot.MAX_SIZE) {
								throw sap.firefly.XException
										.createIllegalArgumentException("List has reached it's maximum capacity");
							}
							sap.firefly.QFilterNot.$superclass.addAll.call(
									this, otherList);
						}
					},
					assertListCapacity : function() {
						if (this.m_elementList.size() === sap.firefly.QFilterNot.MAX_SIZE) {
							throw sap.firefly.XException
									.createIllegalArgumentException("List has reached it's maximum capacity");
						}
					},
					add : function(element) {
						this.assertListCapacity();
						sap.firefly.QFilterNot.$superclass.add.call(this,
								element);
					},
					insert : function(index, element) {
						this.assertListCapacity();
						sap.firefly.QFilterNot.$superclass.insert.call(this,
								index, element);
					},
					getOlapComponentType : function() {
						return sap.firefly.FilterComponentType.NOT;
					},
					getChild : function() {
						if (this.isEmpty()) {
							return null;
						}
						return this.get(0);
					},
					setChild : function(child) {
						if (this.isEmpty()) {
							this.add(child);
						} else {
							this.set(0, child);
						}
					}
				});
$Firefly.createClass("sap.firefly.QFilterOr",
		sap.firefly.QFilterAlgebraOperation, {
			$statics : {
				_create : function(context, selectionContainer) {
					var object = new sap.firefly.QFilterOr();
					object.setupFilterAlgebraOperation(context,
							selectionContainer);
					return object;
				}
			},
			getOlapComponentType : function() {
				return sap.firefly.FilterComponentType.OR;
			}
		});
$Firefly.createClass("sap.firefly.QProperties",
		sap.firefly.QModelComponentWithNameList, {
			$statics : {
				createProperties : function(context, modelComponent) {
					var list = new sap.firefly.QProperties();
					list.setupProperties(context, modelComponent);
					return list;
				}
			},
			m_component : null,
			releaseObject : function() {
				this.m_component = null;
				sap.firefly.QProperties.$superclass.releaseObject.call(this);
			},
			setupProperties : function(context, modelComponent) {
				sap.firefly.QProperties.$superclass.setupOlapList.call(this,
						context, null, false, null, "Properties");
				this.setModelComponent(modelComponent);
			},
			addProperty : function(componentType, valueType) {
				var prop = sap.firefly.QProperty.create(this.getContext(),
						this, componentType, valueType);
				this.add(prop);
				return prop;
			},
			getModelComponent : function() {
				return sap.firefly.XWeakReferenceUtil
						.getHardRef(this.m_component);
			},
			setModelComponent : function(component) {
				this.m_component = sap.firefly.XWeakReferenceUtil
						.getWeakRef(component);
			}
		});
$Firefly
		.createClass(
				"sap.firefly.QVariableManager",
				sap.firefly.QModelComponentWithNameList,
				{
					$statics : {
						create : function(context, queryModel) {
							var object = new sap.firefly.QVariableManager();
							object.setupOlapList(context, queryModel, true,
									null, "Query Variables");
							return object;
						}
					},
					copyVariableManager : function(origin) {
						var i;
						var size;
						var context;
						var cloneVar;
						var originVariable;
						var originType;
						sap.firefly.QVariableManager.$superclass.copyModelComponentList
								.call(this, origin);
						size = origin.size();
						context = this.getContext();
						for (i = 0; i < size; i++) {
							originVariable = origin.get(i);
							originType = originVariable.getVariableType();
							if (originType === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE) {
								cloneVar = sap.firefly.QDimensionMemberVariable
										.createDimensionMemberVariable(context,
												this, originVariable.getName(),
												originVariable.getText());
								(cloneVar)
										.copyDimensionMemberVariable(originVariable);
							} else {
								if (originType === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
									cloneVar = sap.firefly.QHierarchyNameVariable
											.createDimensionHierarchyVariable(
													context, this,
													originVariable.getName(),
													originVariable.getText());
									(cloneVar)
											.copyHierarchyNameVariable(originVariable);
								} else {
									if (originType === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
										cloneVar = sap.firefly.QHierarchyNodeVariable
												.createHierarchyNodeVariable(
														context, this,
														originVariable
																.getName(),
														originVariable
																.getText());
										(cloneVar)
												.copyDimensionMemberVariable(originVariable);
									} else {
										if (originType
												.isTypeOf(sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE)) {
											if (originType === sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE) {
												cloneVar = sap.firefly.QSimpleTypeVariable
														.createSimpleTypeVariable(
																context,
																this,
																originVariable
																		.getValueType(),
																originVariable
																		.getName(),
																originVariable
																		.getText(),
																(originVariable)
																		.isUsingMultipleValues());
											} else {
												if (originType === sap.firefly.VariableType.TEXT_VARIABLE) {
													cloneVar = sap.firefly.QSimpleTypeVariable
															.createTextVariable(
																	context,
																	this,
																	originVariable
																			.getName(),
																	originVariable
																			.getText(),
																	(originVariable)
																			.isUsingMultipleValues());
												} else {
													if (originType === sap.firefly.VariableType.FORMULA_VARIABLE) {
														cloneVar = sap.firefly.QSimpleTypeVariable
																.createFormulaVariable(
																		context,
																		this,
																		originVariable
																				.getName(),
																		originVariable
																				.getText(),
																		(originVariable)
																				.isUsingMultipleValues());
													} else {
														throw sap.firefly.XException
																.createRuntimeException(sap.firefly.XStringUtils
																		.concatenate3(
																				"Unexpected variable type '",
																				originType
																						.getName(),
																				"'!"));
													}
												}
											}
											(cloneVar)
													.copySimpleTypeVariable(originVariable);
										} else {
											if (originType === sap.firefly.VariableType.OPTION_LIST_VARIABLE) {
												cloneVar = sap.firefly.QSimpleTypeVariable
														.createOptionListVariable(
																context,
																this,
																originVariable
																		.getName(),
																originVariable
																		.getText(),
																(originVariable)
																		.isUsingMultipleValues());
												(cloneVar)
														.copySimpleTypeVariable(originVariable);
											} else {
												if (originType === sap.firefly.VariableType.HIERARCHY_VARIABLE) {
													cloneVar = sap.firefly.QSimpleTypeVariable
															.createHierarchyVariable(
																	context,
																	this,
																	originVariable
																			.getName(),
																	originVariable
																			.getText(),
																	(originVariable)
																			.isUsingMultipleValues());
													(cloneVar)
															.copySimpleTypeVariable(originVariable);
												} else {
													throw sap.firefly.XException
															.createRuntimeException(sap.firefly.XStringUtils
																	.concatenate3(
																			"Unexpected variable type '",
																			originType
																					.getName(),
																			"'!"));
												}
											}
										}
									}
								}
							}
							this.add(cloneVar);
						}
						for (i = 0; i < size; i++) {
							(this.get(i)).copyVariableDependencies(origin
									.get(i));
						}
					},
					getOlapComponentType : function() {
						return sap.firefly.OlapComponentType.VARIABLE_MANAGER;
					},
					hasVariables : function() {
						return !this.isEmpty();
					},
					hasMandatoryVariables : function() {
						var size = this.size();
						var i;
						for (i = 0; i < size; i++) {
							if (this.get(i).isMandatory()) {
								return true;
							}
						}
						return false;
					},
					getVariables : function() {
						return this;
					},
					getInputEnabledVariables : function() {
						var inputEnabledVariables = sap.firefly.XListOfNameObject
								.create();
						var size = this.size();
						var i;
						var variable;
						for (i = 0; i < size; i++) {
							variable = this.get(i);
							if (variable.isInputEnabled()) {
								inputEnabledVariables.add(variable);
							}
						}
						return inputEnabledVariables;
					},
					addVariable : function(variable) {
						variable.setParent(this);
						this.add(variable);
					},
					clearVariables : function() {
						this.clear();
					},
					removeVariable : function(name) {
						var variable = this.getByKey(name);
						if (variable !== null) {
							this.removeElement(variable);
						}
					},
					getVariableBaseByIndex : function(index) {
						return this.get(index);
					},
					getVariableBaseByName : function(name) {
						return this.getByKey(name);
					},
					getDimensionAccessor : function() {
						return this.getQueryModel();
					},
					getModelComponentBase : function() {
						return this;
					},
					getVariableMode : function() {
						return this.getQueryModel().getVariableMode();
					},
					getInputEnabledVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if ((variable !== null) && variable.isInputEnabled()) {
							return variable;
						}
						return null;
					},
					getVariable : function(name) {
						return this.getVariableBaseByName(name);
					},
					getHierarchyNodeVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if (variable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE) {
							return variable;
						}
						return null;
					},
					getHierarchyNameVariable : function(name) {
						var variable = this.getVariableBaseByName(name);
						if (variable.getVariableType() === sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE) {
							return variable;
						}
						return null;
					},
					getVariableProcessor : function() {
						return this.getQueryModel().getQueryManager();
					},
					mergeDeepRecursive : function(settings, other) {
						var otherObj = other;
						var variables = otherObj.getVariables();
						var i;
						var otherVariable;
						var otherName;
						var myVariable;
						for (i = 0; i < variables.size(); i++) {
							otherVariable = variables.get(i);
							otherName = otherVariable.getName();
							myVariable = this.getVariableBaseByName(otherName);
							myVariable.mergeDeepRecursive(settings,
									otherVariable);
						}
					},
					hasDimensionMemberVariableAffectingDynamicFilter : function() {
						var size = this.size();
						var idx;
						var variable;
						for (idx = 0; idx < size; idx++) {
							variable = this.get(idx);
							if ((variable.getVariableType() === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)
									&& (variable).isUsedInDynamicFilter()) {
								return true;
							}
						}
						return false;
					},
					getVariablesAffectingDynamicFilter : function() {
						var variables = sap.firefly.XListWeakRef.create();
						var size = this.size();
						var idx;
						var variable;
						for (idx = 0; idx < size; idx++) {
							variable = this.get(idx);
							if ((variable.getVariableType() === sap.firefly.VariableType.DIMENSION_MEMBER_VARIABLE)
									&& (variable).isUsedInDynamicFilter()) {
								variables.add(variable);
							}
						}
						return variables;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QHierarchyNameVariable",
				sap.firefly.QDimensionMemberVariable,
				{
					$statics : {
						createDimensionHierarchyVariable : function(context,
								parent, name, description) {
							var variable = new sap.firefly.QHierarchyNameVariable();
							variable.setupDimensionHierarchyVariable(context,
									parent, name, description);
							return variable;
						}
					},
					m_hierarchyDimension : null,
					setupDimensionHierarchyVariable : function(context, parent,
							name, description) {
						this.setupDimensionMemberVariable(context, parent,
								name, description);
					},
					releaseObject : function() {
						this.m_hierarchyDimension = sap.firefly.XObject
								.releaseIfNotNull(this.m_hierarchyDimension);
						sap.firefly.QHierarchyNameVariable.$superclass.releaseObject
								.call(this);
					},
					copyHierarchyNameVariable : function(origin) {
						sap.firefly.QHierarchyNameVariable.$superclass.copyDimensionMemberVariable
								.call(this, origin);
						this.setHierarchyNameDimension(this.getQueryModel()
								.getDimensionByName(
										origin.getHierarchyNameDimension()
												.getName()));
					},
					getVariableType : function() {
						return sap.firefly.VariableType.HIERARCHY_NAME_VARIABLE;
					},
					getHierarchyNameDimension : function() {
						return sap.firefly.XWeakReferenceUtil
								.getHardRef(this.m_hierarchyDimension);
					},
					setHierarchyNameDimension : function(dimension) {
						this.m_hierarchyDimension = sap.firefly.XWeakReferenceUtil
								.getWeakRef(dimension);
					},
					mergeDeepRecursive : function(settings, other) {
						sap.firefly.QHierarchyNameVariable.$superclass.mergeDeepRecursive
								.call(this, settings, other);
					}
				});
$Firefly.createClass("sap.firefly.QHierarchyNodeVariable",
		sap.firefly.QDimensionMemberVariable, {
			$statics : {
				createHierarchyNodeVariable : function(context, parent, name,
						description) {
					var variable = new sap.firefly.QHierarchyNodeVariable();
					variable.setupHierarchyNodeVariable(context, parent, name,
							description);
					return variable;
				}
			},
			setupHierarchyNodeVariable : function(context, parent, name,
					description) {
				this.setupDimensionMemberVariable(context, parent, name,
						description);
			},
			getVariableType : function() {
				return sap.firefly.VariableType.HIERARCHY_NODE_VARIABLE;
			}
		});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestCreatePlanningFunction",
				sap.firefly.DataAreaRequestCreatePlanningOperation,
				{
					$statics : {
						create : function(planningService) {
							var newObj = new sap.firefly.DataAreaRequestCreatePlanningFunction();
							var olapApplication = planningService
									.getApplication().getOlapEnvironment();
							var context = olapApplication.getContext();
							newObj.setupModelComponent(context, null);
							newObj.setPlanningService(planningService);
							return newObj;
						}
					},
					getPlanningFunctionIdentifier : function() {
						return this.getPlanningOperationIdentifier();
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaResponseCreatePlanningFunction();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestCreatePlanningSequence",
				sap.firefly.DataAreaRequestCreatePlanningOperation,
				{
					$statics : {
						create : function(planningService) {
							var newObj = new sap.firefly.DataAreaRequestCreatePlanningSequence();
							var olapApplication = planningService
									.getApplication().getOlapEnvironment();
							var context = olapApplication.getContext();
							newObj.setupModelComponent(context, null);
							newObj.setPlanningService(planningService);
							return newObj;
						}
					},
					getPlanningSequenceIdentifier : function() {
						return this.getPlanningOperationIdentifier();
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaResponseCreatePlanningSequence();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestGetPlanningFunctionMetadata",
				sap.firefly.DataAreaRequestGetPlanningOperationMetadata,
				{
					getPlanningFunctionIdentifier : function() {
						return this.getPlanningOperationIdentifier();
					},
					createCommandStructure : function() {
						var request = sap.firefly.DataAreaRequestGetPlanningFunctionMetadata.$superclass.createCommandStructure
								.call(this);
						var metadata = request
								.getStructureByName(sap.firefly.InAConstants.QY_METADATA);
						var dataSource = metadata
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_OBJECT_NAME, this
										.getPlanningFunctionIdentifier()
										.getPlanningFunctionName());
						dataSource
								.setStringByName(
										sap.firefly.InAConstants.QY_TYPE,
										sap.firefly.InAConstants.VA_TYPE_PLANNING_FUNCTION);
						return request;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaResponseGetPlanningFunctionMetadata();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaRequestGetPlanningSequenceMetadata",
				sap.firefly.DataAreaRequestGetPlanningOperationMetadata,
				{
					getPlanningSequenceIdentifier : function() {
						return this.getPlanningOperationIdentifier();
					},
					createCommandStructure : function() {
						var request = sap.firefly.DataAreaRequestGetPlanningSequenceMetadata.$superclass.createCommandStructure
								.call(this);
						var metadata = request
								.getStructureByName(sap.firefly.InAConstants.QY_METADATA);
						var dataSource = metadata
								.getStructureByName(sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataSource.setStringByName(
								sap.firefly.InAConstants.QY_OBJECT_NAME, this
										.getPlanningSequenceIdentifier()
										.getPlanningSequenceName());
						dataSource
								.setStringByName(
										sap.firefly.InAConstants.QY_TYPE,
										sap.firefly.InAConstants.VA_TYPE_PLANNING_SEQUENCE);
						return request;
					},
					createCommandResultInstance : function() {
						return new sap.firefly.DataAreaResponseGetPlanningSequenceMetadata();
					}
				});
$Firefly.createClass("sap.firefly.DataAreaResponseCreatePlanningFunction",
		sap.firefly.DataAreaResponseCreatePlanningOperation, {
			getDataAreaRequestCreatePlanningFunction : function() {
				return this.getDataAreaRequestCreatePlanningOperation();
			},
			getCreatedPlanningFunction : function() {
				return this.getCreatedPlanningOperation();
			}
		});
$Firefly.createClass("sap.firefly.DataAreaResponseCreatePlanningSequence",
		sap.firefly.DataAreaResponseCreatePlanningOperation, {
			getDataAreaRequestCreatePlanningSequence : function() {
				return this.getDataAreaRequestCreatePlanningOperation();
			},
			getCreatedPlanningSequence : function() {
				return this.getCreatedPlanningOperation();
			}
		});
$Firefly
		.createClass(
				"sap.firefly.DataAreaResponseGetPlanningFunctionMetadata",
				sap.firefly.DataAreaResponseGetPlanningOperationMetadata,
				{
					getDataAreaRequestGetPlanningFunctionMetadata : function() {
						return this
								.getDataAreaRequestGetPlanningOperationMetadata();
					},
					getPlanningFunctionMetadata : function() {
						return this.getPlanningOperationMetadata();
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var command = sap.firefly.PrUtils.getStructureProperty(
								responseStructure,
								sap.firefly.InAConstants.QY_COMMAND);
						var dataSource;
						var dataAreaName;
						var request;
						var dataArea;
						var instanceIdRequest;
						var objectName;
						var planningFunctionIdentifier;
						var type;
						var dimensions;
						var variables;
						var baseDatasource;
						var metadata;
						if (command === null) {
							return false;
						}
						dataSource = sap.firefly.PrUtils.getStructureProperty(
								command,
								sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataAreaName = sap.firefly.PrUtils
								.getStringValueProperty(
										dataSource,
										sap.firefly.InAConstants.QY_DATA_AREA,
										sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT);
						request = this
								.getDataAreaRequestGetPlanningFunctionMetadata();
						dataArea = request.getDataArea();
						if (sap.firefly.XString.isEqual(dataArea.getDataArea(),
								dataAreaName) === false) {
							return false;
						}
						instanceIdRequest = this
								.getDataAreaRequestGetPlanningFunctionMetadata()
								.getInstanceId();
						if (instanceIdRequest === null) {
							return false;
						}
						objectName = sap.firefly.PrUtils
								.getStringValueProperty(
										dataSource,
										sap.firefly.InAConstants.QY_OBJECT_NAME,
										null);
						planningFunctionIdentifier = this
								.getDataAreaRequestGetPlanningFunctionMetadata()
								.getPlanningFunctionIdentifier();
						if (sap.firefly.XString.isEqual(objectName,
								planningFunctionIdentifier
										.getPlanningFunctionName()) === false) {
							return false;
						}
						type = sap.firefly.PrUtils.getStringValueProperty(
								dataSource, sap.firefly.InAConstants.QY_TYPE,
								null);
						if (sap.firefly.XString
								.isEqual(
										type,
										sap.firefly.InAConstants.VA_TYPE_PLANNING_FUNCTION) === false) {
							return false;
						}
						dimensions = sap.firefly.PrUtils
								.getListProperty(command,
										sap.firefly.InAConstants.QY_DIMENSIONS);
						variables = sap.firefly.PrUtils.getListProperty(
								command, sap.firefly.InAConstants.QY_VARIABLES);
						baseDatasource = this.extractBaseDataSource(command);
						metadata = new sap.firefly.PlanningFunctionMetadata();
						metadata
								.setPlanningOperationIdentifier(planningFunctionIdentifier);
						metadata.setDataArea(dataArea);
						metadata.setInstanceId(instanceIdRequest);
						metadata.setDimenstions(dimensions);
						metadata.setVariables(variables);
						metadata.setBaseDataSource(baseDatasource);
						this.setPlanningOperationMetadata(metadata);
						return true;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.DataAreaResponseGetPlanningSequenceMetadata",
				sap.firefly.DataAreaResponseGetPlanningOperationMetadata,
				{
					getDataAreaRequestGetPlanningSequenceMetadata : function() {
						return this
								.getDataAreaRequestGetPlanningOperationMetadata();
					},
					getPlanningSequenceMetadata : function() {
						return this.getPlanningOperationMetadata();
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var command = sap.firefly.PrUtils.getStructureProperty(
								responseStructure,
								sap.firefly.InAConstants.QY_COMMAND);
						var dataSource;
						var dataAreaName;
						var request;
						var dataArea;
						var instanceIdRequest;
						var instanceId;
						var objectName;
						var planningSequenceIdentifier;
						var type;
						var dimensions;
						var variables;
						var stepMetadataList;
						var metadata;
						if (command === null) {
							return false;
						}
						dataSource = sap.firefly.PrUtils.getStructureProperty(
								command,
								sap.firefly.InAConstants.QY_DATA_SOURCE);
						dataAreaName = sap.firefly.PrUtils
								.getStringValueProperty(
										dataSource,
										sap.firefly.InAConstants.QY_DATA_AREA,
										sap.firefly.InAConstants.QY_DATA_AREA_DEFAULT);
						request = this
								.getDataAreaRequestGetPlanningSequenceMetadata();
						dataArea = request.getDataArea();
						if (!sap.firefly.XString.isEqual(
								dataArea.getDataArea(), dataAreaName)) {
							return false;
						}
						instanceIdRequest = this
								.getDataAreaRequestGetPlanningSequenceMetadata()
								.getInstanceId();
						if (instanceIdRequest === null) {
							return false;
						}
						instanceId = sap.firefly.PrUtils
								.getStringValueProperty(
										dataSource,
										sap.firefly.InAConstants.QY_INSTANCE_ID,
										null);
						if (instanceId === null) {
							instanceId = instanceIdRequest;
						} else {
							if (!sap.firefly.XString.isEqual(instanceId,
									instanceIdRequest)) {
								return false;
							}
						}
						objectName = sap.firefly.PrUtils
								.getStringValueProperty(
										dataSource,
										sap.firefly.InAConstants.QY_OBJECT_NAME,
										null);
						planningSequenceIdentifier = this
								.getDataAreaRequestGetPlanningSequenceMetadata()
								.getPlanningSequenceIdentifier();
						if (!sap.firefly.XString.isEqual(objectName,
								planningSequenceIdentifier
										.getPlanningSequenceName())) {
							return false;
						}
						type = sap.firefly.PrUtils.getStringValueProperty(
								dataSource, sap.firefly.InAConstants.QY_TYPE,
								null);
						if (!sap.firefly.XString
								.isEqual(
										type,
										sap.firefly.InAConstants.VA_TYPE_PLANNING_SEQUENCE)) {
							return false;
						}
						dimensions = sap.firefly.PrUtils
								.getListProperty(command,
										sap.firefly.InAConstants.QY_DIMENSIONS);
						variables = sap.firefly.PrUtils.getListProperty(
								command, sap.firefly.InAConstants.QY_VARIABLES);
						stepMetadataList = this
								.extractStepMetadataList(command);
						metadata = new sap.firefly.PlanningSequenceMetadata();
						metadata
								.setPlanningOperationIdentifier(planningSequenceIdentifier);
						metadata.setDataArea(dataArea);
						metadata.setInstanceId(instanceId);
						metadata.setDimenstions(dimensions);
						metadata.setVariables(variables);
						metadata.setStepMetadataList(stepMetadataList);
						this.setPlanningOperationMetadata(metadata);
						return true;
					},
					extractStepMetadataList : function(command) {
						var steps = sap.firefly.PrUtils.getListProperty(
								command, sap.firefly.InAConstants.QY_STEPS);
						var result;
						var i;
						var step;
						var number;
						var type;
						var baseDataSource;
						var filterName;
						var planningFunctionName;
						var queryName;
						var planningFunctionDescription;
						var commandType;
						var stepMetadata;
						if (steps === null) {
							return null;
						}
						result = sap.firefly.XList.create();
						for (i = 0; i < steps.size(); i++) {
							step = sap.firefly.PrUtils.getStructureElement(
									steps, i);
							if (step === null) {
								continue;
							}
							number = sap.firefly.PrUtils
									.getIntegerValueProperty(
											step,
											sap.firefly.InAConstants.QY_STEP_NUMBER,
											0);
							type = sap.firefly.PlanningSequenceStepType
									.lookupWithDefault(
											sap.firefly.PrUtils
													.getStringValueProperty(
															step,
															sap.firefly.InAConstants.QY_STEP_TYPE,
															null), null);
							baseDataSource = this.extractBaseDataSource(step);
							filterName = sap.firefly.PrUtils
									.getStringValueProperty(
											step,
											sap.firefly.InAConstants.QY_FILTER_NAME,
											null);
							planningFunctionName = sap.firefly.PrUtils
									.getStringValueProperty(
											step,
											sap.firefly.InAConstants.QY_PLANNING_FUNCTION_NAME,
											null);
							queryName = sap.firefly.PrUtils
									.getStringValueProperty(
											step,
											sap.firefly.InAConstants.QY_QUERY_NAME,
											null);
							planningFunctionDescription = sap.firefly.PrUtils
									.getStringValueProperty(
											step,
											sap.firefly.InAConstants.QY_DESCRIPTION,
											null);
							commandType = sap.firefly.PrUtils
									.getStringValueProperty(
											step,
											sap.firefly.InAConstants.QY_COMMAND_TYPE,
											null);
							stepMetadata = new sap.firefly.PlanningSequenceStepMetadata();
							stepMetadata.setNumber(number);
							stepMetadata.setType(type);
							stepMetadata.setBaseDataSource(baseDataSource);
							stepMetadata.setFilterName(filterName);
							stepMetadata
									.setPlanningFunctionName(planningFunctionName);
							stepMetadata.setQueryName(queryName);
							stepMetadata
									.setPlanningFunctionDescription(planningFunctionDescription);
							stepMetadata.setCommendType(commandType);
							result.add(stepMetadata);
						}
						return result;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionClose",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						CLOSE_MODE : "CLOSE_MODE"
					},
					setCloseMode : function(closeMode) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestVersionClose.CLOSE_MODE,
										closeMode);
						return this;
					},
					getCloseMode : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestVersionClose.CLOSE_MODE);
					},
					addParametersToJson : function(parametersStructure) {
						var closeMode = this.getCloseMode();
						if ((closeMode !== null) && !closeMode.isOnlyClient()) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_MODE, closeMode
											.getName());
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionEndActionSequence",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						SEQUENCE_ID : "SEQUENCE_ID",
						DESCRIPTION : "DESCRIPTION"
					},
					setSequenceId : function(sequenceId) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelRequestVersionEndActionSequence.SEQUENCE_ID,
										sequenceId);
						return this;
					},
					getSequenceId : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelRequestVersionEndActionSequence.SEQUENCE_ID);
					},
					setDescription : function(description) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelRequestVersionEndActionSequence.DESCRIPTION,
										description);
						return this;
					},
					getDescription : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelRequestVersionEndActionSequence.DESCRIPTION);
					},
					addParametersToJson : function(parametersStructure) {
						var description;
						var sequenceId = this.getSequenceId();
						if (sap.firefly.XStringUtils.isNullOrEmpty(sequenceId)) {
							sequenceId = this.getPlanningVersion()
									.getActionSequenceId();
						}
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(sequenceId)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_SEQUENCE_ID,
									sequenceId);
						}
						description = this.getDescription();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(description)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_DESCRIPTION,
									description);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionInit",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						RESTORE_BACKUP_TYPE : "RESTORE_BACKUP_TYPE",
						VERSION_PARAMETERS_STRUCTURE : "VERSION_PARAMETERS_STRUCTURE"
					},
					setRestoreBackupType : function(restoreBackupType) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestVersionInit.RESTORE_BACKUP_TYPE,
										restoreBackupType);
						return this;
					},
					getRestoreBackupType : function() {
						var restoreBackupType = this
								.getPropertyObject(sap.firefly.PlanningModelRequestVersionInit.RESTORE_BACKUP_TYPE);
						if (restoreBackupType === null) {
							restoreBackupType = sap.firefly.RestoreBackupType.NONE;
						}
						return restoreBackupType;
					},
					setVersionParameters : function(parameters) {
						var parametersStructure = sap.firefly.PlanningVersion
								.parametersStringMap2ParametersStructure(parameters);
						this.setVersionParametersStructure(parametersStructure);
						return this;
					},
					getVersionParameters : function() {
						var parametersStructure = this
								.getVersionParametersStructure();
						return sap.firefly.PlanningVersion
								.parametersStructure2ParametersStringMap(parametersStructure);
					},
					setVersionParametersAsJson : function(parametersJson) {
						var parametersStructure = sap.firefly.XJson
								.extractJsonContent(parametersJson);
						this.setVersionParametersStructure(parametersStructure);
						return this;
					},
					setVersionParametersStructure : function(
							parametersStructure) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestVersionInit.VERSION_PARAMETERS_STRUCTURE,
										parametersStructure);
						this.tryPublicVersionEdit(parametersStructure);
					},
					tryPublicVersionEdit : function(parametersStructure) {
						var planningModel;
						var sourceVersionName;
						var showAsPublicVersion;
						var version;
						var publicVersionEdit;
						if (this.getPlanningService().getServiceConfig()
								.getSystemDescription().getSystemType() !== sap.firefly.SystemType.HANA) {
							return;
						}
						planningModel = this.getPlanningModel();
						if (!planningModel.supportsPublicVersionEdit()) {
							return;
						}
						if (!parametersStructure
								.hasValueByName(sap.firefly.InAConstants.LC_SHOW_AS_PUBLIC_VERSION)) {
							return;
						}
						if (!parametersStructure
								.hasStringByName(sap.firefly.InAConstants.LC_SOURCE_VERSION)) {
							return;
						}
						sourceVersionName = parametersStructure
								.getStringByNameWithDefault(
										sap.firefly.InAConstants.LC_SOURCE_VERSION,
										null);
						if (sap.firefly.XStringUtils
								.isNullOrEmpty(sourceVersionName)) {
							return;
						}
						showAsPublicVersion = parametersStructure
								.getIntegerByNameWithDefault(
										sap.firefly.InAConstants.LC_SHOW_AS_PUBLIC_VERSION,
										-1);
						if (showAsPublicVersion !== 1) {
							return;
						}
						version = this.getPlanningVersion();
						sourceVersionName = sap.firefly.XStringUtils
								.concatenate3(
										sap.firefly.InAConstants.LC_PUBLIC,
										".", sourceVersionName);
						version.setSourceVersionName(sourceVersionName);
						version.setShowingAsPublicVersion(true);
						publicVersionEdit = version.isShowingAsPublicVersion()
								&& sap.firefly.XStringUtils
										.isNotNullAndNotEmpty(version
												.getSourceVersionName());
						this.setInvalidatingResultSet(!publicVersionEdit);
					},
					getVersionParametersStructure : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestVersionInit.VERSION_PARAMETERS_STRUCTURE);
					},
					addParametersToJson : function(parametersStructure) {
						var description = this.getPlanningVersion()
								.getVersionDescription();
						var restoreBackupType;
						var versionParametersStructure;
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(description)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_DESCRIPTION,
									description);
						}
						restoreBackupType = this.getRestoreBackupType();
						if (restoreBackupType !== null) {
							if (sap.firefly.RestoreBackupType.RESTORE_TRUE === restoreBackupType) {
								parametersStructure
										.setBooleanByName(
												sap.firefly.InAConstants.LC_RESTORE_BACKUP,
												true);
							} else {
								if (sap.firefly.RestoreBackupType.RESTORE_FALSE === restoreBackupType) {
									parametersStructure
											.setBooleanByName(
													sap.firefly.InAConstants.LC_RESTORE_BACKUP,
													false);
								}
							}
						}
						versionParametersStructure = this
								.getVersionParametersStructure();
						if (sap.firefly.PrUtils.getStructureSize(
								versionParametersStructure, 0) > 0) {
							parametersStructure.setElementByName(
									sap.firefly.InAConstants.LC_PARAMETERS,
									versionParametersStructure);
						}
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionSetTimeout",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						TIMEOUT : "TIMEOUT"
					},
					setTimeout : function(seconds) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelRequestVersionSetTimeout.TIMEOUT,
										seconds);
						return this;
					},
					getTimeout : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelRequestVersionSetTimeout.TIMEOUT);
					},
					addParametersToJson : function(parametersStructure) {
						var timeout = this.getTimeout();
						parametersStructure.setIntegerByName(
								sap.firefly.InAConstants.LC_TIMEOUT_VALUE,
								timeout);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionStartActionSequence",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						SEQUENCE_ID : "SEQUENCE_ID",
						DESCRIPTION : "DESCRIPTION",
						START_MODE : "START_MODE"
					},
					setSequenceId : function(sequenceId) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelRequestVersionStartActionSequence.SEQUENCE_ID,
										sequenceId);
						return this;
					},
					getSequenceId : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelRequestVersionStartActionSequence.SEQUENCE_ID);
					},
					setDescription : function(description) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelRequestVersionStartActionSequence.DESCRIPTION,
										description);
						return this;
					},
					getDescription : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelRequestVersionStartActionSequence.DESCRIPTION);
					},
					setStartMode : function(startMode) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelRequestVersionStartActionSequence.START_MODE,
										startMode);
						return this;
					},
					getStartMode : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelRequestVersionStartActionSequence.START_MODE);
					},
					addParametersToJson : function(parametersStructure) {
						var description;
						var startMode;
						var sequenceId = this.getSequenceId();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(sequenceId)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_SEQUENCE_ID,
									sequenceId);
						}
						description = this.getDescription();
						if (sap.firefly.XStringUtils
								.isNotNullAndNotEmpty(description)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_DESCRIPTION,
									description);
						}
						startMode = this.getStartMode();
						if ((startMode !== null)
								&& (startMode !== sap.firefly.StartActionSequenceModeType.NONE)) {
							parametersStructure.setStringByName(
									sap.firefly.InAConstants.LC_MODE, startMode
											.getName());
						}
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseVersionStartActionSequence();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionStateDescriptions",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						START_INDEX : "START_INDEX",
						COUNT : "COUNT"
					},
					setStartIndex : function(startIndex) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelRequestVersionStateDescriptions.START_INDEX,
										startIndex);
						return this;
					},
					getStartIndex : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelRequestVersionStateDescriptions.START_INDEX);
					},
					setCount : function(count) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelRequestVersionStateDescriptions.COUNT,
										count);
						return this;
					},
					getCount : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelRequestVersionStateDescriptions.COUNT);
					},
					addParametersToJson : function(parametersStructure) {
						var count;
						var startIndex = this.getStartIndex();
						if (startIndex !== 0) {
							parametersStructure.setIntegerByName(
									sap.firefly.InAConstants.LC_START,
									startIndex);
							count = this.getCount();
							if (count !== 0) {
								parametersStructure.setIntegerByName(
										sap.firefly.InAConstants.LC_COUNT,
										count);
							}
						}
					},
					createCommandResultInstance : function() {
						return new sap.firefly.PlanningModelResponseVersionStateDescriptions();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelRequestVersionUndoRedo",
				sap.firefly.PlanningModelRequestVersion,
				{
					$statics : {
						NUM_UNDO_REDO_STEPS : "NUM_UNDO_REDO_STEPS"
					},
					addParametersToJson : function(parametersStructure) {
						var steps = this.getSteps();
						if (steps > 0) {
							parametersStructure
									.setIntegerByName(
											sap.firefly.InAConstants.LC_NUM_UNDO_REDO_STEPS,
											steps);
						}
					},
					setSteps : function(steps) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelRequestVersionUndoRedo.NUM_UNDO_REDO_STEPS,
										steps);
						return this;
					},
					getSteps : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelRequestVersionUndoRedo.NUM_UNDO_REDO_STEPS);
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseVersionStartActionSequence",
				sap.firefly.PlanningModelResponseVersion,
				{
					$statics : {
						SEQUENCE_ID : "SEQUENCE_ID"
					},
					getSequenceId : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelResponseVersionStartActionSequence.SEQUENCE_ID);
					},
					setSequenceId : function(sequenceId) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelResponseVersionStartActionSequence.SEQUENCE_ID,
										sequenceId);
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var result = sap.firefly.PlanningModelResponseVersionStartActionSequence.$superclass.processResponseStructureInternal
								.call(this, responseStructure, messageManager);
						var responses;
						var request;
						var commands;
						if (!result) {
							return false;
						}
						responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						request = this.getPlanningModelRequestVersion();
						commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList((request).serializeToJson());
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseStartActionSequence(commands,
										responses, this) === false) {
							return false;
						}
						return result;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.PlanningModelResponseVersionStateDescriptions",
				sap.firefly.PlanningModelResponseVersion,
				{
					$statics : {
						VERSION_IDENTIFIER : "VERSION_IDENTIFIER",
						VERSION_DESCRIPTION : "VERSION_DESCRIPTION",
						AVAILABLE_UNDOS : "AVAILABLE_UNDOS",
						AVAILABLE_REDOS : "AVAILABLE_REDOS",
						DESCRIPTIONS : "DESCRIPTIONS"
					},
					getVersionIdentifier : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelResponseVersionStateDescriptions.VERSION_IDENTIFIER);
					},
					setVersionIdentifier : function(identifier) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelResponseVersionStateDescriptions.VERSION_IDENTIFIER,
										identifier);
					},
					getVersionId : function() {
						return this.getVersionIdentifier().getVersionId();
					},
					isSharedVersion : function() {
						return this.getVersionIdentifier().isSharedVersion();
					},
					getVersionOwner : function() {
						return this.getVersionIdentifier().getVersionOwner();
					},
					getVersionUniqueName : function() {
						return this.getVersionIdentifier()
								.getVersionUniqueName();
					},
					getVersionDescription : function() {
						return this
								.getPropertyString(sap.firefly.PlanningModelResponseVersionStateDescriptions.VERSION_DESCRIPTION);
					},
					setVersionDescription : function(versionDescription) {
						this
								.setPropertyString(
										sap.firefly.PlanningModelResponseVersionStateDescriptions.VERSION_DESCRIPTION,
										versionDescription);
					},
					getAvailableUndos : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelResponseVersionStateDescriptions.AVAILABLE_UNDOS);
					},
					setAvailableUndos : function(undos) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelResponseVersionStateDescriptions.AVAILABLE_UNDOS,
										undos);
					},
					getAvailableRedos : function() {
						return this
								.getPropertyInteger(sap.firefly.PlanningModelResponseVersionStateDescriptions.AVAILABLE_REDOS);
					},
					setAvailableRedos : function(redos) {
						this
								.setPropertyInteger(
										sap.firefly.PlanningModelResponseVersionStateDescriptions.AVAILABLE_REDOS,
										redos);
					},
					getVersionStateDescriptionList : function() {
						return this
								.getPropertyObject(sap.firefly.PlanningModelResponseVersionStateDescriptions.DESCRIPTIONS);
					},
					getVersionStateDescription : function(index) {
						return this.getVersionStateDescriptionList().get(index);
					},
					getVersionStateDescriptionIterator : function() {
						return this.getVersionStateDescriptionList()
								.getIterator();
					},
					getVersionStateDescriptionSize : function() {
						return this.getVersionStateDescriptionList().size();
					},
					setVersionStateDescriptions : function(descriptions) {
						this
								.setPropertyObject(
										sap.firefly.PlanningModelResponseVersionStateDescriptions.DESCRIPTIONS,
										descriptions);
					},
					processResponseStructureInternal : function(
							responseStructure, messageManager) {
						var result = sap.firefly.PlanningModelResponseVersionStateDescriptions.$superclass.processResponseStructureInternal
								.call(this, responseStructure, messageManager);
						var responses;
						var request;
						var commands;
						if (!result) {
							return false;
						}
						responses = sap.firefly.PlanningModelCommandHelper
								.getResponsesList(responseStructure);
						request = this.getPlanningModelRequestVersion();
						commands = sap.firefly.PlanningModelCommandHelper
								.getCommandsList((request).serializeToJson());
						if (sap.firefly.PlanningModelCommandHelper
								.processResponseStateDescriptions(commands,
										responses, this) === false) {
							return false;
						}
						return result;
					},
					toString : function() {
						var buffer = sap.firefly.XStringBuffer.create();
						var descriptionIterator;
						buffer.append("version id: ").appendInt(
								this.getVersionId()).append("\n");
						buffer.append("version description: ").append(
								this.getVersionDescription()).append("\n");
						buffer.append("undos: ").appendInt(
								this.getAvailableUndos()).append("\n");
						buffer.append("redos: ").appendInt(
								this.getAvailableRedos()).append("\n");
						descriptionIterator = this
								.getVersionStateDescriptionIterator();
						buffer.append("state descriptions: [");
						while (descriptionIterator.hasNext()) {
							buffer
									.append(descriptionIterator.next()
											.toString());
							if (descriptionIterator.hasNext()) {
								buffer.append(", ");
							}
						}
						buffer.append("]");
						return buffer.toString();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QAxisDimensionList",
				sap.firefly.QDimensionList,
				{
					$statics : {
						checkCapability : function(dimension, targetAxisType) {
							if (dimension === null) {
								return false;
							}
							return dimension.isAxisSupported(targetAxisType);
						}
					},
					add : function(element) {
						var axis = this.getAxis();
						var size;
						var oldIndex;
						if (sap.firefly.QAxisDimensionList.checkCapability(
								element, axis.getType())) {
							size = this.size();
							if (element.getAxis() === axis) {
								oldIndex = this.getIndex(element);
								sap.firefly.QAxisDimensionList.$superclass.moveElement
										.call(this, oldIndex, size - 1);
							} else {
								this.insert(size, element);
							}
						}
					},
					insert : function(index, element) {
						var axisType = this.getAxis().getType();
						var dimensionBase;
						var dimensionBaseAxis;
						var isFreeAxis;
						var oldIndex;
						if (sap.firefly.QAxisDimensionList.checkCapability(
								element, axisType)) {
							this.queueEventing();
							try {
								dimensionBase = element;
								dimensionBaseAxis = dimensionBase.getAxisBase();
								if ((dimensionBaseAxis !== null)
										&& (dimensionBaseAxis.getType() === axisType)) {
									isFreeAxis = (axisType === sap.firefly.AxisType.FREE);
									try {
										if (isFreeAxis) {
											this.stopEventing();
										}
										oldIndex = this.getIndex(dimensionBase);
										sap.firefly.QAxisDimensionList.$superclass.moveElement
												.call(this, oldIndex, index);
										if (isFreeAxis) {
											this.resumeEventing();
										}
									} catch (lException1) {
										if (isFreeAxis) {
											this.resumeEventing();
											throw sap.firefly.XException
													.createRuntimeException(sap.firefly.XException
															.getStackTrace(
																	lException1,
																	0));
										}
									}
								} else {
									if (dimensionBaseAxis !== null) {
										dimensionBaseAxis
												.getDimensionListBase()
												.removeElementInternal(
														dimensionBase);
									}
									sap.firefly.QAxisDimensionList.$superclass.insert
											.call(this, index, dimensionBase);
									dimensionBase.setAxis(this.getAxisBase());
								}
							} catch (lException) {
								this.resumeEventing();
								throw sap.firefly.XException
										.createRuntimeException(sap.firefly.XException
												.getStackTrace(lException, 0));
							}
							this.resumeEventing();
						}
					},
					removeElementInternal : function(dimension) {
						this.queueEventing();
						sap.firefly.QAxisDimensionList.$superclass.removeElement
								.call(this, dimension);
						dimension.setAxis(null);
						this.resumeEventing();
					},
					clear : function() {
						var fallbackAxis = this.getAxis().getType()
								.getFallbackAxis();
						var leftOverIndex;
						var dimensionByIndex;
						if (fallbackAxis === null) {
							throw sap.firefly.XException
									.createIllegalStateException("Cannot remove dimensions from free axis");
						}
						this.queueEventing();
						leftOverIndex = 0;
						while (this.size() > leftOverIndex) {
							dimensionByIndex = this
									.getDimensionByIndex(leftOverIndex);
							if (dimensionByIndex.isAxisSupported(fallbackAxis)) {
								this.removeAt(leftOverIndex);
							} else {
								leftOverIndex++;
							}
						}
						this.resumeEventing();
					},
					removeElement : function(element) {
						var index = this.getIndex(element);
						if (index !== -1) {
							this.removeAt(index);
						}
					},
					removeAt : function(index) {
						var dimension = sap.firefly.QAxisDimensionList.$superclass.get
								.call(this, index);
						var fallbackAxis;
						var removedObj;
						if (this.checkCapabilityAxisRemoveDimension(dimension)) {
							fallbackAxis = this.getAxis().getType()
									.getFallbackAxis();
							this.queueEventing();
							removedObj = sap.firefly.QAxisDimensionList.$superclass.removeAt
									.call(this, index);
							this.getQueryModel().getAxis(fallbackAxis)
									.getDimensionList().add(dimension);
							this.resumeEventing();
							return removedObj;
						}
						return null;
					},
					checkCapabilityAxisRemoveDimension : function(dimension) {
						var fallbackAxis = this.getAxis().getType()
								.getFallbackAxis();
						if (fallbackAxis === null) {
							return false;
						}
						return sap.firefly.QAxisDimensionList.checkCapability(
								dimension, fallbackAxis);
					},
					getAxis : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getAxisBase : function() {
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QSimpleTypeVariable",
				sap.firefly.QVariable,
				{
					$statics : {
						createSimpleTypeVariable : function(context, parent,
								valueType, name, description, hasMultipleValues) {
							var variable = new sap.firefly.QSimpleTypeVariable();
							variable
									.setupSimpleTypeVariable(
											context,
											parent,
											sap.firefly.VariableType.SIMPLE_TYPE_VARIABLE,
											valueType, name, description);
							variable.useMultipleValues(hasMultipleValues);
							return variable;
						},
						createTextVariable : function(context, parent, name,
								description, hasMultipleValues) {
							var variable = new sap.firefly.QSimpleTypeVariable();
							variable.setupSimpleTypeVariable(context, parent,
									sap.firefly.VariableType.TEXT_VARIABLE,
									sap.firefly.XValueType.STRING, name,
									description);
							variable.useMultipleValues(hasMultipleValues);
							return variable;
						},
						createFormulaVariable : function(context, parent, name,
								description, hasMultipleValues) {
							var variable = new sap.firefly.QSimpleTypeVariable();
							variable.setupSimpleTypeVariable(context, parent,
									sap.firefly.VariableType.FORMULA_VARIABLE,
									sap.firefly.XValueType.DOUBLE, name,
									description);
							variable.useMultipleValues(hasMultipleValues);
							return variable;
						},
						createOptionListVariable : function(context, parent,
								name, description, hasMultipleValues) {
							var variable = new sap.firefly.QSimpleTypeVariable();
							variable
									.setupSimpleTypeVariable(
											context,
											parent,
											sap.firefly.VariableType.OPTION_LIST_VARIABLE,
											sap.firefly.XValueType.STRING,
											name, description);
							variable.useMultipleValues(hasMultipleValues);
							return variable;
						},
						createHierarchyVariable : function(context, parent,
								name, description, hasMultipleValues) {
							var variable = new sap.firefly.QSimpleTypeVariable();
							variable
									.setupSimpleTypeVariable(
											context,
											parent,
											sap.firefly.VariableType.HIERARCHY_VARIABLE,
											sap.firefly.XValueType.STRING,
											name, description);
							variable.useMultipleValues(hasMultipleValues);
							return variable;
						}
					},
					m_simpleVariableType : null,
					m_value : null,
					m_valuesList : null,
					m_isUsingMultipleValues : false,
					m_scale : 0,
					m_length : 0,
					m_options : null,
					setupSimpleTypeVariable : function(context, parent,
							variableType, valueType, name, description) {
						this.setupVariable(context, parent, valueType, name,
								description);
						this.m_valuesList = sap.firefly.XList.create();
						this.m_options = sap.firefly.XListOfNameObject.create();
						this.m_simpleVariableType = variableType;
					},
					releaseObject : function() {
						this.m_value = sap.firefly.XObject
								.releaseIfNotNull(this.m_value);
						this.m_valuesList = sap.firefly.XObject
								.releaseIfNotNull(this.m_valuesList);
						this.m_options = sap.firefly.XObject
								.releaseIfNotNull(this.m_options);
						sap.firefly.QSimpleTypeVariable.$superclass.releaseObject
								.call(this);
					},
					copySimpleTypeVariable : function(origin) {
						var size;
						var i;
						var context;
						var option;
						sap.firefly.QSimpleTypeVariable.$superclass.copyVariable
								.call(this, origin);
						if (origin.m_value !== null) {
							this.m_value = origin.m_value.clone();
						}
						size = origin.m_valuesList.size();
						for (i = 0; i < size; i++) {
							this.m_valuesList.add(origin.m_valuesList.get(i)
									.clone());
						}
						size = origin.m_options.size();
						context = this.getContext();
						for (i = 0; i < size; i++) {
							option = origin.m_options.get(i);
							this.m_options
									.add(sap.firefly.QOptionListElement
											.createOptionListElement(context,
													this, option.getName(),
													option.getText()));
						}
						this.m_scale = origin.m_scale;
						this.m_length = origin.m_length;
						this.m_isUsingMultipleValues = origin.m_isUsingMultipleValues;
					},
					getVariableType : function() {
						return this.m_simpleVariableType;
					},
					setValue : function(value) {
						var changed = false;
						if (value === null) {
							if (this.m_value !== null) {
								this.m_value.releaseObject();
								this.m_value = null;
								changed = true;
							}
						} else {
							if (this.m_value === null) {
								this.m_value = value;
								changed = true;
							} else {
								if (!value.isEqualTo(this.m_value)) {
									this.m_value = value;
									changed = true;
								}
							}
						}
						if (changed) {
							this.notifyNodeChanged();
						}
					},
					hasValue : function() {
						return (this.m_value !== null)
								|| (this.m_valuesList.hasElements());
					},
					getValueScale : function() {
						return this.m_scale;
					},
					setValueScale : function(scale) {
						this.m_scale = scale;
					},
					getValueLength : function() {
						return this.m_length;
					},
					setValueLength : function(length) {
						this.m_length = length;
					},
					setStringValue : function(stringValue) {
						var xValue;
						var stringContainer;
						var oldValue;
						if ((this.getValueType() === sap.firefly.XValueType.STRING)
								|| (this.getValueType() === sap.firefly.XValueType.KEY_VALUE)) {
							xValue = this.getValue();
							if (xValue === null) {
								this.setValue(sap.firefly.XStringValue
										.create(stringValue));
							} else {
								stringContainer = xValue;
								oldValue = stringContainer.getStringValue();
								if (!sap.firefly.XString.isEqual(oldValue,
										stringValue)) {
									stringContainer.setStringValue(stringValue);
									this.notifyNodeChanged();
								}
							}
						} else {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
					},
					setIntegerValue : function(integerValue) {
						var xValue = this.getValue();
						var intContainer;
						if (xValue === null) {
							this.setValue(sap.firefly.XIntegerValue
									.create(integerValue));
						} else {
							this.assertValueType(xValue,
									sap.firefly.XValueType.INTEGER);
							intContainer = xValue;
							if (intContainer.getIntegerValue() !== integerValue) {
								intContainer.setIntegerValue(integerValue);
								this.notifyNodeChanged();
							}
						}
					},
					setLongValue : function(longValue) {
						var xValue = this.getValue();
						var longContainer;
						if (xValue === null) {
							this.setValue(sap.firefly.XLongValue
									.create(longValue));
						} else {
							this.assertValueType(xValue,
									sap.firefly.XValueType.LONG);
							longContainer = xValue;
							if (longContainer.getLongValue() !== longValue) {
								longContainer.setLongValue(longValue);
								this.notifyNodeChanged();
							}
						}
					},
					setDoubleValue : function(doubleValue) {
						var xValue;
						var doubleContainer;
						if ((this.getValueType() !== sap.firefly.XValueType.DOUBLE)
								&& (this.getValueType() !== sap.firefly.XValueType.DECIMAL_FLOAT)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						xValue = this.getValue();
						if (xValue === null) {
							this.setValue(sap.firefly.XDoubleValue
									.create(doubleValue));
						} else {
							doubleContainer = xValue;
							if (doubleContainer.getDoubleValue() !== doubleValue) {
								doubleContainer.setDoubleValue(doubleValue);
								this.notifyNodeChanged();
							}
						}
					},
					setDateValue : function(dateValue) {
						var original;
						this.assertValueType(dateValue,
								sap.firefly.XValueType.DATE);
						original = this.m_value;
						if (original === dateValue) {
							return;
						}
						if (dateValue === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (dateValue.isEqualTo(original)) {
							return;
						}
						this.setValue(dateValue.clone());
						this.notifyNodeChanged();
					},
					getStringValue : function() {
						var value = this.getValue();
						var valueType;
						if (value === null) {
							return null;
						}
						valueType = this.getValueType();
						if (valueType === sap.firefly.XValueType.STRING) {
							return (value).getStringValue();
						} else {
							if (valueType === sap.firefly.XValueType.DATE) {
								return (value).toIsoFormat();
							} else {
								if (valueType === sap.firefly.XValueType.DATE_TIME) {
									return (value).toIsoFormat();
								} else {
									if (valueType === sap.firefly.XValueType.TIME) {
										return (value).toIsoFormat();
									} else {
										if (valueType.isSpatial()) {
											return (value).toWKT();
										}
									}
								}
							}
						}
						throw sap.firefly.XException
								.createUnsupportedOperationException();
					},
					getIntegerValue : function() {
						var value = this.getValue();
						if (value === null) {
							return 0;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.INTEGER);
						return (value).getIntegerValue();
					},
					getLongValue : function() {
						var value = this.getValue();
						if (value === null) {
							return 0;
						}
						this
								.assertValueType(value,
										sap.firefly.XValueType.LONG);
						return (value).getLongValue();
					},
					getDoubleValue : function() {
						var value = this.getValue();
						if (value === null) {
							return 0;
						}
						if ((this.getValueType() !== sap.firefly.XValueType.DOUBLE)
								&& (this.getValueType() !== sap.firefly.XValueType.DECIMAL_FLOAT)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						return (value).getDoubleValue();
					},
					getDateValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this
								.assertValueType(value,
										sap.firefly.XValueType.DATE);
						return value.clone();
					},
					setValueByStringExt : function(value, isManualInput) {
						var valueType = this.getValueType();
						if (sap.firefly.XStringUtils.isNullOrEmpty(value)) {
							this.setValue(sap.firefly.XValueAccess
									.createWithType(valueType).getValue());
							return;
						}
						if (valueType === sap.firefly.XValueType.STRING) {
							this.setValue(sap.firefly.XStringValue
									.create(value));
						} else {
							if ((valueType === sap.firefly.XValueType.DOUBLE)
									|| (valueType === sap.firefly.XValueType.DECIMAL_FLOAT)) {
								this.setValue(sap.firefly.XDoubleValue
										.create(sap.firefly.XDouble
												.convertStringToDouble(value)));
							} else {
								if (valueType === sap.firefly.XValueType.LONG) {
									this
											.setValue(sap.firefly.XLongValue
													.create(sap.firefly.XLong
															.convertStringToLong(value)));
								} else {
									if (valueType === sap.firefly.XValueType.INTEGER) {
										this
												.setValue(sap.firefly.XIntegerValue
														.create(sap.firefly.XInteger
																.convertStringToIntegerWithRadix(
																		value,
																		10)));
									} else {
										if (valueType === sap.firefly.XValueType.DATE) {
											this
													.setValue(sap.firefly.XDate
															.createDateFromIsoFormat(value));
										} else {
											if (valueType === sap.firefly.XValueType.TIME) {
												this
														.setValue(sap.firefly.XTime
																.createTimeFromIsoFormat(value));
											} else {
												if (valueType === sap.firefly.XValueType.DATE_TIME) {
													this
															.setValue(sap.firefly.XDateTime
																	.createDateTimeFromIsoFormat(value));
												} else {
													if (valueType === sap.firefly.XValueType.BOOLEAN) {
														this
																.setValue(sap.firefly.XBooleanValue
																		.create(sap.firefly.XBoolean
																				.convertStringToBoolean(value)));
													} else {
														if (valueType
																.isSpatial()) {
															this
																	.setValue(sap.firefly.XGeometryValue
																			.createGeometryValueWithWkt(value));
														} else {
															throw sap.firefly.XException
																	.createUnsupportedOperationException();
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					getValueByString : function() {
						var buffer;
						var i;
						var currentValue;
						if (this.m_isUsingMultipleValues) {
							buffer = sap.firefly.XStringBuffer.create();
							if (this.m_valuesList === null) {
								buffer.append("null");
							} else {
								for (i = 0; i < this.m_valuesList.size(); i++) {
									if (i > 0) {
										buffer.append(",");
									}
									currentValue = this.m_valuesList.get(i);
									if (currentValue === null) {
										buffer.append("null");
									} else {
										buffer.append(currentValue
												.getStringRepresentation());
									}
								}
							}
							return buffer.toString();
						}
						if (this.m_value === null) {
							return "null";
						}
						return this.m_value.getStringRepresentation();
					},
					initValueList : function() {
						if (this.m_valuesList === null) {
							this.m_valuesList = sap.firefly.XList.create();
						}
					},
					addDoubleValue : function(value) {
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						if ((this.getValueType() !== sap.firefly.XValueType.DOUBLE)
								&& (this.getValueType() !== sap.firefly.XValueType.DECIMAL_FLOAT)) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare.getDoubleValue() === value) {
								isNew = false;
								break;
							}
						}
						if (isNew) {
							this.m_valuesList.add(sap.firefly.XDoubleValue
									.create(value));
						}
					},
					addStringValue : function(value) {
						var strValue;
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						strValue = sap.firefly.XStringValue.create(value);
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (sap.firefly.XString.isEqual(toCompare
									.getStringValue(), value)) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(strValue);
						}
					},
					addIntegerValue : function(value) {
						var intValue;
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						intValue = sap.firefly.XIntegerValue.create(value);
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare.getIntegerValue() === value) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(intValue);
						}
					},
					addLongValue : function(value) {
						var longValue;
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						longValue = sap.firefly.XLongValue.create(value);
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare.getLongValue() === value) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(longValue);
						}
					},
					addDateValue : function(value) {
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						this
								.assertValueType(value,
										sap.firefly.XValueType.DATE);
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare === value) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(value);
						}
					},
					clearValues : function() {
						if (this.m_valuesList !== null) {
							this.m_valuesList.clear();
						}
						this.setValue(null);
					},
					getValues : function() {
						this.initValueList();
						return this.m_valuesList.getValuesAsReadOnlyList();
					},
					useMultipleValues : function(use) {
						this.m_isUsingMultipleValues = use;
					},
					isUsingMultipleValues : function() {
						return this.m_isUsingMultipleValues;
					},
					setDateTimeValue : function(dateTimeValue) {
						var original;
						this.assertValueType(dateTimeValue,
								sap.firefly.XValueType.DATE_TIME);
						original = this.m_value;
						if (original === dateTimeValue) {
							return;
						}
						if (dateTimeValue === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (dateTimeValue.isEqualTo(original)) {
							return;
						}
						this.setValue(dateTimeValue.clone());
						this.notifyNodeChanged();
					},
					getValue : function() {
						if (this.m_value !== null) {
							return this.m_value;
						} else {
							if ((!this.m_isUsingMultipleValues)
									&& ((this.m_valuesList !== null) && (!this.m_valuesList
											.isEmpty()))) {
								return this.m_valuesList.get(0);
							}
						}
						return null;
					},
					getDateTimeValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.DATE_TIME);
						return value.clone();
					},
					addDateTimeValue : function(value) {
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare === value) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(value);
						}
					},
					newVariableValue : function() {
						return sap.firefly.QVariableValue.create(this);
					},
					getGeometry : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						if (!value.getValueType().isSpatial()) {
							throw sap.firefly.XException
									.createUnsupportedOperationException();
						}
						return value.clone();
					},
					getPolygonValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.POLYGON);
						return value.clone();
					},
					getPointValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.POINT);
						return value.clone();
					},
					getMultiPointValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POINT);
						return value.clone();
					},
					getMultiPolygonValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POLYGON);
						return value.clone();
					},
					getLineStringValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.LINE_STRING);
						return value.clone();
					},
					getMultiLineStringValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_LINE_STRING);
						return value.clone();
					},
					getBooleanValue : function() {
						var value = this.getValue();
						if (value === null) {
							return false;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.BOOLEAN);
						return (value).getBooleanValue();
					},
					getTimeValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this
								.assertValueType(value,
										sap.firefly.XValueType.TIME);
						return value.clone();
					},
					getTimeSpanValue : function() {
						var value = this.getValue();
						if (value === null) {
							return null;
						}
						this.assertValueType(value,
								sap.firefly.XValueType.TIMESPAN);
						return value.clone();
					},
					getNullValue : function() {
						return null;
					},
					setTextValue : function(text) {
						this.setStringValue(text);
					},
					getTextValue : function() {
						return this.getStringValue();
					},
					setFormulaValue : function(value) {
						this.setDoubleValue(value);
					},
					getFormulaValue : function() {
						return this.getDoubleValue();
					},
					getDecimalPlaces : function() {
						return this.getValueScale();
					},
					getOptions : function() {
						return this.m_options;
					},
					setOptionByName : function(name) {
						var option = this.m_options.getByKey(name);
						if (option !== null) {
							this.setStringValue(name);
						}
					},
					addOptionByName : function(name) {
						var option = this.m_options.getByKey(name);
						if (option !== null) {
							this.addStringValue(name);
						}
					},
					addOption : function(option) {
						if (!this.m_options.contains(option)) {
							this.m_options.add(option);
						}
					},
					createAndAddOption : function(name, text) {
						this.addOption(sap.firefly.QOptionListElement
								.createOptionListElement(this.getContext(),
										this, name, text));
					},
					getCurrentOption : function() {
						return this.m_options.getByKey(this.getStringValue());
					},
					clearOptions : function() {
						this.m_options.clear();
					},
					copyFrom : function(source) {
					},
					parseStringValue : function(value) {
						return null;
					},
					setPolygonValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.POLYGON);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setPointValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.POINT);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setMultiPointValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POINT);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setMultiPolygonValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_POLYGON);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setLineStringValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.LINE_STRING);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setMultiLineStringValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.MULTI_LINE_STRING);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setBooleanValue : function(booleanValue) {
						var xBoolean = sap.firefly.XBooleanValue
								.create(booleanValue);
						var original;
						this.assertValueType(xBoolean,
								sap.firefly.XValueType.BOOLEAN);
						original = this.m_value;
						if (original === xBoolean) {
							return;
						}
						if (xBoolean === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (xBoolean.isEqualTo(original)) {
							return;
						}
						this.setValue(xBoolean.clone());
						this.notifyNodeChanged();
					},
					setTimeSpanValue : function(value) {
						var original;
						this.assertValueType(value,
								sap.firefly.XValueType.TIMESPAN);
						original = this.m_value;
						if (original === value) {
							return;
						}
						if (value === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (value.isEqualTo(original)) {
							return;
						}
						this.setValue(value.clone());
						this.notifyNodeChanged();
					},
					setNullValue : function(nullValueType) {
						this.m_value = sap.firefly.XValueAccess.createWithType(
								nullValueType).getValue();
					},
					setXValue : function(value) {
						this.copyFrom(sap.firefly.XValueAccess
								.createWithValue(value));
					},
					addTimeValue : function(value) {
						var isNew;
						var i;
						var toCompare;
						this.initValueList();
						this
								.assertValueType(value,
										sap.firefly.XValueType.TIME);
						isNew = true;
						for (i = 0; i < this.m_valuesList.size(); i++) {
							toCompare = this.m_valuesList.get(i);
							if (toCompare === value) {
								isNew = false;
							}
						}
						if (isNew) {
							this.m_valuesList.add(value);
						}
					},
					setTimeValue : function(timeValue) {
						var original;
						this.assertValueType(timeValue,
								sap.firefly.XValueType.TIME);
						original = this.m_value;
						if (original === timeValue) {
							return;
						}
						if (timeValue === null) {
							this.setValue(null);
							this.notifyNodeChanged();
							return;
						}
						if (timeValue.isEqualTo(original)) {
							return;
						}
						this.setValue(timeValue.clone());
						this.notifyNodeChanged();
					}
				});
$Firefly
		.createClass(
				"sap.firefly.QAxis",
				sap.firefly.QAxisDimensionList,
				{
					$statics : {
						createAxis : function(context, parent, axisType) {
							var axis = new sap.firefly.QAxis();
							axis.setupQAxis(context, parent, axisType);
							return axis;
						}
					},
					m_axisType : null,
					m_isHierarchyActive : false,
					m_zeroSuppressionType : null,
					m_defaultZeroSuppressionType : null,
					m_supportsZeroSuppression : false,
					m_resultStructureController : null,
					copyAxis : function(origin) {
						var accessor;
						var size;
						var i;
						var dimensionName;
						var dimension;
						sap.firefly.QAxis.$superclass.copyModelComponentList
								.call(this, origin);
						accessor = this.getDimensionAccessor();
						size = origin.size();
						for (i = 0; i < size; i++) {
							dimensionName = origin.get(i).getName();
							dimension = accessor
									.getDimensionByName(dimensionName);
							sap.firefly.QAxis.$superclass.addIfNotNull.call(
									this, dimension);
							dimension.setAxis(this);
						}
						this.m_isHierarchyActive = origin.m_isHierarchyActive;
						this.m_zeroSuppressionType = origin.m_zeroSuppressionType;
						this.m_defaultZeroSuppressionType = origin.m_defaultZeroSuppressionType;
						this.m_supportsZeroSuppression = origin.m_supportsZeroSuppression;
						(this.m_resultStructureController)
								.copyResultStructureController(origin.m_resultStructureController);
					},
					setupQAxis : function(context, parent, axisType) {
						sap.firefly.QAxis.$superclass.setupOlapList.call(this,
								context, parent, false, null, axisType
										.getName());
						this.m_axisType = axisType;
						this.m_zeroSuppressionType = sap.firefly.ZeroSuppressionType.NONE;
						this.m_supportsZeroSuppression = false;
						this.m_resultStructureController = sap.firefly.QResultStructureController
								._create(context, this,
										sap.firefly.QModelLevel.AXES);
					},
					releaseObject : function() {
						this.m_axisType = null;
						this.m_zeroSuppressionType = null;
						this.m_defaultZeroSuppressionType = null;
						this.m_resultStructureController = sap.firefly.XObject
								.releaseIfNotNull(this.m_resultStructureController);
						sap.firefly.QAxis.$superclass.releaseObject.call(this);
					},
					getOlapComponentType : function() {
						return this.getType();
					},
					getType : function() {
						return this.m_axisType;
					},
					getZeroSuppressionType : function() {
						return this.m_zeroSuppressionType;
					},
					supportsZeroSuppression : function() {
						return this.m_supportsZeroSuppression;
					},
					setSupportsZeroSuppression : function(
							supportsZeroSuppression) {
						this.m_supportsZeroSuppression = supportsZeroSuppression;
					},
					setZeroSuppressionType : function(suppressionType) {
						if (this.m_supportsZeroSuppression === false) {
							throw sap.firefly.XException
									.createRuntimeException("Zero suppression not supported");
						}
						if ((this.m_axisType === sap.firefly.AxisType.COLUMNS)
								|| (this.m_axisType === sap.firefly.AxisType.ROWS)) {
							this.m_zeroSuppressionType = suppressionType;
							this.notifyNodeChanged();
						}
					},
					getDimensionList : function() {
						return this;
					},
					getDimensionListBase : function() {
						return this;
					},
					getAxis : function() {
						return this;
					},
					getAxisBase : function() {
						return this;
					},
					isHierarchyActive : function() {
						return this.m_isHierarchyActive;
					},
					setIsHierarchyActive : function(isActive) {
						this.m_isHierarchyActive = isActive;
					},
					getEffectiveFields : function() {
						var effective = sap.firefly.XList.create();
						var size = this.size();
						var i;
						for (i = 0; i < size; i++) {
							this.collectEffectiveFields(effective, this
									.getDimensionByIndex(i));
						}
						return effective;
					},
					collectEffectiveFields : function(effective, fieldContainer) {
						var resultSetFields = fieldContainer
								.getResultSetFields();
						var rsFieldSize = resultSetFields.size();
						var j;
						for (j = 0; j < rsFieldSize; j++) {
							effective.add(resultSetFields.get(j));
						}
					},
					supportsResultVisibility : function() {
						return this.m_resultStructureController
								.supportsResultVisibility();
					},
					getResultVisibility : function() {
						return this.m_resultStructureController
								.getResultVisibility();
					},
					getResultVisibilitySettings : function() {
						return this.m_resultStructureController
								.getResultVisibilitySettings();
					},
					clearResultVisibilitySettings : function() {
						this.m_resultStructureController
								.clearResultVisibilitySettings();
					},
					getResultVisibilityByElement : function(element) {
						return this.m_resultStructureController
								.getResultVisibilityByElement(element);
					},
					getResultVisibilityByElementAndAlignment : function(
							alignment, element) {
						return this.m_resultStructureController
								.getResultVisibilityByElementAndAlignment(
										alignment, element);
					},
					setResultVisibility : function(visibility) {
						this.m_resultStructureController
								.setResultVisibility(visibility);
					},
					setResultVisibilityByElement : function(element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElement(element,
										visibility);
					},
					setResultVisibilityByElementAndAlignment : function(
							alignment, element, visibility) {
						this.m_resultStructureController
								.setResultVisibilityByElementAndAlignment(
										alignment, element, visibility);
					},
					supportsResultAlignment : function() {
						return this.m_resultStructureController
								.supportsResultAlignment();
					},
					setResultAlignment : function(alignment) {
						this.m_resultStructureController
								.setResultAlignment(alignment);
					},
					getResultAlignment : function() {
						return this.m_resultStructureController
								.getResultAlignment();
					},
					getSupportedResultAlignmentLevel : function() {
						return this.m_resultStructureController
								.getSupportedResultAlignmentLevel();
					},
					getSupportedResultVisibilityLevel : function() {
						return this.m_resultStructureController
								.getSupportedResultVisibilityLevel();
					},
					getSupportedResultAlignments : function() {
						return this.m_resultStructureController
								.getSupportedResultAlignments();
					},
					supportsResultAlignmentType : function(resultAlignment) {
						return this.m_resultStructureController
								.supportsResultAlignmentType(resultAlignment);
					},
					supportsConditionalResultVisibility : function() {
						return this.m_resultStructureController
								.supportsConditionalResultVisibility();
					},
					supportsConditionalResults : function() {
						return this.m_resultStructureController
								.supportsConditionalResults();
					},
					getSupportedConditionalResults : function() {
						return this.m_resultStructureController
								.getSupportedConditionalResults();
					},
					getResultStructureReorderingCapability : function() {
						return this.m_resultStructureController
								.getResultStructureReorderingCapability();
					},
					getParentResultStructureController : function() {
						return this.getQueryModel()
								.getResultStructureController();
					},
					getResultStructureController : function() {
						return this.m_resultStructureController;
					},
					getResultStructureControllerBase : function() {
						return this.m_resultStructureController;
					},
					getResultStructureChildren : function() {
						var list = sap.firefly.XList.create();
						var i;
						var dimension;
						for (i = 0; i < this.size(); i++) {
							dimension = this.get(i);
							list.add(dimension
									.getResultStructureControllerBase());
						}
						return list.getIterator();
					},
					supportsTotals : function() {
						return this.m_resultStructureController
								.supportsTotals();
					},
					isTotalsAlignmentOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsAlignmentOnDefault();
					},
					isTotalsVisibilityOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsVisibilityOnDefault();
					},
					isTotalsStructureOnDefault : function() {
						return this.m_resultStructureController
								.isTotalsStructureOnDefault();
					},
					restoreTotalsAlignment : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsAlignment(restoreAction,
										recurseChildren);
					},
					restoreTotalsVisibility : function(restoreAction,
							recurseChildren) {
						this.m_resultStructureController
								.restoreTotalsVisibility(restoreAction,
										recurseChildren);
					},
					getModelLevel : function() {
						return this.m_resultStructureController.getModelLevel();
					},
					getDefaultZeroSuppressionType : function() {
						return this.m_defaultZeroSuppressionType;
					},
					setDefaultZeroSuppression : function(defaultZeroSuppression) {
						this.m_defaultZeroSuppressionType = defaultZeroSuppression;
					}
				});
$Firefly
		.createClass(
				"sap.firefly.OlapImplModule",
				sap.firefly.DfModule,
				{
					$statics : {
						XS_QUERY_PROVIDER : "QUERY_PROVIDER",
						SERVICE_TYPE_OLAP_PROVIDER : null,
						s_module : null,
						getInstance : function() {
							return sap.firefly.OlapImplModule
									.initVersion(sap.firefly.XVersion.API_DEFAULT);
						},
						initVersion : function(version) {
							var registrationService;
							if (sap.firefly.OlapImplModule.s_module === null) {
								if (sap.firefly.CommonsModule
										.initVersion(version) === null) {
									throw sap.firefly.XException
											.createInitializationException();
								}
								if (sap.firefly.OlapApiModule
										.initVersion(version) === null) {
									throw sap.firefly.XException
											.createInitializationException();
								}
								if (sap.firefly.OlapExtModule
										.initVersion(version) === null) {
									throw sap.firefly.XException
											.createInitializationException();
								}
								sap.firefly.OlapImplModule.s_module = new sap.firefly.OlapImplModule();
								registrationService = sap.firefly.RegistrationService
										.getInstance();
								sap.firefly.QInAConverter.staticSetup();
								sap.firefly.QInA.staticSetup();
								sap.firefly.ProviderInitProcedure.staticSetup();
								sap.firefly.QDeltaOperationPhase.staticSetup();
								sap.firefly.QDeltaBroadcastPhase.staticSetup();
								sap.firefly.QDeltaChangeState.staticSetup();
								sap.firefly.QDataSource.staticSetup();
								sap.firefly.QAllCmds.staticSetup();
								sap.firefly.RsPagingType.staticSetup();
								sap.firefly.QFactoryConstantsMap.staticSetup();
								sap.firefly.QFactory2
										.setInstance(sap.firefly.QFactoryImpl
												.create());
								sap.firefly.OlapImplModule.SERVICE_TYPE_OLAP_PROVIDER = sap.firefly.ServiceType
										.createType(sap.firefly.OlapImplModule.XS_QUERY_PROVIDER);
								sap.firefly.QueryProviderServiceConfig
										.staticSetup();
								registrationService
										.addServiceConfig(
												sap.firefly.OlapImplModule.XS_QUERY_PROVIDER,
												sap.firefly.QueryProviderServiceConfig.CLAZZ);
								sap.firefly.OlapCatalogService.staticSetup();
								registrationService
										.addService(
												sap.firefly.OlapApiModule.XS_OLAP_CATALOG,
												sap.firefly.OlapCatalogService.CLAZZ);
								sap.firefly.PlanningServiceConfig.staticSetup();
								registrationService
										.addServiceConfig(
												sap.firefly.OlapApiModule.XS_PLANNING,
												sap.firefly.PlanningServiceConfig.CLAZZ);
								sap.firefly.PlanningService.staticSetup();
								registrationService.addService(
										sap.firefly.OlapApiModule.XS_PLANNING,
										sap.firefly.PlanningService.CLAZZ);
								sap.firefly.PlanningCatalogServiceConfig
										.staticSetup();
								registrationService
										.addServiceConfig(
												sap.firefly.OlapApiModule.XS_PLANNING_CATALOG,
												sap.firefly.PlanningCatalogServiceConfig.CLAZZ);
								sap.firefly.PlanningCatalogService
										.staticSetup();
								registrationService
										.addService(
												sap.firefly.OlapApiModule.XS_PLANNING_CATALOG,
												sap.firefly.PlanningCatalogService.CLAZZ);
								sap.firefly.HierarchyCatalogServiceConfig
										.staticSetup();
								registrationService
										.addServiceConfig(
												sap.firefly.OlapApiModule.XS_HIERARCHY_CATALOG,
												sap.firefly.HierarchyCatalogServiceConfig.CLAZZ);
								sap.firefly.HierarchyCatalogService
										.staticSetup();
								registrationService
										.addService(
												sap.firefly.OlapApiModule.XS_HIERARCHY_CATALOG,
												sap.firefly.HierarchyCatalogService.CLAZZ);
								sap.firefly.PlanningModelCatalogServiceConfig
										.staticSetup();
								registrationService
										.addServiceConfig(
												sap.firefly.OlapApiModule.XS_PLANNING_MODEL_CATALOG,
												sap.firefly.PlanningModelCatalogServiceConfig.CLAZZ);
								sap.firefly.PlanningModelCatalogService
										.staticSetup();
								registrationService
										.addService(
												sap.firefly.OlapApiModule.XS_PLANNING_MODEL_CATALOG,
												sap.firefly.PlanningModelCatalogService.CLAZZ);
								sap.firefly.XCmdCreateQueryManager
										.staticSetup();
								sap.firefly.XCmdCreateQueryManagerResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.CmdCreateQueryManager.CMD_NAME,
												sap.firefly.XCmdCreateQueryManager.CLAZZ);
								sap.firefly.XCmdDeserializeBlending
										.staticSetup();
								sap.firefly.XCmdDeserializeBlendingResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.CmdDeserializeBlending.CMD_NAME,
												sap.firefly.XCmdDeserializeBlending.CLAZZ);
								sap.firefly.XCmdDeserializeCalculatedDimension
										.staticSetup();
								sap.firefly.XCmdDeserializeCalculatedDimensionResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.CmdDeserializeCalculatedDimension.CMD_NAME,
												sap.firefly.XCmdDeserializeCalculatedDimension.CLAZZ);
								sap.firefly.XCmdDeserializeExtendedDimension
										.staticSetup();
								sap.firefly.XCmdDeserializeExtendedDimensionResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.CmdDeserializeExtendedDimension.CMD_NAME,
												sap.firefly.XCmdDeserializeExtendedDimension.CLAZZ);
								sap.firefly.XCmdInitPlanningStep.staticSetup();
								sap.firefly.XCmdInitPlanningStepResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.XCmdInitPlanningStep.CMD_NAME,
												sap.firefly.XCmdInitPlanningStep.CLAZZ);
								sap.firefly.XCmdCreatePlanningOperation
										.staticSetup();
								sap.firefly.XCmdCreatePlanningOperationResult
										.staticSetup();
								registrationService
										.addCommand(
												sap.firefly.XCmdCreatePlanningOperation.CMD_NAME,
												sap.firefly.XCmdCreatePlanningOperation.CLAZZ);
								sap.firefly.OlapCatalogSpace.staticSetup();
								sap.firefly.OlapEnvironmentFactoryImpl
										.staticSetupImpl();
								sap.firefly.QCmdContextFactory.staticSetup();
								sap.firefly.QCmdContextOlapFactory
										.staticSetupOlapFactory();
								sap.firefly.PlanningBatchRequestDecoratorProvider
										.staticSetup();
								registrationService
										.addReference(
												sap.firefly.BatchRequestDecoratorFactory.BATCH_REQUEST_DECORATOR_PROVIDER,
												sap.firefly.PlanningBatchRequestDecoratorProvider.CLAZZ);
								sap.firefly.PlanningRsRequestDecoratorProvider
										.staticSetup();
								registrationService
										.addReference(
												sap.firefly.RsRequestDecoratorFactory.RESULTSET_REQUEST_DECORATOR_PROVIDER,
												sap.firefly.PlanningRsRequestDecoratorProvider.CLAZZ);
							}
							return sap.firefly.OlapImplModule.s_module;
						}
					}
				});
sap.firefly.OlapImplModule.getInstance();